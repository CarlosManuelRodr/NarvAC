(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     84951,       2065]
NotebookOptionsPosition[     82864,       2016]
NotebookOutlinePosition[     83207,       2031]
CellTagsIndexPosition[     83164,       2028]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["NarvAC Interpreter", "Title",
 CellChangeTimes->{{3.763167673405179*^9, 
  3.763167680951133*^9}},ExpressionUUID->"a8c0869c-6cd1-4f5d-a572-\
55dca400baa3"],

Cell[CellGroupData[{

Cell["Opcodes", "Subchapter",
 CellChangeTimes->{{3.7633279340409985`*^9, 
  3.763327935257552*^9}},ExpressionUUID->"20e560d1-f6d5-4dad-905c-\
1941871e49bd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"OpcodeLoadA", "[", "]"}], "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OpcodeLoadB", "[", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OpcodeStoreA", "[", "]"}], "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OpcodeStoreB", "[", "]"}], "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OpcodeAdd", "[", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OpcodeSubstract", "[", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OpcodeIncrement", "[", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OpcodeJump", "[", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OpcodeJumpNeg", "[", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "1"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OpcodeJumpZero", "[", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"OpcodePrint", "[", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"OpcodeHalt", "[", "]"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cpuMnemonics", " ", "=", " ", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"OpcodeLoadA", "[", "]"}], "\[Rule]", "\"\<LoadA\>\""}], ",", 
     RowBox[{
      RowBox[{"OpcodeLoadB", "[", "]"}], "\[Rule]", "\"\<LoadB\>\""}], ",", 
     RowBox[{
      RowBox[{"OpcodeStoreA", "[", "]"}], "\[Rule]", "\"\<StoreA\>\""}], ",", 
     RowBox[{
      RowBox[{"OpcodeStoreB", "[", "]"}], "\[Rule]", "\"\<StoreB\>\""}], ",", 
     RowBox[{
      RowBox[{"OpcodeAdd", "[", "]"}], "\[Rule]", "\"\<Add\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"OpcodeSubstract", "[", "]"}], "\[Rule]", "\"\<Substract\>\""}],
      ",", 
     RowBox[{
      RowBox[{"OpcodeIncrement", "[", "]"}], "\[Rule]", "\"\<Increment\>\""}],
      ",", 
     RowBox[{
      RowBox[{"OpcodeJump", "[", "]"}], "\[Rule]", "\"\<Jump\>\""}], ",", 
     RowBox[{
      RowBox[{"OpcodeJumpNeg", "[", "]"}], "\[Rule]", "\"\<JumpNeg\>\""}], 
     ",", 
     RowBox[{
      RowBox[{"OpcodeJumpZero", "[", "]"}], "\[Rule]", "\"\<JumpZero\>\""}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"OpcodePrint", "[", "]"}], "\[Rule]", "\"\<Print\>\""}], ",", 
     RowBox[{
      RowBox[{"OpcodeHalt", "[", "]"}], "\[Rule]", "\"\<Halt\>\""}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.729780600724882*^9, 3.729780608429974*^9}, {
  3.729787835216465*^9, 3.729787881335435*^9}, {3.730031538036316*^9, 
  3.730031554522724*^9}, {3.73003242805966*^9, 3.730032462449395*^9}, {
  3.730032568925997*^9, 3.730032624166306*^9}, {3.730033789550128*^9, 
  3.7300337928106537`*^9}, {3.739457744378975*^9, 3.7394577691115932`*^9}, {
  3.739457813528461*^9, 3.7394578266155024`*^9}, {3.73945891498591*^9, 
  3.739458920758739*^9}, {3.739459073788129*^9, 3.739459078197485*^9}, {
  3.739459263912469*^9, 3.739459372174268*^9}, {3.739460041739276*^9, 
  3.73946004893428*^9}, {3.739470532309569*^9, 3.739470582890979*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"657859b2-85a2-4028-b118-ad23bfbdf18a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"halted", " ", "=", " ", "False"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ARegister", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BRegister", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"addressRegister", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"instructionRegister", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "0"}], "}"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ALUOverflowFlag", " ", "=", " ", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ALUNegativeFlag", " ", "=", " ", "0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ALUZeroFlag", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ALUParityFlag", " ", "=", " ", "0"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RAM", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0"}], "}"}], ",", "16"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.763167707635592*^9, 3.763167716696512*^9}, {
  3.763167792994544*^9, 3.7631678372063*^9}, {3.7631679579713306`*^9, 
  3.763168049269586*^9}, {3.7631681417582817`*^9, 3.763168209842328*^9}, {
  3.7631684947305403`*^9, 3.7631685460414743`*^9}, {3.763491704987933*^9, 
  3.763491707915883*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"4e0e0cbd-e4e7-488d-9aee-1fe03c789fba"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Carga de programa a la memoria", "Subchapter",
 CellChangeTimes->{{3.73003914187995*^9, 
  3.7300391667357616`*^9}},ExpressionUUID->"9484df9d-54b3-4fa4-a084-\
56818bdbb446"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"LoadProgram", "[", "program_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"RAM", " ", "=", " ", "program"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ClearProgram", "[", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"RAM", " ", "=", " ", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
         "0"}], "}"}], ",", "16"}], "]"}]}], ")"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.729780772828034*^9, 3.729780803658269*^9}, {
  3.729783790013154*^9, 3.729783820771214*^9}, {3.7297838586359262`*^9, 
  3.729783859673622*^9}, {3.763328125402209*^9, 3.7633281595701957`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"d5251ca4-3511-4369-bae0-78b115e2db50"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CPU", "Subchapter",
 CellChangeTimes->{{3.7633280012008076`*^9, 3.7633280029933243`*^9}, {
  3.763328171952817*^9, 
  3.763328172456809*^9}},ExpressionUUID->"5e86a4c3-3fba-4318-862b-\
56359e98ad7e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"DecimalToBinary", "[", 
    RowBox[{"n_", ",", 
     RowBox[{"size_", " ", ":", "8"}]}], "]"}], ":=", 
   RowBox[{"PadLeft", "[", 
    RowBox[{
     RowBox[{"IntegerDigits", "[", 
      RowBox[{"n", ",", "2"}], "]"}], ",", "size"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BinaryToDecimal", "[", "l_", "]"}], ":=", 
   RowBox[{"FromDigits", "[", 
    RowBox[{"l", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BinaryIncrement", "[", "l_", "]"}], ":=", 
   RowBox[{"DecimalToBinary", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"BinaryToDecimal", "[", "l", "]"}], "+", "1"}], ",", 
     RowBox[{"Length", "[", "l", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"BinaryDecrement", "[", "l_", "]"}], ":=", 
    RowBox[{"DecimalToBinary", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"BinaryToDecimal", "[", "l", "]"}], "-", "1"}], ",", 
      RowBox[{"Length", "[", "l", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LoadA", "[", "address_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"ARegister", " ", "=", " ", 
     RowBox[{"RAM", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"BinaryToDecimal", "[", "address", "]"}], "+", "1"}], "]"}], 
      "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LoadB", "[", "address_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"BRegister", " ", "=", " ", 
     RowBox[{"RAM", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"BinaryToDecimal", "[", "address", "]"}], "+", "1"}], "]"}], 
      "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StoreA", "[", "address_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"RAM", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"BinaryToDecimal", "[", "address", "]"}], "+", "1"}], "]"}], 
      "]"}], " ", "=", " ", "ARegister"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"StoreB", "[", "address_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"RAM", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"BinaryToDecimal", "[", "address", "]"}], "+", "1"}], "]"}], 
      "]"}], " ", "=", " ", "BRegister"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Add", "[", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "numericResult", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"numericResult", " ", "=", " ", 
       RowBox[{
        RowBox[{"BinaryToDecimal", "[", "ARegister", "]"}], "+", 
        RowBox[{"BinaryToDecimal", "[", "BRegister", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ALUNegativeFlag", " ", "=", " ", "0"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"numericResult", " ", ">", " ", "255"}], ",", 
        RowBox[{"ALUOverflowFlag", " ", "=", " ", "1"}], ",", 
        RowBox[{"ALUOverflowFlag", " ", "=", " ", "0"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"EvenQ", "[", "numericResult", "]"}], ",", 
        RowBox[{"ALUParityFlag", " ", "=", " ", "1"}], ",", " ", 
        RowBox[{"ALUParityFlag", " ", "=", " ", "0"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ARegister", " ", "=", " ", 
       RowBox[{"DecimalToBinary", "[", "numericResult", "]"}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Substract", "[", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "numericResult", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"numericResult", " ", "=", " ", 
       RowBox[{
        RowBox[{"BinaryToDecimal", "[", "ARegister", "]"}], "-", 
        RowBox[{"BinaryToDecimal", "[", "BRegister", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ALUOverflowFlag", " ", "=", " ", "0"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"numericResult", " ", "<", " ", "0"}], ",", 
        RowBox[{"ALUNegativeFlag", " ", "=", " ", "1"}], ",", 
        RowBox[{"ALUNegativeFlag", " ", "=", " ", "0"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"numericResult", " ", "==", " ", "0"}], ",", 
        RowBox[{"ALUZeroFlag", " ", "=", " ", "1"}], ",", 
        RowBox[{"ALUZeroFlag", " ", "=", " ", "0"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"EvenQ", "[", "numericResult", "]"}], ",", 
        RowBox[{"ALUParityFlag", " ", "=", " ", "1"}], ",", " ", 
        RowBox[{"ALUParityFlag", " ", "=", " ", "0"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ARegister", " ", "=", " ", 
       RowBox[{"DecimalToBinary", "[", "numericResult", "]"}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"UIncrement", "[", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "numericResult", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"numericResult", " ", "=", " ", 
       RowBox[{
        RowBox[{"BinaryToDecimal", "[", "ARegister", "]"}], "+", "1"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"ALUNegativeFlag", " ", "=", " ", "0"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"numericResult", " ", ">", " ", "255"}], ",", 
        RowBox[{"ALUOverflowFlag", " ", "=", " ", "1"}], ",", 
        RowBox[{"ALUOverflowFlag", " ", "=", " ", "0"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"EvenQ", "[", "numericResult", "]"}], ",", 
        RowBox[{"ALUParityFlag", " ", "=", " ", "1"}], ",", " ", 
        RowBox[{"ALUParityFlag", " ", "=", " ", "0"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ARegister", " ", "=", " ", 
       RowBox[{"DecimalToBinary", "[", "numericResult", "]"}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Jump", "[", "address_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"addressRegister", " ", "=", " ", 
     RowBox[{"BinaryDecrement", "[", "address", "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"JumpNeg", "[", "address_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"ALUNegativeFlag", "\[Equal]", "1"}], ",", 
     RowBox[{"addressRegister", " ", "=", " ", 
      RowBox[{"BinaryDecrement", "[", "address", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"JumpZero", "[", "address_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"ALUZeroFlag", "\[Equal]", "1"}], ",", 
     RowBox[{"addressRegister", " ", "=", " ", 
      RowBox[{"BinaryDecrement", "[", "address", "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PrintA", "[", "]"}], ":=", 
   RowBox[{"Print", "[", 
    RowBox[{"FromDigits", "[", 
     RowBox[{"ARegister", ",", "2"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Halt", "[", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"halted", " ", "=", " ", "True"}], ")"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ResetCPU", "[", "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"halted", " ", "=", " ", "False"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ARegister", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"BRegister", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"addressRegister", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"instructionRegister", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"ALUOverflowFlag", " ", "=", " ", "0"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ALUNegativeFlag", " ", "=", " ", "0"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ALUZeroFlag", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ALUParityFlag", " ", "=", " ", "0"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"RAM", " ", "=", " ", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",",
           "0"}], "}"}], ",", "16"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
    ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CPU", "[", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"instruction", ",", "param"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "halted"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"instructionRegister", " ", "=", " ", 
          RowBox[{"Part", "[", 
           RowBox[{"RAM", ",", 
            RowBox[{
             RowBox[{"FromDigits", "[", 
              RowBox[{"addressRegister", ",", "2"}], "]"}], "+", "1"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"instruction", ",", "param"}], "}"}], " ", "=", " ", 
          RowBox[{"TakeDrop", "[", 
           RowBox[{"instructionRegister", ",", "4"}], "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeLoadA", "[", "]"}]}], ",", " ", 
           RowBox[{"LoadA", "[", "param", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeLoadB", "[", "]"}]}], ",", " ", 
           RowBox[{"LoadB", "[", "param", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeStoreA", "[", "]"}]}], ",", " ", 
           RowBox[{"StoreA", "[", "param", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeStoreB", "[", "]"}]}], ",", " ", 
           RowBox[{"StoreB", "[", "param", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeAdd", "[", "]"}]}], ",", " ", 
           RowBox[{"Add", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeSubstract", "[", "]"}]}], ",", " ", 
           RowBox[{"Substract", "[", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeIncrement", "[", "]"}]}], ",", " ", 
           RowBox[{"UIncrement", "[", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeJump", "[", "]"}]}], ",", " ", 
           RowBox[{"Jump", "[", "param", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeJumpNeg", "[", "]"}]}], ",", " ", 
           RowBox[{"JumpNeg", "[", "param", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeJumpZero", "[", "]"}]}], ",", " ", 
           RowBox[{"JumpZero", "[", "param", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodePrint", "[", "]"}]}], ",", " ", 
           RowBox[{"PrintA", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"instruction", " ", "\[Equal]", " ", 
            RowBox[{"OpcodeHalt", "[", "]"}]}], ",", " ", 
           RowBox[{"Halt", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"addressRegister", " ", "=", " ", 
          RowBox[{"BinaryIncrement", "[", "addressRegister", "]"}]}], ";"}]}],
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ViewExecution", "[", 
    RowBox[{"program_", ",", 
     RowBox[{"maxIterations_", " ", ":", "100"}]}], "]"}], ":=", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"frames", ",", " ", 
       RowBox[{"i", " ", "=", " ", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ResetCPU", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"LoadProgram", "[", "program", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"frames", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{"CPUPlot", "[", "]"}], "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"!", "halted"}], " ", "&&", " ", 
         RowBox[{"i", "<", "maxIterations"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"CPU", "[", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"frames", ",", 
           RowBox[{"CPUPlot", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"i", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Manipulate", "[", 
       RowBox[{
        RowBox[{"frames", "[", 
         RowBox[{"[", "iteration", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"iteration", ",", "1", ",", 
          RowBox[{"Length", "[", "frames", "]"}], ",", "1"}], "}"}]}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGCQAGIQrceUJPub842j2459DiCaZ0qKK4gW6LrmAaITyqbG
geiyf1MbQXSEQVY7iG6odJgOoqdNVlkMor1ibq0F0cuFbm0C0c0/HXaAaO7Q
Y3tAdNf8PQdB9BvPJcdANBNz33EQfffHg9Mg+v7TvWdB9N6Kb7dBdFXIx7tg
9bMExLy43ji6NG2TBNH+HTfkQLTNKw95EO13xc8IRM8Qyg8A0Zf1s0NB9JG9
PNEgulLwRhyIDnuzJQVEX/DjLwLRDGdmFYPoMkWNehDNtMAITD87Z9UMopOi
GtpANJvKRwNvIJ1RNNkQRD9dymwGost+TbYE0bOSnvYcB9K62ja9ILqpqnQB
iC6/dGM1iM6fL/kLRFdJN/8B0df/+fCcANLnqu01QDQA2yS5vg==
  "],
 CellLabel->
  "In[299]:=",ExpressionUUID->"9f2fa46c-916b-449a-ac8a-5917115f5d70"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plotting", "Subchapter",
 CellChangeTimes->{{3.763168273281567*^9, 
  3.763168275588834*^9}},ExpressionUUID->"cfddc2f7-1321-4bfc-9f7b-\
0a095041589f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"HalfSplit", "[", "l_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "len", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"len", " ", "=", " ", 
       FractionBox[
        RowBox[{"Length", "[", "l", "]"}], "2"]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"l", ",", "len"}], "]"}], ",", 
        RowBox[{"Drop", "[", 
         RowBox[{"l", ",", "len"}], "]"}]}], "}"}]}]}], "\[IndentingNewLine]",
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"BinaryToHex", "[", "n_", "]"}], ":=", 
    RowBox[{"BaseForm", "[", 
     RowBox[{
      RowBox[{"FromDigits", "[", 
       RowBox[{"n", ",", "2"}], "]"}], ",", "16"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RAMPlot", "[", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"currentAddress", ",", "ramInDecimal"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"currentAddress", " ", "=", " ", 
        RowBox[{"FromDigits", "[", 
         RowBox[{"addressRegister", ",", "2"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ramInDecimal", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{"BinaryToDecimal", ",", "RAM"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Panel", "[", 
        RowBox[{
         RowBox[{"Grid", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Address\>\"", ",", "\"\<Binary value\>\"", ",", 
                "\"\<Decimal value\>\""}], "}"}], "}"}], ",", 
             RowBox[{"Thread", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Range", "[", 
                 RowBox[{"0", ",", "15"}], "]"}], ",", "RAM", ",", 
                "ramInDecimal"}], "}"}], "]"}]}], "]"}], ",", 
           RowBox[{"Background", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"None", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"1", "\[Rule]", "LightGreen"}], ",", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"currentAddress", "+", "1"}], ")"}], "\[Rule]", 
                 "Yellow"}]}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Frame", "\[Rule]", "All"}]}], "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<RAM\>\"", ",", "Bold"}], "]"}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ALUStatusPlot", "[", "]"}], ":=", 
    RowBox[{"Panel", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Grid", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Overflow: \>\"", ",", "ALUOverflowFlag"}], "}"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<Negative: \>\"", ",", "ALUNegativeFlag"}], "}"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<Zero: \>\"", ",", "ALUZeroFlag"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<Parity: \>\"", ",", "ALUParityFlag"}], "}"}]}], 
         "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Frame", "\[Rule]", "All"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "LightRed", "}"}], ",", "None"}], "}"}]}]}], 
       "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Style", "[", 
       RowBox[{"\"\<ALU Status\>\"", ",", "Bold"}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CUStatusPlot", "[", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "mainRegisters", ",", "instructionRegisters", ",", "flagsStatus"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"mainRegisters", " ", "=", " ", 
        RowBox[{"Grid", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<\>\"", ",", "\"\<Register A\>\"", ",", 
              "\"\<Register B\>\""}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"\"\<Binary\>\"", ",", 
              RowBox[{"Row", "[", "ARegister", "]"}], ",", 
              RowBox[{"Row", "[", "BRegister", "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"\"\<Decimal\>\"", ",", 
              RowBox[{"BinaryToDecimal", "[", "ARegister", "]"}], ",", 
              RowBox[{"BinaryToDecimal", "[", "BRegister", "]"}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Frame", "\[Rule]", "All"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Background", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"None", ",", 
             RowBox[{"{", "LightGreen", "}"}]}], "}"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"instructionRegisters", " ", "=", " ", 
        RowBox[{"Grid", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<Instruction Register\>\"", ",", 
              "\"\<Address Register\>\""}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Grid", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<Opcode\>\"", ",", "\"\<Parameter\>\""}], 
                   "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Map", "[", 
                   RowBox[{"Row", ",", 
                    RowBox[{"HalfSplit", "[", "instructionRegister", "]"}]}], 
                   "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{"HalfSplit", "[", "instructionRegister", "]"}], 
                    "]"}], "/.", "cpuMnemonics"}], ",", 
                    RowBox[{"BinaryToDecimal", "[", 
                    RowBox[{"Last", "[", 
                    RowBox[{"HalfSplit", "[", "instructionRegister", "]"}], 
                    "]"}], "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"Frame", "\[Rule]", "All"}], ",", 
                RowBox[{"Background", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"None", ",", 
                   RowBox[{"{", "LightCyan", "}"}]}], "}"}]}]}], 
               "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Grid", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<Binary\>\"", ",", 
                    RowBox[{"Row", "[", "addressRegister", "]"}]}], "}"}], 
                  ",", "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<Decimal\>\"", ",", 
                    RowBox[{
                    "BinaryToDecimal", "[", "addressRegister", "]"}]}], 
                   "}"}]}], "\[IndentingNewLine]", "}"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Frame", "\[Rule]", "All"}], ",", 
                RowBox[{"Background", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", "LightCyan", "}"}], ",", "None"}], "}"}]}]}], 
               "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}]}],
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Frame", "\[Rule]", "All"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Background", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"None", ",", 
             RowBox[{"{", "LightBlue", "}"}]}], "}"}]}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Panel", "[", 
        RowBox[{
         RowBox[{"Column", "[", 
          RowBox[{"{", 
           RowBox[{"mainRegisters", ",", "instructionRegisters"}], "}"}], 
          "]"}], ",", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<CU Status\>\"", ",", "Bold"}], "]"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "250"}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CPUPlot", "[", "]"}], ":=", 
    RowBox[{"Panel", "[", 
     RowBox[{
      RowBox[{"Grid", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ALUStatusPlot", "[", "]"}], ",", 
           RowBox[{"CUStatusPlot", "[", "]"}], ",", 
           RowBox[{"RAMPlot", "[", "]"}]}], "}"}], "}"}], ",", 
        RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}], ",", 
      RowBox[{"Style", "[", 
       RowBox[{"\"\<CPU\>\"", ",", "Bold"}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ViewExecution", "[", 
    RowBox[{"program_", ",", 
     RowBox[{"maxIterations_", " ", ":", "100"}]}], "]"}], ":=", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"frames", ",", " ", 
       RowBox[{"i", " ", "=", " ", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ResetCPU", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"LoadProgram", "[", "program", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"frames", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{"CPUPlot", "[", "]"}], "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"!", "halted"}], " ", "&&", " ", 
         RowBox[{"i", "<", "maxIterations"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"CPU", "[", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"frames", ",", 
           RowBox[{"CPUPlot", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"i", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Manipulate", "[", 
       RowBox[{
        RowBox[{"frames", "[", 
         RowBox[{"[", "iteration", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"iteration", ",", "1", ",", 
          RowBox[{"Length", "[", "frames", "]"}], ",", "1"}], "}"}]}], 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.76316837360786*^9, 3.763168393051777*^9}, {
   3.763168462172127*^9, 3.7631684748603067`*^9}, {3.763168552759014*^9, 
   3.763168565074505*^9}, {3.763168597148697*^9, 3.763168608321679*^9}, {
   3.763168645108296*^9, 3.7631686925124817`*^9}, {3.763168723855712*^9, 
   3.7631687393747787`*^9}, {3.763168773369133*^9, 3.763168774187455*^9}, {
   3.763168807948228*^9, 3.763168809158249*^9}, {3.7633275633731785`*^9, 
   3.76332756639715*^9}, {3.763327642772933*^9, 3.763327649468577*^9}, {
   3.7633277001559687`*^9, 3.7633277005079136`*^9}, {3.763327738932082*^9, 
   3.7633277399261928`*^9}, 3.7634920969851923`*^9, 3.763492519113584*^9, {
   3.763492994696727*^9, 3.763493002507553*^9}, {3.763493034770938*^9, 
   3.763493035259181*^9}, {3.763493102066658*^9, 3.763493169017852*^9}, {
   3.763493230232972*^9, 3.7634932453648176`*^9}, {3.763493308109472*^9, 
   3.763493311693733*^9}, {3.763493539244158*^9, 3.763493592225855*^9}, 
   3.7634936355084896`*^9, {3.763749210163633*^9, 3.7637492104535785`*^9}},
 CellLabel->
  "In[319]:=",ExpressionUUID->"f96115bf-24f4-4098-8ad5-aa74873b70a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compilar desde ensamblador", "Subchapter",
 CellChangeTimes->{{3.730039152456098*^9, 
  3.730039171872147*^9}},ExpressionUUID->"07557408-e615-4536-93bc-\
8c8c106b6ee2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"assemblyOpcodes", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"Reverse", ",", "cpuMnemonics"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HexToBinary", "[", 
    RowBox[{"n_", ",", 
     RowBox[{"pad_:", "4"}]}], "]"}], ":=", 
   RowBox[{"PadLeft", "[", 
    RowBox[{
     RowBox[{"IntegerDigits", "[", 
      RowBox[{
       RowBox[{"FromDigits", "[", 
        RowBox[{"n", ",", "16"}], "]"}], ",", "2"}], "]"}], ",", "pad"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"DecToBinary", "[", 
    RowBox[{"n_", ",", 
     RowBox[{"pad_:", "4"}]}], "]"}], ":=", 
   RowBox[{"PadLeft", "[", 
    RowBox[{
     RowBox[{"IntegerDigits", "[", 
      RowBox[{
       RowBox[{"FromDigits", "[", 
        RowBox[{"n", ",", "10"}], "]"}], ",", "2"}], "]"}], ",", "pad"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"BinaryToHex", "[", "n_", "]"}], ":=", 
   RowBox[{"BaseForm", "[", 
    RowBox[{
     RowBox[{"FromDigits", "[", 
      RowBox[{"n", ",", "2"}], "]"}], ",", "16"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromInstructionToBitcode", "[", "instruction_", "]"}], ":=", " ", 
   RowBox[{"Switch", "[", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Rest", "[", "instruction", "]"}], "]"}], ",", 
     "\[IndentingNewLine]", "0", ",", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"First", "[", "instruction", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "1", ",", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"First", "[", "instruction", "]"}], ",", 
       RowBox[{"DecToBinary", "[", 
        RowBox[{"Last", "[", "instruction", "]"}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "2", ",", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"First", "[", "instruction", "]"}], ",", 
       RowBox[{"DecToBinary", "[", 
        RowBox[{
         RowBox[{"Part", "[", 
          RowBox[{"instruction", ",", "2"}], "]"}], ",", "2"}], "]"}], ",", 
       RowBox[{"DecToBinary", "[", 
        RowBox[{
         RowBox[{"Part", "[", 
          RowBox[{"instruction", ",", "3"}], "]"}], ",", "2"}], "]"}]}], 
      "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromInstructionTableToBitcode", "[", "code_", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{"FromInstructionToBitcode", ",", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{"StringSplit", ",", 
         RowBox[{"StringSplit", "[", 
          RowBox[{"code", ",", "\"\<\\n\>\""}], "]"}]}], "]"}], ",", " ", 
       "assemblyOpcodes"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AssemblyCompile", "[", "code_", "]"}], ":=", 
   RowBox[{"PadRight", "[", 
    RowBox[{
     RowBox[{"FromInstructionTableToBitcode", "[", "code", "]"}], ",", "16", 
     ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
       "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
        "0"}], "}"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SetValues", "[", 
    RowBox[{"setValues_", ",", "memory_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tmpMemory", " ", "=", " ", "memory"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Part", "[", 
            RowBox[{"tmpMemory", ",", 
             RowBox[{"First", "[", "#", "]"}]}], "]"}], "=", 
           RowBox[{"Last", "[", "#", "]"}]}], ")"}], "&"}], ",", 
        "setValues"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "tmpMemory", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.729781144436797*^9, 3.729781178021504*^9}, {
   3.72978121250463*^9, 3.7297812238099957`*^9}, {3.7297812771390944`*^9, 
   3.729781281561756*^9}, 3.729781575348008*^9, {3.729788059446959*^9, 
   3.729788077590439*^9}, {3.729788166984494*^9, 3.729788168157321*^9}, {
   3.730033409866946*^9, 3.730033411310465*^9}, {3.730033458988665*^9, 
   3.730033514855329*^9}, {3.730035007289137*^9, 3.730035007765923*^9}, {
   3.730035296266037*^9, 3.7300353028661737`*^9}, 3.730035465432899*^9, {
   3.730035571018552*^9, 3.730035571138063*^9}, {3.730035625732079*^9, 
   3.730035656586376*^9}, 3.730035729938738*^9, {3.730035801313764*^9, 
   3.730035829876705*^9}, {3.730158313014984*^9, 3.730158313824739*^9}, {
   3.730162939582129*^9, 3.730162942147251*^9}, {3.76374838038927*^9, 
   3.7637484333664837`*^9}, {3.7637485522288065`*^9, 3.763748582957388*^9}},
 CellLabel->
  "In[171]:=",ExpressionUUID->"505d33f4-e5a8-4015-b5da-265cd9f72fbd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Test", "Chapter",
 CellChangeTimes->{{3.763327949705067*^9, 
  3.7633279504256186`*^9}},ExpressionUUID->"4418f0cb-16f7-4574-90f7-\
ba19f37bf4de"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
   "code", " ", "=", " ", 
    "\"\<\nLoadA 14\nLoadB 15\nSubstract\nJumpNeg 5\nJump 2\nAdd\nStoreA 13\n\
Halt\n\>\""}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"program", " ", "=", " ", 
   RowBox[{"AssemblyCompile", "[", "code", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"setValues", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"15", "->", 
      RowBox[{"DecimalToBinary", "[", "15", "]"}]}], ",", 
     RowBox[{"16", "->", 
      RowBox[{"DecimalToBinary", "[", "5", "]"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"program", " ", "=", " ", 
    RowBox[{"SetValues", "[", 
     RowBox[{"setValues", ",", "program"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ViewExecution", "[", "program", "]"}]}], "Input",
 CellChangeTimes->{
  3.763327745515428*^9, 3.763327957482938*^9, {3.763492241230801*^9, 
   3.763492245424776*^9}, {3.763748280142027*^9, 3.7637482960379305`*^9}, {
   3.763748344318616*^9, 3.763748353285734*^9}, {3.763748622268464*^9, 
   3.7637486285971365`*^9}, {3.763748660060443*^9, 3.76374866311669*^9}, {
   3.76374922609167*^9, 3.763749228707627*^9}},
 CellLabel->
  "In[326]:=",ExpressionUUID->"3d2edefb-2bde-440a-b685-87dc46bb701b"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`frames$$ = {
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 0}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 0, 0, 0, 0}], 
             Row[{0, 0, 0, 0, 0, 0, 0, 0}]}, {"Decimal", 0, 0}}, Frame -> All,
            Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{0, 0, 0, 0}], 
                Row[{0, 0, 0, 0}]}, {"Halt", 0}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 0, 0, 0}]}, {"Decimal", 0}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 1 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 0}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 1, 1, 1, 1}], 
             Row[{0, 0, 0, 0, 0, 0, 0, 0}]}, {"Decimal", 15, 0}}, Frame -> 
           All, Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{0, 0, 1, 0}], 
                Row[{1, 1, 1, 0}]}, {"LoadA", 14}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 0, 0, 1}]}, {"Decimal", 1}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 2 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 0}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 1, 1, 1, 1}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 15, 5}}, Frame -> 
           All, Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{0, 0, 0, 1}], 
                Row[{1, 1, 1, 1}]}, {"LoadB", 15}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 0, 1, 0}]}, {"Decimal", 2}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 3 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 1}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 1, 0, 1, 0}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 10, 5}}, Frame -> 
           All, Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 0, 0, 1}], 
                Row[{0, 0, 0, 0}]}, {"Substract", 0}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 0, 1, 1}]}, {"Decimal", 3}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 4 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 1}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 1, 0, 1, 0}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 10, 5}}, Frame -> 
           All, Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 1, 0, 1}], 
                Row[{0, 1, 0, 1}]}, {"JumpNeg", 5}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 1, 0, 0}]}, {"Decimal", 4}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 5 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 1}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 1, 0, 1, 0}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 10, 5}}, Frame -> 
           All, Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 1, 0, 0}], 
                Row[{0, 0, 1, 0}]}, {"Jump", 2}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 0, 1, 0}]}, {"Decimal", 2}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 3 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 0}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 5, 5}}, Frame -> All,
            Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 0, 0, 1}], 
                Row[{0, 0, 0, 0}]}, {"Substract", 0}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 0, 1, 1}]}, {"Decimal", 3}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 4 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 0}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 5, 5}}, Frame -> All,
            Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 1, 0, 1}], 
                Row[{0, 1, 0, 1}]}, {"JumpNeg", 5}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 1, 0, 0}]}, {"Decimal", 4}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 5 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 0}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 5, 5}}, Frame -> All,
            Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 1, 0, 0}], 
                Row[{0, 0, 1, 0}]}, {"Jump", 2}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 0, 1, 0}]}, {"Decimal", 2}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 3 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 1}, {
          "Parity: ", 1}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 0, 0, 0, 0}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 0, 5}}, Frame -> All,
            Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 0, 0, 1}], 
                Row[{0, 0, 0, 0}]}, {"Substract", 0}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 0, 1, 1}]}, {"Decimal", 3}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 4 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 1}, {
          "Parity: ", 1}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 0, 0, 0, 0}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 0, 5}}, Frame -> All,
            Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 1, 0, 1}], 
                Row[{0, 1, 0, 1}]}, {"JumpNeg", 5}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 1, 0, 0}]}, {"Decimal", 4}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 5 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 1}, {
          "Parity: ", 1}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 0, 0, 0, 0}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 0, 5}}, Frame -> All,
            Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 1, 0, 0}], 
                Row[{0, 0, 1, 0}]}, {"Jump", 2}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 0, 1, 0}]}, {"Decimal", 2}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 3 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 1}, {"Zero: ", 0}, {
          "Parity: ", 0}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 5, 5}}, Frame -> All,
            Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 0, 0, 1}], 
                Row[{0, 0, 0, 0}]}, {"Substract", 0}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 0, 1, 1}]}, {"Decimal", 3}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 4 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 1}, {"Zero: ", 0}, {
          "Parity: ", 0}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 5, 5}}, Frame -> All,
            Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 1, 0, 1}], 
                Row[{0, 1, 0, 1}]}, {"JumpNeg", 5}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 1, 0, 1}]}, {"Decimal", 5}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 6 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 1}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 1, 0, 1, 0}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 10, 5}}, Frame -> 
           All, Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{1, 0, 0, 0}], 
                Row[{0, 0, 0, 0}]}, {"Add", 0}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 1, 1, 0}]}, {"Decimal", 6}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 7 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 1}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 1, 0, 1, 0}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 10, 5}}, Frame -> 
           All, Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{0, 1, 0, 0}], 
                Row[{1, 1, 0, 1}]}, {"StoreA", 13}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{0, 1, 1, 1}]}, {"Decimal", 7}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 1, 0, 1, 0}, 10}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 8 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]], 
   Panel[
    Grid[{{
       Panel[
        Grid[{{"Overflow: ", 0}, {"Negative: ", 0}, {"Zero: ", 0}, {
          "Parity: ", 1}}, Frame -> All, Background -> {{
            RGBColor[1, 0.85, 0.85]}, None}], 
        Style["ALU Status", Bold]], 
       Panel[
        Column[{
          Grid[{{"", "Register A", "Register B"}, {"Binary", 
             Row[{0, 0, 0, 0, 1, 0, 1, 0}], 
             Row[{0, 0, 0, 0, 0, 1, 0, 1}]}, {"Decimal", 10, 5}}, Frame -> 
           All, Background -> {None, {
              RGBColor[0.88, 1, 0.88]}}], 
          Grid[{{"Instruction Register", "Address Register"}, {
             Grid[{{"Opcode", "Parameter"}, {
                Row[{0, 0, 0, 0}], 
                Row[{0, 0, 0, 0}]}, {"Halt", 0}}, Frame -> All, 
              Background -> {None, {
                 RGBColor[0.9, 1, 1]}}], 
             Grid[{{"Binary", 
                Row[{1, 0, 0, 0}]}, {"Decimal", 8}}, Frame -> All, 
              Background -> {{
                 RGBColor[0.9, 1, 1]}, None}]}}, Frame -> All, 
           Background -> {None, {
              RGBColor[0.87, 0.94, 1]}}]}], 
        Style["CU Status", Bold], ImageSize -> 250], 
       Panel[
        Grid[{{"Address", "Binary value", "Decimal value"}, {
          0, {0, 0, 1, 0, 1, 1, 1, 0}, 46}, {
          1, {0, 0, 0, 1, 1, 1, 1, 1}, 31}, {
          2, {1, 0, 0, 1, 0, 0, 0, 0}, 144}, {
          3, {1, 1, 0, 1, 0, 1, 0, 1}, 213}, {
          4, {1, 1, 0, 0, 0, 0, 1, 0}, 194}, {
          5, {1, 0, 0, 0, 0, 0, 0, 0}, 128}, {
          6, {0, 1, 0, 0, 1, 1, 0, 1}, 77}, {
          7, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {8, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          9, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          10, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          11, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          12, {0, 0, 0, 0, 0, 0, 0, 0}, 0}, {
          13, {0, 0, 0, 0, 1, 0, 1, 0}, 10}, {
          14, {0, 0, 0, 0, 1, 1, 1, 1}, 15}, {
          15, {0, 0, 0, 0, 0, 1, 0, 1}, 5}}, 
         Background -> {
          None, {1 -> RGBColor[0.88, 1, 0.88], 9 -> RGBColor[1, 1, 0]}}, 
         Frame -> All], 
        Style["RAM", Bold]]}}, Alignment -> Top], 
    Style["CPU", Bold]]}, $CellContext`i$$ = 16}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`iteration$$ = 17, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"sin t\[IAcute]tulo\"", Typeset`specs$$ = {{
       Hold[$CellContext`iteration$$], 1, 17, 1}}, Typeset`size$$ = {
     657., {182., 206.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = True, $CellContext`iteration$32801$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`iteration$$ = 1}, 
       "ControllerVariables" :> {
         Hold[$CellContext`iteration$$, $CellContext`iteration$32801$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> 
       Part[$CellContext`frames$$, $CellContext`iteration$$], 
       "Specifications" :> {{$CellContext`iteration$$, 1, 17, 1}}, 
       "Options" :> {}, "DefaultOptions" :> {}],
      ImageSizeCache->{708., {251., 257.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.763749229054818*^9, 3.763749289912087*^9},
 CellLabel->
  "Out[330]=",ExpressionUUID->"3d05219a-3825-4d3a-8229-0f0512b11503"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 1021},
WindowMargins->{{0, Automatic}, {0, Automatic}},
FrontEndVersion->"11.3 para Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 161, 3, 96, "Title",ExpressionUUID->"a8c0869c-6cd1-4f5d-a572-55dca400baa3"],
Cell[CellGroupData[{
Cell[766, 29, 157, 3, 64, "Subchapter",ExpressionUUID->"20e560d1-f6d5-4dad-905c-1941871e49bd"],
Cell[926, 34, 4354, 118, 368, "Input",ExpressionUUID->"657859b2-85a2-4028-b118-ad23bfbdf18a",
 InitializationCell->True],
Cell[5283, 154, 2065, 54, 273, "Input",ExpressionUUID->"4e0e0cbd-e4e7-488d-9aee-1fe03c789fba",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[7385, 213, 179, 3, 64, "Subchapter",ExpressionUUID->"9484df9d-54b3-4fa4-a084-56818bdbb446"],
Cell[7567, 218, 878, 22, 64, "Input",ExpressionUUID->"d5251ca4-3511-4369-bae0-78b115e2db50",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[8482, 245, 204, 4, 64, "Subchapter",ExpressionUUID->"5e86a4c3-3fba-4318-862b-56359e98ad7e"],
Cell[8689, 251, 15814, 397, 1698, "Input",ExpressionUUID->"9f2fa46c-916b-449a-ac8a-5917115f5d70",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[24540, 653, 156, 3, 64, "Subchapter",ExpressionUUID->"cfddc2f7-1321-4bfc-9f7b-0a095041589f"],
Cell[24699, 658, 12625, 295, 1575, "Input",ExpressionUUID->"f96115bf-24f4-4098-8ad5-aa74873b70a2",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[37361, 958, 174, 3, 64, "Subchapter",ExpressionUUID->"07557408-e615-4536-93bc-8c8c106b6ee2"],
Cell[37538, 963, 5004, 130, 311, "Input",ExpressionUUID->"505d33f4-e5a8-4015-b5da-265cd9f72fbd",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[42579, 1098, 151, 3, 67, "Chapter",ExpressionUUID->"4418f0cb-16f7-4574-90f7-ba19f37bf4de"],
Cell[CellGroupData[{
Cell[42755, 1105, 1350, 34, 314, "Input",ExpressionUUID->"3d2edefb-2bde-440a-b685-87dc46bb701b"],
Cell[44108, 1141, 38716, 870, 527, "Output",ExpressionUUID->"3d05219a-3825-4d3a-8229-0f0512b11503"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

