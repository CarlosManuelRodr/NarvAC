(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2477487,      46649]
NotebookOptionsPosition[   2451810,      46232]
NotebookOutlinePosition[   2452154,      46247]
CellTagsIndexPosition[   2452111,      46244]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["PL/0 Compiler", "Title",
 CellChangeTimes->{{3.757707687885583*^9, 3.757707690689005*^9}, {
  3.761426920814851*^9, 3.7614269227724037`*^9}, {3.7639258171423893`*^9, 
  3.7639258183818264`*^9}},ExpressionUUID->"d1ca6f13-3dc9-4753-8e1a-\
6160422fec5d"],

Cell[CellGroupData[{

Cell["References", "Subchapter",
 CellChangeTimes->{{3.761175986740199*^9, 
  3.761175988970172*^9}},ExpressionUUID->"d9a4c0af-dc38-4e06-b13f-\
a22e584afa40"],

Cell["\<\
- Introduction to the Theory of Computation, Michael Sipser\t.
- Gate lectures by Ravindrababu Ravula: Compiler design.\
\>", "Text",
 CellChangeTimes->{{3.761175992134314*^9, 3.761176011651876*^9}, {
  3.7611816398682547`*^9, 3.761181650674877*^9}, {3.762897958128517*^9, 
  3.7628979641515083`*^9}},ExpressionUUID->"0ed6b2d4-334d-4f33-91fb-\
f0ba692a4fe4"]
}, Closed]],

Cell[CellGroupData[{

Cell["Overview", "Subchapter",
 CellChangeTimes->{{3.762889281529235*^9, 
  3.76288928470077*^9}},ExpressionUUID->"79dd5486-a5cc-4bf8-9377-\
82243e4a0088"],

Cell["\<\
This parser uses a finite automaton to recognize regular expressions which \
are also used by the lexical analyzer (lexer) to define the tokens to \
recognize. The input specified by the user is converted into a list of tokens \
and then is passed to the parser which builds a parse tree based on a given \
grammar. The grammar also has associated actions that are instructions that \
describe how to synthesize the tree into an intermediate code (IC) \
representation.\
\>", "Text",
 CellChangeTimes->{{3.762889288452568*^9, 
  3.762889579266375*^9}},ExpressionUUID->"8156eb86-0982-4a67-8b09-\
fd4f57223c46"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnT+M3MYVhxUlRQoXKVS6CeDS5RUp1KSMSkfprrFxjhHg4AD2AUEAlVde
l2sCqHSp8kqXKl2qdOnSpXpFvw2e9O7dzHDIfVxyl98HPN2Kyz/DmW+HQ3KX
749f/fOLvz9+9OjR979//88XX/7rz9999+W///qH9//527ff/+Obb7+++Mu3
V19/8/V3f/rqt+8n/vc3jx795/3f3z0COD0eP378jhgXS7fZ2rB6gfHg1Edw
KIet+4RHuWzVJzyahy36hEvzsDWX8GhetuQTLs0LLkEWuARZ4BJkgUuQBS5B
FrgEWeDSMC9evPhwL/Pm5ia5BaZRK9P19fW7n3766cH8v/zyy7tPP/20+F4W
uNTGt4Hik08+mbU99inT0uXDpTZqtydPnhT7I983nJ+f76ZZe/7666+7/3/2
2Wfv7u7udtNtXnu/tHxtvT1l0ry2/tvb23vb0/ajfxcXF/fK49dxdna224bK
3gsuDfPDDz888EDTojNq2yGXrG1q88X1qm1L7VkqU+yj/PZa/Wtp2+YrLpXZ
d+zt+wP1HbEv0f9bLvn2U7s9ffr03du3b+9tw/dJrb6pVKbW8a7kUixj3Ceb
3gsutSn1P6X+I/ZL+us/27FtS+2p5eN6x5RpX5fol/qZ2i/ZGELh+5LauEZt
E8ccpXFxz3ip5lWpTNb+Nl4a65Jf7/Pnz+mXGnB9aRy4VAeX2vhzzdgH94BL
kAUuQRa4BFngEmSBS5AFLkEWuARZ4BJksSWXBD7Nw9Y8Erg0D1t0SeBTLlv1
yMCnHLbukcFz4abDc+HKjH1WI4FDx4K+N/Tzzz8X+4KlywbHBS5BFrgEWeAS
ZIFLkAUuQRa4BFngEmSBS5AFLkEWuARZ4BJkgUuQBS5BFrgEWeASZIFL01j6
+4FrDD2zreSSnjO3dNnWGN4lPeuO+Bh6FmCtX3r16tXi5VtT4FI7cKk/cKkd
uNQfuNQOXOoPXGoHLvUHLrUDl/oDl9qBS/2BS+3Apf7ocenly5e7a3Zv3rzZ
Pf9euTr0LHPlaPDXqXT9TvkZ5i5zqTy4tHzs45Lq+ccff9zNI4f0nvKH4NI2
o8cl+aI+R3WqPC9DLtnr2F9pXt+PKS+DvdZ6bXtXV1cPpsdlY3lwafmYOl7q
PcZ558yH6KL6l9evX+/mtz5H7ad1mSt+2UPWDy4dxiXfL8WQE94z75It4/sf
88dP831TXBaX1hdzuCQfrI8q9UtxGTsmqs/x/ZKfB5fWH3O45Mc2curZs2f3
jlP6a8ev0vGx1F/h0vqD60vD9YNL/XWFS+36waX+usKldv3gUn9d4dLHuiiF
xnEll0qx9D4sXX+4dL8+7JxT4XOFezSvn4+6w6VanYyBesOloXrBo/F1hkv1
usGjcfWFS+36waP+usKl4Tp6+/YtHnXUEy711ZP/S5TrKNulzz//fPJviNcc
uje4dBnmCLXXWl3qPQeCdZDZ7ri0bXAJssAlyAKXIAtcgixwCbLAJcgClyCL
U3dJv3G6u7vbax36PqR+R1L7PtuU5c7Pz3e/q9HfNZVrH3BpPmptZr/jU7l0
P0X7mrn+pdiqS3pegd1Hsr5BbaL/a37/2rdZaTnbjk3X8w30fYBaW+s3fppH
++jLp/nk1sXFxYf7dubZ0PpVlpubmw/7ZmXT31jeuFxpf6awRZfUlr6dVIc2
j96z33Va21jd397ePmjfuG7fTjWXfLvrtXdZ67f5x6y/5Gec134HY9M1T+n9
qWzRJd+31PoY++wLq/vLy8t70z1qS1uX+VBySdPiszjMT3Op5GrP+nWfXvNr
OVuH31dbd62f3ed4K7boUuyXPHZ88MeJVr+k/kXzlo47JZfituNxteRS7/o1
X2s8X+qvhupqDFtwyfcBfkwRP4++na3/0PxD4yXzQWHHx1qb+WOaL6Om1Vzq
Xb/30m9vaJwV35/Kqbu0JaKLhwaXTgMbT1m/uwS4BFngEmSBS5DFllzS+Yue
PWiv/XWerHGGxi0950L+3MxH65xc55CZ94NUhszx1ZZc0r0JrVfoul48V89o
J61n7Hm1zvOtXC2yXRK+TvZlKy6pH9J1a6G+o/Z51Hu6fmPn1rX7b6XpNi3+
f+heV8ml2vrlkt0vkbOl+bSv2gfrd21e3xf66+lZfm7FJd+ft+pP71mbROds
Oe+l0Gfb+jjrl2rLlogu2TVEwxzSX117r30mfPn0PFjrH61819fXH8rp7835
fdmHrbjk27I0TrB7m759SvftvI/x/pgwl1rLRqJL0Tsrb6vf89uIfphDfozo
71vj0jiiP6Xxkt73LtWOhXF6T7/UYky/pL/mRm0bNZf8+9ZvxW3tw1ZcivVb
O4+L7RM/+3YMsWXVJ2m91o/47xiUli0xdrzkXaiVr+SSn5fx0n5knrOcCpzH
TcNfXwKuL8F6wSXIApcgC1yCLHAJslizS6f0XEfti65JxTilfdT+rNWlUwp9
V9/yKPrQ9XfyNN0PXGoHeS37A5fagUv9gUvtwKX+wKV24FJ/4FI7cKk/cGm4
fnCpv65wqV0/uNRfV7jUrh9c6q8rXPpYF6UgDzguTa0P8oDjUmadjIF6w6Wh
esGj8XWGS/W6waNx9YVL7frBo/66wqXhOiIPeF894VJfPfm/RLmO1ubS0t8z
PMZYus3W5pLVy9qwa0i6zm2v18YanFqLS2t06BhZug2Xdsm2Czks2Y5LuoRH
87BUW+LS6bE1lxgjzYf/nOIS7AMuQSa4BFngEmSBS5AFLkEWuARZ4BJkgUuQ
BS7Ni8+fbVF7fn8th/uxgEvz0+sILuHSECVHavncbD7L+27LlOa3eZRfQtN9
nnjfH2blxBkCl+YnuqTnUfp2V54dy8Gl+V6/fn0vP1Sc33JrRt+0HsuZY9uz
HGWHAJfmJ7qkPibm6tL/bT7Ll1nqk3xfYy55J20s5pfx88wJLs3P2H7J8m5Z
TrA4v9FyyVObng0uzc+U8ZKwvIdxfvOn5ZIfL5mTc4NLkAUuQRa4BFngEmSB
S5AFLkEWuARZ4BJksSWX8Gk+tva7XVyajy26hE/5LNmOS7uET3ks3YZrcMnK
glPTsLpbuv3W4lJ0iuB5lacSej5lKw/49fX14mVcU+BSO8hr2R+41A5c6g9c
agcu9QcutQOX+gOX2oFL/YFLw/WDS/11hUvt+sGl/rrCpXb94FJ/XeHSx7oo
BXnAcWlqfZAHHJcy62QM1BsuDdULHo2vM1yq1w0ejasvXGrXDx711xUuDdcR
ecD76gmX+urJ/yXKdZTtkr4ntvT3DOeIJ0+e7J6vtHQ5skPttVaXes+Bjo3S
NctTILPdcWnb4BJkgUuQBS5BFrgEWeASZIFLkAUuQRan5pJ/jr89238s+k32
1PxctuzUPF/KK6C8KfvkYJqy7Yy8ZKfkUiu3Vi9Tl9t3WaHyW76KffLmLJWv
7tRc0r2u2B/F/CM+F1LM0Wb5RvR/5ehS21o/5/OPlPKe+GXlQ8zhFOeP6NkV
2obK4XOgtPLJlcrnXSrtuy+rlaeUs2WovJFTcsnaw+rA6rzURrUcbbW+pdTn
+faMy/bMH/HtrtcxN2Esa618/nVp30t56GrLj8lTd2ou+br1fZTuYaseVZ9a
d48PIrrp2yfmSKq5VJu/VF5/370nb1OpfLGPifsuYn4ozVvrR3uPt6fkUil/
m8/h58e0PS75XG9D/YycHdMvxeNwLLuW0f77MsWy1spXypHYGs9rfbe3t9Ux
Vm+eulNySdTyq/m2sf+X2sf6B72n+rV1nZ2d7dqjlF/S54mzZceOl/wxzbdh
K8+l7VMsX3Qp7nupnt68eVMdL/XmqTs1l2rE9tgSh9r3LbhkY4qp15uOmUPu
+xZcgsOAS5AFLkEWuPT/86+XL19+eO2v82SNMzRu6TkX8udmPvbNHa/1zj1m
wqV3u3sT2p7QdT1/jUXnxvu2o61nbP53nedbuTLw+zkHW3dJ/dDl5eXutfqO
2mdX7+n6jZ1b164XlabbtPj/oXtd0aV9ymDLZ3wuamzdJd/3t+pa71m7ROds
Oe+lUD/gr/2pX6otW6Lk0lAZWuuP5ctm6y75ui6NKezepm8j/7mP46rS/TFh
LrWWjZRcGipDa/24NC/Rn9J4Se/7dqwdC+P0nn6pRcul3jLEfd3nO3ZDbN2l
+FmtncfFNoqff38vz/okrdf6PN1Ds/tapWVLtFyqlaE1nfHS/Mx9frMWOI+b
H3996VTh+hLXvY8JXIIscAmywCXIApcgizW7dErPdNS+6NpTjFPaR+3PWl06
pajlAVddkafpfuBSO8hr2R+41A5c6g9cagcu9QcutQOX+gOX2oFL/YFL7cCl
/sClduBSf+BSO3CpP3CpHbjUH7jUDlzqD1xqBy71By61A5f6A5fagUv9gUvt
wKX+wKV24FJ/4FI7cKk/vEvxOdXE/79XWXOJeFhXj6CKfgNec2npssFxgUuQ
BS5BFrgEWeASZIFLkIWcwSXIAJcgC1yCKdSu5+r5cyWXSrH0PsB6kA/+uQG1
nNy6/xSfL7B02WF9yIsx4BG06PUJj6CHIZ/wCMZQ8wmPYAryxuf9wiPYB/kT
vzsI62fp7wceYyzdZmvD6gXGg1MfwaEctu4THuWyVZ/waB626BMuzcPWXMKj
edmST7g0L7gEWeASZIFLkAUuQRa4BFngEmSBS5AFLkEWuDQd/Y4tPtvu6dOn
974TORfn5+cPvlN0d3c3+3Zb4NJ05JKeL+l/06ZnS9zc3KRuZ8z2lwSXpjPk
kl7H/krz2jQ9b1Hfw/V9jF6LFy9ePJg2tP3Sumvr6Vn/WHBpOr3HON/m1t52
PPLv6bWeJaA84OaCUFuXjl81l2ze2np61z8WXJrO0DFGbeb7CXPJXhu+j9B7
FxcXD8ZCpb6j5JJft1+vX09t+r7g0nRaLqm9rI+K/VJ0yaPj4rNnz+71G73b
j+uO/Y9Rm74vuDSdlkt+7HJ2drbzQ8eRkkt+vGT+xb6q1O5DLonaenrWPxZc
gixwCbLAJcgClyALXIIscAmywCXIApcgiy25JPBpHrbmkcClediiSwKfctmq
RwY+5bB1jwyeCzcdngtXJn6Xh+B5laeA2knfL/K5T8h/AlOQM+T8ggxwCbLA
JcgClyALXIIscAmywCXIApdgCrVryuQBhynIB/KAQxZj7y/jEbTo9QmPoIch
n/AIxlDzCY9gCvKGPOCQhfwhD/jh0fONlv6e4VyhZyMtXYbsUHst7UyNsefU
x0LpmuUpsOa+9lRdOlVwCbLAJcgClyALXIIscAmywCXIApcgi2NzKea9mTMP
V8yPk5WHq3dd19fXB837te/2jskl88jnQvL/n5NDuzSUXyWbjO0dk0t6tkMr
v2Qpd5rlm1HeEk1//vz5hzwlPvebn8fyiLT6pdK2SnneSpRy8lgOp5h7zto3
bi9uS5+n0j705p4b2l7P/h2TSz5HUiTmKLLcgTY95njzfVrMz6a6U9RcquVp
i+up0crvpHLHXD2l7V1dXd3bVm0fenPPDW2vZ/+OyaVWvyTPYn5H/d/Xi6+v
6FLMddRyqZanrfc4UXLJfwZi25a25/sQc6m0D72554a217N/x+RSa7w01C8N
uRQ/01q2t18y5nKptL24rdo+9OaeG9pez/4dk0ven9J5XGu81NMv2ZillGuw
NV4qrT86M9YlK1+pr/Djo9gvxX3ozT03tL3S/h27S3MQ2zOTQ53Xz7kPveDS
fO2gz/rl5WXqOmvgUhuuex8XuARZ4BJkgUvj8Lm9Lea6h7PW+3Y1cGk8mffm
9t3Ooe/btdi6S1PuO8U2jvPrfV0nsmnxWk+89yZ8f2fliNsprTPjPloWW3ap
dq186L5TzaXS/D333uI1UXt+3JhrnaXr1b37k8WWXardwxs6bpRcivOrXeN9
s9o1btt26Vq0305rndYnTdmfLLbsUutzvI9L/vsMPfdLIqX+amidQ/0SLi03
XtrHJT8+0W/s9Z2i0vcRvEt+vFRzprTO1n203v3JYusuQR64BFngEmSBS5AF
LkEWuARZ4BJksWaX/Pe6ifWH2mtpZ7aArkuSBxwykEvk/IIMcAmywCXIApcg
C1yCLOQMLkEGuARZ4BJMoXZdmDzgMAX5QB5wyEJejAGPoEWvT3gEPQz5hEcw
hppPeARTkDfkAYcs5A95wI+Ppb9neIyxdJutDauXtWLXktYITn1kzQ4dE1v3
CY9y2apPeDQPW/QJl+Zhay7h0bxsySdcmhdcgixwCbLAJcgClyALXIIscAmy
wCXIApfmx+e66c1Zs09+rqVye+HSvFh+CKOWh92zz/P/l8zthUvzUfMm5h/x
uSpevXp1Lz/X7e3t7q9yUfh+rWfZQ/uES/MhlyxniUftXXPJ50Px+U18PhSf
U6m17KHBpfmY0i+VXPLzxPxcuLQMS42XfK4275dvd8uj1NMvxfxctWUPDS7N
T+s8zt5Tfi7zwefnsvGS5Uv1x8yhZRkvzccxXl+Kx7I1g0vrBpfWyTG6dEzg
EmSBS5AFLkEWuARZ4BJkgUuQgdXv0m18SPBpHrbmkcClediiSwKfctmqRwY+
5bB1j4y1PxduzfBcuDJLP/vxGGPpNgMAWDP/AxK4iFk=
    "], {{0, 409}, {147, 0}}, {0,
     255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{147, 409},
  PlotRange->{{0, 147}, {0, 409}}]], "Input",ExpressionUUID->"2e72126f-f751-\
4f13-8870-81a0bbd95c77"]
}, Closed]],

Cell[CellGroupData[{

Cell["Initialization", "Chapter",
 CellChangeTimes->{{3.757707699905423*^9, 
  3.757707702482992*^9}},ExpressionUUID->"a9651e77-d6d2-4a54-9ff9-\
ceba4ac659e9"],

Cell[CellGroupData[{

Cell["Finite state machine", "Subchapter",
 CellChangeTimes->{{3.757707715690061*^9, 3.757707721818841*^9}, {
  3.757707839577127*^9, 
  3.757707842542766*^9}},ExpressionUUID->"21a9500e-0fd4-4842-9564-\
1968489f3e69"],

Cell[CellGroupData[{

Cell["Deterministic finite automaton (DFA)", "Subsection",
 CellChangeTimes->{
  3.761427024295422*^9, {3.761427180364272*^9, 
   3.76142718256389*^9}},ExpressionUUID->"628262ab-3196-47b2-a3ee-\
b1a86753561f"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3Qe4ZFd5JuolqaVuhVYOrQgogiLKAeWAcitHlNXqVo7dLbWkloqL7Rnn
sQePjbi+NjZgGy7Y92oYsD14PCYJAw7P2AYZE+wxMGOCDDhhJK1Za1c1tIuq
OrvOqapV4X2f57OB7j77r3P2qV17/yu86rYHLl+5aQjhkSXp/1x+66NnPPzw
reuu2D79l6vuf+SuVfffseL8+1ffseqOh0+4bbP0P16S/k9jcQiLAgAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCCLUo5NeWRlF9M
+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
fQPzf76k+R5X7eWX/02eo5PXbxxVjzrXe27Kq4I1IgGYOnFRaM7vzWsi3xVG
3+/N82/znOK81sgDrRpWtnJv63/LebD190qMUctjwy4Nzc9NWw/wmw8AAMBE
qJ5HN9pyWtmamC7VHL17Opxn+TnNbmVrA8ZftV/fca0+6voBPxvNz2RvD825
s3mNyKNbz5N3Tdmq+f418NeTn1lvG5p7+R6ScmLr+fV1rWfGg36Nj6Vc2Xr+
u+XgXw8AjEJ17Ty6db18Ygj90nz9vT/l5tbngjNDNS46vjrlFa3PBnme8QLG
VcXFodq3Ie7V+ryR1+04OTT3dMiv684wnLWq89pLt6W8LmWn+dcPAADA5Kjm
JDXacn7Zmpg+VY+j0SGXFS0LGFN5DeNq/cLcmx3EnJ78nHhFyoWtZ8f5Oe6Y
zoWp1s3fKeXAlFNCcx7xfQP6PuRn29e3njcvHv1rA4B+xO1Dc5+HOwZ0Hcx5
vPX54qKUE1p92J2a199xUY1By+PEjgzNtUXytfvhAfaD83iz3N/eddSvDAAA
gFGJN3a4H7yibE1Mn2oO8F1dehHbla0NGA/VnJijQnPezVMLeKaZnw/fHZrr
MOc+5y7j9Ux3vqrvT+5b57k714aFr3/9ZOvrHByqOckAMA6qeb55bYwVA+j5
5vFft7Z6qIe0+rxDWNtjVPLYtbhfaM4ZzvtRPDKAXnD+zHRqMC8YAABgylR7
GDbacmPZmphO8dAuzxzOLVoWUFA1NiT3NPP+dAvZG++u5ntJNWd2htY4rp5j
HxUWvh/y2tBce3KPEq8CgFkXN085LOWGsLAxYGtbfdHjm9e0hazVPCmq9aTz
eLc8n/m+BfaCb2t9rrBGCAAAwMTLaz3/wH3fqrI1MZ2qNU0f7HC+rUtZUrY2
YLSqdQ1ft4DnlHlvvMtbzzuXFnkJY6fqpe8WmnOmFrJXcp4HdJxnvwAMX7UP
7vLQ3Ku+MY882eoZ5zWidw8TPbd3UPLaStW60QsZG5bH5OWxefsUeQkAAAAM
QLW3YKMtj5WtielVjcVvdMjJRcsCRqR6NntJaK7H2OgzD7bGLL0qTMV6zsOW
x9VUa13mPvnaeT77vajZUwaAQcl7DlTjt1bNszeZe5qXta5xxir1VI0Ny/Og
T09ZOc/vd94rOO+TvEWJVwAAAMB8VffNjQ7ZqmhZTKlqbbdOfYjVwf6TMKWq
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
j/ePvO/E/oM5FjA8eXxx9X7Y6JLLfZYHAACmX7VPW6NDHkzZvGhpTKGOz40v
KVsT4y9uETqvK3rkEI61bWjOEWw/1oaYMwBjr3rPeIMe8ELF3UJzrZiO86iW
LYs/mef43nNP/Kv16+N3u+3T+3M/F+Ozzzbn9eZ9denuq1+N8Y/+KMbf+q0Y
/+N/7N4LfvLJ+K933RWfz3ODd9gh/miX8zxfy85M2bHYKTRw+d6k4/41Jwzg
a8/V+300Ze+FHwcYjWpNkF6f6a8K1vIBAACmWjWn45Yu90Rnl6yMaVTNm2z8
4FyVoRxrSfOZZ7UP1AGhmmecnw/Gk1s5u5XzUi5uJff2Ltvov79+o7+34d8d
n3JYqOZ/5Pk11fhye8AOVVzW5T3qFQM+zlzPiewZBhOjWsP1kjl6wLuWrHA8
VT2wQ0Jzf/NGe3KvMe/jm3uPTz0VX+rUm8zzWN/1rhg/+cnmusfM3z/8Q4x/
9mfNNaP//b/v3AtOP4eXH3gg/s3FF8f377xz/PEu5/vKlKPDxI/trD7TNQb/
eaDqK3c858P3x8XuvLBjAKM355o+V+sBT5PqvXzb1r3jq1IOTTl2o/v4M1v3
9edsdL9/aesZxYb/fv5G9/+ntf5d3nf+tSkHheZ6KHlds63dFwIAMBny88+4
vsP9UB5fv2fZ2pgu1f1Xo0O26/PrbN16Bnho657sopQbQnNNwNWh89yQYSf/
Dj3SqiHPH7mgda94cMruoVqTlPmpvoeNDlk6wGPo/cLUqca4nd/j91oP+Huq
8Uz5e/Vo+/dprp5vnuP7lrc09+793OdifOmlYu3SqZa/r1/6UnMP4V/8xc77
B2/cC95xx/hjHc75x1rPt5cVPNkWIB7T4TXl9UGWLOBr5vUCbu7xPpE/1227
0MqBUqoecKd14zck37ctKlkhdVS93fzc6sCU40JzfZJrQnN8U16n5IkC9/85
a1PuC805FbmXfHpojjt/Rev+0rpRAACMgerzc6ND7nU/xODk9TY7nmeHd/i7
+bl9nr97cOs+6prWvXupe7tBZF3KnaE5xviU1v3r9gv7ns6CqsffaMvjYWD9
WL1fmG7VfI9Gl6wJ1TrHs6h6lprnhK5q/75suml8Y95n9s4742c69Xzf+MYY
3/a25hzff/zHcj3RWZbnVj/3XPde8Pr18cUVK+L/OPro+Mtdzv28T3Zez2SC
5r5V4/0abbl/AV9vcei9X/iKsKDeMjAe5pwHfF3wzGNMxK1Cc+7uCa17sBWt
z2qNCc361n1mHque5x3n/deWTda1FwCAyVeNfe/W/7AONANS9XRXdzjH8ljZ
vUNzLO/Frfu8x/u5t9pii/imffaJP3P44fH/zs+s81ylSy6Jv33NNfEPbrkl
fmrVqvjp++6LX3joofjlnNWr49+tXRu/kfP44/Gfnngi/nPKv7T+/z+vWxf/
YcOf57+74d/lr7FyZfzzm26Kn7j66vjfly+PHzjrrPjeE0+M7zj00PjWPfeM
P71oUfy/+rwvzPNxbku5MDTntuT5wsYKf09c3uF7dueAvvbSUK1B3vVnszzo
/cIUqNbxa3TJ2jCx8yHno1pDI4+reaT9e5H39L300vi7jz4a/77TPN/ca/zY
x2L89rfL9T35Qd/8ZvPn0q0XvGZN/PpVV8Xf3333+FMdzv/8uez0MBHrlFSf
DxttuXqeXyvvE3JHj/eF/LnM/h4wNapr3109fuffoCc3anGnVj/0nFZ/9Ac+
l8yV/Lnl1a+Ov3DccfFXzjgj/r8XXRT/y5VXxv92443x43kM1D33xL968MH4
pXwf//DD8Ssb7u/Tvf63N9z3b/wMIP3ZC/nP83Vzw/1/Xlcjj4e79db4x9dd
Fz+SPyede278/045Jf76a18b/5/9948/t/XW8Uf6rD33hfPY9itan8n2d80B
AGC4qnGWT3f4bJr/t33K1sb0iFelvCnlZ1J+OeU3U/5znfukvfaK/+GYY+Lb
8v1W7r3efnv803w/9thj8Vud9sQrlTxXKt875l5xvk/M96C5H33UUfGX8j1q
zXvCx1vPHnPP4qDJeC47LB33KL9qAF83P/u9s8fPQO8XpkrV42p0SV73eM+C
xY1A9Zw1z598YuPXnscsnXpq/I27746fzesHt1/Tnnkmxo9/3F6+k+KFF2L8
yEdifPObO38+yePhTjghvj3P8W77HchrlLw+9L0nx6hUe3r/H/bOA0yKMlvD
JSKLYFhYZEFQhJWLggouLgomggkDYgBRUYKIIhmJE3DIOStJQMUMAmLAwCIo
uCCioAQRBQRBBARRcvxunar+7Zqeqp7umaquDt/7POe5d2W6qqan/vOHc853
0m3G7vV5uJa+pgob+23Bc3hCkhFj7LcOM/abaMzB9QjDh0uvCanrvUczNZuz
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
O8YJISQ3Dhww1/wBPZDfLWfBbfzRgyQkVZHxhidVHKRDB2xRe4DvvvPZURBC
koZXXw2eL9x6K+ZaYq/XxMDPlVMaSDbWW7fLvH8GQmJOEd2u062zbq/r9qNu
iMIIIYQkJXhIrYOeeALfqfWZxGrd5OBBZ93n5cvdvRchJDKstThWk9pgt+ND
1t5/jzyC5Zb9150+O0FCkhRcqcZZgwb4UI2/hQvdHduEEBIpc+cG1wI33ogZ
lrXAv3x2mISkEBL3MMeejEM1Jl980V//QAhJLvbsCeZ99eqF/YULo7+lD1Qh
D33chbnEfi/37t6ExAypo9f3+1pr3Z7X7RvdTmjRxXsZ/yWEkKQHZa26T1Yt
ZtFqdpMZM+zjTK+84v69CCGRIb15ZLzbjc2PPnL3XseOASNGmNcWnYGyZTHa
or1UzG9vSEjyYdb2SI2d9N5Wehv797s7tgkhJFJ27wayssy1QKdO2G45j33E
b49JSGqAArq1U+uDLl3wq4xHGZc7dvjtIQghyca8ecHzhbvvxkeWef9aj3zc
Bbr1ChP7vcKb+xLiKaKTU1G3h3Ubrdv/dDus5S/Wy/gvIYSkBHLWYq6FnnoK
P6h12fffu7vm27DBPr4kerB797p7L0JIdMhZT9++OcenaENv3+7uvaTnqLp+
8+b4yrIXu9tnZ0hIkiG1dOb4ql0bM9W4e+cdd8c0IYREi1UPslo1TAv4KulF
U9Jvz0lI8iP9ts31Qd26mKXG4syZ/voFQkhyIr0fVB+otDQclJ40AR/UXbe/
uezfGPslycL5uskZ2QDdPtbtd839WC/jv4QQkvQYmihZYlWrYqra+02a5G49
rvQQVjV/obZsmXv3IYTknfnz7cfohAnAiRPu3UeuNXq0ee3evXGqfHmMs+zH
SvjtFQlJHtBYzfGdOmGbqu3Ztcu98UwIIXlh06bgOqN1a6yznM3e5rPjJCTJ
MWp/26va327d8JvK+eT6gBDiFR9/HJz3770XCyzz/o0u+rfSuvVwiP0+Y+a+
EJIwxCLWy/gvIYQkPWiu1kPt2mGTWo/9+KO7a70PPrCPK02ZQt1nQuIF0WYe
M8Z+rC5d6u69pLe4uvZjj+Eby77sPn99IiHJAs7STF31rEqVMEGNN6m5I4nF
yZMnsWHDBsyZMwf9+/fHE088gQYNGqBGjRq46KKLULJkSZxzzjkoVKgQTjvt
NOP/nnXWWShevLjx71deeSXq1q2Lxo0bo0uXLhg5ciRmzpyJlStX4uDBg37/
eiSFUb0nevfGyVKlMCKwDpBz24J+e1BCkhf8W627b7kFb6v1wezZPjsEQkhS
I0vOgQNNf5OejsPnnovBAV/UU7czXfBtZQLXynKI/V6Z/3t4jfRDxt8DcWyp
Y66g26Wa0asY1XWrqdt1uVgNM86NS3Qrr9v5mtFnC0V0O93v35BEBeO/hBBC
8omxlsgSE901tfebOtXddZ70+LLTlZX/tnOnu/cihOSPzZuDPfmsNmiQqdvk
FtJzeOzYYA1whQp41rI3o/YjIfnG2P9niT3yCJZ71duBuM/x48fx2Wef6euk
vqhTpw7OPPNMz/b3Ei++4IILcOutt6Jnz56YMWMGfnQ7CZAQB6z9IO65B/+1
nNNSm5EQT5Czf3SScVawIPp27469qvZ3zx6fHQIhJOn55JPgvN+oERZZ5v26
+fRtudX9Vs/f9fOL4XuL63axblfpVlu3O3RrottjunXQLc3h+d22rrq1Dty7
vmb0YJZ1lxFvdiEOT1yE8V9CCCH5JFj72749flLrMIn/uMkrr9jXEy5c6O59
CCHuMHeu/Zh991137/Ptt8FrP/441lj2JPf46xsJSXRwmhbQdixcGP0lx17G
mfRhkNwLEn+cOnXKiPm2adMGJUqU8Guv/5edd955aNiwof7OjMDy5cuNGmRC
3Eb6w6h+gN2743fRog2sA5p77SUJSU2Ctb/16+NdtQ6XtT8hhHjN4cPA4MGm
38nIwNHixTE04JOkX2/hPPq1Ulr42O9VLjnQ3J5DtPVL6lY5EFO9U7dHdeuo
mX2u7J4vHu1p3R7RjH4cxpwhceFCXn1rJCyM/xJCCMkHhgZIllj16nhR7f1e
esnd9d3GjfZxJOn9efy4u/cihLjDoUPBfZnVpDZgxw737iPa7+PH2/YBFs3a
c/32koQkLobWV5YWou0oOfckvjh69CimTp2KSy+91PeYbzgTLWnRj54yZQq2
bdvm99dGkoi33w6uM666Ci9Zzh/P88pDEpKaGLlhbbVA7W+PHtinNLn27vXZ
ERBCUoZPP3WsAa6ZB7/2T926O8QxJfZbwz0fmu2+Z+p2oW7X6HaXbi11S/cg
Fhsv1jswf8jvKtrS1GuLDXndu/2h2wLdBukmtRVlovw8IYSQpEB6bJpzeZs2
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
UpHOm+e/fzN2rJy6I5krjWeRu+++mxITE7Vzlezo66+/pvz584f13Md5eX/j
Q3olCCYH8Llz56RcK6UNGzakea8rVqww5dpON2iQf/z45hs5dfM3DqLOfPno
fRe+B4Koo717lsSlTRvaz32B34m/elVOH4P04W9L3nP/Izzgnoy5LNqLtKrc
euut1LVrV7pw4YKSv63q+9cXsNaZM76xvkkT2uzyPV+VCTZSAkQm+j/RHzp3
plPcR4YPV9xhAWsALrlrAHp87ki3bt2CbsdLL71EFy9elN4OUOeXX3xzAj77
UDcnyGduvIXIRrEu47X8gkqbBQAANqCdu2xxrt9U29KUr5czJ/UX8yE+K00G
Pus55f5Nr15EN27IqT9SuYJ8LuF3V6tXr07Tpk2js2fPqm42HTlyhN58800p
a6Tt27eX1q5t27aleb0xY8ZIu57eW2+9FfC6//nPf+i6jIS2Eeb8eeP84du3
y6l/0iRPfT170lVdzH3FnBgLYEdURPz2X36ZVog+xmsjoNbOnTupd+/e9Nhj
jwX9jYodS6ZMmSguLo5+//13pX9P1X8HfQFrcU5zEdvc0+UFuvE+T/riJUCk
oUdEf+BzUMU7YHgkUcsV5FiCNYD0uXr1Kr366qtBt4H3ia3MUwHWWL/eNyeo
WJFmeWPgey7tTESAUNCt7hLv8l/Lb6a2XQAAoJ6qXL+ptqeWuLZ7qnuW50Oj
RsmZY+3fb7yHc+KEnPojlSvEdVY+x3jChAmWr7Xu2rWL2rVrF3QenbRKgQIF
tLxBMj3yyCMBr8nfXMk+U+uPP/6gnDlzBrxup06dpF4zUpgZO/hxvn9/T33t
29NhXex9Rn58BbAryuQuCfzbL1+epoo+tnJl+H0M5Dl58iRNnTqVGjZsqI2N
LgljrNmlSJEi1LdvXzp+/LjqP59G9d9DX8BaCxf65g/33EOjvGN955BCJkBE
oaJi/tugAa0W/eTIEbV9Ntq5QhhXsAYQGJ/xVbly5aCunzlzZprCCYggIn3x
hW9OULgwjfDGwHZmRVmIBlTZZbymX1ppswAAQCHVuX5Tbddj4vr693+vXQt/
jsVH/Rnt4WzbFn7dkcwl4fmpRIkS1LJlS5o9ezYdOHBA6jusXNf27dtpwIAB
9Pjjj0tfH128eLG0tgqTJ09O87off/yx1GvyeZeBrpchQwbau3ev1GtGCqOz
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
XsOVLE6zomuUx8cplrOOTE4K/ned66qslD+D78+aDwkodq++Wn3tt65t1H0R
cf2IvRP3wwEAAIB8Jo3sONXv49atK5NPPFGeD46paS7cr74y2jVfS9dn3n+/
yNSp6c0D61yjzk/qPCW1gmtP6+zVZM5XY8oUd641X8YVPvtM5MILq635/fOo
o5z8aFWB0LrZIXt6nXpcVRGh8zZ1cnUnA8gnzl7Btnb0TrBOJCpGePPFKeQR
0L0IMjjic3Q82KtJLv8K+Xedy62b5s/VMn7+q3lzOb9/f3kt2M5r7TStDcza
K2TSsmVu/yHY79Bntl5/TZrIjLjrW/u2zdK7vlO6B3Qv/biIe07XW2ye+WMC
KB76buCs6zrMjvE1nPMd5s1JNbHjkDS+r3vgHPa3Amu6OneWm8rKZLXftuq7
tr7rAcVo9WqR226rPkYxfLh8FNeX0Gf9tjloFAAAAIAsc2oCHxZ8P9x1V7k+
mA9a5+y0vp/mZM4HOof72GMis2alN/eoofVotc7s44+LfP55/vxM+Uzr+X78
scgjj7j5uNOd89W46CL3Glq1yszPEE9/Jj0fnafwz3H8ePlhxx2d2r5Vgehh
OevzI++fRDUBD8vyzQsgrzg1c2u611f347S3Ul434uwb6hPxeTqm2zHwtQeE
fM3IGv6Melxd+zIh+Hk77CBXjBghn8XPA2seEeaBURuaZ0TX/mlfNHh9jRwp
n+t1F3ddj/Ouzyyuv5IWVvR+O801HZGnHUDpkqbenOsZNZzzHe3O32r7s/Yz
90rzMzrFndMOVmDfsa7n0jmwYDv773+L/PyzyScAkFlLllQfQ9J8z5o/pE4d
OStwr2jtFNZzAQAAoMg4dU3Xjmfp+sfBg+Xd4Dvg9dfn1/5ZncPTeoP6bqrz
uunOSWpMn+6u/9Tar/n0s5n2/fci//ufyC23iJxzTs1+tzpWq79bfc/Kp3n2
5ctFrrii+rkOHChvxeV7nmhHuxTuG93nd2SCsZY9s3bLAsgD1er6pluzb7Q3
HtyoBsc9NMHn7hX3tb1Dvuak9I9Z7TMbeGPRa/c369jZQQfJggkT5Mdg+6q5
9XT+jmcs0rFypcjChevO+44dK99pDeq467nCux7r1+66Tvn617UaZ0bcf5pj
Nc299QCKjzPnu5+V/powP7ROk+7vbWmtk39W53Ij26CJEf89JCeCc47Dg1/X
o4c8UFEhv/tt7syZIh98YPRxANSa1rV++OHq69jHjZPv4/I9axzGMxwAAADF
y3kHrJZLsnt3uUfrqvn9ZJ0LfOml/JrPU7q/6Mknq+fyrUno92t+Qf0ZtYZh
vv2c2aDz6FpP74UXRP7zn5rtqw7GnDluzrB82evr07+l/l3PPjt2rmVlskav
8bj3Ps0buUUa943uoe8XMdZyprXOensAhc/Z67tnDcZ1db70WDvarDuem/Kx
E+35OTzk68NyRB9as2Ov89nN49s/rcGq7arWUQs+G7Tt1dwd+fZsQH7R/twD
D6w776s5OvS60lolcdfycek9szNFOie4D3vV/P4GULic2kqag2BgDed8y7z2
Q+sCR+Qfku2t6NoSmoMgLDdRRYLP28By18+s/fp27WSerrXx21+dM9P3Y57f
KEQ6zqE5zIJ9Cq0dsfHGcnbgutd1Ex1q2wIAAAAA+c+Zy+puBdYUt2kjc0aP
lq+Cfearr3br8eYbnePTmq4PPihy/vm1m8fUOPdckRtvFHn0UZE333Tr1up8
aaHSta9ff+3ud9Y1sNddV30+tKah+Z31d6SfnY90Lj9+z6/mjmzZUi6Km6vt
Hj0+kvC+qR8xx1LljdG0z9w9CsAMU3t9q51Don2HJ6/bfjnnXBbytZ1rdx6h
5zUyeIwGDWSa7iMK1pPw9wNrfWCt5wr4tP9w553V6zJo6H5yvY50XUHcNTzE
Ml6br/qcSVx0M3lmAHLFyYfxL8vd+x/1fE4Umn/reMup2yD1khxrWys6/7zm
lt7MjqND/m1QCj/HP6xAffP69WXqiSfK88H2eMYM930YKAS//urmEQnmidO1
3/vsI7fF3R8DLPI9AwAAoOQ475dnBN8Be/eWp7RGit9/njrVraGar/OhOhf8
ySdu3knNXVXbOU4/dE+KriHVccpnnhF56y2RL77Ir/pImjdR58HfeMPdF337
7SJz5647rlqbmD3bnUPWNbX5Sue74+v8VlTIbz17ysK4Oj+jLCe/Wq3umc2s
6LpeOlfUpnafD8CshPv9wkLXfmju5bZWRvYCOjkgo8Z9dS4sJPetbBrx9dvX
/nzWOdb63hj46Ph5YG1zy8pkdfAZovuJdH2VPqdRuvTvr9dBMCejxqRJ8rNe
N9r/jLt2R3rXWRZr/KbKWV9xbII2YFeTZwcgW5x1nx29eduovbiJQr/nFK8t
2zDFY/7NCtTrjQvdu9jc+7phIf9+WIrH0NwmJwa/t3NnuSm+roO22T/+aPLJ
AST23nvuWEXwutXaZs2ayay4+3Dv/OhPAAAAACbIxt57bZUf220nl+q+yWBf
+tJL3fnPfKZzwZ9+6u5RnTdv3XHGTIXupdV51ptucvc3aa7L559399u+/77I
55+7tXU1f5ZGKnPnOofpf73WrtXP0HeaV1918yzrz3TPPe67uOZe1nn5bPxs
unb2yivd+WSd88333Ng6pnzJJdV/htNPl09at5ZL4sZEdC/fRhm6Z/5ix4SI
sZmy2s8xAzDHmUtNZZxX14HoXt/NMnjsxpZbCzDqeBHHklYR37Nl5s5tnWNq
Lsnd48+3YUM5p2dPeTh+HFlj/nyRt9/O3/VkyCzt12gfRvuP8dfC2LGy7OCD
5d6Ied8d82+c1rneBySY48nCWgsAuad7c+X/LDfnfLo5QDTO9OZ8d3bfsdM6
9lZWdF1fXRfWOnCOYf2UNNaiOOtadgv+jLqOq3dvebqyUv7022qtCaXvofn+
PojSouMlCxZU71dMnCgr999f7gzpU7RI7z4EAAAAipHzDriLFVhvrPsmvbrA
vwTnBnWfbaHUBdL9sTone9ttIuedl5350nTnVjXXdDCCuYpMhdYCvvtud4/z
6tW1/73ngtYO1L3ZwTn+sjJZrfkj4/b8ao6zLNT5ceZbovbo6djNXzN/TAC5
4Yz7VkWM655kuXmQMzw/5eSWHB5x3DJ3XDjye/8Vca4bZPYcQ49dzxtDHhM8
vtZv7dpVbo1fS6ahuTo0V5+udULx0boh+vedPn3d/saoUfKljs/GPaervHUE
XSynPkm+ctZLnp7gHt3a6OkBqCEnr4XW4j3Kit57mywG2bGHVeP6D87a0vER
n61ztIE1Js4e4bCvq8E8l76vVK9t07GjXDlmjCyNX7+V7+vAUfx0/eALL6w7
rjNwoLzVuLFMj+sDH2olzbUOAAAAlBppaLl5LKv82HpruWDoUPkg2MfWeUvN
t6t7OwqFrlvWunMvvujmSb7gAvPzriZC50svvtid733llfys75yIXnO6Dj2+
nnFIrieNXlbaa+/Tul+2s6L3Bui8cxb33gHIHieXc1UgNNfx3pazNzgrx9vQ
jlMj2hLd4/P3JN9/QMj3jcrOuUaeg/4Me1kh+5c7dZKrtI0Oex5pfXqtM1hI
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
o7N51oFj1/eOX62Wg+Zm0pqs8c+OG25gHhjRNM/zCy+InH/+uuvMdH95SK2n
UXbskPweAQAAAJAZznhXeyuuNrDuB9E5O60FF78f+I473Hq1gPr0U5Gbb163
vu/48fKDXkO6piBkbqSN0cs+JZqL2ql1WcUcMIAY6eDNlVWFhI5rNarBZx4Q
/lmFSDaz3Hz+p4T9jvSZ0KmTXKV1ZkeNki+j5is1NH/gjTe6NeQ++cTdX1LK
NF+21qbQPTbaF5s9O/p35+fd0N/zLrvIdSHPYj+0duXedjQ2dcXkD6dPfFSC
535vKy/qVAAww1nrlCjn87GptRHV1197cXy2zjriHJrYcVz8eXTsKFcOGyZL
4p8n8+a5a7Oo2wCl9a0efXTd+r4VFfJ7377yUrNmMivu2tK8IlproUDWNQIA
AADFxqkN3DF+HrhBA5nWs6c8PHGirAzLC7V4sciffxp8+YAR+jfXv71eA/HX
RYJ532HeNVZAY6fOfXF8gnGe/swBA6VEtrMCtRPiYqxV45wGzphx/OedlJFT
Nkq29OYWh0a1o82by/kHHSQLdG+w1qJNNJ+p+Yy1NqHudX3xRbeG8OrVhh6E
WfbzzyJLlri5se++W+Tyy0WmTk0836t9Nd3ju99+ckeTJjIjwbNL5y/2cOfq
UV3S5/6RFvuWgBIkG1tuPfCqiOhjpZQjwFlnMiHk+/fN1pknOR+tRdwr/nx0
3dCIEfJZ2LqsRYuK99mLxDTfl+Zpie+P6LzvSSfJf7VPF3ctTbLcumMbm7m+
AQAAAFTnjHtpXsvRwb677gfWvNC6lyQsX+P//ufm/0Fx03d9zfF04YXrjjuP
Hi1f6zUSMu97euHN+wbpOmXpm2C8R+t/5aDWGACzpJUd5RHtwHh3DLXGnx02
ptyj1qecV5wx5j0td99T1Bx6VYsWcqE+S3T/SFifIyw076DuE374YZH//lfk
/fdFvv1W5LffjDwqU/brryJLl4q8+677bNU6G9dd546vp/Jza60Ora/co4c8
oDUcEzynyr25id0t9vmmQOdwEj73D2EOGCgl0jDROiZvzUiK+eFl84jPaJeF
E0+DtLDj5Pjz0meLPmcqK+XP4PPnnHPcZ67OB6K46bpv7VdpPys+31dZmazR
PM8h+33L7DiQeV8AAAAgXznzwFqP8Iyw9cBh9YF0X47mI/zwQ4MvKMiKL74Q
WbDArQMd/3cfMUI+7dxZbgoZx9A8qLulPh6Sz5w54JMSjPucyhwwUMyccdGJ
Efe/7m34Wy0+ez1vnCz+czvX+rTzllN/sJ0dh1lx683iQ8cUu3aVW3V8UZ83
OtaYytyoho5T6lyq5qq4/XaRhQtFnn1W5JVX3DlXrV/w3Xciq1Zl7nmp46Qr
V7rzz5qzWnNlvPyyyDPPuPO7//mPyBVXiMyYkdrP4IfW7x0+XD467jh5Rmv4
Nm4s0xP93ix37dXBdvzdIt9iDTjP/dAc5tba9RnMAQPFT2s6yPDMzP06n9cu
4nM2z/CJ15DT31ln/YuuzdLnsNZ1DcsNrXUJdE0TiseKFW79jQsuCF1/9r2u
PdNccXHXSoX3fGxo8ioGAAAAkCqp583hjYx/D9x+e7nMWw/8R/w7waWXuntZ
yA1VuHT8WserL7543Xc+zfGkf/u2bWVuyPiFro/f0V1DUEyc/UCJckIOsqOB
yTMEkA0J5351nKuW9cxl04jP3r52n1tInL3Be1huLcJxSeY1nTlhXYumY4/6
LNI6wvpcSmc+NT7OOkvk3HPd+WId69S47DJ3XFvna6+9Nhaai1n/u/Z1/K+d
Pt39/vi9MemG9ql03/PAgfJWr17yuK6v0nH3ZL8Ty12vd4wdu9qxhYE/YhFy
1ikMSvA7P4w5YKCYOXO/pydoA3ql/76jeZ7X+ZwJ+deWyLaWmzeiKhi69qhn
T1k4YYKsiH9+aS3YBx5w81qgMGl953fecff6ar8o/m+s/a2IfF/aTz7QvWcA
AAAAFB7N3Ss7WG7NuKpgaJ2Xo4+WRVr3Nf4dQWvD6J7g994T+f13c+8ySI2u
2377bZFbbhGZPHndd76xY+U7rQcdUVfwZMvdZ5Rn4xeZ5OyLPy7BONBpzAED
xSTh3K/mMG6fgWNsE/H5TWv/2YXKyY+pdQN0D4muKToz2fyn1qlo00bm7L67
3HjooXL/8cfLs1pTWMcqy5LUFc51TJokP48cKZ+feqq82bu3PH3wwXLvbrvJ
Da1aycUhY6pRMcKOIyw3V0vT4n72muTU/ByW4O9wOL97oBhpfXSnna2KiKOt
GtW2kRPC36HylTTznjUVwXOuX1+m7ruv3K55KcKec/Pni7z4orueGPlPc31p
Pu+w+hPl5fKL1uRo314uD7l2NYeLrt8jDxYAAABQNJzx8F5WXP2+OnXkLN2P
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
cxJc31rHYG/LqVMBAAAAANmgNfGcvaZaTy80R5Q/H6xrVvV9UPew2u+DPyd7
9/HfCa++WuTOO0UWLXLfnz7+WOSHH/Lr3VD38mpeqyVLRF5+2c11rXPZOs87
fXryn9PL57RS35V79pSFmle7Xj2ZkuB9b4S3FltzO9cz9McvUs74xt5JxpJ2
N3iCAKqR/4tai+Tdr52yfPwdI45LDgagIDh92VMTPPd1frihyTMEEM9Zs3l4
kjWb/5fhY7aMONbWmT1OvnN+9zoXvJ/l1guO3HvdooVcqPnBdD4zUb2o+NpR
8+aJ3HKLyEMPibz4osh777l5s/Jtz/DKle5e5jffFHn6aZF77hG5/nqRiy5y
c54l+1krK+UP3d974onyfNeucmvjxjI9wTWtOW5627GTxT5fAAAAADnnzJs1
s6OLHSfbUZng/aWqTRuZc+CBcnefPvKC7nMtK5PVqbwTBvcMX3ihO8d6000i
d93lviPqu5fOwb7zjrvn9osv3LW3Oj+roTV2dT9usA7x6tXuf9M9x/7XffWV
+7063/z22yIvvSTy5JMiDz7ozkfrGt7580Vmz07t/S4ul/PPw4bJkhNOkOf0
nbhlS7ko0e/Kcvf4nmi5tXyamPjrlh7ZNdF4huXsNwBgluyS4D7Nwdyvcw5h
e49GZf+4ADLHyW2TaA5Y192xxwrIC7r21alJVJVgniwLNVucd4P4Y1VaJb8W
18mlr3WijrZjXKJ32iZNZEaXLvLvY46RJ047TRaPGyfL03mH1tA9tDo/rPOs
t98ucv/9Io8/LvLCCyJvvOGux9Z3+C+/jL3Xa85lfdfX0HXbSueS/f/mf53O
Mev3aj1ezdGsa8+1Lq/matYcXlqfV9emz5njzlOnc96a20vnerV+r9ZP7thR
rkyy3ltD1x8dYEcrO9Y38ucFAAAAgFDOWNp23tj4Kd4cZlWiaN5czt9tN7lB
98AOGCCvjx4tX5eXyy/pvhfmS+ictr7nnXKKvHr44fKQ1kfSOsnJfg/euMVJ
lrsPdVuLfWSGSAcrel+hhu47qGPyDIHS5aw1qoqIytzM/TrncWzI8fvm5tgA
MifpHLDmPG1u8gwBSIMk96nWqf1rlo4dtt94WHaOVaicvcFbW06uJKd/FJkr
2o+NN5aztdZR9+5yT58+8qKuC584UX4y/R5f09C6V2PHync6v63z3Lqvt3Vr
uSRBLSc/zvTmew/x3kE3NfEXBAAAAICacd4H7fdxZw/rEZazPyrpPKgTmgup
fXu5XN+fevaUh/XdcMgQeX/MGPlW99JWVsqfuX6303xN+m6quaw0b7PuY9a1
vHvuKTdvv71c1qiRnJvqz2e5ubOP9+YzNJ8W63vzhvzdiq4rqtHLjromzxAo
Lc6zpEeCezILOR8Tnk9Y7dAeuTs+gMxx9hX2SdC+TLSjtckzBEqXbO7Ot0be
n1nep+/kOo4/5lHZO16x0Pz5Tr0orR080EqcX2lt1K8vU3XeVNeGH3yw3Hvc
cfKM1pEaOVK+mDBBVuh+WlPru8eOlWXDh8tHupf36KNl0X77yR1av6lZM5mV
wjyvH/p+qWvkda28rpnfKOd/GgAAAADIKq1d48yv6byn5owaYiXJGx0Vm28u
57VqJRfr+uHOneUmzause251L3Hv3vKUHU8ff7w8q/WHNHR/sb5DavTvL6/5
/13fLfVrjz1WntTv1TldfafbfXe5cYcd5ArN1dywoZxTk3P05iVOs9z57z0s
JzcZNeXyn/zNjvEJ/q4nW85+BADZpWstQvfb+pGlnI+R57Oed8z489gjd+cA
ILN0DZ7O6STsy+1g8gyB0uP0xRPtJdV3yCzul3TahbCcQJ2zd8xi5eRa0PXO
Wsf2UG8OdEJN3q0bNJBpW20ls3Xt9a67yvX77CO3HXqo3K/v8L16yeP6Tq/h
v+frfK3//n/qqfKm/9+1/q7/tUccIY/o92udKl3XrfO6WrdKc1fXrSuTazgG
MNJy13rv5z4/ZEuLHFIAAAAASpLzfq11hDt670g6BtffcvfIVhVA6Jrm0d67
rM7z7uO95zW12NdbwJz39ER71ke4XwMgO5Luy9M1Gn/L8TltGnEu2+f2PABk
lrO244AkfT3mfYCc0JweCesInWw5c4pZPYfmEccmH0DGOOvCdR+srgvv4fX5
TrcS1+LJp9A5bF3nresUD7Tc+e0W2b82AQAAAKBYOHu/dB6urR07W+788GF2
9Lajnx1DLXdteI32ECcJfffUOegh3jjDMZa7Znlf7/1O6/RuYZELuIg54xKJ
8s5pXsi/mzxDoDjJJlZ43kU/tG3+i4Hz2ibifJrm/lwAZJ5TsyRRrlLNZ7qe
yTMEipdT72H/JO9n+g64QQ7O5Z8Rxyf/T9Y563Ea2dHScteH723HwZa7RryP
N+eqa3TLsvD+rzHOjuGWux5d9/D2tKOb5dY4/oflrg0gdzMAAAAA5JSTW0rr
ROl88V+9aGU567SdvMvt42Jb799aBr5+C2/Ob0PTPw3yhWxsubWrqiJC1x7s
bPIMgeIijS13/0dVRAx1xwWNnNuOIedzZm7GogHkhnSyEq8rPNwivwuQYfru
JSckmZc7xMpZDl1nrUf88Ufl5thInfa/nNwsjQPv8y28d/zW3nxt8P3/74F/
87++qTeGoO98rO8BAAAAAKCkOHloj0syJnVw7sakgGLlrMcZl+A+G2AZ3XsT
ui+J8WCg6DhrBCcmaIt0X9gmJs8QKB7O3NuQJGstu+T4nE4JOY/euT0HAAAA
AAAAZJ+Ti2zvJHPAmpOMmk9AjSSt93eSZTw3g1PjLf68+po9JwDZIVvZMTZB
mzTacvKAAqg5Z69movvMQK0Vp88ftv5j79yeBwAAAAAAAHLHqQdWkWCcSutF
bWHyDIHCktLaCq35lgf5VmVwyLn1MHtOALLHqSkyKkHbNMly8osCSJ9TUyFR
n/p09x7M+XltEXE+2+f+XAAAAAAAAJA7so2VOEet/ltLgycIFIiUcqt3t/Ki
HpszTz0p5Pz2MHteALLLqS15WoI2SmuA75kf7RRQCLReSmh93WBozo+NDJ1f
+4hz2szM+QAAAAAAACB3pLEdwxKMW+l+hp1NniGQ33QcNXQ/rR9a729Xk2dY
ne4/1rle3e+rOZ+d3K9nsvcPKAXOWpWw/O/BONqODQyeJFAAZGNvbrcqQfSw
jOb8kP3D13YCAAAAAACgNGitX6fmb1WCONIdNwYQI3+zY0yC+2aCHW1MnmFq
dK5H6po+CwC54OQA6OKt+6iKiEF2NDJ5lkD+cvLnJHr2V7r3mGlyYvh+ZAAA
AAAAAJSOlHLY6T7hpgZPEsgjsoMdZQnulxHcLwDyl5MbNlEbdoYdW5k8QyC/
rF07UZngvhlvR2uTZxkTOkfdzew5AQAAAAAAwAzNU5twXGuSO+8FlCpnrcT+
SfbO9bOjgcmzBIDkdH7XyQFfFRE6P/xPk2cI5Acn33OyXDm6TnILgycZIA0j
zrGD0dMCAAAAAACAQbKt5dQHSzjGdbBltKYZYIJsYrk1c6sSxOHcGwAKhzNP
dGqSdo0aEChhzjqJkUnukd6WU08lX8jfI85zS6OnBQAAAAAAAMNkUzv6Jxnr
GmjH5gZPEsghaWm5+VCrIkL3A+9t8AQBoIacGuBHJXnmD7XIaY+S4uR73sNK
nBenwo7dTJ5lOOlkx8SQ/fx1DJ8YAAAAAAAAjFub57YqQeg+4bYGTxLIMmf8
dzdvjLcqIjQv+vYmzxIAasdp6/a0Eue21/mjHU2eJZAbspEdxyXpA4+yY2uD
J5mEc09vYbm1vrU/f5DpMwIAAAAAAEA+0Xq/zvxWVYJ9j/uypwDFR2v4yolJ
xn9H2PEXgycJABkk29kxIUm7Rz5oFDFpYSXP93yC20cAAAAAAAAACpk0sWNw
krGwU92vA4pBSvX+jnf3CAFAMZFGVvIaEMPsaGbwJIEMc/Le7G0lzvdc6X3N
eubOEwAAAAAAAMgkpz7g4UnGg8vt6MK4GApXSvmeGf8FUOTW1oBIlA+63MrL
2qdAupx1jgOT9HHH2tHa4EkCAAAAAAAAWSQ7e2O+VQmijx2bGjxJoAacen+9
k1zbo93ckABQCrS2uYxP0i4eTS4EFCZnzZf2a8uSXON97djE4IkCAAAAAAAA
OZBSblwdL/4/gycJpEG2teOMJNe01gLe2OBJAoABspnl1nioSrI2ZluDJwmk
ybmu+ya5rjXfxz7ufngAAAAAAACgFMiGdvRIMm6m0cuOBubOE0hE6qaQ45R8
zwBKXEr5oM/0+gX1TJ4pkJiz5/dfdkxM0n/VdY4tDZ4oAAAAAAAAYJC0s2Mc
+4JQeOSvdgxNcu2OsWMbc+cIAPkkpXzQw+z4m8GTBCI4e35PSmHtYk93nSMA
AAAAAABQyrQmmpyQZCzN3xdU3+CJApa353dfOyqSXLPU+wOAdThzaP1TeOYf
ZMcGBk8U8Dj713e3Y1KS63acu64RAAAAAAAAQIx0TGFsbYz7dYAJ0syOQUmu
UT/fM/X+ACCUM5+2VwrraEbY0crgiaLkObk+kj33NY6zo6G58wQAAAAAAADy
mTROYV+QxrGMsyF31tb5rUxyXWo+6OYGTxQACoi2l0nz6Pv5PzYyeKIoOVqH
Wg5M4bk/nnWJAAAAAAAAQCpS3hc0wY5d2WeJ7JLWdgxPYX6iu0WuUgBI09r1
NWemMM/2LzvWM3iyKAmynR0jU1iLqLVLNjV3ngAAAAAAAEAhcvYFDUlh/O00
O1qYO08UJ6cu9ZEpXH86RrytufMEgGIgLVNYa6Nxsh1bGjtNFDG9rqRvCtfg
WDs6mDtPAAAAAAAAoNDJ+nZ0taM8hf2XPd05O6A2dG+Z7OztL69Kcs0daseG
Bk8WAIqI5lCQA6zkOXcrvD3D9QyeLIqGPselm5U874zf12xg8GQBAAAAAACA
IiJN7OiXwp4MnbPrbDn5JIF06T5yGZTCdTbCjlbmzhMAipk0S7EtPsNyc0JT
BwI14NQb0etnTIrPfXJ9AAAAAAAAABnn7MvcKYV9mRqn29HO3LmisGj9PjnK
Sl5/UvekHcSeMwDINif/x552lKXwzB9oUQcCaXFq/A5L4drS/DP7unvTAQAA
AAAAAGSPU5e1ZwpzdVXenuGtzJ0r8pvO4zr5xSelcC2dajk1qQEAuSOb2XFc
Cm209gl62bGFuXNF/tM+YUo1fjVO4HoCAAAAAAAAcs0Zwzs1xTG8kywnnySg
1uZ8PCOFa0f3m+9mkV8UAAxy9muOTKHN1jwNPexoaO5ckX9kS299QCprB0fb
0dHcuQIAAAAAAAClzpnH29WO8SmOCfd09xKhNDk5xP9hpZbzUceIj2QOAQDy
hebglX2s1HJCa14Hzdtb39z5wjzdv5tSfYcq75rRnCB1zZ0vAAAAAAAAgBhp
YEd3OypSGN/TrzmEeeBSI23T2C+utST/ZuxUAQAJODXbj0hxTm+iHfvbsZG5
80XuSWNvH3hliuu9jmC9FwAAAAAAAJCvnH0evVKc46vwxvuo7VbUpLUdA1K8
JsZZ5HoGgAIhLbz1OlUpxARv7zDzwEVNmttxTIprAzROtKOpsdMFAAAAAAAA
kAZnzi/VMeFKbx6Y8b+i4eR51lqR/VO8BjSX6H4WeUIBoMA47f3/2XF6iu29
7gc+wN1DjOIhrew4IY1531PdviIAAAAAAACAwuPMAw9OcSxQ4xRv3nA9U2eM
2pD17ehox5AU/946Tqz7xckFDgAFzWn//2XHGSm2/34OENZ+FSznb97eSj3H
h8ZQ73vo5wEAAAAAAAAFTXP5Sic7RqYxPjjIjg7u2CLyn+7blc52jE5j3re3
HVsaO2UAQBZIPTu62jE+jeeB7htty5xgoZBN7NgzjWe+xnDL3SfO3xgAAAAA
AAAoKs4+kZ3SnAceY7l5gRuZOmskovu25FA7JqXxNz3ejr+aOmMAQC4488Bd
0pgH1jjd+54Gps4aieizW3pYbs2GqhRD84F0dNcCAgAAAAAAAChezjzwP63U
awVqVHr7Rdswhmja2nyPfdP4+1V5+7u2MnTSAAAjZEM79kpzHljnFw+3owX7
RU1z9vrubrl5m6vSiIF2bM/fDwAAAAAAACg1Tl5ozfF8WppjippvUPcEb2Ho
xEuUs9f3IDvGpfG30ryex9qxtamzBgDkA2c/8G5WejlANDRvsOYa3tTQiZcg
qWtHO8vN11GZ5jP/RDu2NXXmAAAAAAAAAPKJjhU6Y4Znpjku3N9yc0pvbOjE
i5yz72dXO05N8+9SbsdhdjQxdOIAgLxU47VfOg95kh072rGRoZMvYs7fpbXl
5ndOZ692VeCZ39TQyQMAAAAAAADIa/IXy835WF6DceE+jAtngtS33PzcfdLc
96Ohe4N1b3ZDQycPACgYznxj7xo8ayosd29qB575tbF2zvdQO8am+TfQ0Hws
Xd21YgAAAAAAAACQjDSwo7OVXo1gPyq8PUK6b3VzM+dfaKSRHbt4c74VNfid
D/LmjOuaOX8AQOHSNUOydw3nIHXu+BQ7uljknEiBzpdLezuOsNLf56txptfH
0s9Y38zPAAAAAAAAAKCwyXp2tPH2B9VkXlJjiB3729GK+UmfjtlKSzv28eZu
q2oQZXYcaUcLIz8CAKDIOHVnO3jzi+nWg/BjqB3d7djOjg2N/Bh5xXnet/Dm
1/tZ6e+19mO015dqbOKnAAAAAAAAAFCsnFq0u3vzuVW1mLM8ydsntHXp7F1x
cjw2s9w90Zozc1ItfocD7djZcvJEAwCQDbKZN2c5shbPK39v8L52tC2N55Zs
4K3v2sOOE2v5vNc+01F2bOv2IwD8f3v3HmtZVd8BfA1cGGAYkKI82wQRavEZ
GAcLyqAUFcGKQLQPmyAIgxDENHTAcYCBGNM/qm3TVI0Y0/poazG2TSbE1pam
qRVoKdX+UWV8gBofTcEi7R+WOg9/6+x9FY9zzl373LP3ujPz+STfxOids7/7
+se62b+z1wIAAACgT7tPaN/vuXEZzzVvb59tXtG+05LfFdpHzq0d7e+Yn9ee
2z7/3bzM31N+7+eVaXQ+MwAMZbQPyEmpOaP2pmWuZfmd4vwdsl+OrGv/ltiL
9wUZvdsb6/Lonen8N9HVafa9UhZza/t3w+n7x7wcAAAAAFh5fvRc+KI027mB
e8pvtc8+80z4eal5b/agoe+szOjZ79GRX4hsiPxKWt67Uk/NTe3z9pOa3zMA
1DTayyKfCfG6NNvZtXtKnndem5rzcM+JPCdyzMqaC4/W+qe3a31+r/fi1Jzd
sNxZ72Jua//uOSONvj8GAAAAALBSjJ4Lnxy5IPK2OT0TXczWdq6a947Os+a8
f3R+3ybvsXhUf/Ph0TPftanZqzo/kz6rvb98HvL1c3z2u5h8j69uf4/7yd7Y
AOx9Rmv+MyOvitww57Xw9nYmmtfEvH90Pus+fyfszMhp7dqfZ8SHp2Xtizy6
h/wZz0jNGb15H5J8vkLerzrPoy9v723WM3un5eb2vvL33LznCwAAAADsJUbP
ZvOc9ooe5qR7ypbU7JP8lvaZbX4X9/Wp2WfyovbZ8Xhe2f7vl7Y/m+fLV7XP
e5e7Z3NJFs9GzPtEHzf//w8AYAijNT9/R+qNaXln3s6SLe08Nc+L83ezNk7I
W1Pz/bSbB1rjn5rb2r8vfik182vn+QIAAAAAe7ndB0dOTc17Qnk+u3Xg564r
KfnZ9IWp2Udy9Tx+uwCwcoz2zjgpNe/RXtHOZ2/fz5LnvXmP6LxnyLOt9wAA
AADAvi8/Bx3ttZjfD/71NL9zBFda8vPf/M5R3tP5uZE1c/01AsCKN5oH53MU
fjE1e23M+4yIlZAbI7+WmjOMT0qj770BAAAAAOzPRmfw5b0j85m+eU/mvA/z
TSvgeW6X5P0u896Oea/pMyLHJ2f4AsAe5DNvR3PSvGd0Pmv36jT8nsyzZEtq
9jG5LPKSyLPS6AxhAAAAAADK5PdlR+fk5XnqK1Jzpm9+7rqp4oz3utScb5j3
cD6zffZ7ZGTVIL8SANhn7V4beWZkXWr2j86z4TdFbojcMsA6n6+R30/O+1Zf
2v7t8aLIyc1aDwAAAABAf3YvRI5OzftDz4usj2xIzVl7+Xlx3mPyN1LzLvHG
Kbmy/Zk3tO/z5Pd3X56afSrz+8inRI6NHFr7jgFg/zY6P+KoyImRUyPPb2fF
+T3ifKbE+Usk/8zZ7b95QfsZeW/qn0mjd5IBAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAJijhciGyI2RD0XuizwceTTyZJv8n78aubf9mRvbf7NQoS8A
AAAAAAAAP7YqcmHk45HHI7tnzOPtZ7y6/UwAAAAAAPZeh0VeGvnNyJ9FvpK6
PTMGAIZ1QOTqyENp9pnvpHwxclV7DQAAAAAAVra8v+PpkY2RD0b+PbIjLe85
MQAwnPWRf03zn/uO54HIuoHuCQAAAACApeX9G0+NvDHy+6k56+/7af7PhwGA
YdwS2Zn6n/0uJl9r8yB3BgAAAADAuBMiF0feFfl0Wt45gOa/ALBy5LMa7krD
zX3Hk8+HOLT3uwQAAAAA4KlqPRMGAPpzSOSeVG+dX0z+btnqnu8VAAAAAIAf
M/8FgH3LQZFtqf7sdzF/GVno9Y4BAAAAAFhk/gsA+5Y/TLOtzQ9Gbo6cGzk+
Ne8Q5/2b81kR56XmTN/Pz/jZv9frHQMAAAAAsMj8FwD2HZel7mvyP0XO7HCN
syP3z3Cd1y7rzgAAAAAAKDHr/PaJ1Jwr+NuRSyIndvz3AMB8/Wzk8VS+Fu9M
zfu+s1gVuaX9jNLr/Xdq3isGAAAAAKA/Jc9rn4w8EHlv5PLIaal57jvLZ5n/
AkA/Pp7K1+EdqXlXeLl+NXWbAX90DtcEAAAAAGCy8eeyuyIPRT4SuT41+0Ee
PONnmf8CwDA2pG7r8NVzvPZ1Ha6b/844e47XBgAAAADgJ30r8leRd0TOjxy5
jM8y/wWAOv4lla/BH+vh+n/e4fr39nB9AAAAAADmz/wXAIZ3Xipff/8zckQP
HY6KPNahxzk9dAAAAAAAYL7MfwFgeJ9K5evvtT32uKFDj2099gAAAAAAYD7M
fwFgWM9O5Wvv1yILPXY5KPLNwi75HOBTeuwCAAAAAMDymf8CwLDemcrX3psG
6LOlQ5+tA/QBAAAAAGB25r8AMKyvprJ19/8jRw/Q55jIDwo7bR+gDwAAAAAA
szP/BYDhvDiVr7t3D9jr0x16rRuwFwAAAAAA3Zj/AsBw7kjl6+6bBux1VYde
tw3YCwAAAACAbsx/AWA4n03l6+5xA/Y6sUOvfxywFwAAAAAA3Zj/AsAw1qby
c3a/UKHflwq75XOJD6/QDwAAAACApZn/AsAwLkjla+77K/S7s0O/V1XoBwAA
AADA0sx/AWAYW1L5mvvmCv2u6dBvc4V+AAAAAAAszfwXAIbxyVS+5q6r0G99
h353VegHAAAAAMDSzH8BYBgPp7L1dkdkdYV+h0R2Fnb8coV+AAAAAAAszfwX
APp3eCpfbx+p1DH7+pReT82uyGGVOgIAAAAAMJn5LwD07/mpfL39u0ods7+f
0ms8z6nUEQAAAACAycx/AaB/r03l6+2dlTpmH5zSazwXVeoIAAAAAMBk5r8A
0L8bUvl6u7VSx+yOKb3Gc32ljgAAAAAATGb+CwD9e08qX2/fUqljdt2UXuP5
nUodAQAAAACYzPwXAPr3kVS+3l5SqWN22ZRe4/njOhUBAAAAAJjC/BcA+nd3
Kl9vz6nUMdswpdd4tlXqCAAAAADAZOa/ANC/+1L5evvCSh2z06f0Gs9nK3UE
AAAAAGAy818A6N/2VL7ePqtSx+zUKb3G88VKHQEAAAAAmMz8FwD69+1Uvt4e
U6ljdtyUXuP5VqWOAAAAAABMZv4LAP37bipfb4+o1DE7ckqv8TxaqSMAAAAA
AJOZ/wJA//4nla+3h1XqmK2Z0ms8T1TqCAAAAADAZOa/ANC//0vl6+3BlTpm
q6f0Gs/3K3UEAAAAAGAy818A6N/OVL7eHlCpY3bglF7j2VGpIwAAAAAAk5n/
AkD/usx/V1XqmB0wpdd4dlbqCAAAAADAZOa/ANC/Lvs/H1SpY2b/ZwAAAACA
vZv5LwD0739T+Xp7aKWO2ZopvcbzRKWOAAAAAABMZv4LAP37bipfb9dW6pgd
OaXXeB6t1BEAAAAAgMnMfwGgf99J5evtMyp1zI6d0ms8367UEQAAAACAycx/
AaB/X0rl6+3JlTpmp0zpNZ6HKnUEAAAAAGAy818A6N/9qXy9fWGljtnpU3qN
595KHQEAAAAAmMz8FwD6d3cqX29fWqljtmFKr/Fsq9QRAAAAAIDJzH8BoH8f
TeXr7esqdcwundJrPB+u1BEAAAAAgMnMfwGgf7+bytfbayp1zK6d0ms8767U
EQAAAACAycx/AaB/b0vl6+1tlTpmt0/otKe8tU5FAAAAAACmMP8FgP5dnMrX
2w9U6pjdOaXXeF5TqSMAAAAAAJOZ/wJA/16Qytfbv63UMbtnSq/xPLdSRwAA
AAAAJjP/BYD+rU3l6+3DlTpmX5vQaTy7ImvqVAQAAAAAYArzXwAYxiOpbL3d
EVldod/q9tolHb9SoR8AAAAAAEsz/wWAYfxFKl9zz6jQ70Ud+n2iQj8AAAAA
AJZm/gsAw7g1la+5V1bot7FDv3dU6AcAAAAAwNLMfwFgGBem8jX3fRX6faBD
vwsq9AMAAAAAYGnmvwAwjCMiP0hla+5/VOi3vbBbvoe1FfoBAAAAALA0818A
GM69qXzdPXbAXid06PWZAXsBAAAAANCN+S8ADOedqXzdvXzAXm/u0GvrgL0A
AAAAAOjG/BcAhnNWKl93tw3Y66879Fo/YC8AAAAAALox/wWAYT2cytbdJyNH
DdDn6an8XOIvD9AHAAAAAIDZmf8CwLDelcrX3k0D9Nncoc8dA/QBAAAAAGB2
5r8AMKzTUvna+0jkwB67LES+UdhlV+Tne+wCAAAAAMDymf8CwPD+JpWvvxt7
7HF9hx5399gDAAAAAID5MP8FgOGdn8rX3+9E1vbQ4WmR/+rQ49weOgAAAAAA
MF/mvwBQx4OpfA3+cA/X/9MO1//nHq4PAAAAAMD8mf8CQB0vS93W4SvneO1r
Ol77JXO8NgAAAAAA/TH/BYB67krl6/COyCVzuObrIzs7XPdP5nBNAAAAAACG
Yf4LAPX8XOSJ1G0GvGnGa62KbE7dZr+PR06c8XoAAAAAAHTTZXa7UgIA/KQ3
pO7r6Wci6ztc46zIfTNcZx7vGwMAAAAAUKb2LNf8FwDm4/1ptnX1gdS8D3xO
5LjI6sghkeNTc77w2yOfm/Gz/6DPGwYAAAAA4KfUnuWa/wLAfBwc+VSqv04v
Zltkodc7BgAAAABgXO1nw+a/ADA/h0b+IdVfq+9JzTvEAAAAAAAMq/bzYfNf
AJivNZFPpnrr9Ccih/V+lwAAAAAA7EntWa75LwDM36rI1siuNNz6vDNya3tt
AAAAAADqqD3LNf8FgP68OPJvqf+1+cHI+oHuCQAAAACAyWrPcs1/AaBfB0Y2
Rran+a/J29vPPnCwuwEAAAAAAAAg78v8mshdke+l2We+32s/46Jkr2cAAAAA
AACA2hYi50Y2Rf4ocn/kkchjkSfbPNb+d/e3P7Op/TcLFfoCAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAADAXumHusnDKQ==
    "], {{0, 847}, {1920, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{473.9, Automatic},
  ImageSizeRaw->{1920, 847},
  PlotRange->{{0, 1920}, {0, 847}}]], "Input",ExpressionUUID->"b5eb9bd1-0072-\
47bd-8ff6-bc98a1c92a10"],

Cell["\<\
In the theory of computation, a branch of theoretical computer science, a \
deterministic finite automaton (DFA)\[LongDash]also known as deterministic \
finite acceptor (DFA), deterministic finite state machine (DFSM), or \
deterministic finite state automaton (DFSA)\[LongDash]is a finite-state \
machine that accepts or rejects strings of symbols and only produces a unique \
computation (or run) of the automaton for each input string.

DFAs recognize exactly the set of regular languages, which are, among other \
things, useful for doing lexical analysis and pattern matching. DFAs can be \
built from nondeterministic finite automata (NFAs) using the powerset \
construction method. This is useful because usually NFA are slower to compute.\
\>", "Text",
 CellChangeTimes->{{3.762889701946004*^9, 
  3.76288976820625*^9}},ExpressionUUID->"142acf3e-c805-45bb-9cec-\
f0f2edc86ce6"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvQe4JEX1v08WRZYsirCAoEiQsGRlgUWy5BwEJOyyS1gkCQsoOeckGclR
cpIcXBaUHCQHiYJIEBVEhP779u9f93umprqn4/Tcez/v85S4d3p6qqsrnVDn
zLnNLuuNmmSiiSbafcr//c96W+81Yrfdth63/rT/+8eGY3cfs/3YkdutNnaP
kduP3G2pbSb93x/PnHiiiR743/+Z7H//PxJCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghBjGfffZZ
01UQQogBy5dffhl9/vnnTVdDDFL++9//Rk8++WR00003Raeffnp08MEHR7/+
9a+j2267Teu/EEII8T+effbZ6Nhjj42GDRsWjRs3runqFOboo4+OTjzxxKar
IYT4H4zFY445pulq9ARffPFF9OCDD0b77rtvNHTo0Oiqq65qukqiBl588cVo
qaWWimXPXgJ9zO9+97tou+22i2aYYYZoookmCpZpppkmOuSQQ+Lre4V//etf
0RNPPBH985//bLoqQogugQ7v6aefjv7+9783XZV+xymnnNJ0FfotjzzySDRy
5Mh4n2bXxkMPPbTpquWGfef2228fLbroovE6Wgfo0//973/Xcm/RygcffBDL
EXfddVf05z//OZ4jRf/j008/jZZccslozJgx8RgdjNxwww3RRhttFE0//fQt
8+ytt97adNVEDeyxxx7x+2U96hXuvffeaPHFF+/re5NNNln0i1/8InrooYei
0047LZpiiinaZOSddtqp6WrHXHTRRdFUU00V1+lrX/tadP755zddJSFEzbB3
QMfIuB8yZEj0+9//vukq9QTPPPNM7Odz1FFHRSeffHJ09tlnRxdffHF0zTXX
RDfeeGM8X7LfYL4XxTjyyCPb5GJKf7TzjB49On6Wv/zlL5Xdc8KECdGOO+4Y
DR8+PJptttn69g/TTTddtPTSS8e69Zdffrmy38vKJ598Er3wwgvRc889V0up
S7eQhddeey1aZ5112vrk5JNPHs0777zR2LFjo1deeaWx+g0kWHuww1RVkvrN
u+++G80555zRzjvv3OUn7A2Ym0J2unvuuafpqomKwU9+5pln7rO/MsaaZv/9
92/pd5NMMkl0ySWXtFxz6qmntvXPr3zlK43rJN944424HrZerMOsE0KIgcuF
F17YMu5XXHHFpqvUE2yzzTaJPj+2/OpXv2q6qv0edBC2TU866aSmq5QLzkuh
B8cOXhb2MkcccUT03e9+N95DrLXWWrE+BlmUfQKf8zt77rln9NWvfjWW2ZCf
u+nzse2222YaG0XLb3/72649i+U///lPtMgii0Tnnntu9NFHH0XPP/987JM7
44wzttSPthfl2HXXXWvpOyuvvHLw9x577LF4rJx11lldftLeAJnJ1/mgexMD
i2uvvbblHV922WWN1gf9tz9GsTOEYB2z133nO99p3K+acweheeaKK65otF5C
iHq5/PLLW8b8T37yk6ar1BPMOuusmfZi+F2KcmBrtW2Kj1V/gf0le27O8JXl
lltuieaaa664DTbeeOPopZdeSr0e++X3v//9+Pr55puva/bMP/zhD7EuwL4z
fCrefPPN1IKuHRnljjvuiPds+GNsvvnm0bTTTtsTfgPYMrbeeuu2v3/44YfR
LrvsEvvVff3rX4+fQZSDMY+P0s033xzH4LH9Cb9F+hN2zfHjx7eV22+/Pf78
+OOPj/sP4899F3+KJPCzwOaDH+dgBB2bHWeDtR0GMuhS7TteddVVG6sL6xH6
W1uflVZaKfF6zjywJmy44YbRYYcdFr3++utdrG0Y9NChfd8f//jHpqsmhKgR
9MlrrLFGPN6/9a1vRY8//njTVWqcP/3pT3F74IeGzWjqqadu2X9NOumkcVv9
6Ec/GrRn2Kpm4okn7qhX7jV49wsttFCs3y5zDhgf5U033TR+dvYSZ555Zubv
4i/qfOjmmGOO+JxsN8Bfwu4V+O2PP/640L2wef/85z/vu1dT58yIAce+LAls
9k36ew9UsNdPOeWUfe9/1KhRub7/1ltv9Z0LQqeUBOf1mbcXW2yxQTlvo9Oy
Y1Zr/cACfRM6JruWsldhfDTB6quv3tLf2ENxVq2/scUWW7Q8B2u1EGJw8N57
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
jkG3hA6Sz0Lyis3BgHxnn4e6+dfj32mvCZ2L8+MB25wVyBf+PfHRKwvPil7O
3RP51dcRht6NjcHB9Ywvntv5ebEn978Tiq+If6x/HbKnpWz7MvdtuOGGbfsR
ZFcLukT3OePFghxHP2AP687r8ze/Hk5/yByLjIc+k32Pv49w866DfsbfsHGF
5j/OF9T5Dsu2cxVt3I2xnRfWG3zT7T2T8kM6/94kvxwbrxb7S1F4dvTGrGu+
foE2xDfH1RV9KXrTqsH+hY0iyT8Ie06doGeh37O/sb/LWGMfxPhjXcHnDb2d
71OJTd1+Lw36ovWDoH1D8E5ZM+x9OWsR0lczXnzdK/9OI49szJkm5z+Slofa
xRymlPEPtCBDcT/s7XmgX9v+VHXOSfYTtr3ZhzcFe1VbF+aybsWByQt7fje3
sc909gr6sPXZwZ+oGzDnuX5y7rnntn1OvdBfsY9wc2B/zdPLeuvalzkIHWsI
1mG3tlR5nsbt46s6858V9KtZ1xM7jyIbp+mdWTfZl1gZ2+LLxuhfWD/8dqe9
2dvZazvJj1XNyaE9CTYZ5HNiMbPXdL6CrqA/qqMuvQ5zFfthxlESfl/zfT+r
hPuG/E3TbNV2P+dKKD4eul/2CPb8pa+Dd36UnNnENmb3hvha+L9j5Sjsb8z3
yMbsvZD5/ev5vbRnd7YjV6hvJ99G5h77Hc4XW26++eaWz/mNsqALZg1x90T2
8/s/e+2Qj6+NkbnLLrvEcqDb76P/82Nysj75Z2a5N2fy/HunxUgp0r7IoP5v
hHxt/T7o+h/jC70Tz2jXWF9uc7IeNjz0t/ilOFsQ84+9lrYm7wyg+8R2fvrp
p8f/DvkrJJ27r+odlm3nsm0MdY/toqAHs/fEt8PHzhN77LFH4r1YexkLnDsu
AvOT04Ogvw7B3sjW17dhVwlzJHZY7En2Nxn/3YjVR1+3v5s1nrE/HjthcxHi
n5cEexR7X87kJMHYRf7LMs4hj2zsdFDYSdLO3Nt4AiFf8SI4vSh6xDxg27Nt
ge6lSqxejjHYDT/RJD766KN4D2afF3tZr4FeyM031ifKYXVTrD3409cJ8yf+
dPxemr4YnwBXL3yQ+iv2rDHjH59iV9gjorNg3XNnatLOGheBfTD3RWffTVhX
bLyiNL85bOl2HOHHmgT+PWnzty8bp50Rwjbl+iIF+3IaVc7J/p6E2JjWts+e
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
V3xfcp+87ev7olM4pxPCzwFOSfK7s36trhAfMXRuwOYIdIV4Gegw/XnU6Wht
Cflb1P0O87RzXW1c59guQpZ1iLPi2ICSxjQxtfP4PhWBMw7sFWxsiW7Kxsj/
ts8lxW5Dhk1qp6QSiuU4EGRjK1tQ8BUKYdejpD6IL4G7hj7QTX2Mw+VJyZtb
3O5tOZdTFTbWLzJPmn9wN8D/hvhQ6IZcPP68oE8J5YCsChfzmD7UKWaZPWNf
V64kq18mDmMa1hfZP4/kzjwQzzcJF1cxLe9L3fhnjTuNJWTBtBhTRXGxBauM
3ZEHfL/sWubHucT/g8+xZ2611VZ91/kyETmvk/YlFj/fbSfZmJia9vqQbFzX
nFxENu6F9aEbMMei/+rkh2oJyWNFY6aGCJ2XTFvn/FjklCzxHHin2Kfs99An
EtfI9yt577332vxK0W2n5UxwOXVsIUdNGn7eKvoev52EHzvczft1xs8M2XVD
cWyRU/3rkP/SYtqxd/V9ZjnHY2Hvik9HyMbWKZ5u3vb1z69RknKguzNytiTJ
kCuvvHLbtciqobpYn3hX2OP6+SzRZ/q2aPScob1Tne8Q8rRzHW1c99guQp51
CHkNnz5/LLiS9xxmJ7CLnXzyybF9FR0Ccd1snI5uysbg/NsZE0kQV4e4U8Rz
yFKwI4Z8+geCbOyffU7ypbA6h6Q+aGPocX0TeYGcL1RSnIQk0B25uuNbUwXW
N7iOsZcXZB7WD2SNrH01BGOiLv9G1iI3p3ayV4KNzZ4UL6kMyBt2Lu2Ue8vq
QnwfI6e7Z75MgnNC7vfS4hTXiX/WuJMeBBmxytxNDherpFMM5jqxsbrxh7K2
IurnfEysD5s9A8YeAZ90e/YvCfLP23bvJBv7609INq5rTi4iG/fC+tAN8KFm
/5x2DiGEzWVASYuTlZdQDJ+kMyjY8+mz9lp0x5327sD8GNp3hmJasFf0r+sU
iwOdof8dGxfXJ6RzIK5gGqFz2fjV1omfM4T29m077BuRhzg7a68N5Zu2+DmN
Qm2GTQt52Z6l8eeyEEXa1/fb5plCdizkLf/eXBua57CBh/Jdh2LyMi59+y7F
P7sMNoaPK0l7yzrfYd52rqON6x7bRbDnPrKuQ88880xsR/bnOEoV+kj22fjW
48uP3sGeU23Kp5q5242PbsQ29fcmWeNn9JJsTL6ITmOUdrXXJPVB3+6RZT9Y
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
+6yWa5uil+r45ZdfRp9//nnT1RBCCCGEEKIjX3zxRXTfffdFe++9d7TJJptE
yy67bLTeeutFBx10UPTkk082XT0hauHZZ5+Njj322GjYsGHRuHHjKru2KV59
9dXotNNOi8fvxhtv3GhdmFMefPDBaN99942GDh0aXXXVVY3WRwghhBD9jzfe
eCN6++23m65GbWDL+Pe//9213/vvf/8bPf3009Hf//73rv1mf4L2OfPMM6Nv
fetb0UQTTRQsk002WXTzzTc3Wke9Q1EVjzzySDRy5MhYXrP9/NBDDy11bVO8
+OKL0dixY6N55pmnpY7bbrttI/W54YYboo022iiafvrpW+pz6623NlIfIYQQ
QvQ/8Dfbb7/9okkmmSRad911m65OZUyYMCHacccdo+HDh0ezzTZbNMUUU8T7
pOmmmy5aeumlo0MOOSR6+eWXa/ntTz/9NFpqqaXi3xsyZEj0+9//vpbf6a+8
9dZb0WKLLRYtv/zy0Y033hjbxbATTzrppG3y8ZZbbtlIHfUORdUceeSRbbIu
5Zhjjil1bVNccMEF0dxzzx1NPPHELXVk3m2C0aNHRzPMMENbm91zzz2N1EcI
IYQQ/Yvx48dHSy65ZN8eYtNNN226SqVAnjniiCOi7373u7Gsv9Zaa0XXXHNN
9MILL8Q2QD7HHrPnnntGX/3qV6PJJ5883sdVbRe88MILW/ZmK664YqX37888
//zzsa5ijTXWaDsHePfdd0dzzDFHS9tdfPHFjdRT71DUxcEHH9zSt0466aRK
rm0Kf6zsuuuujdWFOWWdddZpqQ96UiGEEEIIH85hPfHEE/H+aqGFFmrTr48Z
M6bpKhbmlltuieaaa674OTjv9tJLL6Ve/8orr0Tf//734+vnm2+++N9Vcfnl
l7e0609+8pPK7t2f+fjjj6N555031ksk+e/j937//fdHZ511VnxmsCn0DkVd
/OUvf2npW5zTreLapkDvONVUU/XV8Re/+EWj9UEfatvsoYcearQ+QgghhOgt
7r333millVaKpp566sSznRTiIfU3Pvnkk9jeTf2RuTjDmpV33303mnnmmePv
Yq/84IMPKqkTtgvsotyX87SPP/54Jfft72yzzTZxmxBzq9fROxR1Yv2Qzz77
7MqubYo555yzr46c0WmSP/zhDy3rmsauEEIIISynnHJK7GOcJhdT8EfuT7z3
3nt9Z0I5R1xkD3TZZZf1PT++eFXXD5uKiKI//elPfX3woosuaro6mdE7FHUw
5ZRT9s07v/nNbyq7timcDw5l//33b7QurAN2XXvqqacarY8QQggheg/O2hJ7
CruD3Wv1ur9eEvhAc66Yen/lK1+J8wAVAT9za/PAn1dUz9Zbb629qhD/P1//
+tf7xsN5551X2bVNscACC/TV8YADDmi0LsSWt+sa/xZCCCGESGLDDTcMysa9
6q/n486tUmf8DbH9lmG33XbrawPid4lq+c9//hPb9V0bdzOXlhC9iGTj+pBs
nMyf//znOM/VBhts0Fd+97vfDfq6CCGEGNxwrri/ysZffvllLL+6Oo8aNar0
Pa+88sq++3FmWbJbtZD/yLUvscEHMuSn+tGPfhTnfhXZGIxtJtk4O3n7h2Tj
ZH71q1+1rfsPPPDAoK+LEEKIwQ25ffurbHzggQf21ZfYYu+8807pexIP2bYD
sctEdRBz2rXt9NNP33R1aoNcYAsvvLDi/+RgsLaZZONsFOkfko2Tcf5WrhCL
En3zYK+LEEKIwQ0xt/qjbMx56SmmmKKvvoceemgl9yXnrm2HCy64oJL7OvAp
HsyQT9q17Te/+c1c383TdnXGzOpUD87zL7fccn3P+dxzz9VWl4HCYG4zycad
Kdo/JBuH8duFMnLkyMru/9lnn8Vr6R//+MfokUceid54443G6iKEEELkob/K
xpxNcnUlrw75m6rAtxsfc8wxpe+J/vuOO+6I8+KOGzcu03deeOGFOK8ucV4p
xBe/4oororvvvjt6//33S9fJwv5l1113jc94kXOlTn/WVVZZJbdsTE7SLbbY
Ilp99dVTr8P//dJLL40WWWSRtjhqxGujT9P+6FHuueeeXPXO+g4//PDDaIUV
VmjpQ6+99lqu33KQf4YzD/R1cl2hV7jkkktiOaFqquhvRetbZZvlgf5y2223
Rccff3xcb/r+CSecEPeNPG1cdvx0Szausj898cQTcbsRn4H7sI7gY0M8w6pl
4zL9I002Rn921113xc+x1157FZoXLN0cr46//e1v8W+MHTs22njjjeP8Cjvu
uGM8lonFkQR5p/01/8Ybb8z12/hp8X7JbzfLLLPE8TB33nnn+Hd32GGHlnuv
ttpqtdaFdjjjjDPicbjeeutFm2++efxeyQme5btF2lAIIcTApD/KxpxDsnVl
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
PPFSO4EPG3s/ztFxRi+JXpWN7bk1n7x7YD8eOTaCNPLIL3n38bwXGxeaM52c
h81asIPkpUx/q6O+dcrGTz31VMu98+aHcdQ1fqqWjat8P/Z8qW9/S6I/y8ZZ
5oUmxqvF+tLYOmSJF8Waab+HbTwtTxHyKLmZ7HdCeSFeffXVttjUnNNN013n
rcs555zT9tzEwAN0GOhOrfzO3gY7cogybSiEEGJg099kY5ufgTgeVcEZJJfL
gRLKF1SUrHtfcpCE3gXxkNizlY1NnZXBIBtzvqxXZGPivNrrk2JEVU3R/lZH
feuUjc8///yWe/uxqaumadm4qvfDnGjta7RjFvqzbJxlXmhqvDrseQhbsPGn
Qew4/zvka0/j2GOPbbme/oBezQe/cv/eaWc1itTFl9Hxp0bPRYxpF3ueHGL4
exGPK42ibSiEEGLg099k4+mmm66vjmuuuWZl9yU2pl3/XX7cKsi69+UsH/lS
Q++DQr6MTv68ZSA+0TrrrBPbzAe6bExsqV6RjbFBumtp+27pQIr2tzrqW6ds
jF+rvTexcuug6PixOrlOfSvLtVW9H+ID23a7/PLLM32vl2Rj/CCqnheaGq8O
fIR9OZHCefA0O62NCeYKttgkyGdkY5NRyDvsQz/xY1tRknISF6mLP7/bgp81
eaqIPZKWj9xStA2FEEIMfPqbbMx+3dVxgw02qOSe+FE5vTOFc1NVkjcnKfvA
1VZbLXgmqur6YRs6+eST41yf5KYkP5GNOzVQZWN/r92kbGxj0rDH/Oyzz1Kv
r5q8/a2O+tYpG9szs1Xfu4rxY+WKTn0ry7VVvR8/VtLpp5+e6Xu9JBs/9NBD
lc8LTY9XuOiii4JjNS0mA/7c9lrk+vfeey/xemLw+fcPxV3nzK9/3UwzzZQa
uztvXXz9FmX33XcvlUeiSBsKIYQY+Fh7aX+QjcnF6uqI3FQFBx54YN898cnq
FJcpLy6nalbZ2PHMM8/Edj1im/rvp0gOJws5OfCXIwbtvPPO2xLvu5d8qpdc
cslMsvFjjz1Wq2yc5x369+4U69S3bZFfqQmy9rc66pu3zfJw6qmnVl7fqsYP
8oOtW1rfynptVe/H93tlrchCN2TjrP3Dj51cxbzQC+MVWzUxoP1xig4vdGY2
ZHcln3Ma8803X8v1+Gz5cco5e4FcO8MMM7RcS0ysJIrUZfPNN2/7Drnny5C3
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
CyGEEN3igAMOSI21Qr7GojF/hRBCCDHwuf766+M9Azk8hBBCiP6KW8+SYpCm
5agSQgghxOCGuPHEuyYHVCgXmBBCCNFfYB0jz4MvF5N7hDxPQgghhBAhyGM+
ZMiQaJVVVknNUyWEEEL0F5588sloxIgRcW5L8jWSa/GFF15oulpCCCGE6GGu
uOKKOD5J3pxTQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEECKKPvvss1qubYpequOXX34Zff75501XQwghhBBCiI588cUX0X333Rft
vffe0SabbBItu+yy0XrrrRcddNBB0ZNPPtl09YSohWeffTY69thjo2HDhkXj
xo2r7NqmePXVV6PTTjstHr8bb7xxo3VhTnnwwQejfffdNxo6dGh01VVXNVof
UY5//vOfcf8SQgghRP/lv//9b/T0009Hf//735uuSk9C+5x55pnRt771rWii
iSYKlskmmyy6+eabG62j3qGoikceeSQaOXJkLK/Zfn7ooYeWurYpXnzxxWjs
2LHRPPPM01LHbbfdtpH63HDDDdFGG20UTT/99C31ufXWWxupT3/i3Xffjf7w
hz9E1157bazj+NWvfhW/x9VWWy1afPHFoyeeeKLW30efcccdd0QnnXRStPvu
u0frr79+tOiii0Yzzjhj/A6nm266Wn+/CO+//3700EMPxf2OteyAAw6IRo0a
Ff3kJz+J2+zOO+9suopCCCFywFp03XXXRVtvvXW08MILR9/4xjfiPc4666wT
2/CY83uRTz75JHrhhRei5557rpbyr3/9q3QdP/3002ippZaK1/QhQ4ZEv//9
7yt48oHDW2+9FS222GLR8ssvH914442xXQw78aSTTtomH2+55ZaN1FHvUFTN
kUce2SbrUo455phS1zbFBRdcEM0999zRxBNP3FLHHXfcsZH6jB49Opphhhna
2uyee+5ppD79BXSAU089daKOcooppqhdP3jXXXcl/j5lww03rPX3i/Cd73wn
tc7PPPNM01UUQgiRkfHjx8f+eWnzOmWttdaK3nnnnaar2wK67E71LlN++9vf
lq7jhRde2HLPFVdcsYInHxg8//zz0WyzzRatscYabecA77777miOOeZoabuL
L764kXrqHYq6OPjgg1v6FrayKq5tCn+s7Lrrro3VhTkF/a6tz4QJExqrT38B
HwB8Emaeeea2NXH11VfvSh3wm/7Nb34TTTPNNG11OO+887pShzy8/vrrsa7K
X7MorHFCCCF6H2KkYCfOIytiF/jLX/7SdNX7wO8LX1tffnrzzTdTy2uvvRY9
9thjsd/WZZddFp188snR5ptvHk077bSV22Uuv/zylnviYyWi6OOPP47mnXfe
6Ktf/Wr09ttvB6/597//Hd1///3RWWedFZ8ZbAq9Q1EXzKe2b+HDWsW1TYHd
caqppuqr4y9+8YtG63PNNde0tFmv+kD1IpwV9/cAZ599dlfr8P3vf7/l9/FL
wOe7V8EH3G+z7bbbrulqCSGE6AC+wqusskrf3M1ehjMxyCqTTDJJqnzca3IB
Z6Fs/dDbIncVAV+xn//853332mmnnUrXD9sFdlHux3naxx9/vPQ9BwLbbLNN
3CbE3Op19A5FnVg/5E6yR55rm2LOOefsq+N+++3XaF3Qn9r1QWM3G//5z3/a
dMXsDf761792rQ7Yjv39xxJLLNG13y8C54P8OnNeTQghRG+z7rrrxnP28OHD
4/NX5LZwEAfy8MMPjyaffPJE+bhJG54PazhxOmz9sIeXYZ999onvgzxUFe+9
915sUxFR9Kc//alPB3PRRRc1XZ3M6B2KOphyyin75i78SKu6timsrW///fdv
tC7IwnZteOqppxqtT3/htttua1v3l1tuua7W4ZRTTmmrw4EHHtjVOuThww8/
bLMt4BdVRdwSIYQQ9YEcvNJKK8VxFK1M7EM8zyTZmPhcvQSylt0zUvClKwry
NrE1FlhggQprKRzWl197VTHY+frXv943HjqdpcxzbVMwb7o6ss40CbHl7brA
v0VnxowZ07bun3DCCV2tw6qrrtpWh4cffrirdcgD+cH8+q655ppNV0sIIUSF
bLDBBkHZmL/3Gscdd1xLHWeaaaZS55K4H77molrQO5CDw70nzhQLMZiRbFwf
ko3zg858lllmaVv3//znP3etDthafX33N7/5zVR9ftNwrthvM2Jl9AK8O3Ka
sXdz5Xe/+13T1RJCiH4H+WRDsjH63F6DNROfr6p0ti+99FJ8j7/97W8V1lKQ
/8i9H/z2BzLkp/rRj34Ux30V2Rls7SbZODt5+4Zk4/xwZspf8zm3lATx04nF
POuss/YV1s8ycEbXrwMxKnoZntvWl9gAvRK71I/LQnnggQearpYQQvQ7Xnnl
laBs/LOf/azpqgUhdoefm7FMvBryPPeyD1d/BD26ezfTTz9909WpDeK6kSuc
51T8n+wMxnaTbJyNIn1DsnF+9tprr7Y1n5xOSRDD0z9ji39QGUaOHNlWhypy
KtYFZ4P8+i655JJNV6sP/x2Rn6uXbfBCCNGrYDMNyca94icU4pxzzmmpK7Iy
Mn4RyGNb9Xpcds/Q39lzzz1bfOTykKft6oyZ1aken376aYsPw3PPPVdbXQYS
g7XdJBt3pmjfkGz8/yBnI/nk//jHP0aPPPJI9MYbbyReO88887St+c8880zw
WmJ3+vGnRowYUbq+vk83uRo/+uij0vfNQ542O/roo3PpE7qJPwYo6B6EEELk
57777mubUzkD1Mv5BQFfalvnZZZZJvriiy9y3+eDDz6I1/6yoJ8llzL5r8aN
G5fpOy+88EKcV5c4rxRidl5xxRXR3XffHb3//vul6+TD+r/rrrvG55DIu1KX
P6vNHZZVNiYn6RZbbBGtvvrqqddxdvnSSy+NFllkkTgvsgX9CD4EtD97FuKz
5yHrOyRW6QorrNDS/8inXQTyzxD3jnNi5LpCr3DJJZfEckLVVNXfita5ynbL
Cv2FeLzHH398XGf6PfGG6Bt52rjs2OmWbFxlf3riiSfidtttt93i+xxxxBHR
vffeG8+zVcvGZfpGmmyM/uyuu+6KnwNbaZF5wdLN8RrinXfeidub/ArIlt/9
7nejnXfeOc5puMMOO7S0w2qrrRa8BzKwv+YjKyfBPJskEyJLnnjiibGfGW1y
yCGHZNo7PProo233XHbZZduue+yxx+KcEhtuuGH8fMQPzUsVbQZ+/wzpYTjz
e9hhh0Wbb755tP3227etUWlgpzjjjDPieWa99daL70G/zeKzTY5xv2433nhj
5t8WQgjxf5x66qltcyq57Xsd1rsZZ5yxpd5HHnlkV+vAWoacNmrUqGj22WfP
rEt+/fXXo80226xPpmedXnvttWP/Y3ePpZdeurJ60lac47J5UynYAtjTVLGv
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
HO09QjGPHHZ8U/BXrYKqxlSV80K3xqt/psMv+Om689dnnHFGsE7IZr6MF8qB
6woyfChmls1f5Qo5hvx34dtV8TsJzfXokqwNmMJ7drp37PHu76eddlqse+H3
3J4iKQ5aXW3m8PNNIQPb58Nv2vlSU190TGkQmyuUJ4C2YV+CD7mLvUEMsKSY
0367Uzg7h887Ogb+Tey1kI3bfW4LehIhhBjocJYobc3IUlhTk2CtsnYDVzbb
bLPKn4V10p37Qo+bxS+csvzyy8d6cXS9rK9JuWuwcZYBeYLzVfaeyy23XHBd
u+222+LPqUvIHoQ+2MntSfr3LLAXsWflkA/Yc/BO+e+CCy4Y7+9tDCx8y/Fn
RgeRxacyCXT0+OXb9uA3Q/mn+Zsf43TWWWeNffb9PRa6dV+Pj9xi48k42GNz
Pfodez02H+wPflylPO/QMnbs2JbvsJfHhoYdC182Yt+FYocS1yepP/qFvVfR
3N1V9rcq61y03bLAu/Vzqbg2oG9ztoTibGkbbLBBS0zbqscO+3d8IbL0rTzX
Wqp4N8g9yLjuOuZ3YvjaPNHYyPbZZ594TrXnjV0bVHGmJm/fYDwz19cxL1TZ
vp0gdlXSPclVaPVWoZhOyGYh+18ovxEFecz3IXa4GCWh9R0bL/OzL5/hu5xk
T8c33r+X1TkxptzfiZ/v9CP4oaXpOepqM4cdD67QP91cQP5Ixgk6+1DssRD+
OhMq+Jqn3c8fexT0y8zlnHVDF5rkK8SYDs2NITlaCCEGEuz9sqzjSSVLPBb2
0tbex96ojrgPhx12WOZ9SZHi57HICr5z0047beq9Waesfx9yvn0WfL5Ya0eP
Ht0XW4NzQ+eff37pdkP37/u7UdjT8xn4NhH24UXzWd10003BvEC2OL078Ufw
5QrpV+xaTzvstddeQZ9AW7BNk2MT2Mt3OkvAvbmuyDu0sP8mVlPoe/itsX9M
ijXDeXfaO+l3eYZx48aV2rNU3d+qqnOZdsvK5Zdf3mb3sWWeeeZJjOdXxdjJ
0sd5VmLj5rk2iSreDftpZCnfxodtnbMRjG/GI7Zxex6V8UcM4ir847P2jSxj
t+i8UFf7dgKdrr0n50WRwXw5h3xi7hr8hPGnTZKlfFslbYidNm2tDunWk8YS
48Q/q+zDWLR1oB89/PDDfZ/7fhhciwyZRd6so80c+BNwJiXpfaMPI15WHtAf
sKexfs2uMBenxe12IIuHvovvR6e8Z5w1tudBXPH9uoUQQhQDHx7OBaHbTdK5
D1RY41hbsfWwV2RPRBsg+5ETCttBaH8/fvz4eK+APydrJPsC/ECPPvroOCZI
0hnvImBvIv4mezb8SslZZe9PXfGd5DN+uwzci/b4+OOPYzsc7ePagv0ucpq1
p+CPxt/4jLZz11M//kbbsb/hXu6+nJ3ifvydwvdC7Wyvt/flPfGbfAZF36EP
75SzutifkA84L5Y1pi17cWQe/J85j0bcVXKlVJWDvI7+VlWdy7RbFniP7MHx
G0WmI08NfiKPPvpox+9WMXZ4FtrE9XHbt/gbfc/t4fNcm0YV74Zxgc8B9lLe
DXZb5B97LhefA/oUeqM65v5OfcMfu1XOC2nUOV6pF+fb6aPkGk/KLYgvN9fg
CxyKHe1DW/IuacNO53RoF3QKVm5ydnrkac7TMp54/4yjsvkPgXdG3E/eM/fv
lIfeUleb2brhg098Nezp/BZxDcraWXkPxKDmvtSL8ZZ2jt1Cf2VuYg7Hn4I5
Ls9ZM/o5vn+0l3vHWXOYCCGEEEIIIcRgAD23b1MklrUYeLjc5viFCCGEEEII
IYT4P0JxNovE3Ba9D/4PvN+iuSKFEEIIIYQQYqDin98lvlMWX3PR/yDmF++4
yhzzQgghhBBCCNHf4ayuH6+MmH1i4EGMct7v5ptv3nRVhBBCCCGEEKKnIEez
709NPlwxsCAuPnHnyXEZynUmhBBCCCGEEIOZAw88sE02Pu+885qulqgQcjMP
GTIkWmWVVTLnZBZCCCGEEEKIwcTyyy/fJhtjYxQDhyuuuCLOY5Un55MQQggh
hBBCDBaeffbZaPLJJ2+Riyee+P9r70zArqjqP56WS1qggqGIuOCeu7iQgEug
SLiUK6KZooaglAsprpj7LokLZKa5JWaaO5pbImiammgJaaaJVpaWLaam8/9/
pufczj33zL1zZ87cufd9v5/nOU/JOzP3zJkzZ85vX0Q+t0IIIYQQQgghujyT
J0+ONthgg2jRRRetsRnTVlxxxWibbbaJDj744Oidd94pu7tCCCGEEEIIIURw
xo4dG8u+w4cPj0aNGhXX9Rk9enS01157Rbvuums0YsSI2Nd6hx12iBYuXFh2
d4UQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQAXnzzTejadOmld0N
IYQQQgghhBCiFO69996oT58+0WabbVZ2V4QQQgghhBBCiJbx4osvxnbioUOH
Rp/4xCfitvXWW5fdLSGEEEIIIYQQoiXstddeFXnYbsOGDSu7a0IIIYQQQggh
REt4//33o7feeiv6xS9+EW266aYV2XjUqFFld00IIYQQQgghhGg5Z555ZkU2
3mOPPcrujhBCCCGEEEII0XIuuuiiimy83377ld0dIYQQQojcfPzxx9GHH35Y
djeEEEJ0EBdffHFFNh47dmzZ3RFCCCGEyMRHH30UPf7449EJJ5wQ9e/fP7rl
llvK7pIQoiAWLFgQ/fjHP47OOuus6Oyzz44uv/zy6Iknnoj+85//lN010cHY
svHBBx9cdneEEAF4++234/3hgw8+GP3ud7/rkt8J8ib8+9//LrsbQhRCq+c3
a8Tzzz8f/e1vf2vZb4bkjjvuiPOMLrfcclU5RmfNmlV210QX4Z///Gf0y1/+
MvrHP/7RpX6r03jvvfei6dOnRwMHDvTmFaYNGDAgeu6558ruakeiuSfZWHRf
Pvjgg+iHP/xhNH78+GibbbaJPve5z0X9+vWLBg0aFB133HHRG2+8UXYXm+bV
V1+Ndtttt5rvxGKLLRatu+660cSJE6Pf/va3ZXczE3PmzIkmTJgQDRkyJFp5
5ZWjxRdfPL63ZZddNn5mp59+evTyyy+X3c2W869//SvWnVOXr4jGd1IUT5nz
m73mVlttFf9ejx49okcffbSQ3ymScePGRb169apZ+x5++OGyuya6ANddd120
9NJLx3NqqaWWiq655pou8Vudxl133RXLvYzNJz/5yejEE0+MHnnkkWjw4ME1
7/6IESPK7m7Hobn3XyQbi+7Gu+++G02ZMiVaYYUVEnWONNYH9qPErHUCyPqb
bLJJdNVVV0V//etfo/nz50dTp06NevfuXXVfkyZNKrurqWHPjp/UmmuuGS26
6KLRLrvsEt16662xLIidi7+Tb597+vSnPx3rAJAvOtX2lQViYerN47ztRz/6
Udm32GVpl/l97bXXdol6jsQWu7pBdA5C5OH3v/99tMQSS1TNK3RX6KI7+bc6
DeIkzJgsssgi0Q9+8IPK3xYuXBj17NmzatxWW221EnvbeWju/Q/JxqI7cf/9
90errLJKU7LB+eefX3a3U3HDDTdEBx54YM2/v/POO9E3vvGNWNb/zGc+Ez3z
zDMl9K557rnnnop+eO+9945eeumlusdjD19nnXXi49dbb72OtY83C7FVn/rU
p6rm7PXXXx+9/vrrdRvfO+bCT3/609h/4pJLLonGjBkTLbPMMh05/zuNdprf
N910U9Uz/9KXvhTs2q0G3YJ9L08++WTZXRIdDjHrvr3BzJkzO/q3Oolzzjmn
ajz23HPPmmOwKaNjNLIzscciPZp7/0OyseguPPTQQ7EPDnqxgw46KLr55ptj
2YB/v/DCC6O+fft61wVsNZ0gZ02ePNn7vTBgg+oE/1h8hEePHh2PPbayGTNm
pD73j3/8Y9SnT5/43FVXXTWOu+4OnHzyyVVzlnvHPyIL2CS/+c1vVq51+OGH
B+5t96Yd5zf21lGjRsXXXXHFFaNnn302yHXLAF2R/S508r2I9gDfDd/e4Oc/
/3lH/1anwP6LtdK2GRMP64NxuuCCC7plfFVeNPf+h2Rj0V1gz7T77rsnyrnk
Hdhwww29a8PVV1/d4t42D7IxeWg6Qf5N4q233qrEPRJnmWVfiw3UPDf8K7sD
+NNvttlmVXPW50PQDMcff3x8HWQmEYZ2n9/0r9Pz9jGm9nswb968srskugD7
779/1bxCv9UVfqsTGDlyZNV47LTTTmV3qcuiufdfJBsL8T/I7eyTjU866aSy
u9aQK6+8Mu7raaedVnZXMoHOgrhL7gHb/s9+9rNM16GGC3FG5tk99thjgXva
nrzwwgvRkksuWTVv8S/NCvL26quvHq2//voBe9l90fxuDeTatt8B/luIENx+
++1xDpLbbrut8Dwkrfytdgb7sLsfk690sWjuSTYWwgabiStf0G688cayu9YQ
8ijga0RM8W9+85uyu9MU+P+SR9v4S2Eby8NRRx1VeXbkN+ouEBtgz9vll18+
9sPNcz3i1EU+NL9bR3eQjanLR72qPfbYo9LuvffesrslLPSMwnD00UfX7Mde
eeWVsrvV1mju5UeysRDVUD/FXofZyzbKk9MuDB06NO7zpptu2jG1f9FLsr83
433ooYfmviax5OZ6xCl1yljkhbGkHpk9f3feeefM12Pec40///nPAXvZnjB2
xOQXcV3N7+yQf3brrbdOre/rDrKxm1+ANnfu3LK7JSz0jPKDrYL8B/YYomMU
9dHcy49kYyH+B7WPyNdlrymdlIvozjvv7Lh+n3rqqZU+f/azn43+8Ic/5L6m
6xtP/cMQUPOaOZKXv//973Gu6CJAp8442vePv31WqPv91FNPBexhezJt2rQ4
x2lon4tOmt/tBnnhNt544/ge08ZmdwfZ2PggmEZ+tu7q+9iu6BnlB1unK+NR
c0PUR3MvP5KNhfgf5513XtWa8oUvfCHO0dVJbLDBBpX+k5O/nSGXJPXzTH/P
OOOMINeltrP9HO06iHmgfjQxo/ivZwUfZ2J4i6y9+L3vfa/q/pHJsuZap9Zt
d6hxTC0rxopaIaHotPltINa8bLDh2z4QL774Yqrzurps7N4f7ZBDDim7WzW8
//778Twlxy35b/OsmZ1GpzyjdmffffetGcfu8C3Kg+ZeGC666CLJxkL8P3Pm
zKnax7Ke8H3vNKhta+6BXLjtXLedmBjTV3ynqG8TAteuFqpGLzkqqCVMXdos
ez3kYmrT4qd/1VVXBelTEvhS22MwePDgOI9Ts1AnqNP0Q1lg7vXo0SPWh4Wi
k+Y3dgX0A9Q2Jud9IxYsWBDXRT7llFPiht2dOpjUxPvLX/6Sqy/UZN9+++2r
7jHtOlZPNsZH88EHH4z3Pccee2ysq3j44Ycz95PaB8cdd1z8nPfZZ59o0qRJ
cZ35InzzDd/61rdq9r74CyVBnUL6tfnmm0crrbRSnD+APAToUN06N+Q4Qm/X
q1evODcwz7ge+EBMmTIlzmVPDUT0hkcccUQcXz9+/PiqPiblFr7//vujww47
LNY7rrDCCnG+D3R55AKyIW7gzDPPjIYMGRL17Nkz/raRm/+ss85KpcshLoRn
M3HixLieODneJ0yYEM/hevXuuDa6J8aDeKuNNtqooQ9Ds88oz28B/kz40RJT
xTrD8+V5816Sez4NrXoOaSGeh5yF7jhyr0nwfnMfyDLUA+jfv38cc8K9MD99
z4D1asSIEVWtnn601eNEfXb6Q91RYnOIySFfRdK3XHMvDNQBk2wsujvsj3gn
eQ/YM2TNIVsmr732WrzfW2WVVWL5zbzXw4cPz3Q99LPseah1G8KP2IX4F3v9
Zv8WCvpuXxt/gFCw/zfyMWOeFvaRRi7Grls0/F7v3r2rxiGkTbQrMnbs2Pj5
IE/kpRPmN/ICeQbZb7FupLFvM+eNPQd9C7LQrrvuGtePM+cPGjQo663F/g2u
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
U+bMmRNNmDAhGjJkSLTyyitHiy++eLxPWnbZZaNBgwZFp59+evTyyy8X8tvv
vfdePD/5vR49ekSPPvpoIb9TNOPGjYt69epVtc+kPfzww2V3TQghqvjBD34Q
rbHGGtEiiyxStV7xHRBCCCG6Gi+88EK0/PLLV33zdtttt7K7JdoIZNKzzz47
WnPNNaNFF1002mWXXaJbb701WrBgQWzH5e+/+MUvokmTJkWf/vSno8UWWyze
N4W27V577bVV83TYsGFBr99KiC3mPbPvB72DEEK0I+76e+SRR5bdJSGEECIo
r732WtSvX78a+5VkY2G45557ogEDBsTzgviyl156qe7xv/3tb6N11lknPn69
9daL/zsUN910U9U8/dKXvhTs2mWAfsG+nyeffLLsLgkhhBf0oEsvvXRlvfrW
t75VdpeEEEKIYLz99tux7OLKxZKNBfzrX/+KRo8eHc8HbMEzZsxIfe4f//jH
qE+fPvG5q666ajzXQoCtddSoUfF1V1xxxejZZ58Nct2yeOKJJ6reu06/HyFE
12a11VarrFcnnnhi2d0RQgghgoCM8cUvfjH+vrn5NSQbi7feeqsS10sccRaZ
7Yc//GFh84n+YcPodBhX+72bN29e2V0SQohEjE8Q7ZRTTim7O0IIIUQQvvGN
b8TftpNOOik65phjJBuLCvhAE1fMPFhiiSWin/3sZ5muQ30i28bw2GOPBe5p
50O+bfu947+FEKJdWX/99Svr1ZQpU8rujhBCCJGb73//+5XY0Y8//liycRvx
wQcfRL///e+jn//859FPf/pTb3vwwQfjGpNF8O6770brrrtuPAfISYrtNw9H
HXVUZU6Rv0tUI9k4md/97ndxnas99tij0u69996yu5WLdr6ndutbu/VH/BfJ
xkIIIboSjz/+eGwLxF+W3MIg2bhc3nnnnWjq1KnRDjvsED8bX/y328iHEhr0
JMiv5jcOPfTQ3Ne8+eabK9cjZrmVdZDLYOHChdHWW28d1wNNg2TjZE4++eSa
eT937tyyu5WLdr6ndutbu/VH/BfJxkIIIboK7NvJX7TKKqvEuZIMko3LgVxX
p512WtSzZ894zD/72c/GeaZOOOGEWFbGvn/11VfXNGpNFlHr59RTT608f/ry
hz/8Ifc10cXY8+qRRx4J0NP2hHpVG2+8cVM5tSQbJ2P8F0wjtxv6m06mne+p
3frWbv0R/0WysRBCiK7A+++/H2255ZaxvdHN9yPZuPW8/PLLFTlqk002iX2X
yY9WZn8WX3zxyvM/44wzglx3/vz5VfMKuT4k+KC3A/hgbLPNNpX7fPHFF1Od
J9nYjzsutEMOOSTY9VkPmZvELlCXmziGoin6nvLQbuPdzmPVDpSZh1CysRBC
iK7AcccdF3/LLr300pq/dbpsjL3ul7/8ZZy7OOnv7cRzzz0X537Gf/qCCy5o
C1sIcX3m2eNbgE07BK7d+Pzzz899TcaLuGtqG0+ePDnVOQsWLIhrI5NXlTZt
2rRo5syZ0UMPPRT95S9/ydUffOK33377qvt89dVXU51bTzZm/0ts+UUXXRQd
e+yxsb7i4YcfztRHakWxBvCc99lnn2jSpEnRDTfcUImrKII///nP8W9MnDgx
zm3AmjJhwoT4ORDXXg/qprpr0p133tnU7+P3wN4dX4y+ffvG+eWOOOKI+LfH
jx9fde2ddtqp5vxnnnkmHqfNN988WmmllWK94vLLLx9tsMEGsS7J5vLLL49l
hl69ekUjR46M51sR99SIrGPeDuMduj+MxfTp06Mjjzwy+spXvhKNGTMmfpfe
fPPNpq4TCvQC9IW4aWofpY27MBCPcuONN8a6VDevIfkTr7zyyng9zLNOGPie
Mlbki+AdOPvss2OfH/IrSjYWQgjR6eB/+8lPfjK2a/nksE6UjbFDUG+Xfeoy
yywTbbfddtHqq68e7/v//ve/x8f885//jOvz8m1vF/BrX3nllaOlllqqbfyL
ieGzn33I8frRj35Ude3zzjsv03XY57IvJAaamIC09u3XXnst2nfffeNjBw8e
HO/Vd91112i55ZarXGPQoEGZ+gTsSV3fTxq/efDBB9c0fOVtfLIxMjGy++c+
97ma69I+//nPx/qVNPz617+Ohg4dGr//xJKzx7344otj+Y1r8e4gP4QEeZs5
xBznNwYMGBDLlPY9rLDCCtEdd9wRH0/OpQMOOCDab7/94obsYPswmEbNOXMM
7bbbbvP+PmvDOeecE8cFcB46KO6d585/I+sutthiVddGT2Kf//Wvfz3ORcf4
MHb2sdwXa4s5lr67faXOTch7Cjnm7TbeofuDXgodkPlNvgsmbsXM+VauvegM
DjrooHg+2fez6KKLRl/72tfq6qcYG75zfMfsNQudI/B+8y671252nTDcfvvt
8Tf1U5/6VKzjQEdBTQu+r+iG0Jt+5jOfkWwshBCiY2EPh/6ePZNr6zB0mmyM
vyq6c77f1KAyfrXotNHLDxs2LP5v7Cbcy09+8pMyu1sF9hL2Mffcc0/ZXanA
PtN+9llqGSeB7cG+9nXXXRekj6bVs0NjH0Ie4DhsaTa8F8ZWzl6euZMF9pG+
fiU19FM2rmyM3Mqeln0z8hVyLXKOex3k5kb2bmpv9ejRI5ZZfPl9sTOZ6x1/
/PGZ7t+Fd5FcZOa6pv4p+qqBAwfWyJj4J+Ar28wYmobvgAs2Stu3fa211orl
C8NGG21Ucx1kDjtHnJHpsJkxT3gG9vHIbob9998/U9+buafQY570LpU13iGf
P/Z7I7shA5t5/+ijj1adix9AKyBnRL9+/eJ1Cpn9vvvui3V0dl+++tWvJp5v
1xK2G/pu8lIsueSS0XrrrZdrnQDmEPogztl0001jnZ+LHQdkmmRjIYQQnQb+
dHzDvvOd7yQe00myMb6h7Pfp41VXXVXzd2Qc9on423IMcujbb79dQk9rufvu
u+M+HXbYYWV3pQJ7VDOeNPZZIUFXYc+r+++/P/O1sJFgy7CvV29eGz/nHXfc
0ft3fCjMvh77chbw18emTRy13S98EtlfIvviS4mP46xZs2r8+13ZGJ0Pxxm7
pAF90Be+8IWqY+vJsy+99FLFjnfZZZclHmfLfXn9MMGu2UV74403Kn/Dh9S2
OaHb4j5ff/316Kmnnqo0cui769FZZ51VdYwvnpvnYMuC+Bf86U9/qjrGjh0w
7fDDD6/8HT0a/4b8CP/4xz9qbJj4J8MVV1wR2yZZa1zbMvrIEPdUxJjj790u
4w2hnr+b19quP0d8s3tNYiGKgnUVHxfWVr5ZNviFfPnLX670g2+UzwcfyEGB
HGz7MRv9Atd3YzeaXScM+Ftx7Kqrrlo3Bgk7tG2jlmwshBCikyCWku/YkCFD
6sa0dopsjByBLYD+ffOb30w8DtukuQ/03O0Cfmno+dlTtgtGFjANW0RI8Fe2
94Du3rlZyK9u9xc7kQ/y/ZhjmN9JMKfoF+9KHpAr7X6lzfHtysZPP/104rHs
5c38p2FfTsKMO/axevnK7LhO5Jg8sKd2ZUTXXo1fvPF1Pf3002uugW7L2PpN
Q7ZrFBeNDGHbTrG7u7I+Mknv3r1r1jpkLQO6IfxvzTtKjKt9LHXIkJfRe2CD
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
5C8+7rjj4hq47I9EOtg/UiPFlYup9ZE2x7kQQpQNdYep1b7jjjs2rDclhBBC
CNFuUHsZ2yT1d8mF3K9fv6hv376xLZgcWuSZ3nvvvcvuZpeHOtHbbbddXOOS
HODY3BvpJIQQop2YOXNmnCchZI0tIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBDd
j48//jiaO3dudMEFF0THHXdcNG3atOjhhx+O3nvvvbK7JoQQQgghhBBCFM6d
d94Zrb322tEnPvGJmrbmmmtGDz30UNldFEIIIYQQQgghCmPy5MmxDLzccstF
W2+9dbT55ptHSy65ZJV8vOiii0ZPPPFE2V0VQgghhBBCCCGCc8IJJ0Trrbde
dNddd1X9+x/+8IfowAMPrJKPN9poo+ijjz4qqadCCCGEEEIIIUQxPPDAA9E/
//lP79+Qg7/0pS9VyccLFixocQ+FEEIIIYQQQohyee6556pk41tvvbXsLgkh
hBBCCCGEEC3Hjj2+8sory+6OEEIIIURbQa2PDz/8sOxuCCGEKJjevXtXZGNq
OgkhhBBCdHeIPXv88cfj3C39+/ePbrnllrK7JNoY4hJ//OMfR2eddVZ09tln
R5dffnmc5/Y///lP2V0TQqSEdZ8c1cjFPXr0SIxNFkII0V5Qm549u/JEiHq8
//770b///e+W/R5ywPPPPx/97W9/a9lvhuaOO+6I9tprr7i+hx13NmvWrLK7
JtoM1uHp06dHAwcO9NZJpQ0YMCCOYRRCtD/kqzbv7mGHHVZ2d4QQoltDrfnT
Tz89uvDCC+P91rXXXhvbqqg1wP9effXV0Xe+8534GLMXe+qpp8rudiLsG//x
j38Ea9LfNmbOnDnRhAkToiFDhkQrr7xytPjii8fzZNlll40GDRoUz52XX365
kN/meW+11VYVffujjz5ayO8Uzbhx46JevXrVyDjyrRM2rMvIvcyNT37yk9GJ
J54YPfLII9HgwYNr5s6IESPK7q4QIgU333xz/M4us8wy0RtvvFF2d4QQottC
LKNrp2rUVlpppTgOsh058sgjm7qXtG2HHXYo+9baDmRSfDjXXHPN2Bdsl112
iXNr4lOAHZe//+IXv4gmTZoUffrTn44WW2yxWH4ObdtFl2M/q2HDhgW9fivh
fdxtt92q7ge9gxCAz46ZF4ssskj0gx/8oPK3hQsXRj179qyaO6uttlqJvRVC
pGW77baL39mrrrqq7K4IIUS35rHHHmtaTmxnf58333wzthvefffd0WWXXRZ9
6lOfqvR7qaWWiq6//vrYDjd79uyadv/998d/v+iii6IxY8bEspw5F9tnK3nn
nXeiX/3qV3Hcadr2y1/+MvZlbgX33HNPxXa19957Ry+99FLd43/7299G66yz
Tnz8euutF/93KG666aaq+UmdyE4G/YJ9P08++WTZXRJtwDnnnFM1L/bcc8+a
Y7Apm5hFZGdij4UQ7c2vf/3r+J0dPnx42V0RQohuz6mnntq0bIxc1Al88MEH
VTURDj300KbOxw5jfHWR/4oE3230xbvvvnvsF5zVvn3ccccV2s9//etf0ejR
o+PfwhY8Y8aM1Of+8Y9/jPr06ROfu+qqq0Zvv/12kD5hax01alR83RVXXDF6
9tlng1y3LMijZD/TTr8fkR90Sbxvts0YXZiPn//859EFF1xQWAyDECIsO+20
U/TZz342+t3vfld2V4QQotszdOjQpmSvz3zmMy3NsZQHfFHzyvTY7Dj3mGOO
KaCH/81ZRZz35z73ufh3iNPdfvvto8MPPzyO0b3kkkuiadOmpWrf+973otde
e62QfsJbb71V0RUQR5xFZvvhD39YeR74DofuX1fIzcu42vN23rx5ZXdJlMzI
kSOr5gR7aSFE5/Pd73431nXdfvvtZXdFCCG6PeSYMjmTkMPwQ545c2YsY02d
OjX+N+LbqA1Cji7+hu9up3DmmWdW9pL4Vr/77rtNXwObJPluyEUWmt///vfR
lltuGfdvjTXWiHOe/f3vfw/+OyHAbkVcMX1dYoklop/97GeZrkOdCmIgzXPB
p19UQ75tWw7iv0X3Bfuwq6OUr7QQnc8rr7wS24vZqwghhCife++9N95nrbvu
umV3pRDIn2X2ktg7s9K3b9/otttuC9iz/8YXLb/88rHcfcYZZ8QyeLuCToE5
Ynw5sf3m4aijjqo8F/J3iWokGxcLfovUytpjjz0qjbWwXTn66KNrZGP21KIz
aef51059a6e+FAH5TLfddtvC47WEEEKkBz/hLHG4nQCxxksvvXSQOFxiWJ9+
+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
QgghhBBCCCGEEDn5PzVgBFQ=
    "], {{0, 410}, {967, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{430.9999999999999, Automatic},
  ImageSizeRaw->{967, 410},
  PlotRange->{{0, 967}, {0, 410}}]], "Input",ExpressionUUID->"0d149315-403d-\
4b4f-a454-37bb66a87494"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Protect", "[", "\[Epsilon]", "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "\[Epsilon]", " ", "will", " ", "be", " ", "used", " ", "as", " ", "a", 
    " ", "symbol", " ", "to", " ", "denote", " ", "the", " ", "empty", " ", 
    "string"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Transition", "[", 
    RowBox[{"parent_", ",", "child_", ",", "inputSymbol_"}], "]"}], ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Parent\>\"", "\[Rule]", "parent"}], ",", 
     RowBox[{"\"\<Node\>\"", "\[Rule]", "child"}], ",", 
     RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "inputSymbol"}]}], "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"EmptyTransition", "[", 
    RowBox[{"parent_", ",", "child_"}], "]"}], ":=", 
   RowBox[{"Transition", "[", 
    RowBox[{"parent", ",", "child", ",", "\[Epsilon]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FATransitions", "[", 
    RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{"transitions", ",", 
     RowBox[{"KeyValuePattern", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Parent\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Concatenate", "[", "l_", "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Join", ",", "l"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.74863044954312*^9, 3.748630549858803*^9}, {
  3.7486306598174953`*^9, 3.748630694423757*^9}, {3.748632233538381*^9, 
  3.748632245553666*^9}, {3.7486942316328907`*^9, 3.7486942320239067`*^9}, {
  3.7486943237098417`*^9, 3.748694324963642*^9}, {3.7486946577550783`*^9, 
  3.748694659233904*^9}, {3.74889494655582*^9, 3.7488949594597397`*^9}, {
  3.750262163674677*^9, 3.7502621646742783`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"31d7f42a-029d-48ad-a73a-d3afc3746dd0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NameTag", "[", 
     RowBox[{"machine_Association", ",", "state_"}], "]"}], ":=", 
    RowBox[{"Subscript", "[", 
     RowBox[{
      RowBox[{"machine", "[", "\"\<Name\>\"", "]"}], ",", 
      RowBox[{"ToString", "[", "state", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "FiniteAutomataPlot", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Legended\>\"", "\[Rule]", "True"}], ",", 
     RowBox[{"\"\<Labeled\>\"", "\[Rule]", "False"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FiniteAutomataPlot", "[", 
    RowBox[{"machine_Association", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "graphData", ",", "startTag", ",", "acceptTags", ",", "legend", ",", 
       "graph"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Labeled\>\"", "]"}], ",", 
        "\[IndentingNewLine]", "True", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graphData", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"KeyValuePattern", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"Labeled", "[", 
              RowBox[{
               RowBox[{"p", "\[Rule]", "n"}], ",", "i"}], "]"}]}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"startTag", " ", "=", " ", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}], "\[Rule]", 
           "Red"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"acceptTags", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"#", " ", "\[NotEqual]", " ", 
                RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], ",", 
               RowBox[{"#", "\[Rule]", "Green"}], ",", 
               RowBox[{"#", "\[Rule]", "Purple"}]}], "]"}], "&"}], ",", 
            RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
         ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "False", 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graphData", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"KeyValuePattern", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"p", "\[Rule]", "n"}]}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"startTag", " ", "=", " ", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}], "\[Rule]", 
           "Red"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"acceptTags", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"#", " ", "\[NotEqual]", " ", 
                RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], ",", 
               RowBox[{"#", "\[Rule]", "Green"}], ",", 
               RowBox[{"#", "\[Rule]", "Purple"}]}], "]"}], "&"}], ",", 
            RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"legend", " ", "=", " ", 
       RowBox[{"PointLegend", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"LightBlue", ",", "Red", ",", "Green", ",", "Purple"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          "\"\<State\>\"", ",", "\"\<Start state\>\"", ",", 
           "\"\<Accept state\>\"", ",", "\"\<Start/Accept state\>\""}], "}"}],
          ",", 
         RowBox[{"LegendMarkers", "\[Rule]", 
          RowBox[{"Graphics", "[", 
           RowBox[{"Disk", "[", "]"}], "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"graph", " ", "=", " ", 
       RowBox[{"Graph", "[", "\[IndentingNewLine]", 
        RowBox[{"graphData", ",", "\[IndentingNewLine]", 
         RowBox[{"ImageSize", "\[Rule]", "400"}], ",", "\[IndentingNewLine]", 
         RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"VertexStyle", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", "startTag", "}"}], ",", "acceptTags"}], "]"}]}], ",",
          "\[IndentingNewLine]", 
         RowBox[{"VertexSize", "\[Rule]", "0.1"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Legended\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"Legended", "[", 
          RowBox[{"graph", ",", "legend"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "graph", "]"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.748703583696494*^9, {3.748717335552705*^9, 3.748717369089313*^9}, {
   3.7487174584052687`*^9, 3.748717459193922*^9}, 3.74871753815415*^9, {
   3.748717731275473*^9, 3.7487177431597853`*^9}, {3.748718023462709*^9, 
   3.748718024784854*^9}, {3.748718258122054*^9, 3.748718320605734*^9}, {
   3.748719213952038*^9, 3.748719215649395*^9}, {3.7488011555571203`*^9, 
   3.74880115834823*^9}, {3.748880460505911*^9, 3.7488805567965927`*^9}, {
   3.748880603048099*^9, 3.748880621274437*^9}, {3.750264951084629*^9, 
   3.750265014789797*^9}, 3.7502651890345573`*^9, {3.75045790436664*^9, 
   3.7504579050717087`*^9}, {3.750457965215435*^9, 3.750458042670035*^9}, {
   3.75045810531732*^9, 3.750458170800473*^9}, {3.750465993589058*^9, 
   3.750466003810172*^9}, {3.7628897812232656`*^9, 3.762889786449963*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"12bae02c-f6f8-47ab-9ab5-f8b6ebb6a3ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"DFA", " ", "object", " ", "constructor"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"DFA", "[", 
      RowBox[{
      "name_", ",", "transitions_", ",", "start_", ",", "accept_", ",", 
       RowBox[{"stateExpr_:", 
        RowBox[{"{", "}"}]}]}], "]"}], ":=", "\[IndentingNewLine]", 
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}], ",", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Descriptive", " ", "name", " ", "to", " ", "keep", " ", "in", " ", 
         "track", " ", "the", " ", "regular", " ", "operations", " ", 
         "applied", " ", "to", " ", "it"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<DFA\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Transitions\>\"", "\[Rule]", "transitions"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<StartState\>\"", "\[Rule]", "start"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "accept"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", "stateExpr"}]}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Each", " ", "state", " ", "may", " ", "have", " ", "an", " ", 
        "associated", " ", "expression"}], " ", "*)"}], "\[IndentingNewLine]",
       "|>"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Return", " ", "every", " ", "deterministic", " ", "transition", " ", 
     "leading", " ", "to", " ", "state"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DFATransitions", "[", 
      RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
     RowBox[{"Cases", "[", 
      RowBox[{"transitions", ",", 
       RowBox[{"KeyValuePattern", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Parent\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Get", " ", "the", " ", "next", " ", "state"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "DFAIterate", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DFAIterate", "[", 
      RowBox[{"transitions_", ",", "state_", ",", "inputSymbol_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "next", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"next", " ", "=", " ", 
         RowBox[{"Cases", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"DFATransitions", "[", 
            RowBox[{"transitions", ",", "state"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"KeyValuePattern", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
              RowBox[{"i_", "/;", 
               RowBox[{"MemberQ", "[", 
                RowBox[{"i", ",", "inputSymbol"}], "]"}]}]}], "}"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "A", " ", "DFA", " ", "must", " ", "have", " ", "only", " ", "one", 
          " ", "available", " ", "transition"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "next", "]"}], "\[Equal]", "1"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<Trace\>\"", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Return", "[", 
             RowBox[{"First", "[", "next", "]"}], "]"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Return", "[", 
              RowBox[{
               RowBox[{"First", "[", "next", "]"}], "[", "\"\<Node\>\"", 
               "]"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"TODO", ":", " ", 
            RowBox[{"Crear", " ", "mecanismo", " ", "de", " ", "alerta"}]}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Returns", " ", "the", " ", "trace", " ", "of", " ", "the", " ", 
     "computation", " ", "and", " ", "the", " ", "result", " ", "of", " ", 
     "whether", " ", "the", " ", "machine", " ", "accepts", " ", "the", " ", 
     "inputString"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DFACompute", "[", 
      RowBox[{"machine_Association", ",", "inputString_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"computation", ",", "result"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"computation", " ", "=", " ", 
         RowBox[{"FoldList", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"DFAIterate", "[", 
             RowBox[{
              RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{"#1", "[", "\"\<Node\>\"", "]"}], ",", "#2", ",", 
              RowBox[{"\"\<Trace\>\"", "\[Rule]", "True"}]}], "]"}], "&"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"<|", 
            RowBox[{"\"\<Node\>\"", "\[Rule]", 
             RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
           ",", "\[IndentingNewLine]", "inputString"}], "\[IndentingNewLine]",
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
           RowBox[{
            RowBox[{"Last", "[", "computation", "]"}], "[", "\"\<Node\>\"", 
            "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"computation", ",", "result"}], "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7486944026200647`*^9, 3.748694431856285*^9}, {
   3.748694463718862*^9, 3.748694511118013*^9}, {3.748694638883589*^9, 
   3.748694682179003*^9}, {3.7486947181076593`*^9, 3.748694744613942*^9}, {
   3.748695667903243*^9, 3.7486956915023117`*^9}, {3.7486958274053373`*^9, 
   3.748695899653247*^9}, {3.748695946982939*^9, 3.748695947502063*^9}, {
   3.748695997879771*^9, 3.748696002073357*^9}, {3.74869611727765*^9, 
   3.748696163820511*^9}, {3.748696233292552*^9, 3.748696413377371*^9}, {
   3.748696491389463*^9, 3.748696524052392*^9}, {3.74869658995395*^9, 
   3.748696593760084*^9}, {3.748703307880711*^9, 3.748703326225828*^9}, {
   3.748703367086596*^9, 3.748703383678033*^9}, {3.748703419136819*^9, 
   3.748703454047913*^9}, {3.748703484657639*^9, 3.748703485296896*^9}, {
   3.748801149430265*^9, 3.748801150396734*^9}, {3.74889367469322*^9, 
   3.748893826840029*^9}, 3.748893895761705*^9, {3.74889402959659*^9, 
   3.7488940352397423`*^9}, {3.748894980807784*^9, 3.748895011747181*^9}, {
   3.75025561350286*^9, 3.750255745901127*^9}, {3.750255897147194*^9, 
   3.750255910369213*^9}, {3.750256208805339*^9, 3.7502562256182756`*^9}, {
   3.7502562694987507`*^9, 3.750256277587036*^9}, {3.750261486482411*^9, 
   3.7502615142919807`*^9}, {3.7502627764170923`*^9, 
   3.7502627866744547`*^9}, {3.7502652041189337`*^9, 3.750265256846733*^9}, {
   3.750265535917069*^9, 3.7502655647458143`*^9}, {3.750547336438621*^9, 
   3.750547372594603*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"a7881061-cda5-4880-93b1-dea8fe53412d"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQfYFTX2uNeGYAUVEQuKBQVXQbEgKmIvWFGxF2yIrigqFqyooKIu9i4q
1sWGomJvqKCLvYAN7B1c1l7W+e+b3z935843JclkbvnueZ9n9ONOSzk55yST
nHQ84Mi+h8z5l7/85ZiW//1P3/7Hb3z00f1P3Ln1f/+x66BjBg4YdPBBWw86
9uABBx/d44C5/vvjJf/9z6z/HnP/9+9AEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEIS6Z/bs2cG3337rfLzzzjvBLrvsEsyYMcP4nX/+
+Wcwffr0YPLkycHjjz8evPzyy8FXX33llP7ff//dKr3fffeder8tSc/76aef
jO7/17/+FXv/Dz/8YJyGWbNmxT7DhqR0/Oc//7F6jiuUl019mZZvmDzy/MUX
XwTXXHNNcOaZZzZ5bhFthXK3lYs8cvD9998bvcsmXYcffnjwzDPP5Cqbhx9+
OBg8eLBzGrLwqXOgEnXgE5/5r4bNMOWbb74JXnvtteDJJ58MJk2aFHzwwQfe
y9a3LFXatvzyyy9W9TVz5kwj+xAnF9zrWgY//vhj2TVF6Zkk8tpb0Yu1rxcF
QRDqjXPOOSeYY445gr/85S+5jvfffz/1PfgKY8eODbbffvugTZs2sc/o2LFj
cPDBBwfPP/+8cfrfe++9oHv37lZpbdGiRdChQ4dg4403Dq6//noj/6hXr15N
njPnnHMGEyZMMEon+YpLy+jRo43z2q9fvyb3b7DBBsb3w+mnnx7MM888Zc/o
3bu38v0qAX7IQgstZFVf888/vyp/+tJZPsWvv/4arLLKKrnl+dhjj23y7CLa
Cv2Mtddeu+w85XPbbbcl5nGnnXZq8kzalAnXXntt0KpVq7J7r7vuuibX2aRr
9913z10mHPvvv79zGuIoSudAJeogL0Xlv1I2wxTSfuCBBwbLL7984ruWWmop
JaeXX365U7+kSFmqtG157rnngnXXXdeqruaaa65gySWXVPddeOGFavw7ysiR
I5vYlr59+xrlYZ999im7b7755gv+8Y9/lF1TlJ5JIq+9Fb1Ym3pREASh3unU
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
bfHFFy9df++995adJ0ZTdA+gCRMmZOalnvvt+B3he5HdKI3cbwdiZUfTwbcy
7fc3x357pXVOperAlErnvxr9dvY8Cz8zGhPNF5Uuy2rYljz9dvZZHTBgQGxs
v3rutxdlb4tIr+hFQRCExiXqg7EvSNyeJJ9//rna8zZrfuLRRx9d9rwHHnjA
KV3R8dlHHnkk9rqoDVt22WXVXqXhIzrHj/mWzzzzjHFaknwrxorDtp5vJNG9
eZ588snSc2x8K/ZK0tdS5nzbYK1o+Bg8eHDZu1j/mUU999uJKRW+t1evXk2u
ifbb2XMnaX8jYjLj87j22/O2FfDdb2cebdLew8ynbY799krrnErVgSmVzn8R
7SAL+qctWrQo0/NFUOmyrIZtifbbWUsUtZn6QI7Jy9lnn63WS9N/TaKe++1F
2dsi0it6URAEoXGxjQ3MftppjB07tux52267rXWa8A3Cdhx/jbmDcZjYsN9+
+02tpwpft99++xmnJ8m3gksuuaSJHdJH9JuQqW9FepkLkPTctCP6nSBKPffb
2Yc5fO8hhxzS5BrbuHQff/yx8V7SvtsK+O63Az5mtJw5dthhh2DTTTc18o3q
qd9eaZ1TqTowpdL5L6IdmMDc5PB7GROwhW+O0XW1YSpdlpW2LeAaly6L6Pg4
4zmmhNcFpO3JGkdePVOkvS0ivaIXBUEQGhffe/owbqrjfekjaV5VHIzJRvf7
4t9JmNqwadOmBfPNN1/ZtXfeeadRmtJ8K/JLXKaoHWKv8TfeeKPsOaa+1fXX
X+/kQ3DoGLhJ1HO/fccdd8ysv0bbvz3ONwJ80fBeUfqYY445jHyjeuq3V1rn
VKoOTKl0/qu1D9xll11W9t4uXbqkfv+NAxnku3USlS7LStsWKKrfHtXtpnuO
TZ8+vey+/v37W703r54p0t4WkV7Ri4IgCI1LET7YNddc00QfE5f23//+d+p9
7OvDWHv4XtbTTZ06NfEem/7FlVdeWXYte94ylzOLNN8KovvEcLDvaRQT3wpb
yR6n+rottthC7b+TdAwZMqQszjLHHXfckZiXvP12xsuj8YhscO23E4cgfB/x
fdknIIqPfnvcc6Ge+u1APjbbbLNEn7O59NuhkjqnUnVgQyXzX61+O3tSEaM+
/G7mUb388suZ97KGduTIkWrsln5v2hyASpZlJW2Lpqh+O2UUfu7WW2+t7IXt
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
LLTQQsHZZ58dvPLKK8Hbb78dXH/99cEKK6xQsrPPP/98VdP5yy+/BJtssklw
ySWXBDNnzgxOOeWUYL755lNpK9LHbm7wbZ3xmcUXX7xUt4ztC/8HYxinn366
6rNSNq1bt652kgqBb174hi1btgzeeecd9Rs67rTTTiu1q8UWW6zKqSyuPhin
7Nq1a/CPf/xDfW8fN25c0KZNm1KbGDBggJf3RIkrd0GoJJWSQbHZ5dAvv/TS
S4OVV165pGemTJlifL5REB3ZfDG15yIDgg+aqz+/0047BS1atAheeumlJufo
z/Xo0UPl94EHHqhC6v7HQQcdFHTq1KnsN8biPvjggyqlqL4555xzSr7Br7/+
Wu3k1ByHHnqoKpv27dtXOymFcNVVV5Xq/7777is7R1vj92WWWaZKqWuKz/pg
fchSSy0VjBo1qux3dDx9DL4FFjW/KK3cBaESVEoGxWbHc88995TK/6233rI+
39wRHdn8ybLnIgOCT5qTP097IC/MjU/i3XffDVq1ahXcdNNNFUxZOd98842a
37D99ttXLQ3NjTFjxqi6Z6680JQzzjhDlU/Hjh2rnZRCYN4Fc8SHDRumvjeH
OfXUU1XeV1pppSqlrik+66Nv377BwgsvrObwVpq0cheESlAJGRSbncwLL7xQ
6pPEjWFknW/uiI5s/mTZc5EBwSfNyZ/fcccdVV4Y20qDOaOsu6oWrLMnnYMG
DapaGpobzFPUa3mFprBmhPJZccUVq52UinPmmWeqvK+yyirVTkoJX/Xxxhtv
qOf07NnTU8oEQYgiNjsZ1iLqfvmHH35ofV4Q6p1G9q+EytOc5I08kBfmTKfx
/vvvB3fddVeFUtWU/fffX6WTtbeCH4jrK/32ZPQ6gubQzm0566yzaq7f7qs+
mBvPc3bddVdPKSuGRosV2Wj51TTXfIvNTubVV19N7ZdnnReaH0XpgVrVL43s
XwmVpznJG3P9ycuqq65a03NR1l9/fZVO4gsIfpB+ezrNqZ3b0pz77TvvvLN6
DnHzaxVi8hC/q1FotPxqmnO+xWYnI/12IUxReqCW9Usj+1dC5WlO8rb55puX
7MNmm20WzJo1q9pJagL7vC666KKF+QDsi0ZM/UZD+u3p1HM7t5Fpro2u807q
t//xxx/e0miLj/pAl+h9FLK+AxJbP42vvvrKOR0QV+7w+uuvq7j2xNFtBCqZ
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
shw314exGZ1H+iFhorrNhC222EI9q0OHDk3khr6qfteMGTPKzjHeFxcji+8M
jAEydhonh/3791fPsx0P1mStb+fbv05z2P67lDdyoMfj+RYQhTaKfQn7dUXm
HxvG3AfuZ8wzjrR9I1zSxvgmvzH/KQp24L333iv9mzRhDyjLt99+u8n1jz/+
uDqPDQqPhdvIdPhaxo7C6H479iwJxue5hvklYVzKJm992JCmS4D8cB49Hwd1
leSfQlK70aSVe/j52t+KUmS7cNWlWl6S6gYfSNvcKFn5hby2Ru9JxprrOB57
7LFSncR9m8S30eej335cy8wk367PzsJUBl1lHNLamQ/fwUbX1Vr9513fTtvm
HN/i4qC97b333rHnXMnTxm1sHxQpn/r7KfOOo+jvK3xPdcU2r1l6oEj9UpQt
8WHP02TApUzy1LuprnGtqyL1k6085iWvvLq06Ur6j7UK87EYswj33SlL5meE
0WNQzD9Ii9Ww1157qetat27tPCcjzQdgTBBZiH4zRk51+uPm+YRtY7Qv7UJ4
Td+TTz5Zdu7pp58unWMeWxjmg1DmUfQ4KPN5WW8TPvbdd9/SvDX63S6+W1a/
nTTpNIfnNrqWtx4zRF70HBYN85Oi7bzI/I8bN07dyxhLEmlxLFzSRj3zG9+P
suSN53Atcp8EY5RRbGQ67VqTePJ8j9Z6OGxLXMomb33YkNVv1/PkGMOOw7Xd
aLLqKMvfKrJduLZt1pOl1Q1lzfnlllvOOr+Q19ZkvSPsl8WN2fKbPs+1YVzL
zCTfrs/OIksG88o4pLUzH76Dja6rtfrP22/XupC1StFn0//i21R4zrMP8rRx
G9sHRckn40X6d+bORjnkkEPUOfoertjmNUs2i9QvRdkSH/Y8TQZsyyRvvZvq
mqLqKo9+spXHvLiWQR6bU0n/sdZhHUJ47cVqq61Wdp65EPy+wgorpD5n2LBh
pWdEY2mZkuVrMzYfxabf7iNmK/0oHUOXccowrFfBnnEuHO+KcUTiLcSh+7ms
bWa8Lel44oknnNKb1U6IF6TLJxoXxKW8meukz4fjS+BnIFuff/552fVF5l/r
aWKKJJHWzl3Spp+n/VVkhJhzcbCegusYB7bBRqbTrjXpt4fzw7iUxqVs8taH
Dab9dnyXOPK0G8iqoywbXrRecGnbxMcw8elZqxbFxL/Ma2uK9IvApcxM8u36
7CyyZDCvjENaO/PhO9joulqr/7z9dr6RJaWH+mDun2/ytHEb2wdFySdrDPTv
xAWIovcIjYtJaoptXk30QFH6pShb4sOeZ8mATZnkrXcbXVNEXeXRT7by6AOX
MshjcyrpP9YDtNlwrKaPPvqodE7PcyNOShrEaNT3x62hMSHL1w7D+D0xTfU9
SXJSxF4rek0y45T6OwLPxpYRk1K3Hf29mbXwxP+Ig/4817MupwiI35jWTphD
leWbgWl5g46hQVwNDe2ZNTtRisy/jpMRTkeUtHbukjbGq4kzEo6xwcH4ZHQu
PN+XOMd3KRsq2W8Pt+vw3DGXsslbHzYU3W/Pajd5++1F64Uwpm3b1KePmz9i
4l/mtTVF99vCmJaZab/d5dlZ5O0XmdiGtHbmw3eopX57GJM6IjZ8WtqzzgNx
ATgfnRdEH4RYr77J08ZtbB8UJZ98I9Dru+LkUq9zjltjbIptXm31gE/9UpQt
8WHPbdp3VpnkrXfXvoKvusqjn2zl0TemZZDH5lTSf6wXdGxSjnBsA/1NkPUT
aej4GBzst+CCSb+dej322GPVtRdffHGpX5okJ0X024nnqp+p5+MQU5G5C3yP
1+v1mFPPvD9iNCStHSCON9cec8wxXtIWRa8XSWonxMpP881syxtov5xnHg2x
JgD9ETenr8j8E08ky29Ma+d50oasDR48uDQHjaN9+/Zl+1ZqO1Jkvz3NNzTp
t7OPgr6f9fYal7LJWx82ZOkSHaciqd+eNd6V1W6yfPIsG160XgDbtl10vz2v
rdF6p8h+m22Z2fjrLro2jSwZzCvjkNbOfPgONrqu1ur/+eefT0171nkg7hPn
WU+uv28xl9QlVqEJedq4xsT2QZHyqeeGs5YgHE9Hx85lrnRcnERbTPNqqgeK
0C9F2RIf9txk7MqmTPLUu21fwbauKqGfTOXRF7ZlkKdNV9J/rDasCTBpr3wT
1uUVjg/B3G9+YxwrDWLK6Pt1X82WLF+bsZrFF19c7ZulbVil58lr9Ddl9h1k
fg76QMd/1Ov1KDv2MmT/jST0t/ui7DB7Ybi2E5fyBuYZ6LUXxx9/vJo7n7RO
oMj869iSrOtKIq2d+0gbeo1xUF1md9xxR+mctqfR2KdZ2Mh02BYk9dvZNzMJ
He+ZIzwPx6Vs8taHDVm6hHixnE/qt2t/yLVPk1bu4efrvVyjFK0XXNo2e7No
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
n302c5+W5g57S4wePTqYPn2692fPmDEjOP/8870/N8rvv/8eTJo0KRg7dmww
fvx4tR+PIAj5KVI/1Br1atN8IbaxnOZgGwVBEIT65pNPPgm+/vprp3vZQ3Do
0KFB9+7dgznmmEPt21AvfaQffvhB7TfRoUOH0p4THI1oO9lPY8SIEcGGG26o
9quhHCZOnOjl2eyFM3jw4KBLly7qufPOO6+X58Yxe/bs4Ljjjgvatm1bVqfk
6bbbbivknXnaTxHPESrPzJkzg+eee67aySiMIvVDHvbZZ5/g4IMPDu64447g
/vvvdzoY1zvttNNU3GLyWcs2rVI6Qmzj/2gutrGa1IJtq4U0uFCv6c5Lo+Zb
ELJgDB1b1LJly+Cdd96xvp/vECNHjlR7LGrbzph0rfPLL78Em2yyidoDEp/7
lFNOCeabbz6V/qL6d7UMvsmll14arLzyyqV6nDJlipdn4/Oyf8f888+vntu6
dWsvz40yderUoGvXrmr/EL63jxs3LmjTpk0pPwMGDPD+zrztx/dzhGI58sgj
Vf9uiy22CHbYYQe1T80uu+wSLLPMMsEjjzxS7eQVRpH6wZUff/wxWGCBBVRa
WrVqFWy22WbBEUccERx11FHq4O8VV1yxlN6FF144OPzww0vnBw0aFOy6667B
kksuWbrm8ccfr1mbVikdIbaxnOZgG6tJLdi2WkiDC/Wa7rw0ar4FwYSrrrqq
ZIvuu+8+5+ecc845pef8+uuvHlNYDAcddFDQqVOnst8Y2/vggw+qlKLa4J57
7inV41tvveX12Yceeqh6bvv27b0+F5jPutRSSwWjRo0q+x2/CP+T70Tffvut
9/f6aj++niMUB99h55lnnrLvj/rA76a/09wpUj/Ycuutt6p08B00ad4ye2fr
9O6///6x12CvzjrrLHXNYYcdVvq91mxapXSE2MZ46tU2VptasG21kAYX6jXd
eWnUfAuCCXxbYF7xsGHD1DdKV8aMGaPaGPMKa51vvvlGzUfbfvvtq52UmuOF
F14o6UvfftoZZ5yhntuxY0evz4W+ffuq72nM76wkvtqPr+cIxcH8jbXXXlv1
7Q444IBgjz32UHJHPwc/oxEoUj/Y0qdPn2D99ddX392TuPfee0vppX2lcfbZ
ZwdLLLGE+r4KtWbTKqEjxDYmU6+2sdrUgm2rhTS4UK/pzkuj5lsQKgnz5/Q6
4lqHOEOklXmSQjmvvPJKyTf58MMPvT4bv5jnMnfVJ2+88YZ6bs+ePb0+VxDC
DBw4sOpzw6tNkfrBBr7/8m3y888/T72O9es6vSeccELqtfTX0SF67XI92TRf
iG1Mph5toyAIgtCYZMXlId5svfg4zJckrcQiEsp59dVXC/NN9LxT374Jc+N5
LmtVa5VaiWsluLPeeutVJJ52LctKkfrBBvrY3333XeZ1Nv124DuPXu9QTzbN
F2Ibk6lH29hI1LLeFJonInNCrUKMCOLSpFFPPg5zK0kr8WCEcurRN9l5553V
c4k1VYuYtB+htnn//fdV7PKiqXVZqZV+uym2/fYw9WTTfCG2MZl6tI2NQq3r
TaH5ITInVBtiLsWtDX799ddVTG7iOqZRLz4O38sWXXTRivgmlGna2sswxFWr
BerNN6E+ddznrG9E7LmTxFdffZUrHXnbT9ZzfJA3j43MZZddpuIesg71008/
LeQdtrKSh1mzZjndJ/326pOlI1zbudjGdOrNNlYCm3rMkltXnWSjN4u0r1CU
jS063bVKEfm2kdkkKmmri8BHGfjCtd3XOuxBM3r06OCmm25SMXQ5iJnDbz/9
9JPyI/n75ptvVue47vrrr1d1A6zJvOGGG4JbbrlFnedv5ndwL7EaDzzwQCWD
Tz31VNl7+bfeR4v9diZPnlx2hPtBUR8H/cX+MYzfE5uWPXq4xhX2RiZuMHGb
11lnneCuu+5yeg57hGnbSzypcH6icoy/QB423nhjdfB+yipaTmGiZcraa+Z0
XnvttUHv3r3VcyZMmKCuJb459cj3YmKqAdfiaxL3as0111THmWeeWYqV9Ntv
v6kYWJQn5UqaLrrootT5uzZl58M3oQzOO++8oF+/fsGmm26q8sD8S+axZ/km
Dz/8sLqPsmJeMumlz6TzHyWtPjmoK+5fd911g6222qrsXubZ0h523313tY8U
ZUsMFNrOlltuqfb9SZNbX+0n6zlhbGUybx59YCN/xO1m3cN2222n7uF64o+5
zNv1pTOAPd+0nM0111xqz3Cfe8uayArxrG+88Ualx9H34TrDRlxxxRVKt1Pf
1O/VV19dajfoh9dee021S/b4YgwC8D9Yt09bY3+7Y445JjXmlql+sG3HReGz
3+5q03yURZaO8NHOG9E2gqmeqLZtBBtZstWl6AfO7bjjjkpHIDfohhdffLFJ
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
jsHFeBVxMeLIskW++u3EZtDvsYnHEFdXRfbbmRvCuRVWWCH1GcOGDSulIRq3
xca+F+mbuJSdq2+i9QVzX5JI8k30fEfW1vENJel44oknYp9r2m9Hr0fJK7e+
2k/ac/LKZFFtMwtb+dPyoe0d+o0x16Lf60r4e17ctw3eSV8x6YjaRFNZYa11
ko8Put/O2soo+lt9mq3Uc2M5ot/g0uQ0bzsugiL77WntpoiyyNI1Ptp5o9hG
sNUT1bCN4CJLprpUryPlO50NNmWRdW1enWTbb/dtX6EoG5uWbl/20lVXFWnf
i7AzPveDyJI5HzIVB3HJ9PXEIY+i90SOxmDW2JRB0f5b3nZfb+j1SIwr6bEc
6gA/jXiButx07BPmIxCvIQ5f/Q7iaabpLea25O0bkFdiJGvfwtUHT/NN9NwW
1lakQbxGnYboGpta8k00pmX38ssvO+k2HbOC2EBJJPkmjCnxO+t2XCiy354l
t5Xot+eVybx59IGJ/DE2Tt8qHPOFg7FfV53tS2ckoWMnxI0v67VgSQfr3sL4
7rfHfUMzsZVh+8s6uTBp+iFvOy4C0q/Te/zxx1vdm8emFVEWefvtJu28EW0j
mOiJathGcJElU13Kdz5+5/ugDZXut6fppLz9dh9yXZSNTUu3L3vpQ1f5tu9p
+XZNbyX77T5kKg7WBeiYbnE6Wq9vj4sHAq5lUIT/lrfd1xvEh9d50XMlmP9P
jD++x+s1E8ypZ+4FMQSS5mBk2SJTX1Kv30nSW8TEd+0boPOOPfZYJTPEGtT+
lKsPnuab6PFn1mqkoeNScLD3QhibtkFbKNI3sS27559/3qldE9ciS08l+Sas
D+Z39n1wIavfrmNCxPXbs3zzLLn11X7SnpNXJvPmMQ8ubZf8Dx48uDTfjaN9
+/ZWe+P61hlJYJ8ZI40bm37zzTfVeGnSEY3fUiv9dvbS0mU1ceLEsnNp+iFv
Oy4CfCGdXmJm25DHphVRFlm6xkc7byTbCDZ6ohq2EfLIUpYu1X5+kf32LLnN
q5NM9GaR9hWKsrEmY0V57WUe+SrKvqfl2zW9ley3+5CpJPQ6AWIdhmOG3nbb
bep35pbHxcED2zIo0n/L2+7rEb3PCftDMneCutLxVPWaCebNs9ceMZSSCNu+
tH6H3kM1CfYjKEJvMY65+OKLK59L+8ZFzpOnzDjHmFYaxJHQaSBeaBibtqFj
7xThm7iUHXFoXHSbjofLmqMkknwTPX/ENdZ3Vr+duJmcj+u3a/l2lVtf7Sft
OXllMm8eXcnbdrEZjN/q6++4446KvNcUYmHxPNs5pkmYygp7CWm7HUfefrte
P8+h967RpOmHvO24CHQcHZe+SR6bVkRZmOqaovrtzck2gq2eqIZtBB+ylKRL
dR8oGps6C5t6zJLbvDrJRG8WaV/DafBtY7PKLoyrvXSVryLte1q+XdNbRL89
SeZ8yFQa7PPGPYwPEIeWcqSfzBy/8J5hUWzKoGj/LW+7r0f0OARzEnbddVc1
FqLR3xj47s4chY8//jjxOex7mscX0Ghf0qfeQkaIjRBdI1Jkvz0ckz9NrvUY
etwaUpu2ofeC8O2buJbdAw884KTbRo0aVbqPPSTiSIqZe/3115fuZcwwiZde
eik2TVn9dvQ75+P67bSbPHLrq/2kPSevTObNI9jqTFv5Y8wxLiY06D1G4+Kn
5n1vHhj31vv1+sBUVvR3YOa4xpG3367X48bppDT94NqOmV/3z3/+s8leXT4I
fx+Ia/9p5LFpeXVaHFm6xkc7bwTbCC56ohq2EWxlyUaX6pjOHMwPMsWmHrPk
Nq9OMtGbRdpX8NH2bNLty16Ci64q2r6n1Zerbi2i355U3z5kKgn2m2N/N9bw
s5/8gw8+qL5FJ5VvGNMyqIT/lrfd1yOsXddrK4lTF45ZyBwJfY79QtMIzyOM
izev1+2k2RxgnzmuwY+N84td9Jau7549e5b9zhzTPD44bYR74+Yh4EMy9sz5
6N6FGmKM6DUccXED2FtFp492lYYeb2OsLI6wb8K8iihJvolr2TE/I00ekmC+
Dm0rzT8+6KCD1Hnm5oWhzeu4kQsssECT/Slg2rRpwcorrxyrG9LqE7iP89E4
jqD9JVe59dV+0p6TVybz5BH5Ij4o53r06FE2LysNW/ljjBgbwb7NUXQcmjFj
xnh/ryuMP6+22mqxe2u6YiorzKfT18WtG2P+IOcYi4+ibWW0DWoom3bt2qlr
onvAQJp+cG3HOpYO96Tl2wVi/+n0xu0DmUYem5ZXp8WRpWvy6jJoBNsILnqi
GrYRbGXJRpdyvY5zzJzeOFlkb+lBgwaV4iWBTT1myW1enWSiN4u0r+Cj7dmk
25e9BBddVbR9T6svV91qI7NZZMmcD5lKgvl9rnvPmpZBJfy3vO2+XtH7FMbl
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
nvrOq0O0LLv6OOF6Suq3Z7W1tGfklUkfeXRNe5Q0vZtFXr1nko68eidNFvOm
37VtmqTPh4z57LcXqRtd9CLz0MPth36x3kcvGnsrLa1x5ZK3bbK2k3P4zsQ2
RK7xsfneROxnV+rVxucpz7ztoBH0vUm/Xcfy4Ajvl2SqI1xkQ/dNo3srZOHL
fhXpsyZRZHlGScu7D5k1sW+sa9f7Ax1//PFq7jxzCRoN7BVjF9F1Cab99iS9
YEqWz42cpfncJnLLHjFxMWdB73cYjsdqk7e4PdxM0LoP/yEJ3RZWX331st/1
GDfzguIw7bfnqTuTZ2g/1cV2sD+jPoePlAT7NNr6iGkyxx4TJnpQf1+OrkW1
8V31uEwRvqlru37ggQecfO9Ro0aV7mOvpTjS4snnqe+8OoTvbXl8HPaPTioz
07aW9oy8Mukjjy5pt9W7WbjqPZt05NU7abKYV2+7tk2T9PmQMZ/99qJ0o6te
HDNmTJP2o204B9+Rkkhr25CnbbLHGPu7sTaVPcQffPBB9X0zSd5tqFcbn6c8
87aDRtD3Jv12He8m2n5NdYSLbOg49xx8azXFl/3KI8+u/YiiytM27z5k1tS+
6W9ExMcndjc6r9HQddCzZ8+y35lHkGbH9PqZND/dBOqPZ5xyyimx5/kezXnW
lMXB3g86HditOBhzxk6zL2wUHa8Bu6wxyRt+AXEWuaZHjx7W+w+E92+Pax/E
WmQPHK6hLsIwv0SnL26NKHNhOMf4exw+6s7kGcOHDy/lMU6G0mwHekPHJF1g
gQWa7HEB06ZNU/Jh66OkyRxrehiv5Xx0j18NMV30mp9o3ZjIo0aPPfJtJI6w
b0oMoihp/XbXdn3XXXeVzhNz1hTkHxvNfUn944MOOkidj9v7ME9959UhejzB
RU6BdVpJZWba1tKekVcmfeQxjaS02+rdLFz1nk068uqdNFnMq7dd26ZJ+nzI
mI3uy6Io3eiqF/V89Gg/iHWV/E65xO2XBGltG/K0TWJw8Z2xCOrVxucpz7zt
oBH0fdYexryvXbt26ppojG9THeEiG/xf+8zM146TGfYNHzRoUFk8cl/2yyXN
efsRRZWnbd59yKypfXvuuedK1zF2FLevXXOH+ILkv1WrVsHMmTNVf5HxJ73+
n4M6ZF1BeO8C9iDR88QY70X+OM94jen4B+/Scx7YiyAKssaYCueT5kL84x//
KKUzvAY8ypJLLtlkHyjGqpnXwT6UYfk0yVu4rXOwdtGGcFxF5utFOfXUU9U5
2kgU9rLQ5UJb1zL+8ccfqzXx+hztk/RG41f6qDuTZ+i5ORykLe4Z+jzrsaLg
5+Inafuz/fbbK51AWSO35C8ujm4aWTIH6C/sDjYgup8n92vfb8iQIU3uNZVH
0P1YDuxolAkTJpTOE784Cnpan4+Wg2u7DscN4RuODYzp8i2LumL+ZPi5zGfS
+29yDWmJ7uXhUt8+dEheOU0rM9O2llXueWTSRx7TSEu7jd7NIo/es0mHq97J
ksW8ejtP2zRJX14Zs9F9WRSlG131Yvhb3tdff136Hf2i9zlmz6torCXIqjfX
ton+5DfGeZDZKVOmlB18c4wrO1Pq1cbnTVOedtAI+j48z+TRRx9tcp64EZwj
7ldUv9voCBfZIA4F/gX3UH6MT/Idl3fxfZg9NvFNwvi0X7ZpztuPKLI8bfOe
V2Zt7Jsef2Y8tRFhnoUeo8KvZn0qss6Yi45DgD/x0EMPNblXz8XRB3arW7du
Rt8CaNus89P30tZ69+6t4lmwjgI50nsLaDnbZJNNSnKFviCG9UILLVS6hnRu
u+22Kl1R+vbtq67hPDaZuIrYu7XXXruJjJnkjXkt4Xcn9QGTYJ4ibYb+Oflk
3Jy5dvhv/N2xY8fg3nvvTbyfsX3tg+n08RzGsbTPwxx82mZceeSpu6xnoAeI
19OiRYvSuU6dOqn1drR7fB3SpeOIcJAX6je6lyi+K+sEwu/hQGbRxzYkyRxz
bUhTGGzdbrvtpt7DdzDmuI4cOVLtN8E87+h+uTbyyFgn7w3H6UQW+/Xrp9JB
LANibejv1xyUFTJMuliTyf3oVXQt7ZQDWdYxYGzbNemnTsKxR9DN+B7vv/++
cRljG5A77mcsdL/99gv69OkTHHbYYUredbkzXzdubbNNfefVIcgp/55nnnmc
5JTnENc03A4ps5122qlsTCKtrZk+w0UmfeQxDZO02+rdLFz1nm06bPWOqW5x
Sb+PtmmaPhcZs7XFaRStG231It+UWGej+2L6PLEuZ82apey4fp4uV+SGfYqz
2kfetomOi8Z6jh6c53lRXWJKPdl4n7rOpR1klVm963uN7rcj6/QD9957b+W7
skaA9BKzkZgPvE/jqiNcZIP4ZuQ5eg99vXDftij7ZZNm135EJcrTJe+u9sPW
vjEvn9h4cXt6NgrYrHHjxgX33XefmsugYa8+fOu0uRvMBbrpppvUdTb78hLj
lD1Y0CPMc+BbBO2c/wPv5Dz/5jzjNfp64N9cT70xnsnB3/q3KOQLvUQ+kSX8
J9ZQpM2xyMobacSPaNOmTeIc3SSic5fQ6cwTYeyTb5PkLwvqDf+CMTfu13mZ
MWOGkT/nWndZzwjXA/kM142GvxmvC59HVybVB3llPtcNN9yg+oY23+k0UZnj
//w7nK4ofJNBVviWzBhguH2EsZFH3hvNP38zhwtIG2XBb5zjGv629b1s2rVO
P+/hb90mXfw97qOsqCvsJP4t0FaoO5NvQCb1nVeHcD9l7iqn+tpwmUXv1yS1
NZtnaExl0kce0zBJu4vezcJF77mmw1Tv2OgW2/T7aJu2us9GxmxtcRqV0I02
elHrlGj70OXG75RjuF74N0dW+/DRNkkv4zH0z+kf6iPcn+ZgL3dX6sXGF6Hr
bNpBmOao7zXh9e2sUaG/x17YHPTBdFsNk1dH2MoGeWHOjfapmU8epWj7ZZpm
l35EJcozT95d7IeNfSO/edZnC40NOoqxzbj5cYIgCIIgCEXw+eefq/XtcXGc
GDvA5+abHD5KeN6/ILhiEpdOsEP6EYJQOZj3wZqZtPFSQRAEQRAEX+BzMIc/
LsZhGGKDMZ85a595QTBB+u3+kX6EIFQGxrpZH2cbj1MQBEEQBMEVYtua7MfM
Hp3EUBAEH0i/3S/SjxCEykDM2TXWWEOtDxEEQRAEQagUxLFnbXvW/Hdi+qXt
Ly8INki/3R/SjxCEykHMhDx7rAiCIAiCILhAjHL6T8TujosrRYy/Cy+8UMWk
kznygi/YQwG5Y39vIR/SjxAEQRAEQRCE5g37Mul48ewdyL5Q7Lc5cOBAtYfT
+uuvH1xyySUSj07wAt+Gx48fr9Zm6H3gGBciHrnrPoOCIAiCIAiCIAjNHfYS
ZL/kXr16qb2o+/fvr76HvvTSS9VOmtDMePbZZ4Phw4erPeIvvfRSNSZ03nnn
BWeeeWbsfgaCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIDQPpk+fHlxwwQXVToZQAF9++aWK//r9999XOynC/0fq
RKg2M2bMULGmmhuN3LbYA27y5MnB7bffruKJ/fnnn9VOUlVhr63Ro0cr/8Yn
zbXtCIJQ+7DHw9dff13tZAhVgLo/6qijgs6dO6v9Peaff/5cz6pFOfKVrlrN
XxLszzJ06NCge/fuwRxzzKHq94svvqh2shoaqROh2nz22WfB4MGDgy5duij5
m3feea2fUYu6sFbbVqXK6ocfflD7w3Xo0KG0RxxHI/Yt2f9uxIgRwYYbbhjM
PffcqhwmTpyY+7k+2k69UAttvBbS4JO77747uOmmm4K77rorGDduXHDLLbcE
Y8aMCf744w+j+99///3g2muvVc8YO3asegYHe0vwHH4Xmj+Mx6LXWrZsGbzz
zjvVTo5QYbBDp512WjDffPMpO7TYYos5PadW5chXumo1f2nwrWnkyJFqf1/t
w/HtQageUidCtaEvy35hjNEif61bt7a6v1Z1YS22rUqV1S+//BJssskman+u
mTNnBqecckrJpt92222FvbdWod/OfmUrr7xySRamTJmS+7l52069UAttvBbS
4Bv61scee2zQqlWrsrG1AQMGGN0/depUtffeoYceGiy00EKl+1daaaVgyJAh
Ml+2QbjqqqtKdX/fffdVOzlClTjooIOUDCyzzDJO99eqHPlKV63mz4Rzzjmn
lPZff/212skRAqkTofrg+yF/7du3t7qv1nVhLbWtSpUV9rtTp05lv/Gd8oMP
PijsnfXAPffcUyr/t956y9tzXdtOvVALbbwW0lAUfDdfcskly/ruZ599ttUz
GMuYa665gkUWWUSN1QmNA2PUxx13XDBs2LDg999/r3ZyhCpx6qmnlsbtXKhV
OfKVrlrNnwmM8VK3zB0VagOpE6HanHHGGUoGO3bsaHVfrevCWmpblSirb775
Rs3X3n777Qt5fj3zwgsvlPpFPscwXNtOvVALbbwW0lAkjzzySFm/HX3FvHkb
ttpqq2DXXXctKIWCINQyzL1Bd6yyyirVTorgGeZJUrfMORNqA6kTodrwfQcZ
XHHFFaudFK80Wtsi/h75HTRoULWTUnO88sorpX7Rhx9+6O25zbXtCJWD7+Vd
u3ZVPreW0RYtWgRPPvmk8TOYX3/00UcXl0hBEGqWs846q6H77bUQv8iVrLQT
V7hafmw9l2uRVLNOBAH0fPJ663vUsr6rBvvvv7/KL3FqhHJeffXVQvrt9dp2
aolG9w2mTZsWbLbZZsFHH30ULL300iU5JWaC6ZoO4liceOKJBafUjEavT0Go
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
2mGHHcx9nIcjax38Jt8xRkmDdRQbn2egSn3jc69PPYwYMaJhC6XhG1urSpsh
i2bou7JlvhlllTVuD2lzLum3qdI+8dV5PuP20LZTtT3gq9fK1E3sq8qzF2Wu
hXVaxtBCGTZXqFxXpaOKwDxW2nq7IL4T8qHcbdiLkrSuHKLHaHviX8j8FPNA
7A9M8zsItfXsGB3xs+vZdy/X2O9nQ5uhnsrKdzuRp9fy5JuYEPJ8PA4E/qVy
jT2hcZhr4hp7motg6wAhdNyelQ9gvjOtT+F+5oyqzkOrx+3SV/GhPdlkyVGo
HLBH0cWOZm9SnDz59ulD4u+R8RD7zNDFaZ9HHnmk8YxdlvQ9zAMyR12EsuzY
PNmvQlbzqFLWffJTdvtvRZ3gayjX7Zg7zDssuuii3c6d8ZHrLPBz5X1zzz13
5n2cayPplPhKsmcS3xxXfJ6BKvWNz70+9SBzofizplHGuL1smyGLZui7smW+
GWWVNW4PaXMu6bepUmeDj87zGbeHtp2q7QFfvVambnKxF+0xp+0XUIbNFSrX
VemoIhAHMK8OGVtKDET52ONXxv1J8UtD9ZjEosKngTh97B1II9TWY45JzsRA
7m2Yl2B+PD4+wP+C2IFl57tdCO1X8EtIk2/sQfGtTupTZF9z0l4oV5hrI66v
9F1p+jskHwL7aLiOz4gN405iO1Wdh1aP24l/Ic/H/ayy5ChUDlzt6KT552aM
29EffF/kPA70MTE77JgefFhXSPJ9S8I17cTbDJV9oSxZzaNqG7BofqDM9t+K
OgGJ/2SfP4Pty37TOD5ynYX4NbL3MQtbz8haAusl/J91Fld8noEq9Y3PvT71
IDG77HqO06pxexHZtmmGvitb5ptRVlnj9pA255J+m2bpbHDVeZwJ4pp+IbTt
VG0P+Oq1Zo/b7bkIYhcJZdhcoXJdlY4qAmWSJWMC41qRKT6shYvfKjGkk8ag
oXqMGFf4FooMZhFq64HEa2A9XPwnqHPmxjlXgGu2nyA++8SZi1O2/q4reXot
rw8kLmCWfIvfAn6k9t5JiZOEL01STIk8aFeHH3640dvEsJR0punv0HwAMVG4
zr5GmfvFTyMtJkrZeaCfqqpfdNHDxH+U5/GdscmToxA5CLGj89LlqnOy3oPu
5HvicRaFdx1yyCEN/x0+vXr1cjpX1DXtslcrRPaLymqoLq9S1n3yA2W2/1bU
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
7969u9jce+65Z3TKKadEr7/+epdnGJcff/zx0fzzz9/l/kUXXdTMC3NWVxzm
BBjbLbHEEo37l1122ejEE0+MXn755WZltwvY16TVzsdzzz3XkrSURStsaLWL
60mzdJba2F3piXrFhb333tvktVevXq1OSiKnn356oz5+//33VidHyWD33XeP
5ptvvi7fMf/43nvvtShFzQfftZlnnjk655xzunxPH4+uZU7066+/Lv13L7vs
skY7YU1GUeoGNuf444/fkNPll1++1UlSakgn6LL777+/kcfJJ5889376lYkn
nrjxzA033JD7zEsvvWTu3XbbbaM///yzjGQHw9q/5CE+R9GutMKGVru4XjRL
Z6mNnUxP1CtZMMdLXuecc85WJyUR/L1IHz5BSn356quvzFraJpts0uqktJR+
/fpFU045pfFlaiaMiVh/Ofnkk80av6LUEXyE8Tdh/8iSSy7Z6uQoNaQTdBnj
aNZnxdb84IMPcp9h/C33H3fccbn3Y8uyFlwnP+qnn366kYeeMtZohQ2tdnG9
aIbOUhs7nZ6oV7I47bTTTF7nmWeeViclEXw/ZF+wUl+Ij0I9HXjgga1OSst4
9dVXTRmsuOKKrU6KotSaddddN9ptt91anQxFaRlbbLFFw9Zkz3oe9pre2muv
nXv/wQcfHO2zzz5lJLU0XnzxxUJzFe1AK2xotYs7D7Wx0+mJeiUL8bdp5bg9
az6YvVqqn+rPzjvvbOqJPXSdCr7xlMFWW23V6qSkUqe1l6rppLza1D3frEdM
McUUZu1dqS9VyVHd5bNZ2ONw9rzn8cwzz3TxrSeedBrspZ9rrrmiF154ocwk
ByO++z3Jvm6FDa12ceehNnY6PVGvZNHqcTvxHIirkIbqp/ZgpZVWMvVEnJZO
RdZPWOeoI3ltrSfRSXm1aYd8Ewt31VVXNTFllHpSlRy1g3w2C84OE1szvmc1
CVlvk89DDz2Ueu+DDz5oYtHVjZ5oX+u4XWkGamOn0xP1ShatHLe/8sorJs42
MRjT6GT9RCyadoC5/WmnnbYpOoVzUH7++edKf8MHykBivObNh3J+TBpffPFF
UDoon6S99S5trafQzLzWqY02M9++cnr33Xeb82sYs/QEqq7/b7/9ttL3J1GV
HBV9b5ouK4NQPVsW8847b8Pe/PDDD1PvY45rkUUWidZff/3G/Vnzw9tss010
xRVXVJHkIFzt67r280nouL19qLrd5+ks399vlo1dpN3VyfbpqeP2X375JTrz
zDOjrbfeOlprrbWipZZayvhd4NPronOoI84cWGONNcyH8/LYn/joo496pYfn
5GysySabLBo9enSXj4xt4voJuScdzD0xR80+L+7Jg/it5H311VePVlhhhWi5
5ZaLLrroIq81H+J34hO98cYbm3LgXRtttFHmeO2JJ54w9xInhvvT9rMRa5yY
I6zdEt8MSCP2LuceU298BgwY0Eg7/nL43FEWlAm/c95552Wej1xmeXDembQZ
4l3a9RjXAT5yhOwSo5P7kBn2kctZuKSf94waNapwul3rxIWsMuBD/ihfYmhj
e9l899135nxd4g4RM5j6xJf4mmuuidZbbz1zxkWWnMfLJ16Wrm3Npkz5EPLK
mzhK+E4TK5mzhu38ctbNJZdcYs4spqwom8svv7xbenzyWlQmm9VGXcrMN98+
7TBUTrFnOO/YTouPLs2Cc654drPNNjPn5ZAu9vjiY5xGneqf/5MH+mrSz9kU
wJiXfNAW8VU47LDDusXfaVX7cZFR1/fm6bKQeguV3yo46KCDGv0G/Vka7Gfe
fvvtTZ3L/XPPPXfivcSvwsYnVlYSrdDtQpZ97dvP++THp+8vYkOzPwG5Gjp0
qJE5PugM2p/ELXvttdfM/znrj/rlX5756KOPctNSll2cVw5jxowxaZI0olvQ
MegXka+RI0ea7ySf/P3YY491eU8rZa7qdp+ns8r4/Spt7CLtro62D/TEcTu+
aczr0u8znwLIDW1QztPNGrdz3zTTTBP17du3sTeNusBvi3iW1Bey6Qp9D+8b
b7zxGmU9wQQTdPEBO/roo829op+4lzO0iNmJLC288MJdnk87CxjZQIZnnXVW
U7fCbbfdFo077rjGRixyRgpthHNR11lnncZayFtvvRUtvfTSRofGY0mi2/bY
Yw+zf41y5DmJA4rOtiG2gpwFyod2QXulvXOGK2WCLWe33wceeCDaYIMNoiOO
OMLEs0S+5fq+++5baXlQj9QD6yfym5QBeZM82vrbR444r3KWWWbpIhuU96ab
btrlu4UWWsgpzUXrxKcMZpppJiMj8iFtUiZ8Nt9888bz6Bj2+so17kNfEWu7
T58+uXKeVD7E1rTT59rWoOz2UqS8b731VnPuMHs34zqJMR/n6JE28iNpt+e2
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
URRFURRFUUpCx+2K0v4QJ5yYFMTtYK29SLxbRVEURVEURVHqzUknnWTG7Zxx
ryhK+8H6uh1nfIUVVgiKuakoiqIoiqIoSj3gbNqRI0dGSy21VOPMn3PPPdfE
X9YYuYrSPnAOhJyZxVmOnHGlKIqiKIqiKEr7wzlgAwcONOf+XnjhhdEFF1wQ
nXnmmdGAAQOMr62iKO0DZ7tzPvaoUaNanRRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURSlQxg7
dqyJb9sp/Otf/4pGjx4d3XzzzSa+b1lnbn7++efmTJ8ff/yxlPcpiqIk0Wk6
u5Ooqn9qV77//vvo6quvjt5///1WJ0WpALWb2o+8NqltVlGy4UzYL7/8stAz
nD15yCGHRAsttJA5f3LCCSesKHX14aefforOOOOMaLbZZjN5lk+I/cuZu8ce
e2y09NJLR+OMM45532effVZiqpUkfGReUdqZTtTZnUQV/VO78u9//zsaNGhQ
tMoqq5izsSmHxx9/PPHedugL2iGNzUTtJj9aKUd5bbJIm1WUTob5eNrIRBNN
FL399tvOz6EjTzrppGjSSSc17WuqqaaqMJWt57fffovWXHNNc17uN998E51w
wgnRJJNMYvJ+0003eb+XOeLBgwdHM8wwQ8POYq5RqQ5fmVeUdqbTdHYnUVX/
1K4wBuB8+/nnn7/Rrz733HPd7muHvqAd0ths1G4qTqvlKK9NurZZRel0Lrvs
skYbueuuuwo/v/fee5tne/XqVUHq6sPuu+8ezTfffF2+Y97yvffeK+X9p59+
eqMefv/991LeqSQTKvOK0s50is7uJKrun9qVO+64o6HrX3/99W7X26EvaIc0
tgq1m9ypixzltcm864rS6TBveeSRR0Ynn3xy9McffxR+/pRTTjHta84556wg
dfXgq6++Mj6lm2yySWW/MWTIEFOO+Hwp1RIq84rSznSCzu4kmtE/tStPP/10
YwyQNIfRDn1BO6SxVajd5E5d5CivTeZdVxQljNNOO820r3nmmafVSakMYp6Q
xwMPPLCy38CXkd/Aj0lRFKUqOkFndxLN6J/alRdffLExBvjggw9anRylZNRu
aj/y2qS2WUWpFvFT6sk24M4772zyeOKJJwa9JytuCrF/tf+pFxrnpl5ofZRD
J+jsTqKs/qkn8tJLL3XMGKAn6se8PKnd1JV2kIG8NtlJbVZRWkEn2IArrbSS
ySMxnXwhJghxgtLQ/qde5NWX0ly0PsqjE3R2J1FG/9RT6ZQxQE/Ujy55Urvp
P7SLDOi4XVHKgXM1OEemKD3dBuTs22mnnTbILnrllVeiqaee2sTxTEP7n+aT
JvMu9VVXOMu2Sr799ttK359EO9dHCF988UUl7+3pOluoqvzqRBn9kwvoyp9/
/tnp3qp1UBFcxwC+9k8zaUZ/VZe6c81TK+2mupQVFJGBVsu6jtsVxZ9ffvnF
xJXcbbfdTJt/9NFHM+8988wzo6233jpaa621oqWWWsr452211Va5NuD9999v
nlt99dWjFVZYIVpuueWiiy66yJz7kMUTTzxhznLk3CKeGT58uHdeAT3L+Thr
rLGG+fBu8p6V71tuuaWhQ4jZO3r06MbHxY7h3ZQtz0822WRdnufDmcoQ73+w
OUkraynECV577bXNPXn4lrXAWSpXX311NHTo0OjGG280H2K/8B0y8Mknn5i/
r7/+enON+6655hrTFwDndlx77bXRDTfcYK7zd9x3K6teX3jhBfO++O/zHoml
8tprr5n/kwb2t/Evz3z00Ue5+cuTedf6cuXll182/qubbbaZOadpvfXWi/bZ
Z5/omWeeSbzfR0a//vprU0ZbbLFFNOWUU5rvqO+777472nXXXU1b5TNgwICG
HPzrX/8y8WWRK+SL3znvvPPMOMCG/5MH2j7pn3nmmc332AnkAxlbddVVo8MO
O6xbDBniwl533XVGFpAZW36Rs0suucTUI3VM/V1++eXd5LRofRSRf+IPn3PO
OdHGG29s8s+9G220UWX+xi767LvvvjPlse2220YTTzyxqSfknvJBdjgjx1UX
hOhsm2bohFC9VUX5ubbFZpRPGkX6p6K6Ja4rX331VVMfV155pakn3jFq1Chz
b5U6KE4RuyBrDJDXF3DW9TLLLBOdffbZpv6oG/TZFVdcYWQT3XHGGWeYOFpx
ypLnZvRXdau7Inlqtt1Ut7JyLa8itn5Rm6VIWsFn3F61Xago7QDnvc4yyyyN
9sEnqf8B/G/mnXde03bF1qCtYGcQxzbNBkQvoUNnnXVW0xaF2267LRp33HGN
jfznn392e464l3vssUe03377md9YZ511GjFDaZc+8J5pppkm6tu3b8MmQp8S
04f3onOx+QTGIAsvvLCZv5TyoW/gXknLY489lvmbvIPfHG+88RrvmGCCCbqU
+dFHH23ulf6He//2t7+ZWM/0IaTBfv6ss85K/C3fso4j46klllii8Zurrbaa
KXeeJ3YxZwRLudAPXXzxxdEPP/xgnse2o2/gGn0n9g59HbjUK+eK0l/Sd8rv
r7jiikYHSz/Hb3DOJ3XJdWQTG4q0ZZEn80XqKw/K6tBDDzV522677Rprf9iC
9Jt8P3DgwC7PFJVRIIaLnMfNB1sCW55xy/HHH2/SS99r2/YPPPBAtMEGG0RH
HHGEiS9LPyvX99133y7vp3yQKbnO37yX95De888/P1pooYXMNdJx5513Np69
9dZbo2OPPTaafPLJu+kI5vuRI2SWPMv77XWAIvVRVP4Z0yDjyKD4ELz11lvR
0ksvbdp5mfF2XfUZNsoUU0zRyBvXsYeWXHLJqE+fPs66AHx1dhJV6oSy9FbZ
5VekLVZZPmkU7Z+K6pYkXUn72HTTTbt8R9uvWgcJPnZB2hjBxf4ZMWKE+Z77
+vfvHx111FFGZ+PXMNNMM5lrM844Y5e6KlOem9Ff1a3uiuapmXZT3crKtbz4
bRdb38dmKbNNZl2v0i5UlHaC+cADDjig0Q5YQ4uD3YMe4IyZpPlB+vs0G5B5
aa6x7haH9R+ucY/Nm2++GS244IJmjttmyy23NPczl1kUSQdz58w7xhk0aJC5
vvjii3fzH6LvZI2R6/TXlAH3iM3lAnOrPD/ddNOZ/6Mf0Xd2fy/9D/qOOX2b
999/P5prrrnMdfRn0pjCp6yzQF/Sb/EcY684rFGK3RbnnXfeMWtd6HuhaL0y
Ryw26HHHHZeYRuZXsVWLnPHpIvMu9ZXHwQcfbN7Rr1+/btcYS3GN8pW+MURG
f/31V2OrSJ5OPfXUbs8fdNBBjeusuWKzC8j0Xnvt1UgT5z7bUGasrcnzjMdt
SK/0p4wj4n2x5DdtnChpw/ZIwqU+iso/NhTfPfXUU13uRWbZIzhmzJjEtBSl
qNzjA4CtKGWNTWTbHS66IERnZ1G2ToCy9VYZ5efbFqsonzxc+iff/MR15cor
r2zW2tG3+Nign4855hhzb9U6yNcuyBoj5PUFrDkyNoiXmX2+9MiRI7tcK1ue
m9Ff1bHuXPPUbLupjmXlUl4uclTUZqmiTeZdr8ouVJR2gnUZaSPYDja0fdYG
uMZcYxJpZwoxdz/99NObucAk23GXXXYxzy2//PJdvmeOjO+Zv7RhrCB6o4iv
GT6KzIsmjTcEbB9Zp0nSBYssskjDLvIBW8fWqUnk7dNiDUbqKa6PfMs6j3XX
Xdc8N9tss3V771VXXdVIz9ixY7tcY06WPsDGp15JL9eYw04Cu4p1kKJkyTy4
1FcWtBX6FvL0xhtvdLv+8MMPm+usrdHGypBROQuKva5JPPTQQ408J80/M06V
60lz8YxDuMa8fRL41snzzL3bYNtkjROpR7GtksirDx/5Z12d7/BvTPq9d999
N/G3iuIj95LftHmMLF0QorNdKFMnVKW3QsovtC2WWT6uZPVPofmxdeXtt9/e
5Vp8DFWlDvK1C/LGCFl9Ab7Q+BjYMM5CZrkfHwmbquS56v4K6lZ3rnlqhd1U
t7ICl/LKkqOiNktIWkP3t1dlFypKu2C3kbgtIX5i2CBppMU4knlM/Mn23nvv
Lp8dd9yx4TuLvrXbNnOctPf43Cn2taTT1c8MZI4R39Cs/eg77LCDuW+qqabq
Ni9bh3E7fkKS/7h/vm9Z52Hvnfz73//e5do//vGPxjV8k2zwSyW9Nj71KrLF
nq34NfpZ5tJt3zZXsmQeQu0gyp3nkZs0WBcUypDRvDTbfXbSOgzfyXXujXPK
KaeYawsssEBq+qQfZ82dsYDAHuuscSLtiutzzDFH4vW8vPnIPzLKd6wxJslA
WfjIfYguCNHZLpSpE6rSWyHlF9oWyywfV7L6p9D85OlKmyp1kK9dUGSMEM9f
ksyx55d7Z5999sb+E6Eqea66v3J5R7PrrqxxexV2U93KyiVNkCVHRW2WkLSG
jtursgsVpV3IaiN77rmn+R4f2TTSbEDxFWKfDPOPaZ9HHnmk2zttm1/wHbfj
x8Mzc889d+Z9J598cuP98fgbdRi3E1NI0hePKRJS1lmgpyVWMXPPNuzpYpzF
tfXXX7/xPfO4xF9Jomi9suaZ1r9RBqxt+ZDXL4TaQbLfG79YF8qQ0arH7bJm
njVuF186PvacPfsOXcbt7ElMIi9vPvIvekvGNMg3PgNVUFTuQ3RBiM52oUyd
UJXeCim/0LZYts50Iat/Cs1PkdjOVesgH7ugzNjV7NflPtYd43MyUJU8V91f
ubyj2XVX1ri9CrupbmXlkibIkqOiNktIWkPbZFV2oaK0C1ltRGJMEFcjjTQb
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
UeoH+4vZa6i0jk4ft+OHx/69eExiRVEURVGai9qFiqIo9YH4qOydZs8xc6pF
4xAq5dLJ43Zi4i655JJm36OiKIqiKM1H7UJFUZT6wTyqHft0hRVWSI0lozSH
k046ydQFsZQ7DeLilBHDTVEURVGU4qhdqCiKUk+IVy5nrXDmGOeNKK2BteaR
I0dGSy21VOOsqXPPPdfE2/U991tRFEVRFMUVtQsVRVHqC2dMc37wqFGjWp2U
juaf//xnNHDgQHMG7IUXXhhdcMEF0ZlnnhkNGDDA+KopiqIoiqJUjdqFiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
itK5cO7W22+/3epkKB3IRx99FH366aelv/f999+PzjrrrNLf2y788ccf0VNP
PRXdeuut5owCzvVRFKX9GDt2rIlV6gv9+9VXX210oqIoik2n20rtwFdffRVd
eeWV0ZAhQ6JbbrkluuOOO6K77rorGj58eHTTTTdF1113XXTVVVcZu0/p+TBe
J2boN9984/X8v/71r+i9994ztsVvv/1WcurqD+X20EMPmTb0xhtvdGQZhEB5
bb755tHo0aOD38U5egcffHC04IILmvNrOH+20/jhhx+iI488Mpp++ukbZ+/K
WT7o96qg7L/88svK3q8onQTncB1yyCHRQgstZNrvhBNOWOj5f//739GgQYOi
VVZZxbR93vH4449XlFpFUdoJtZXaC+oLfU6d9erVq4ttt+yyy0bHHXdcNHjw
4OiXX35pdVK9YL7hr3/9a3T44Yc3PkcccUT03HPPFX4X51/wrP2u888/v4JU
twbWOWeffXazLlcE5udOPvlkc874hhtuGO23337RJptsEs0222zReuutZ8ax
ZfLmm2+asYhdD0U/77zzTqlpgttvv93YRf3794969+7dsK/22GOP0n+rbvz0
009mjvb0008v/EG/MNcjsOY+11xzRa+//npQmrB1TzzxxGiSSSYxdTHddNOF
ZrOtoJ0svvjiZj4WPThixIho6qmnbuj3vfbaq5Lf5fxCxgYTTTSR+u0oSgng
H3PSSScZe5q2O9VUUxV6nnE7Z4nOP//8jfbvYwMpitLz6HRbqZ255557Gjod
+64nrBX++eef0W233RZdc8010VprrdXo9/bdd99C7xkzZkw099xzm2cnn3zy
6LDDDosuueSS6Mknn6wo5c0Fu3755Zc3Z3S68r//+79mDYDy4Jzx+Bo9a++H
HnqoKbO99967NJ+Nt956y4wJZN2Qerj55pu7fa6//npz5jn6aLfddotmnnnm
hnwPHTq0lLQI2EXrr79+4//MczFfhH1V1fioTnz33XfRRRddFJ122mnRPPPM
0yhn5gOZ28JmlA/jdOZOVl999cZ91157bZf3MUc277zzGhkLZffddze/Meus
swa/q134/PPPjbyfc845Xb7H/qdN4Gf79ddfV/Lbl112WaNe8TtRFKUc6Edp
V6yx+IA/pbTN0HlRRVF6Fp1oK7U7rEGKTl9sscVanZzSoc/bddddTf5YBy4C
a8ibbbaZeZYxe0/j3HPPjZZbbjnn+1988cVolllmMfP3r7zySua9MnZnDFcW
pFdkdYcddnB6hnmEE044wTwzYMCA0tIC+K2stNJK3b7/f//v/5X6O+0APheU
8corr5x77w033GDuffDBB7tdo72V0daYP+E3mAfoFPr16xdNOeWUxg+i2fz4
44/GHwYfHN1fpSjlccoppxhdNuecc3o9//TTTzf6TdvHSVEUpRNtpXbngw8+
6OIj39NYcskljc82+WNN0BViuLAXbMYZZzTP3nvvvRWmsvmw7oZ/xY033uh0
/wMPPGDW2LEdWNfLg3V4xhCU3TPPPBOaXAPj4TXWWKMhr8TbcmXLLbc084pl
wno7eWQ+o5PBv0Xq2nVuhHVhfCjiiL916LoQ6SA9CyywQNB72oVXX33V5HfF
FVdsdVIURSkR/JmK2i829E/SZ2LvKYqiCJ1mK/UEPvnkk4ZOX2GFFVqShqri
HDO+XHPNNc37xb/aZS2I54499lizV5TnxhtvPBPrqSfBGvRMM81k1qPzeP75
56OJJ57Y+H8X2bu67bbbmvLbZpttQpLahQ8//LAxRpxmmmmc45A/+uij0dpr
r11aOgT2YfTp06ej1xjZMyk6xDXuEX4eaevC6KFddtklKE2nnnpqR/VF+MaT
36222qrVScmkk2Lad1JebTo131VBPJCQcftLL71U2bhd61pR2ptOs5V6AoxR
RacTX6vZsL5GXIQqIDYTPmYge9xd/MQOOuggM05nDzXPFPElbwdYJ2YvC3MT
eRAfmlhzlMN5551X6HfE/4Z1fX6zLDjvQGTW3l+eBXvPictbNvhlkI6jjz66
9He3C+ybpgyY2/n999+dnmE+LQ3kjPYass+90/qiLbbYovR9KWVTpa6vG52U
V5tOzXeV1HXcrnWtKO1Pp9lKPQHOhBOdvtpqqzX1t9kjzZiOeGNVQBy6xx57
zPzN3n3yiL93FnfeeaeJ4wKsE/MM8eR7Eo888ojJ1/333597L+ue3DvffPM5
rc3byJiWT9nz8hJ3gA/zKy6w/7dsKBPmQMYZZ5zE/dqdwMYbb2zqAd+DJGhT
cbLi7ePfwfs4p9KXtL4In/6eBvtHZphhBpNf4jFmQQzZLL744ougtDDXkuRH
UbWurxPNzKvLnqVm0cx8h8ppFVSVpjqO2zupPStKT6aTbKWeAvucRacT6zkU
xoJbb721eRf+rqxVE3M6vt6K37KcTzTZZJOZs5vtT5596QJnlEl8fMZseWM8
1thZaxfwI+cZYu73JI4//niTr7zz2unvxx133MTY3y4Qp15ki3PNywQ/ABmr
sDb77rvvlvp+V2g/EpMNv4QyYqHHwQcf35EDDjjAnNHIXmZAr/rUS5nQrtk/
Qf7R/3FYfy+qV8gXsRQ4D8AXuy9irzxnFLKfgXgVfMe8QZ6OcdVlPjzxxBPG
vwnZ5b3Dhw/3fheyIe2MGA5xXYquJd2cHZHkn8K5AMS5YF8LPhPMRSFznMdB
LE/iULLHhPMaksCXhRjy1Bc6nd+zKarrqyp3lzJnzhZ/HmInMu9o5/n77783
/QdtjvKifC6//PIu6fLp1xh7s2+J2B18SCNlGS9HAZ3DnBY+FuwZAtJw9913
mxis9Ht82LcoaaNOiflPPTIHy2/g15IXQ9NVTpuR71A5LYJrvstME+3ozDPP
NLLPHCh1uPPOO5u9L80Yt7fKdkMGaW/oZGLPpq0PECcnPjdCjJSjjjqq7fft
16EM6pCGdqcdy7AMWwmqtJeUrpQ1bkde6YNZe6SfEDiPjbHfRhtt1Ji/wVed
vcnsG5ffnmCCCRp/l+F3zLjO9sVlzTwvLjy/Kfule/LedvwqXGJHErNd/J99
xqMSU55PFetCnE0t70fPNHN+EJngvAFkDFufOPuko+hZg3mwdxzbb8cddzR7
+2k72HHofWz0ddddt9TfK4qsjfPBbzLOVVddFR144IGF34vdSr59kb4I2WVe
xe53mIdjvIPNyRgtThFdVhTirtMPIjv07+uss45JJ/4aRedgkIWFF164cT4i
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
YQ2DveKciQW0YfxlGc9wPhbngIbgaytB1faSkozsd+bDeb8uIDes78k8uOu+
EM6HsvuNvP7OB+yR+N52QWKtsRcD32HOLYkje9uJv2CfHxsK7e+1114z/qQh
n5dffjkx3UUgbm7WfjpJL3YCZWHv10YXcy4cYzXOabXPzME+wTeIuAA++4Nc
oA/gXJ608UkarEkT6ygEYsZSHkl+TMR159rw4cODfgOoG97197//vds1/EO4
Zsv4jDPOmOpzJj73Sf4nIdh+0b570LOQmCa+SF+UFv8FZAyx2GKLNb7z1WUu
YP+jV+J7e5sxbqdfzRq3i270HQ8RK9hl3J72/qrK3bfMJQY4Nn0SLuP2rH6N
Oces8hJkPTa+j17sqCrG7b5l1ox8h8ppFr75DkmT7DXKmlsNjSfPGcxpZV4X
2030VzyekOzjTBsX4EfkO7cLdbLLqiqDIuP2ZtSD7Csp66ymulFmGaJb8N/H
x5NnWcuhD5exCdfw609av3fF11aCKu0lJR3OIpByx4ctD8Ys4m8u9gDfyRkq
zCXZ+x8ExsPM59hrldJ+s/qsomAXpO3dlhjnrFWmraXLPo6ePH/Ur1+/xPOL
4gwbNsyUBWc4iL3CuQ72fqVDDjnE+GCjozibjHnUpHMc4zBf1KtXL2MjJcVe
S4PfSzvLKgnmc6+99lozl5DkX1EkHeKbGj97AIgzQkz7JLuuaF4l1oftjwTM
U8t+SOZgBWIJpMV5En/zpPkE3zoAWe+z1/3LhP6hyL6dOPaZpEn+EZQlZ2hx
D/EwBF9d5oLsK4jni98PHbeLj8YJJ5yQeF1ie9B+k5CxAeWVlIa88RBtXq4n
+Rnm6fqqyt23zJmTlutJNhF+gWl9pku/xvwjPkPcEz8vXEDPorfiMgqyHp02
t2WP29kLFydr3O5bZs3Id6icZuGb75A0EfebuZesOTV8G7medU5TFuj+tLZZ
F9ttvfXWM++K+03LeYZJMZNpo3nxdduJqsqgyLi96npg7IpvIPEcfOIdtwNl
lqHEr2MdnmfRnba9JfvT0s7UdMHXVoIq7SUlnaFDhzb0LzY4+9bTxh6Mf2Td
Jr6+h9xJDGzqn3Od6ZfZJ8j6NnV6/fXXd3mGs1y5l2fw98CWoF9nbqboWZjI
FvPKnCXI+DFpP6/Ei2C9OAl0itgUeX7k7YzM8bvEYJc4GoyXKeP4mJn5P/az
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
1nj83iIwtiQWMPHlOdPCBfuMi1bSjHSE/AbxsIgJz572QYMGmTM78Ic/44wz
WpqussE/gLj8Sec3KoqiKIqiKIqidDrEq9x///2jF154odVJUToQYnMT9173
tCuKoiiKoiiKomSTd1aYolSBnGGmKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqi
KIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKM3i
888/j84999zoxx9/bHVSFAutF6Vdef/996Ozzjqr1cmoFZxFMHr06Ojmm2+O
/vnPf5Z6LkFP0xXff/99dPXVVxs5KptWlJW2h/amp7UvRWl3quxPlfrx8ccf
R19++WWrk9FS/vd//zc69thjo6WXXjoaZ5xxov/6r/+KPvvss1Ynq+PRevkP
2k7bC+rr4IMPjhZccEEjt5NOOmmrk1QLfvrpp+iMM86IZpttNlMu8vnb3/4W
9N6epiv+/e9/R4MGDYpWWWWV6L//+79Nfh5//PFS3t2KstL20Dz+8pe/RHvs
sUc0bNiw6O677/b6jBw5MjrxxBOjVVdd1chiT2tfilJnXO29qvpTpb4wL4NN
MNFEE0Vvv/12q5PTMpg3Hjx4cDTDDDM05J41DqW1aL38H9pO24//+Z//MXbv
JJNMYuR2uumma3WSWs5vv/0WrbnmmtEFF1wQffPNN9EJJ5zQKJ+bbrop6N09
TVcwVrrwwguj+eefv5Gf5557rpR3t6Ks2r09vPnmm9GRRx4ZHX744d6fd955
p/J0/vzzz9Fkk01mynjiiSeO1l577eiAAw4wcyZ8+HueeeZp1PuUU04Z7bff
fo3rBx54YLTVVltFvXv3btzz8MMP97j2lcUff/wR/fWvf+1Sd0cccYRX+xs1
apR51n7X+eefX0GqlZ6Cq71XZX+q1JfLLrusoYPvuuuuVien5Zx++umN8vj9
999bnRzl/6fT60Xbafuy++67m3qbddZZW52UlkNZzDfffF2+Y03hvffeK+03
epquuOOOOxr5ef3110t9dyvKql3bw1tvvWXsaNKOTX3JJZcYn9T45/rrrzd2
NHMUu+22WzTzzDM3ynjo0KGVp/PGG280v4WfRtq+irPPPruRpp133jnxHuTh
1FNPNffsu+++je97WvtK4s8//4xuu+226JprronWWmst4xsSLwcXxowZE809
99zm2cknnzw67LDDjNw8+eSTFaVc6Qm42nvN6E+V+sEcKnPIJ598splj7HSG
DBli2gp+YEp96PR60XbavrBug+zOO++8rU5KS/nqq6+iCSecMNpkk00q/Z2e
piuefvrphg1Xtj3WirJq5/bAnm6pix122MHpGfadsg7GMwMGDKg4hVG00UYb
RSuttJJZd0/jzjvvbOSDfiWL0047LZppppmM/wf0tPaVx9577x3tuuuuJs/r
rbdeoWfxY9hss83Ms4zZFcUFF3uvWf2potQdfEtkPl2pD1ovSruCrY7sLrDA
Aq1OSkuRMQ9+uFXS03TFiy++2BhjffDBB6W+uxVl1c7tgVhPa6yxRqM+br31
Vudnt9xyS7M+ViWstfXq1Sv69NNPM+9j/7rk4eijj868l/H6iiuu2Iit0NPa
Vx5LLrlk9NBDD5k8s7/AFeJIUmYzzjijefbee++tMJVKp9Gs/lQpD40HUg34
uXVSn9QuaL0o7Yr4mrbjOKVM8MelHPAfDiWr/+tpuuKll16qbNzeirJqZXso
w2768MMPzZ5w8jDNNNPkjpGFRx991Ow1rxLG2N99913ufUXG7cD6H3tpoae1
ryyIm8/+YeRG8uzi78ZzxPAjJgLPjTfeeNEPP/zQhBS3B99++62JFcDH54wM
zqJYffXVzadT46+V2Z8q1UPMAmIPKOXTSX1SO6H1orQrOm7/P/DdpRxOOumk
oPfk9X89TVfouL0cyrSbrrvuukadrL/++k7P/PLLL9FCCy1Uyu+HUnTcbtPT
2lcWt9xyS3TKKaeYv2WPu8telYMOOsiM09nLzjPLLbdc1UltK/A9EfnbYost
Cj3LvMm0007beJ54Ep1IWf2pUj2vvPJKNPXUU5v4KHlwbkfWHqf4vZwnkMYX
X3zhnMZ2ppV9UpH66jQ6yVbIIq+dtgusR9SNqtKUNk4h9lHV1EWn4F8stlaI
neHS//U0XeE6bmcNqyh1GrdX2R6K2E2uyL5lPozPXOjXr19pvx9Cu47bm22H
EofuscceM38vtthiJt8PPPBA5jPEDiCWJGyzzTbmGeLJVwn7I77++mvz90cf
fRQNHz7cxNXzWctuBnPOOWdD/ojhWIT777+/8SwySBz1nkqavVdWf9pJPPHE
EyZWJ/NvzKPRRkIgJuc555wTbbzxxua9vJPYInH/B/ys6HuoK875GD16dJcP
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
2yx9e1ouueSSWp9F2aYlSft/6qmnbN5uvfVWu7/5lltusePTDz/8YOVmyoNz
lBXj15tvvmnviyvfMvrLPH0UYyzvxfvxLhz4YeM33uXzzz+3f7t35TreHb0E
Xn75ZVtOjN+c52/mUuLKIen7+XVmyp5xDhsx5nzy1MV65MFfDm+88YatZ9dd
d52tf4zVQ4cObXZfFvmgaJkCssg2WWSRIvsdyvyiiy6yZbHlllvamJLsBdxj
jz0C9fai6mpcOnnKqIjyKUKWEULUD3SwNdZYw+rSkyZNsr+9++67Zu2117bj
kd/3Jeuw9CuLLrqolbMcd999t5W5aO9//vlns+cQ/xvf5PSb7jw62CqrrFKT
taaddtra9Xfeeafp2bOn9U3k71OZryQ98jHXXHPV7g+ax0yT348//tjMNtts
tfTwE0se11xzTbPBBhuYlVde2ebRnb/44osDy5T08G/M/cxLuHlQZHP6bX4n
plER5RoFMhPls+OOO9bWn+jX8TdHHg4++GDb73shvhvvyfyxe0/qAde7MkGv
iCJpneJZ5M9bpjPMMEPtbw7meQB/rIceeqiN28x7kbbLj1/GT5NulrJP22aC
oNxJ98svv7Tj8sILL2x9a5122mm2bnzwwQfm/vvvt/X/iSeeiE2vSBo5b62F
RirjKVOmWL/t3vbxwgsv1M4X1S/Gse+++9r7kT+d/pcG51OeI4kvO0ea9o9N
7AknnNDkffET/euvv5pvv/3Wrt1xD/0N/jyZP4gr3zL6y7x9lJsbJw2XdocO
HWxfS1kQa4Qx2I0T6KlXXXWVnb8A9FDqNefQY9Hx0WOiyiHN+zmdmWv79etn
/Reil+ati/XIQ1B94NvsvPPOTX5baaWVavdkkQ/KkCmyyDaQRRYpst+h3S67
7LJ2bsH1LbQB8oVc6pcx49ps0noSl06eMiqifNL2E6y9MZ9M3yCEqAZkDtr0
888/3+R3+mH27NBOvVx77bX2etbD/TCHyTmu8XLPPffY33ffffdm9zCWO3ts
+j0/9LNRNkzHHXdcM50/T36Ze2Q8c30duiIyimPcuHFmqaWWqu2jDJJ/iEXE
+c6dO4e+D+Om164pS7lG4dJbZ5117Hyvnz59+tjzq6++euB8B+MNugTXYCeP
DMB1Ti6LIm2dYh8r188zzzz2/8gG6OnIwfDOO++YFVdc0a6neaE+cR/z5kHE
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
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEKJxGTVqlPn111+rzoYQ
QgghhBBCCCE8TJw40ey2225mqqmmMq+88krV2RFCCCGEEEIIIdo8kydPNk89
9ZQ5+uijzayzzmp1do5x48ZVnTUhhBBCCCGEEKJNs9NOO5npppuupqt7j0mT
JlWdPSGEEEIIIYQQok0zYsQIc+mll5r11luvmd7+559/Vp09IYQQQgghhBBC
/A+jR49uorOzBi+EEEIIIYQQQojG4Msvv5TeLoQQQgghhBBCNCjffvut9HYh
hBBCCCGEEKJBqVJvf/vtt60v+1NPPdV89tlntd+ffvpp06NHD9OtWzfz6KOP
1i0/VfLHH3+YwYMHm2OOOcacdtpp5o033rC/42tg4MCBFedOCCGEEEIIIURV
VKW3f/fdd2aHHXawdvpdu3Y1Cy+8sI0hj8563nnnmQ8++MDcf//9Nj7dE088
UZc8VcXLL79sll9+ebP//vubTz75xHz44Ydmjz32MC+++KI5+OCDzTbbbFN1
FoUQQgghhBBCVERVenufPn3Mgw8+aP++4oor7LPXWmstc/vtt9vfvv/+ezPT
TDPZ36+66qpS8jB+/Hhz7rnnmrPOOivXcfbZZ1vdOwtPPfWUfc/DDjusye8/
/PCDWXTRRe37M48hhBBCCCGEEKJtUpXevuGGG5rffvvN/n344YfbZ++33361
81OmTLHrzF26dLE6rBfWpIcPH27Xo/PErBs7dqw58MAD7TPyHOT7kUceSf18
bA7mnXdea2swefLkZuc33XRTWy7PPfdcs3NFlYEQQgghhBBCiMamCr3966+/
trbxjnXXXdc++80334y8b8KECda2Hl37zjvvNL169bLx51944YWys1wKxx57
rH3viy++uNm5v/76y8w555x2Lf7333+v/d7aykAIIYQQQgghRDRVrbejl8JP
P/1knzn//PNHXv/333/bNXr81Xl55513zGyzzVbz49ZSIN+8N2XOfnY/2N1z
bquttqr91trKQAghhBBCCCFEPFXHgRs2bJh97p577hl53QMPPGCve//995ud
22STTaytfUvizDPPtO+z6qqrBp6/6KKL7Hn23ztaWxkIIYQQQgghhIjnm2++
qVRvP+WUU+xzr7zyysjriI82/fTTB+7lPuSQQ8wss8xifvnll7KyWTiso/Pe
Rx11VOD57bff3p5/5plnar+1tjIQQgghhBBCCBEPe83T6O3YauMnbdSoUYU8
f4MNNrDPJZZ7FOyBx39bEMR/Jw3sxdPAO8wxxxxW381zEKuuf//+qZ698sor
h/rKJ5Y7abZv377mu6+sMhBCCCGEEEII0dh8/vnnTfT2qaeeOvRadPZOnTrV
rt17771zPdvtbZ9vvvlir2X/+xJLLBF4ztmcE1MtDaxb4wvvtddey3W8/vrr
9l3SsMUWW9g8B8Wmf/755+25jh07Nvk9axl89dVXqfImhBBCCCGEEKJxII6Y
V2/n+PHHHwOvZX3af22cD/goku5tB/yuLb300oHnzjnnHJvOkCFDMuel3hx3
3HE2z48//niT31lr33rrre053stL2jLAd8Hqq69uf8euwR9PTwghhBBCCCFE
4zJx4kTrf7xz587NdPGTTjrJ+j7z6+8vvfRSs2vffffdzHno2bOnTePqq6+O
vZY453FrzfhtaykQfx07+LPOOqv2Gzr7EUccYW33eZ+nn366yT1py+Dee+9t
8q369etXzssIIYQQQgghhCicxRZbrNm+dnyeeX9bcMEFm93XpUuX2vlu3brl
ygPr7O3atTPjxo2LvXaVVVYJzA+4vd0tLYY59gaLLrqo6d27txkwYIDZfffd
rR+6ueee25bLlClTmlyftgywj2eN3n2v/fffv9T3EUIIIYQQQghRHL/++qv5
+eefze+//97sHL/hl3zy5MmB97LGHhSLLC1ffPFFrD86R9euXc20004b6Ev9
oIMOMjPOOGMTH24tBb4D+9mdPzn2yqNjs//dT5YywDaetf0555zTnHHGGeW8
hBBCCCGEEEKINs+tt95q9dmxY8c2O7fZZps18+HWUrn00kvte3rt5x1Zy4D5
GWwpsJsXQgghhBBCCCHKABuA5ZZbzu6J98K6Pzb+I0aMqChnxbLrrrta3fzJ
J59sdi5rGdx22212X3xan/dCCCGEEEIIIUQaWGdec801Ta9evczo0aPNXXfd
ZdZYYw1zww03VJ21QkAvZ287a+PYzweRtgy+/PJLs8ACCwTOAwghhBBCCCGE
EEXz119/mZEjR5qbb77ZDB061PrFb+m89dZb5tprr7V++lhrx8/8VVddZf3W
BZG0DD777DOr4w8cOLDM7AshhBBCCCGEEK2awYMHW3/w7Gnv06ePOfvss60t
fN++fXOlSxy/77//vqBcCiGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCtG2+//57895771WdDfE/fPrpp+bLL7+sOhuiQn7/
/XczatQoc8cdd5hnn33W/P3331VnSQjRxvjoo49Mv379qs6GEEIIURjI1Oi9
jcDEiRPNY489Zh544AHz9ttvmylTpsTeg76+9dZb23tF9fDNdt11V6u3ibbF
zz//bPr27WsWW2wxM9VUU9UOyc5CiHrwxRdfmO7du5uVVlrJ9j0zzjhj1VkS
QgghcvPQQw+ZLbfc0swwwwx2fJt99tnNpptuah5++OFK8nPPPffY53fp0sUs
tNBCtTH30EMPDb2Hdd3FF1/cPP/883XMqYiDNfelllrKvPXWW1VnRdQJ5ms6
duxoLr/8cjuHdsYZZ5iZZprJtuNBgwZVnb1WyV9//WV+++23qrMhGoA///yz
6iw0BF999ZU566yzzMwzz2z7njnmmKPqLAkhhBCZ+frrr812223XZD3Mfxxy
yCF1zRPy5z/+8Y/a/ydPnmx69eplx9zDDz888J4//vjDrL/++uaSSy6pVzZF
CoYOHWqWXXZZ8+OPP1adFVEH6DOWW265Jr9NmDDBfPjhhxXlKJpffvnF7LHH
HtZWh/6nJXH33XfbOdd9993XHHTQQWazzTYzF1xwge0TRdvjjTfesOvLN9xw
Q9VZaRi6detmZZkFF1yw6qwIIYQQmcCGDNl6rrnmMvvvv78588wzzd57711b
F/MeN998c93y9dlnn5mNN9642e9R+2IHDBhg1ltvvTKzJXKyyy67mBNOOKHq
bIiS+eabb6xtzE477VR1VhJz66232n6Ovg/7/pZCjx49rC4ybty42m/Mc26z
zTZmk002sX+L1g32TMzdXHrppWbHHXc07dq1s3X5iiuuqDprDcM555xjy2TJ
JZesOitCCCFEJvr06WP19R9++KHJ7+wlRxb06u3YvNYL1ruw03/11VcTXf/t
t9+aOeec09x+++0l50zkAZ9k0003nezlWznModFnHHvssVVnJTHYHfXs2dO8
8MILVWclMfj9oJz51w8+Stq3b9+ivoHIBnvZDjvsMNO/f3/zwQcfWN1dentT
zj//fFsmyyyzTNVZEUIIITIRtX59/fXXN9HbZ5tttrr6gcbuc4MNNkhk68ne
2QUWWMD6rRaNzYYbbmhteUXr5cADD7R9BvY7ojywlWLvUFi/h+3U1FNPrdga
bQzp7c1h34j0diGEEK2Vzz//vInePv/889f1+ezN47mnnHJK5HWszS+66KJ2
rUw0Pthy4iNI+9xbL+xxoe3iD0qUA7o4ZYxvkjAuvvhie81pp51Wx5yJqpHe
3hzp7UIIIVoz7Iv06u3IAvWENST0cdaLhg8fHnrdiBEjbP4effTROuZOZGX0
6NF195cg6gc2OXPPPXfpejvzPviSa6sw/0UZ77nnnqHXsG+IazbaaKM65kxU
TUvW29mvUgbS24UQQrRmXn755SZ6+x133FHX57Nnffvtt7fPJv5z2Prs6aef
bq+Ji9fOnv2jjz7anHrqqdbvnePpp5+2vp3wN1tP3R/95rbbbrNx7dgPHGbr
+uKLLzaTZd59911z8sknm48//rgeWS0U4hPNOuuspmvXrlVnJRWNVn8alcGD
BzeJQzFq1Kja4dezx48fb/e4bLHFFvYg7iP14sknnwxMm7lE9nJzDf4s8JuN
vc11111nNt98c5sGcQvSQEw62iB7g1tSDLXOnTvbMmZPQhiPP/64vYZ97uL/
423L2JU5GGP+85//2HPHHXecuffeeyvMZXYaRW9/7rnnbJvGvgqfsUOGDAm8
7rvvvrNzTOzroK4yFrI/7sYbbzTbbrutWX755c1WW22VSAahj7jooovsfBZ7
7dZaay3bRogVIb1dCCFEa4W1Mid/M3bWC3zkHXXUUdYPHnLTIossYvNw5JFH
Bl7foUMHG18sCuSCHXbYwcZ3R+ZfeOGFrZ6P/eh5551nffncf//9Vp984okn
Snir5jDfgFzy008/2fj06H1+WJueZppprBzphfUzyoTY9i0R5ClksZZCI9af
RoP4biuvvHLNlzUHPgixl+Fv/mWOw8GcFXEs0DGIsQzI68xhce3BBx9sy91B
PHjXF7iD+audd965yW/Ev0oK++/Zj+PaIL69WgroQ7wvfWUY+IF05fLrr7/W
MXeNC/PB7C3wtuVJkybZOQ7iXTz44IO2beMTFZ8uxxxzTNVZTk3Vejvtibkw
6ibtnNiKrg8YOHBgk2uZe6acXT3lGvT9Nddc0/q3oU+Zdtppa+fZ+xEG9R1Z
4IgjjqjN86P/kwfiW0hvF0II0RpBd8bfEeMc61r1irmMTLXOOutYH/du/dn5
pkYf8Pu9B9bi42z48ZuPPAbIMqTHPLzzP4/vZRf77qqrrir4rZrzyCOPmLPP
Prv2/6WWWsrKj37c3Mm///3vJr9zL7+j/7ZE+L4zzDBD6vtYnz333HNtueQ5
KD/sSZLSaPWnkUG/pi47O3nsSoir5m271157rT1PWw+KU0Z5c3711VdvEpON
tXX0KCfDE+eMtXbiExCzHJmfNdQkYBvhteMnz+juaamqTlI2lMFJJ50Ueg02
Dq6syKcIbsvM1/zrX/+ytkBe0O+pU3G2XI1GlXr7O++8Y1ZccUVzySWXNPl9
9913r/WbfrBzYV7U1VV0fmJJOohxyBjp5JEgX7Xo+owpxJ4M8p/LPKD0diGE
EK0RZ3uOrvzMM8/U5ZnI56ussoq1p/PajGNbi+0c+UHf9UMe49ad8WHubGAP
P/xwm9Z+++1XO4+uQbxj0gmaG4A333zTXlcEPMs9B5kE2TBIB8eWgLz646Yh
l1BWYWttReY1Cr7NmDFjUt93/PHH2/dC303D2LFjrc0j3ynPwbcPqkthNFr9
iSLrNykS6mbY/nbskonxyPk777wz8H7Kya3B+X2qedeQ77nnnibnmPdLyj/+
8Y/at2JekvRob2mpqk4Sh5o89+rVK/Sal156qVZW8in/v2A75m/L2C74dXZg
/Z3zr7/+er2zmYsq9XbWu3k2MoQX2jq/Yz/G/Jsf5t84z9p6EM5PbdB4yLcj
tgLnwmLHKg6cEEKI1ghrNNi3Mr7Wc38fNquMqyNHjmx2Dp0oaN0ZuZvf/Xbk
Xtgb7t1Lve6669p70KOS4vaJsk6YF9YRWG92YGdN2vjN8YJdK7Z98803X2A6
6L5XX3117rwi53jXNOOgzNEBsPHH1j3Kn3UYvXv3tnl8//33U99bb6qoP1V8
kyKJ0tvdejl1O8qv3L777muvw+7Hu7722muv1eT3jz76KFP+/G3Q2bX422Aj
4/Qj/AOE4V1vZ36wrcO6OT4XHK4tv/DCC4HXs27MGm495tuKpEq9nflnZIeb
brqpye8PPfRQrS4GzZGwd93trQnCxU/g8O63gfvuu6/mBycM+aUTQgjR2kD+
d/Zo11xzTd2e+8UXX1g7Y2w/g2C/WpAPcvYV83tcDDg3v8++O+SCtDHtWCPs
27dvYbHLvOsNzt7Vr8M6XS/MXzRzFUG2EGnz2qlTp1T+1PDBhu6Frek888xj
1y3TcuWVV9p3Y+20JVDv+lPFNymSKL0dXYhzSy+9dGQabi8IB74ZHV69PY9f
RvdNsV2hz0PX8Pooa3SczhnV92E77MoqjS1Ca8bfluedd95Au2p8LmAHRTmn
4a677rLzzPhRy3p491Bloer97UHzHHn1dvZ5uPv9fivZ58Dv+KUMQ3q7EEKI
1oZb46r3eO/0uLC4Ufik4/zzzz/f5PdPP/3U/o5v9SQMGzYsUheuN24NIWi+
wu1VCNsvjW4W5oM+Dch4lEsWFlhggUw6oothhR1vS6Je9aeKb1IkUXq7s5Fn
70EU2NY4Od1r91OU3u5g7Y606ul7swjQ78j3CSecEHoNPhJdWRXRV7QmXFve
a6+9As9ju8L5tH7p8JXIeMYYmvV46qmncr1b1Xq7F2xq8NHv+oSsejs+KsP0
duf3LsrOSHq7EEKI1sRll11mxzX+rTf4oYmyV3RyiNdXDTCvz+9BvtiDOOWU
U+z1yFWNgLORx6+VH3xucY6YRX5Yty3K93UVOuI555xj3+2TTz7J9NyqqFf9
ac16O/7eObf22mtHpuHmdji8tgdF6+3sgSAt52OwpYCdP/k+4IADQq9xe4pZ
UxZNcW3Zv/fKQRsK0hFbAo2gt6Nnn3jiibYvQKagfUXp7e58mN6OL5QwvR2f
lHFzgdLbhRBCtBYefvhh6w8GWTmMCRMmNLOdx74QW0z2UebB+V/z6+WAXSO2
v4zNQbB+989//jPRc4grE6YLB4FtH2v5xH7Nupc2il133dXmJ8iPNDHFZpll
lsD72CdN3LEi8lqFjojvZt47bWwq6hn7nSmXPAdlS7zutNSr/rRmvZ0YzZxb
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
jj76aHPqqaeazz77rPb7008/bXr06GG6detmfd/XG/Kz0EILmREjRtTtmX/9
9ZeZY445rN5+7rnnNjvP+js+5IUQQgghhBBCtB3wF//II4+YpZde2uqL8847
rznvvPPqstZO7LMddtjBfPnll6Zr167Wv9rEiROtn3vy8MEHH9j1ZXzfP/HE
E6Xnx/HAAw+Y2Wabre6+3kaPHl3bo/Dss882O3/99debY489tq55EkIIIYQQ
QghRLZtttllg7Pa55prL6vNl0qdPH/Pggw/av4lLznPXWmstc/vtt9vfvv/+
ezPTTDPZ36+66qpS8+JgHmPZZZe1+ak3l1xySc0f4AsvvGBee+01q8s//vjj
5qyzzrJlcd9999U9X0IIIYQQQgghquOpp54yZ555pt3P7tfdp59+emvHXhYb
brhhzffa4Ycfbp+533771c5PmTLFbLPNNtbH/Q8//FBaPrywzj3nnHNW4kcf
f3eUAXYHO+64oz3wE4i/eHR59jBMmjSp7vkSQgghhBBCCFE9+Fy77LLLzNRT
T91Ed8dfehl8/fXX1jbese6669rnvfnmm6U8LynsKy/rnaPw7m0///zzm53H
LgFbBCGEEEIIIYQQbRv2lnv19gUWWKC0Z6GrArHRWU+ef/75S3tWUo444giz
6KKLmq222irxsfXWW5uBAwfmeu6rr75aK/ORI0c2O//kk0+aE044IdczhBBC
CCGEEEK0fPAj711zJw5a2fHPhg0bZp+15557lvqcJHTv3t1svPHGdn970uPK
K680b7zxRq7n9u/f35bBzDPPbH7//fdm52+44QYzdOjQXM8QQgghhBBCCNE6
WG655Wp6Oz7ayuaUU06xz0L/rZpLL73UdOjQoe7P3XnnnW0ZsHYfBP7yhBBC
CCGEEEIIWH755Wt6e5BtNjrkc889Z0aNGlXI8zbYYAP7rDgfeKz7n3POOWb/
/fc311xzjf3t448/NieffLKNj8a+9MGDB+fKy4cffmht9r/44otc6aSB8sR/
P2VA/DshhBBCCCGEECIM7OTxW+5iwfnjuKNjdurUqabX77333rme5/a2zzff
fLHX4jdvxIgRNkaaiw3XrVs3GwceOIeNf14f+MSUP/TQQ3OlkQbivUXFbc8C
vgNeeuklM2HChELSE0IIIYQQQghRP9C92Zfdu3dv8+WXXzY5x9o1+iOxwp9+
+ulm97LG7o8Xl8cHfJq97e6a+++/397DPnQXRw5eeeUV+/udd96ZOT/w3nvv
mdlmm83cdNNNudJJyoABA2y+27dv3+R98rDbbrvZNGeZZRbzzjvvFJKmEEII
IYQQQoj6MHz48JrOzZr6bbfdZu3CsUFnrX211VYL9bPGGq5fb3/33Xcz56Vn
z542jauvvjryOtaPyTf06tXL3oOPdS/YzvP7W2+9lTk/jkcffdT6iDv++ONr
6/llQDw8FwNvmWWWCfRJlxbmZbBhcN+HORohhBBCCCGEEC0H9oS7/dTeY4st
tjAPP/xwrA+0Ll261O7BTj0PrKG3a9fOjBs3LvE95HOVVVZp9vt+++1nY6C7
+HJ5Yf2evf7zzDOPndOgbD755JNC0u7cubNd08euYfbZZ7ffg/+T/4UXXtjq
8OxZyMo+++xjvw9pv//++4XkWQghhBBCCCFE/Zg0aZJ5/PHHbXwx1rHHjx+f
6n7W2IvQB1nnT7MfHTty7MnxQ+dl8uTJZtZZZzVdu3at/b8IH+z4wiM2+zbb
bGNmnHHGZnMdHOypxwagkeDdx4wZY7+zEEIIIYQQQghRL9hzj6587733Nvl9
yJAh9nfs2+GAAw4o3L4dXfibb74xY8eObXLgg/7XX38t9FlCCCGEEEIIIURL
xO3BnzhxYpPf8aeHzfmUKVPM66+/bg4//PCKciiEEEIIIYQQQrRddt99d7Pp
pps2+x0/90sttZTp37+/jeFGfDkhhBBCCCGEEELUF9bZw3Ry9qJ//vnndc6R
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EKI189FHH5l+/fpVnQ0hIhk/frwZMGCA+emnn6rOSum0pXetCpWxaM2ofgvR
+pH8LkRzvv32W3Prrbeak08+2ey///5mv/32M0cffbQ57bTTzM0332zefffd
2rV///13hTlNzhdffGG6d+9uVlppJTPVVFOZGWecMfTazz77zEyYMCHX84pI
o1H5/fffq85Cq+XHH380PXv2NGuvvbaZeuqpbV396quvqs5WKbSld62KIsu4
Nfdpojkt4XurDxGiKW1Zfi+qz2oJfV9a/vzzT/PHH39UnQ1RMG+//bbZfffd
zTTTTGPmn39+c/rpp5uRI0faOjx69Ghz1113mQMOOMBMO+20ZpllljGdO3c2
e+21V9XZTgRj+VlnnWVmnnlm2+7nmGOOwOueffZZM91005l27dqZ9957L9Oz
ikijEaHN9+3b16yzzjpVZ6XVwlrRhRdeaOabbz5bTzm+//77qrNVCm3pXaui
qDJurX2aCKalfG/1IUL8L21dfi+qz2opfV8S0NXpH1dYYQVbL2aYYQaz+uqr
m/79+5u//vqr6uyJnGB3QnumTXTt2tX88MMPodcyX0e759q11lqrjrnMT7du
3Wy+F1xwwcDz11xzTW38f+CBBzI9o4g0GgnsD2+55Raz2mqr2XdibUOUywUX
XFCrQ7/99lvV2SmVtvSuVZG3jFtbnyaiaWnfW32IaMtIfi+uz2ppfV8Y77//
vllvvfXs/MOKK65o5pprrtp7ceyyyy5VZ1Hk4Igjjqh9S2xpkjB27Fg7x73Q
QguVnLtiOeecc+x7LrnkkoHnmb8/6aSTzNlnn53ZpqSINBqFG2+80SywwAJ2
/tHVkY033rjqbLV6sGejrLH9bO20pXetirxl3Jr6NBFPS/ve6kNEW0Xy+/9S
VJ/V0vq+IL777juz7rrr2vU21tyBf+knWXN39eXee++tOKciC5dcckntG+6w
ww6p9rtcf/311vZiypQpJeawWM4//3z7rsw3iuSw12f22We3ZbfllltWnZ1W
z6BBg2xZM1/S2mlL71oVKmPRmlH9Fm0Rye8iCOrBxIkTA89hI+/qzGGHHVbn
nIm8jBs3rjb3wr/sg0kDc1FLL720eeutt0rKYfE4e7q87b4t+r5ZddVVa+OD
yEdc/bnjjjsqkUPLqNeN+q5tCZVxehqlj2+UfFRNVDm01vrdCN++yjyU9exG
KNe8SH7PRmv49nnAH7/T2zt06FB1dkRKunTpUvt+Bx98cKY0aAPODqMlUES7
x2/FTDPNVGCuWgZrrLGGLTv8mYjsJKk/VcihZdTrRn3XtobKOB2N0sc3Sj6q
Jq4cWmP9boRvX2Ueynp2I5RrEUh+T09r+fZ5oQwoR/wYipbDzz//bGMpuHY/
bNiwqrPUhK+//rqUdJO2e+LLUEZ+xowZY+acc07r6yGOsDSKoqwyCsPp7Wrr
2Ulaf+oth6ap10Wn2VJkbvwztlSKKuO4Pq3efVIZlNEW/FCOv/zyS+X5iKMR
vneScmgpfUhSyv72jV7/ynp2I7SpIpD8Hi6/FyG7R6VTBFWOk9hZuJiZl156
aWX5EOm55557am1++umnj+3Ds4Cce8YZZ5gtttjCHptuuqn1dfnkk08GXo8v
hdtvv93svffepn379jZOOHUM32jbbrutWX755c1WW21lx+g4Jk+ebC666CKz
55572v3Y+M088MADzR577BHa7rkH/5Hkkfbtzyf/53fun2WWWcyoUaOaHMSY
jEsjT/kUXUZpKUtvx/8ve246depkywAfmNjin3nmmaH3PPfcc/Za4oJw/ZAh
Q5qcf+WVV2yZ4JeD8uLAJ8fAgQNrvkbefPNN+39inbI/kn+559NPP82cryiS
1B+HXw6ln6eu4BNwueWWS/yN48opbb4a+V0fffRR294333xzs+GGG9r3vfLK
K3PFOyEWLvVmt912s/4dgPQeeughu8ZBv8LRu3fv2nNok/ikJd/kn/JnfIzb
e5jkW/l5/fXXbX3EN2zHjh1tH4CfohdffLHJdXnKOK5PK7JPKuMbQtK2nKUt
JP1u/nJ844037Htdd9119n0ZA4YOHZoqH0X3UUH5LPN7x5G0HBq5D3GUVQer
rH+N8P5JyyBLumXWhzyULb9XLZumld+LkN2TpJOnjKqU3b2wn4JyoK2E7YFP
QyPK72WMi40A9c21e/a4FM1tt91m4w7suOOOtf0k1NMBAwbYuR5kXuqx4+OP
PzazzTZbLU9cw7ddc801zQYbbGBWXnnlWpwLjosvvjj02djCLLvsslZ+Zc4M
+Nbkyc1R+ts9vjkWWWSRJnESXnjhhdr5Dz/80L6PNw9ev4wcPXr0iEwjT/kU
XUZZKENvZ7wh3a233tpMmjTJ/kacEmLNIYP5/Xni6/PQQw81Rx11lC1D7nNl
QRt2EHeT8ZWx1pXHRhttZNu205+QW6644gr7DThPnaGtf/PNN6nzFUeS+nPK
KafUrndyKNcT4wX/qcgOSb9x0nJKm69GfFe+J/3Zoosual577bXa73fffbf1
u0N/ncUW8NVXX63Fi+VAbx88eLAdd4mNyzugK7vzhxxyiPnvf/9rtttuO9sX
4JOW8cKdP/LIIwOfk/RbeeF9/vWvf9lr9tlnn9r8PWMy8ga/n3feebnLOK5f
LKpPKusbQtK2nLbepvluQeVIHnbeeecmv6200kqJ81F0HxWWzzK+dxLSfI9G
7UMcZdTBqutf1e+fpgzSplt2fchLmfJ71bJpWvm9CNmdbx+XTp4yqlp293L5
5ZfbZ/BvXhpRfkdvL3pcbBQoO1ce1Jsiufbaa22666yzjp2/8tOnTx97fvXV
V29ih8IcCf2hyxd5RIdy4IdjqaWWsueQTYPKn7ZAm9xpp50C17doT/5272AO
9Zhjjqk9H7saP6ybcW6eeeax/6fvpi6yLpc0jazlU1QZZaUMvR3dhjSff/75
Jr+jf7AHh3gljnfeecfGocSHqhfyQxpBsUiZR3U2QWExUpi3oz17/bOkyVca
4uqPw8mh5P2mm25qci7uG2cpp6T5arR3BdeegmKaMFfPOa7Jwq+//mrlf9fe
zj333GbXHHfccbXzrAkwfjvogw4//HB7DnmPuAxesnwrOP744+35IF8TLi4Q
z3P6fJ4yjuvTiuiTyvyGadtyknqb5bv5y3GTTTaxa530O5tttpn9Nqeeemri
fJTVR9Xje6chyfdo5D4Eiq6DjVD/qnz/rGWQ9J3Krg95KUt+r1o2zSq/FyG7
J02nSv2mCJibww4pTeyBMBpRfi9rXGwEnL0JBzYeRfH555/X4oXdeeedgdcw
r+XmnvzfgnGE35l7CuKGG26o5dvvB5N2iE0c51grCyIujgRzfS79999/v9l5
lz/X9tOmkbd8vHnIUkZ5KENvZw6MNLE79sN7fvDBB7X/M5/Gtax1eqEcnZ4S
ZL+2/vrr2/OsjQaB7Qw+XrLmKw1J6g/E7deM+sZZyilpvtJQj3dlTnveeee1
c99B49BBBx1k76MOZIU5dNKYe+65A88/9thjtfx5x2EH44Q775+/z/Kt6NsY
yzj39ttvN3ve448/bs8zNrs1oTxlDEn7xSx9UtnfMG1bTlJvs/ZF3nLE1tWL
X3eIy0dZfZQ/n0V/77Qk+R6N3ocUXQcbof6loVHaYJJ061Ef8lKG/F61bJpX
fi9Cdo9Lp0r9pgjoJ7HRZ/25CBpRfi9zXKwatwbEQXyvonBzVdizRO252Xff
fe11c8wxR5N5pbjxF/sJl++nn366ybn77rvP/r7YYouFPjfOrwU2US594iX4
SdL2o9LIWz6Qp4zyUIbejp0QaTI3GVTeXpjnpm3711Non+59g2zX3DdnX5P/
POMyc5xeW7i0+UpDUbps1DfOUk6NrLdHvaub+15ggQVMt27dmhz777+/mXXW
WWtpZ92TGPce3nE+aC2K39x5rvWS5Vvxbvy+yiqrhOaZuX0vefuMuH6xkb9h
2racpN5m7YviyjFNPsrqo5Lks55jUBF6e9V9SNF1sBHqXxoapQ0mSbce9SEv
ZcjvVcumeeX3ImT3uHSq1G/ygj0/aw/YpxdFI8rvZY6LVXPVVVfVygqbjCJs
JgA7CNKM23Nz9tln157v9aEUV6/xBeHu8/t/OOyww+zvUfOPafR29qT4Sau3
+9PIWz6Qp4zyUIbe7r6H6wuZy8bXVhjMZfqJa/fMr4XpTZTPNttskztfSSlK
l437xmnLqZH19qh3dTbq7PFm3TvsGDFiRGnvkUdvh7TfCjs3fsfnSlLy1qe4
frGRv2Hatpy03mbpi+LKMU0+yuqjkuSznmNQEXp71X1IGXWw6vqXhkZpg0nS
rUd9yEsZ8nvVsmle+b0I2T0unSr1m7ywD/zkk08uNM1GlN/LHBerxmu7yTF6
9OhC0nU2JPgTiOLf//537dnePURx9RobprB67Xwc4BcqjKr19rzlA3nKKA9l
6O3MV+MTxOuTg4O5uSAbYC/Md/7nP/+x645R7R7Yi8R55qm94Cd8+PDhheYr
iqRjB/4zi/rGScqpSr09z7vif5Xf+/btW1i+/ZStt3tJ8q2Yw+d35v6Tkrc+
5dXjqvyGadtylraQtC8qUm8qq49Kks96jkFJvkej9yFl18Eq6l8aGqUNJkm3
HvUhL2XI71XLpnnl93ro7VXqN3ng3bfffvvC7UMaUX4vc1xsBJincO+UdR6G
+RPvHhC3FsQegyicjwgOYm044sbf77//PrRe41slrk3F6e3EH8jb9qPSyFs+
kKeM8lBm/HbKqXv37jUbNI4FF1wwMM4lfduJJ55o2/tll11WK4+odo8vDM4z
N+3m/LBJCvP7lSVfSUg6drh9Tnm+cZpyqlJvz/OujEX8fsIJJxSWbz+MLWXr
7Wm+1eKLL55ab89bn+L6xTx9Uj2+ISRty2naQtq+qAy9qeg+Csr83mlJUg6N
3oc4iq6DjVD/0lB1G0ySbj3rQx6Klt+rlk3zyu9FyO5x6VSp32QFXwHYjv/w
ww+FpBdEI8rvZYyLjcDIkSPtfgPeh3hH2Gik5dhjj23ig5QYSaRH/Iwo8Nfg
yhI/ig7XtrLUa+drkn1JYcTp7V4ZPKrtu1jOadPIWz7ePNRbb2e/SFl6u4M2
zVyZy/9dd93V5DzzlfPNN5+NgeXab5ydDeCX0tV1YrkAcbuS7vWJy1dSktQf
IAZGnm+ctpyS5isN9XhX51c9bv4lD84vXVl6e9pv5eRK/M4lJW99StovNuo3
9BLXlpPW2yx9URa9KWmbLKqPgjK/d1qSlEOj9yF+iqiDjVb/0lBVG0ySbhX1
IQtFy+9Vy6Z55fciZPe4dKrUb7JAHDTqMTpuPWhE+b3IcbFR8L4P9ilpYlLi
G5myJIae4/rrr080Lri5NeIWemH+JWu9JnafO0fMgSDi/MkTfzmPvBKXRt7y
gTxllAf8n5AmtilFQLysIP/b4OLK9u7du/Yb7Zv65t9blKTdA/umuIYYI/QD
+LcMirWRNl9pSFJ/gPidWb9xlnJKmq801ONdb7zxxtq5QYMGhT4DO8I4OTUM
F9elDL09y7fq2bNn7RwxUJKQp4whrl/M0yeV+Q2ztOUk9TZrX5RFbwrKR5l9
FJT5vdOS5Hs0ch9SRh2suv6loZHaYJJ0s9YH7HNfeumlZrE+y6RI+b1q2TSv
/F6E7B6XTpX6TVqoj+xpHzZsWOg1xEbLSiPK72WPi40C39bFteDAn36Q7wA/
xBFYcskl7T3eeCKkxzoQv/vj9DmYF3R7D9zcicO1S+IYBX3DqHqNHQiyNefw
/RkEczScx9Y0CPaiuPSD5qjc/pSoviUqjbzlA3nKKA8ujgN9QRHQZ9CGiZHt
x/mGufnmm2u/uXa30UYbNbmWMkrS7p2f2Omnn94ccMABdpwoIl9pSFJ/4Lzz
zsv8jbOUU9J8paEe70o/7eol/kb9sY2Avmr55ZcP7c/jcHPn2FsF4dXbGU/8
ROntWb4V74FfWM5hrxf0XsSNZS3lxx9/tP/PU8YQ1y/m6ZPK/IZZ2nKSepu1
L8Jm0Z3/8MMPI/MelY8y+ygo83unJcn3aOQ+pIw6WHX9S0MjtcEk6WatD6xn
uHuKGkPjKFJ+r1o2zSu/FyG7x6VTpX6TljPOOMPa5uGnP+hg/1+HDh0yp9+I
8nvZ42IjgS9K6hMx6Xkv9kI88cQTodcOGTLE7jNwZe2PSUyfMP/881vZ0h//
kPkR9/169OjRLH1no8Tx6aefNjtP/ER3nn0RfpgrZU6HdoHtnNcPw5gxY2xM
Tu7lGubVnFzr8PqTwGdo0PNJm/O77LKLlcl5BnOvjzzySKI08pRPEWWUBWJI
MEdImksssUSisSEJCy20UDNfEz/99JO1Q1pkkUWatD/8u/J84k9OnDjRlhXf
cL311qu9L+2W/ijI/wbjAvdyHb69eE4R+UpDkvoDeb5xlnJKmq9Ge1dg/5ir
mzyP+VjG1H79+tmyQI669dZbM70DOFmBg3HVz9ChQ2vnR40a1ew88rE7789H
1jqNfZizG6MvYYx++OGHbex25pNpo/R/jrxlHNenNfI3TNuWk9TbrN9t8ODB
tfN8qyji8lFWHwVlf+80JPkejVz/oOg62Aj1r8r3hzLHubT1AbnYXc/htUEt
myLl96pl0zzyexGye5J0qtRvkvLggw/W3jXqyFtPG1F+L3NcbESIdcc+ft6N
ssFvAP4DqMfMdWCTs9xyy9lzxMw78MADzcCBAwNtjamTe+21l63b+PfAb8yF
F15oba2xcfHvS6A/7Nixo51Lcd+QZ7GXmjJnDpS+0/lk4mBPD/f44xzS57KH
gmtWWGEFOzezww47mCOPPLLm34B2z/u5vQ70wdgZkaZLn3LYddddm+n2ztbF
He3atbM+23iHpGmkLZ+iyygp9KO822yzzdbknen32e/+wAMPZErX0blzZ5se
a/i0V3y44vtj3XXXbdYnYuPn1hnpv9kHhb7CnLfzPTHvvPNG2gXtscce9jqv
T4a8+UpLWP1hbpd6uO2225oZZpgh8zfOWk5R+WrUd3UQk2e11VZrNi5RDuiz
WWAdYvPNN2/il5Q6sOeee9q8ffLJJ9ZHqVsj4CCv1B3aN3Nb3M84gpxH2XNQ
h5555hn7jDx1mv2Nrj/2HtjmOZk8bxnH9YtF9kllfEPI0pbj2kLa74bPW/wl
e/tRzpMnnhVGVD7K6KPq+b3TEDXmNnIf4ii6DjZC/avy/aHscS5tfXB6Cfun
88oIWShKfq9aNk0rvxchuzt5pCz5vZ79Jt+TeQV/vfUfzPMErUOkoRHl9zJl
90aGOTnsSJhrwqbglltusfNRxCHEx4K/DkfBvAr7F9D/SC/Md8bkyZOtbSey
LrYSzLfwt3dOhb+ZK/GeJy9BsSt/++03+zz6JWRY/DMAsjb9gr++umeRPvWe
NP3P90L5UC70Gy42YNo00pRPGWWUBN7Dmybp0MeQF9INmrNJA+9Lv4TdDn0f
ZcG+obD80sa5lvkCb1nxDfgWcT4zr776aivjffnll4XmKy1B9Qfc98z7jbOW
U1i+GvldvfDe2JfR7mnneeZWqef+5/M3bRDIA3nhN85xDX+n6R9dnrPWafLA
ej5rKMzPYwfrJW8Zx/VpZfRJRX5DyNqW49pCmu/m+lHenTLwllOc7VJYPsro
o6r43kmJGnMbuf5BGXWw6vqXhkZog1nfKWl94F1YE3ayZlUUJb9XKZumkd+L
kN2zpJOmjKrsN8ukEeX3smV3IUR9ueaaa6zfUiGEEEIIIUTjI/ldiLYHcTyS
+uAWQgghhBBCVIvkdyHaFvjW69SpU9XZEEIIIYQQQiRA8rsQbQP8c9500012
fwtzdVE+L4QQQgghhBDVIvldiLYF83Ne36AbbrihfFMIIYQQQgjRoEh+F6Lt
8cUXX9RieBFblTgUQgghhBBCiMZE8rsQbRPifRK3dujQoVVnRQghhBBCCBGD
5HchhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBAiO+PHjzcDBgwwP/30U9VZKY228I5VovIV8Pvvv5tRo0aZO+64wzz7
7LOKySmEaBF89NFHpl+/flVnQ/wfkilEoyN5R9STH3/80fTs2dOsvfbaZuqp
p7Zx9L766quqs1UobeEdq6TI8v3ss8/MhAkTCs6hqBc///yz6du37/9j7yyg
Jimuv/3h7sFhCa4JTtD8FxIguDsEd12CB1vcEtyDQ3DY4B6CLu4uSwh/grsG
SH/nqe/c+Wr67Zmutpmed37POX323enu6vK6t+rWrWjIkCGuHtglOVgIUVc4
R3jYsGHRPPPM4/qrccYZp+WzGqOqRzJbPSmj7g+m9tNv8s5gKrtehjnM4447
Lppqqqkade6zzz7rdrRKpR/S2E3Kyl/mKcccc8xo3HHHjV555ZUKYiqq5Lvv
vouWW2656NRTT40+/vjj6KCDDorGH398Vx8uv/zybkdPCCESQSc89NBDowkm
mMD1V5NOOmnicxqjOoNktvpRRt0fTO2n3+SdwVR2g4Vjjjmm0T9+//333Y5O
JfRDGrtJ0fw9++yzG+/fcMMNFcRQVMk222wTzTHHHE2/MTf7xhtvdClGQggR
zg477ODGn2mnnTbxvsaoziKZrT6UUfcHU/vpN3lnMJXdYOHiiy925YFN0mCl
H9LYTYrmL3Ps++yzTzR8+PDohx9+KDl2oko+/PBDZ1u6+uqrdzsqQgiRi8MO
O8yNYTPPPHPifY1RnUUyW30oo+4PlvbTj/LOYCm7wQR2HfSP2EEMVvohjd1E
+du/4DeIst9tt926HRUhhMjF0Ucf7fqx2WabrdtREZFkClFPJO+ITpDm0wM/
iN3oH8v0NVLXNPYLyt/+ZYsttnBlf8ghh3Q7Kj1LVX6X6uDPqQ5xyMpgLg+R
jNllD2a9vU71bzDIbHXKz27TL3kxWOWdfim/XgB/AvhLaEc3+seQeJUZVi+M
Ab2M8rd/WWqppVzZ49tJZKfMvrAT4fZaHLIymMtDtGaw6+11qn+DQWarU352
m37Ki8Eo7/RT+dWdZ599NppsssmcD8B2dLp/DI1XmWHVfQwAzirtVcrKX86A
4XyNVrz//vuFwhflwlmlU0wxRdA4Rtl+/fXXHYlXr7SlMvvCToTba3HIymAu
j8FMGX1LqN7eboyq6/hUp/o3GGS2LPlZ9bjXyTqXVPez1q00Ga8oVeZHFnmn
CJ0s06x1uVfLrhe49957XVlQvyaccMJo5MiRTRdnlhrx/pG841wD5pXwmfjb
3/7WPZPGgw8+GC2zzDLuPJXFFlssuvbaawvFq45pvP3226P1118/Gjp0aLTE
Eku4dJ5++unRTz/9FBxvn48++sj5X1lnnXWiSSaZxP1GWDfddFO01VZbRQst
tJC7Dj/88MY3/vOf/zj/jsSZuJPnJ598sutTWhFSNnGeeeYZZwu05pprujMv
VlxxxWjHHXeMHn300QHPFsnfb775xvmo3HrrrV15Uq4+n376afTXv/412nDD
DaPxxhvPpR/fGBdccIGL05xzztm18vOhzFZdddVo6aWXjpZddtlotdVWc9/D
F+5ZZ53l4o/P4hdeeKHpPXRM8op3uCgn8iKeD2WkibiceOKJLm58h2dXWWWV
3DZfV155ZcPPKD5W/faHrBIv2+eee87F6y9/+YuLL+m99dZbB4SbJ0861ZbS
CM3jPH1hVX1s2e0iaxyKtoF2VFUeoX1qHcoja5x9sowDed/JU/55+xbeO/74
413+/uY3v3F9Arav6623Xku9vd0YVeb4lHcMaUee+ldVexwMMltIGvLWzdD2
WUadC+0X29X90PJMk/F88tS9MttgO9rJO4R90UUXRZdddll0/vnnN32LcwzP
PPPM6MILL3TxJF7nnHNOUx0sMw2h/W+eutyrZVd3OItg8sknj8YYY4xGHRt7
7LEbf3Ptt99+jeetf+T5E044wflTpW+Zd955m8L405/+lPg9fA1uu+220c47
7+zq7PLLL9/wA0o9zRuvOqUROZ76OOOMM0ZPP/104/drrrkmGn300V1/9+OP
PwbF3XjqqacaZ8ZyoWvQL1B/DzzwQBd/2pzfT9xxxx3RSiutFO29997OvyN9
rd3faaedBnwjtGx8SMeee+7pntloo40ac2D/+te/XLvl9yOPPLLpnbz5yzmY
M8wwQ1O5PfLII437b731VjTxxBM37vFtxrYFF1wwWnzxxbtafn7Ym222mfs+
8oBBHvHblFNOGZ1xxhnR7373O/f/X/3qV41nKBPqMbKa7S+i38L3CWlF36Rf
KyNN6NELLLCAqwOffPKJ++3ll1+OFl54YScbZfETSvsj75mjtbwnDOJs5XT3
3XcPKFu+t8YaazT9Ns888zSFnSdPOtGWQgjN46z9V1V9bBXtImscirSBNKoo
jyx9ah3KI2ucjTzjQJ538pR/0rgR0rdgDzr77LM7GZa1I6AOEAd8RCfp7e3G
qDLHp7xjSDvyyFxVtcfBILOFpGHYsGGZ62aW9llGnQvtF9vV/dDyTJPxfPLU
vbLaYFq5p8k7+Fo/4IADookmmmhAP8IaNWe9Ux9Jn4Vha9dlpSFL/5u3Lvda
2fUarBuR1p/97Gfu/5Qp/QPrUj7WP5JnzBf5vPnmm9Ess8zi7lPucdn+pZde
iuaee+7oz3/+c9Pv6667rnuHuey88apLGuHcc89196+//voB95iz5x7PZOXb
b791Y5HVyyOOOGLAM7vvvnvjPusCtAWDsWn77bd39xiLOEPSyFM2sMcee7j7
a6+99oB7yDv2Ld+mpUj+Mue46667NtKI3Y4P88KMsXaf8Y2zOELDh6rKD449
9lj3PusA8XTNNNNM7t6NN97oxkrmP20+2+K0yCKLuDnNOEcddZS7P//88yfa
JmVNE7opvz388MNNz9Kns7fp9ddfz5x2xuTpp5/ehYvdGPWRuH7++eeNPPDL
lnUk1hxYL/r1r3/t6sv+++8/IE158qTKthRK1jwO6b+q7GOrbBchcSjaBtIo
uzzy9qndLI9OjgNZ3ylS/ln7FuRB5FLOb0qyp0GujMvbrb7lj1FljE95x5BQ
sta/qtpjlrjUVWYLSUOWupmnfRatc1n6xTT5LKQ808KAInWvjDYYQpq8A9bP
tdpvYzII+mjZacjTZ2ety71adr0C/YRfHq1I20eEzYfladw+i7lrfmdNy+eq
q65q1JG4PVJovELoRBqZI2K+m7mkpPF+yy23dO+FzoHHsXMl2DeTxF133dWI
m1+fDfpYu+/PheUpG9YtGVO49+KLLw74Fmuo3Ee+8Oeqi+QvsA5i91999dUB
962c431dSPhVl5/NR2J/HQcbNO4x1+7zzjvvuDVh7lEeSTBG2FzkH//4x8Jp
Yi6d37DFjEP+vvbaa0HpjTPffPM1xrEk/LK97rrrmu75Y3vRPIGq2lIoWfM4
pP+qqo+tul2kxaGM8k6j7PLIUxYh4UJV5dGpcSDrO2WUf2jfwvewreY54plE
2jlw7caoIuMT5BlDshBS/zrRHkPjAnWW2ULSEFo3i/Ypeepc1n4xpO6nlWe7
MMqoe0XbYChp8g7rBe36EebcTActMw15ZfesdbmXy64XKKt/fOWVVxp5dt99
9zXdY96SehKfD6U/sHfitkh11NvbpdHmkqaZZhq3t8y/fv/73zfsYgg7z56p
tDT4bSbJJoHf7D7PGnnKhjTxO31TK5gfi1MkfwE7Nrs/atSoUsOvsvzos+y7
2AnF2W677dw9xmYfm7/ENrOdz5pNNtnEPTfppJM2zTPmSRO2R/zGnGdSHucl
bRxLK1ujaJ5AVW0plKx5HNJ/VdXHdrtfK6O80yi7PPKURUi4UFV5dGocyPpO
GeUf2reMGDHCPTNkyJCWz6T5pWv3rSLjU94xJAsh9a8T7TE0LlDXMT80DaF1
M2+fUiR/svaL7dISWp7twiij7hWVQUNJk3fwndGuH+E97v/85z8fcK9IGvLK
7kXrci+VXS9QVv+IrwHLsyT/AsylxOk1vb1dGs2uhf0irNe1uu65555K0lBE
18haNuy54nfm+LNQtA75/QJ7XsoMv8ryw2+HfffSSy8dcB8fadxjX6IPdnH8
Puuss7YNnz1TFr7vUyRPmkwutT6WNQf8lxQli96eVLZG0TyBbuvtWfM4tP+q
oo/tdr9WRnmnUUV5ZC2L0HCrLI9OjANZ3ymj/EP7FtN98ZXUiix6e/xbRcan
vGNIFkLqXyfaY2hcoK5jfmgaQusm5OlTiuRP1n6xXVry6O3xMMqoe0Vl0FDS
5B18MbTrR0xvZ+92nCJpyCu7F63LvVR2vUBoe8KXX7s8w+YoNM+Yb8FPotXt
vDJlKJ1II74M+Z09aFXQKV0jpGyYC+N35tCyULQOFdXbu1V+2ODh96ZVP257
E+N7rc2uCP+27cCHsKXL36eXJ02sK+AnxvfzwcV8f5JdVShl6e1F8wS6rbdn
zeM8fWFZfWy3+7UyyjuNqssjpCxCw626PIyqxoGs75RR/qF9i/n5wg9lK6rU
29uNT3nHkCyE1L9OtMfQuEAvy2yQRW/3Ce1TitS5rP1i1Xp7GXWvSH5koSy9
PWldvEga8sruRetyL5VdLxDanmzvQKs84wyDtDwjX/faay9XF0855ZRGn5tX
pgylE2lceeWV3e9/+MMfCsc3CfroKnWNLGVjMkLWtl+0Dj355JNtx7i0Mbyb
5Wc2efjO8P2TXH755e537BvjvjpsbpR9Zu0wnyFcnGdjFEkT+YufULMV5Jp2
2mlzn51Zlt5eNE+g6rYUSmgeZ+kLy+5jq24XaXEoo7xDKbs8spRFaLhVl0fV
40DWd8oo/9C+BV9gabJlmt7ebowqMj5BnjEkCyH1r1PtcTDIbFXo7Vn7lKJ1
DkL7xXZ1P7Q824VRRt0rIz9CqFJvL5KGvLJ7SPkNlrLrBaw87CzjVnDuSJE8
Y65kqqmmcucPmL1PiA1nWrxC6EQazUdjK7+7RTFfWlXoGlnLxsa7uF/bNIrW
IT+NSWOclXMdyw84o4dv0Ifhd4S5bMZCfMLiozUO55PxPOss7cCHh6ULv5pG
GWlCTiCeFv7VV1+dK5yy9PaieQJVtqU8pOVxaP9VRR9bdbtIi0MZ5Z2VMsoj
a1mEhltleXRiHMj6ThnlH9q3mK949ju3Ik1vbzdGFRmfjKxjSBZC6l+n2uNg
kNlC0pBFby/Sp5Sh66T1iyF1P60824VRRt0rMz/akSbvcFYZ95mDS6Kd3l4k
DXll95DyGyxl1wuk5YVh9SxPntG34FMjvrchRKZMi1cInUjjBRdc0LjH/Hcr
nnjiiUz2UIadkVC2rpGnbDh/0u49//zzwWkokr/AWdrtxjjmn+tafpyZwdk8
7JfjTMxbbrkluv/++xP9lRvnnXde0Jhu60TxvVBZ08R5Z63iY+fKJvkyDqEs
vb1onkBVbSmEPHkc0n9V1cdW3S7S4lBGebejivLIUxYh4UJV5dGpcSDrO2WU
f2jfcuKJJzae49ytJNL8ybcbo4qMT5BnDMlCSP2ruj1miQvUWWYLSUNo3czb
p+Stc3n6xXZ1P7Q824VRRt0r2gZDSZN3zE4Eu/Uk2untRdKQV3YPKb+6lx37
Ph577LFcZ/fWDdsz0G6sgiOPPNI9wxkBSf1Duzyzdr7kkks2/X7NNde07HNC
4xVCJ9JIP2dndUw44YQDzvSAl19+OZpzzjlzjbM2D8XcehK+roEPmzitdI08
ZUP8OUOLe9i9JKWH8xd322236Isvvmj8ViR/gf0udh/fkXFMpqpj+eEHhLnO
LNDPMC9KnOLnthr44rD9Z5SZT9Y0sV6DXMAZ53HMh8/FF1+cKQ0G/TDvH3TQ
QYn3OZ/EygaZtBVF8wSqaksh5MnjkP6rqj626naRFocyyrsdVZRHnrIICReq
Ko9OjQNZ3ymj/EP7FmzPmcvjOfwuJ7HNNtu4+9ibJtFujCoyPkGeMSQLIfWv
6vaYJS5QZ5ktJA2hdTNvn5K3zuXpF9vV/dDybBdGGXWvaBsMJU3ewQbcvpPk
K4C9G9zDrqbMNOSV3UPKr+5lZ747aetFdcpuw/ki5APpYS4XmZQ8Zo6R+VzD
bIq43n777cRw7D77EHzw18nv4403XvTxxx87//7MzSy22GKNd+gn2Hdq522E
xqsuaQTaInNBVrdWX311V0fZy0IeUF+SfMGGYPICF/Uzzq233tq4P3LkyAH3
GRPsvh+HPGUDnEXD/C/3p556atc/3Xzzze78R+ZhOb8CGzafovnr+6xgzSFO
XcuP/s/6YL7x+OOPN13MeyaVKSA3kL/0tfEzMSkrG8/33nvvxPezpmm66aaL
tt9++6YwWOfBvonzg5PG8TSI5wQTTODiwPk6SVx55ZWNsqEOtaNonlTVlkLJ
msch/VeVfWyV/VpIHIqWdxpll0fePrWb5dHJcSDrO0XLP0vfwhoscSNfiYOf
1meffdad9U04PEP++LIttBujioxPRcaQUELrX9XtMUtc6jrmh6YhtG7mbZ9F
8idrv9iu7oeWZ5qMV7TuFa0vIYTIO5y1NuWUU7pnFl988YaeS5zOPPPMxj3q
H/njn2lQNA15+uyQ8qtz2eHX09o512mnnZb4jV7C7A/sGnfccaMFFljA1SX6
rBVXXDEae+yxG/fnmGMOt5+KNsycJX2d+Tvgos4ut9xyjTP0sAWyOR7GPfaP
UVeY6zFfF9TT2267LThedUujQfv65S9/2fQtLtJP28gKc8BDhw5t8unJ2L3+
+uu7eP3zn/90/j1tnYCLeK699tqubrMPivfpg+kDyG+uRRdd1NnY5S0beOih
h1w+xdPKXKM/BhXNX97Hx6/1hVyMG2uttZaTZxhjeXasscaqXfkB+8LiPlnj
F/eJb1wOBMpxgw02cHFgHhYbq+OOOy76xS9+4ew1k87zzZsm6g33Vl11VScD
4GuX+kZ9ife1IeBDhz1c9k3GC+rjxhtv7MrlzjvvdH6cJ5544sYz1De+T5tt
RZ48qbothZInj9P6wqr72CraRZY4FG0D7Si7PIr0qd0qj06MA0XeyVP+efsW
dDn2EfP8XHPNFW2++ebRKqusEu20005Op7N+DBtW2+PbboxiTbjo+FR0DAkl
tP5V2R5D4lJnmS0kDehFWepm1vZZhkwU2i+myWeh5RkSBuSpe2XKiO1Ik3d8
2OPgp5f84Lw01pptbYF+iHiRd2WmIU+f3ar8Dj744J4oO5v7Yo9+Hlm2jmA3
cMkll7hxyD+jEVmVvOFfbBOYY7HfDP5m7s2/T3kxx2HQv4wYMSK64YYbnD2E
wbf4pu8fNSRedUyjD+nFVuPCCy90ckCedUqgTsa/zd/YsgDfJx78xj2e4e8s
Y3fesrHvs/547bXXujku7L7iFM1fe5b7zMv5vwE+dMmPOpafQT7SnyNb0d/Z
5csdXNjytIJ5dvp61oSYz/TLKoSQNBEmfR31gT6V77EfqVU+pUHZcGYN9Zgw
+Jf/W9lQnlY3KBe/7JLOq42TJU860ZZCyJvHaX1hJ/rYsttF1jgUbQNJVFEe
RfrUbpVH1eNAGe9kKf8ifQvrYYRPviLHfvLJJ+535vbI5/jadrsxqqzxqYwx
JIQs9a+K9hgSlzrLbCFpyFM3s7TPMupcaL+YJp+l5UXWMIwsda8KGbHVd9rJ
O3EoU+ZasLtg/sK+NWrUqOj111+vNA15+t+k8uuVsuNvbKasLxdCiHa8++67
bm9ikk8O+nXGRubemVP07dyEEEIIjSFCCCGEENXCXCBnzST5H/E58MAD3R6c
JJ8bQggh+hONIUIIIYQQ1TN8+PCgM2I5h4j9TUIIIYShMUQIIYQQono4b4N9
iWm2i/hHO/nkkzsUKyGEEL2AxhAhhBBCiOrB5yb+gnbeeedEXzf4LjnppJOc
PyHZNwohhPDRGCKEEEIIUT2cn2K+fjnXg/NfOFNoxx13dGetLLXUUtGpp54q
X0JCCCEGoDFECCGEEKIzcM4H51b++te/dmddbrnlltGhhx4aPfHEE92OmhBC
iJqjMUQIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGqY9SoUdEJJ5zQ7WgIkch7773nzvX58ssvux2VSumXdHYT5bEQotNwNt3I
kSOjK664InrggQei//73v92OUk8hGVUIkYWPPvoouvTSS6N99903+v3vfx9t
ttlm0S677BL98Y9/jC6++OLo5ZdfbjzbK/3x//7v/0bDhg2L5plnHneeyjjj
jNPy2X/961/RBx98UOh7ZYRRN77//vueKe9e44svvogOOOCAaOGFF45GG200
V0f//e9/dztapdMv6ewmZebxYOzHRGepax2qa7zqSGheffXVV+7cuiFDhjTO
ruPKooP2a7lkkVH7lX6tG0K04sUXX4zWXXfdaPTRR4+mnnrq6MADD4weeugh
11Y4b+Tqq6+ONt9882iMMcaIZpttNnd2KGeT9ALIrZybMsEEE7g+cdJJJ018
jrnhMcccMxp33HGjV155Jde3ygijLrz99tvRnnvuGc0555yu3BlLVl99dela
JcN66HHHHefO5zVZ57PPPut2tEqnX9LZTcrK48HUj4nuUNc6VNd41ZHQvPru
u++i5ZZbzp0l//HHH0cHHXRQNP7447v+5/LLLy/1W4ORUBm1X+nnuiFEEsyH
opfRX2y99dbR559/3vJZ1tvR23l2oYUW6mAsi7PDDju4eE877bSJ988+++yG
rHvDDTfk+kYZYdSBESNGRIsvvni0//77R0ceeWS01lprNdbvZpppprZ1ROTj
mGOOadQd7BsGK/2Szm5SNI8HSz8mukdd61Bd41VHQvNqm222ieaYY46m31gb
feONN0r/1mAmTUbtV1Q3hPj/7Ljjjo32gC18CK+//rpbz5luuukqjl25HHbY
YS6dM888c+J91qr22WefaPjw4dEPP/yQ6xtlhFEH/va3vw2wi7/qqqsadeX4
44/vUswGL+xDIW+ZHxnM9Es6u0nRPB4s/ZjoHnWtQ3WNVx0JyasPP/ywYYtX
9bcGO2kyar+iuiHE/+PPf/5zQw9bZZVVMu1fPu+885xNPfZRvcLRRx/t0oq9
gMjH/PPP7/Jwiy226HZUBh3YE5K32IMNZvolnd1EeSyE6AT4vqSv2W233bod
lZ5HMqoQohVvvvlmNPbYY7s+gn/Zx54F5rxmnXXW6IUXXqgohuVjtqNF+8R+
3t+92mqruTxkD63IRlq9wf9uN3StsutzXdPZTyiPhU+dx6w6x61X6WSeModP
X3PIIYd05HuDub6UJaMKIf4fg6m/2HTTTRtr7VtttVWuMMiPH3/8seSYVUcZ
fSL+MfC30q+wN2KSSSaJ3n333W5HpacIqTfd0LXKrs91TWe/oTwWRp3HrDrH
rVfpdJ4utdRSrq/Br1rVDPb6Ir1diPIYTP0F53WwH8n09ttuu63bUWri/fff
ryTc0D6Rs5TIozjPPvtsNNlkkzmflmm0CqMsqsqjdlx22WXRRBNNFN18880d
/3YvE1pvOq1rZanPZYbXKzol55/3KmXlcVo/1o1+qF/55JNPMr9TdhvPQxnj
aRVUXbfzlFdRqsrTVnnF3sopppiiVL29rvXFp9syah3pRH3v5fGoznGrM3nr
VZ36izK47rrrGjr7WGONFX399delfwOZl7NAll12WXcts8wyzlf9vffem/j8
p59+Gv31r3+NNtxww2i88caL/vOf/zhb/AsuuCBaccUV3Vlkv/3tb508msY3
33zj/Katv/760W9+8xvn9x5brvXWW69ln8g7+KkkjpR1PJ78n995f8IJJ4xG
jhzZdHH+ZloYRfKn7DzKylNPPRUtuuiipe6LwM/1iSee6GzvSf9iiy3m/Cy0
s7d78MEH3bOcl8Lz1157bdP9J5980uXHJZdc4vKKCx9dF154YcOfyfPPP+/+
f+mll7p9wPzLO5x7lydO7QipN0Zc16Kfp46wnoGv3tCyTcujrPGqazpvv/12
18aHDh0aLbHEEi6tp59+evTTTz9lirvPRx995OrLOuus4+xKgPBuuukmZ5dE
X8J1+OGHN75DO8TfLfEm/uT9ySef3NZfSEgZxXnmmWdcPVxzzTXdmUu0efyK
PvroowOeLZLHaf1Ymf1QFWVoVJ3HRd4JSTf1h7AZywh3+umnd78jjxA+7/36
17+O/vCHPyT67c7SJsvu98oYT7sRryJ1u2h5XX/99dFFF13k5sfPP//8pm9w
luOZZ57pxi3iR3zOOeecpvpSdp8eIs9ceeWVDVkSn/L+97LIlWXVlzyE9kHd
llGhzPZQtL4Vre+hdHI8ykLI+FLnuPkMpnEPquwvugXym/W17FEvG/qBySef
PFp11VUbewuor/gvwb8x8i/12XjrrbeiiSeeuBEnnqHeLbjggu4ssnnnnbdx
Th3Xn/70p5bfxi5i9tlnd+XL3BzQToiT2RjE+0R8680wwwyN8LkeeeSRxn3q
Bunx42C+Aezae++924ZRJH/KzqMs0IbQa6n7jA/kbxkwpi+wwALR8ssv35hP
44zBhRde2OkacZ+h+BPddttto5133tnlH+9ZPjC2GJztST9A27a8WHLJJV0a
TI967rnnotNOO83lP/epL4yF6O1Z4pRGSL3Zb7/9Gs+brsXznM2IT1n6t9Cy
Dc2jrPGqWzopR/qwGWecMXr66acbv19zzTXOVyb1NM/+Heam7PxcLvR25FLG
3AMPPNClgXHEl1PvuOOOaKWVVnLtH3+3jEN2f6eddhrwjdAy8iEte+65p3tm
o402aszb45OEsYnfOavRJ28ep/WFZfVDVZVhJ/M4zztZ0k2+85zlJX9TD6l3
pOuUU06J5plnHnePessZIEaWNpm1L06jjPGUuHU6XkXrdpHyAs5rOeCAA5xN
W1xOYY2Rs9GpO+SdfcPWHsvu00PKkPxgLcvuUyZ2Viz/3nfffaV9q8y0GVna
YrdlVCi7PRSpb1C0vofQqfEoC6HjS53jZgy2cQ+q6i+6DeVq8af+lMm5557r
wl1kkUXcPFmco446yt3HL7nfBzCPSNlZvIgj54sY+NGbZZZZ3D3qRlIfRZug
fDiPJGmtC324VZ/IfM+uu+7a+D5zO3FYQ+Pez372M/d/6hnthDW60DDy5k9Z
eZSV3//+9031nQsdpeh6GDoOYT388MNNv9P22Y/CWYPGSy+9FM0999zu/AOf
dddd14XBXHUc5tNMhmh1viHr7ox3ZkOQJU5ZSKs3hulaxJt5cJ+0ss2TR6Hx
qlM6wdoQ6wVxWLvgHs/k4dtvv3X6rdX1I444YsAzu+++e+M+ayTMuRn0O9tv
v727x3jEGcZGnjKCPfbYw91fe+21B9yzczz5lm+HVySP0/qxMvqhqsqwk3mc
552s6aYssMeyvEbW9mEMsTlKdChkRZ+QNllFv1fGeNqNeBWt20XLC6zutFpz
tf4HuTROmX16SBmiV7Eexn3s5On/kFs+//zz0r9V9niVtS12W0atSj4pUt/K
qO9pdGI8CiXr+FLnuMFgHfeg7P6i25gtDhd5UxbvvPOOW6NKymeDft7moOL6
1F/+8peW/QNgy2PxjttrUybYf3KPdbMk0s7YYB7Uwn/11VcH3Lf4WT3IGkbR
/PHjkCeP8kC+PvbYY9Euu+zi2qKFjZ1wEZgjJhzsj+OQxtdee63xf+ameZY5
Nx87T554Jc0j/OpXv3L3WSNNAhsf/DPmiVMWQuoNpO1Jble2efIoNF6hdCKd
2KFMOeWUbj41Se7Zcsst3XuUfV7sXCP2bSZx1113NeLnj8EG8pPd99cG8pQR
fRm6N/defPHFAd+6++673X3s3/316SJ5DKF9YZ5+qMoy7FQe53knb7pZE+N3
1p2SwKbQ8pp1Fp+QNllVv1d0PO12vPKOsUXKC5grbCenMG6ZnN8q7mX16Wl5
BfPNN19Db6/yW2WmLW9b7KaMWlV7KFLfoGh9D6HqNhtKETmrbnEbzOMelN0X
dhtbD+L6xS9+UVq4NieGrU+7vU2bbLKJe27SSSdtml9KkzWxgbZ4x22wRowY
4X4fMmRIy++m+fzAfsPCHzVq1ID7IfWgXRhF8weK5FFR0FfM9oS9OkXOV8BW
iHCwK0jKax/m4+gn4uuGjF+W1iSbWitvbPzj9+k/mOf0bXayxCkLZemz7co2
Tx7VVW9vl06bt51mmmmiHXbYoenCNsRs/gg7r01IWjp8GSJp7pbf7L6/ryRP
GZEufkc2bgVz+nGK9hNpfWFdy7BTeZznnbzpPuyww9zvc801V8tvmczG2gNz
v0ZIm6yq3ys6nnYrXkXbTpHyAvZ1tpNT0I+5//Of/3zAvbL79LS8grL09jLk
r1DytsVuyqhVtYci9Q2K1vcQqm6zoeQZX+oat8E87sFg09vPOOOMRjkyh9bO
f1IWsNEgzLQ988OHD2983/dhkFa/8eVm78V9U2y33Xbu93b2A1n09iS7i6x6
ezyMovkDRfKoDNgXYuGH+HlqhZWFzWMw58b8WSuS+vo0vZ355yT9CcibFVZY
oVCcQilLn00r26x5VFe9vV06zWaPfVXMI7W67rnnnsrSkVdvh6xlZPu48EOU
haJ1Ka0vrHMZdiKP87yTN922HtZOfjH7RC5/HSSkTVbV7xUdT7sVr6Jtp0h5
Af4oQvQo9sfGqVJvb2XjXIXenlf+CiVvW+ymjFpVeyhS36BofQ+h6jabhazj
S13jNpjHPRhsertvx8n1xBNPlBKu2YCz76AdZ511VuPb/n6HtPqNvUWr+m3+
F/AR1Ypu6+1F8weK5FEZ4K/dwj/uuONyh8O8GnMAvu8ILuYM0/p1bBXwbWry
Qiu9HfAjwH1sTHzwF37nnXeWFqd2hPYf+B0tq2xD8qhbenuRdOJ7ld+PPfbY
UuKcRJV6u09IGWFzw+/Y6mShaF0qKid1uwyNqvI4zzt50x0iv/gy/Y033tj4
PaRNVtXvFR1PuxWvomNskfKCUD0qac1LensYedtiN2XUqtpDkfoGRet7CFW3
2byEjC91jdtgHvdgsOntwFqjpXfffffNFQZzO/5eE5uLYR9OO8xfABfnAhhp
siZnU7Sq35wLkKYTp+ntvk6ad9xoF0bR/IEieVQG+O2y8DlDrSjk0bBhwxq2
MlzTTjtt4lmX9G977bWX64fwKWl50U5vx0cH97ErsblI7JJa+afKGqcQQvsP
2+dUpGyz5FG39PYi6Vx55ZXd75wBUhWMdVXq7VnKaKaZZsqltxetS2l9YZF+
qBNlWHUe53knb7pD5BfOIbT03X///Y3fs7Txsvu9MsbTbsSr6BhbpLygTnp7
Wl5BWXp7WfUlhLxtsdsyKpTdHjqht7er7yFU3WazkmV8qWvcBvO4B4NRb3/o
oYcafsbwpY+tRlZ22223aP/992/8n/OSCA+//e3A35rlNf4UDcvnPPXb/HCy
h6IVaX2iL4+3GzfsXOesYRTNHz8O3dLbiQ9h4780flZdEQjLt8G/+uqrm+4z
ZznVVFO58ydM/06zkwf8yls958wJsPMkisYplJB6A5xfV6Rss+ZRaLxC6UQ6
zZdpu3mXophfuir09qxlZGMefl6yULQuhfaFdSzDTuRxnnfypjtEfrE9qly+
35E8bbysfq+M8bSb8apSb29VXsB5UPyO/5UkQvT2svr0tLyCKvzSlVFf2pG3
LXZbRvUpqz0UqW9QtL6HUHWbzUJeOatucRvM4x6U3RfWBb/NY7uT5bxc/CSj
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
qK/42bnvvvvc37/85S+D/AnZ2YFg60T4yy0Dzl3inBT8+Xz99dcD7nF1GuzO
33zzzbb2K3E4Y4B0ZNmzhg0Mfq84M+Ltt98ecP/dd991awy09ZDvx/Ovl2HN
y/o1zs9Jg3z86KOP3N/kJfuM8DNFOcYpO9+zljt88sknbm2OOHzzzTeZ3o2T
Je1F41015PmSSy7pzgEE8wdKvxtSHu3AP0JSf0J9mGKKKSrV26tMV7epgx5S
lt5et/FxMEGfl4dekNuzUIf2IkQIyMInnnii28+1zDLLuPnIVVZZZYBd2r33
3uvaKPWac4BGjhzZdMV9nzz44IMuPOZGCbPVvvCs4QJ7RdkzOnTo0GiJJZZw
4Z9++umVjrM2D8/F2e6tYL81fqSZC7bn8WOaBGtVyCWtZLQy0xlazkZa+WHX
j4/XSy65xJ2ByYWPOM6qN/s1zqC3s+vJF/7lnSSZ3CdLnYjr7e+//747J4h1
Gmwj8C/AM2lUWV9DWGihhdx5R7D22mu78FkjaAVrCNRJY5pppnHv3Hzzzbm+
b2D/Qd75ttDmA4hyZZ8I4zRnJhx++OFN76JT4WOK8Y+8mXzyyaNNN920pVzw
8ssvR9tvv72bEyPfec/WVHyoR+QJ67tc5P///M//NGTtJLBxWXzxxV38iS/h
s6b22GOPufv33HOP0zvZx0IcgfkAzhyadtppG2knHzh7CtgjOe+88zbusc5w
9dVXD/g2+sY555zjbG2JL/tg4mcmI0/SrvF5yffwlYydjs0Jkte///3vW55T
FJrX6J74kUPf5jtTTjmlK0/s27Oe40w+0M4s/a3iRj3mPB3OjB577LHdhfxO
u7J3OSPPKCvfIU+5k2fDhg1r7H+1K+6/ap555mnc22ijjUpJe5F4+2Rte1mh
Pvv610UXXdRID31uVqiX+JDHPp32TL8ahzVW+wY+5f1+tqy5sLLTVSey6CH0
BZx9s+2227p+qNXcKHsA4/lCP77vvvsm+uwtS2+vy/hohMoLBuf6ImvhG4++
mD4Yn0bkZ5nvhMiMlDVhH3/88S5csy1BDyd83vv1r3/t+r9WNg2hclBWubMV
VdVPH+ntohdg7KOuIh/Y+E4dxzeLv3+ItoscgAxqYxryiC/j7Lfffu5ZdFDa
FvI97YywTQ5Dh/PJEi7QdtHJkIk4O81gDWP00Ud3/UFV56ihz1icWp1XTN84
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
//m8eU27s7zmwp4BO4q8XHfddU3lEd/3YzIgF+ssPrZvm8vXlcrK97zlfsYZ
ZzR8W/l9O2H5c0H0vX7ab7zxxsJpLxJvyFof8kAdYt4uaS2ce+brIG6zGwpj
gsW/1bhUhd5edbq6DXMHrAnQRybZ8/mwHwO5wiDNSfIN9Y165e+N8mGNOEnf
KUNvr8P4CFnlBes3qMOtiPfJed7JKzPa/jT237TC5iqY0/TLANLkoKz6RRJV
1894GMyrsz/Jt+0Tok6YvsVFnWdezrfTixOir8TbNpShB5lfOOQ35ltbXezt
qwps4Gx9Ax8bBvIXa+1Je1Gx57S0m00eMjr9S5LeUkU6s5RznvLz1xfj/R26
IPOlWSlLb6fMLG5Jvo+qqq+hMC7F7RQYW8121rffYJ302GOPbXoWGYXnsH3G
F3VR+Lbpe9R1bG/ZG5cE+94tnyaeeGK3H5j6S1kga8XlJL8t2LlLrfD31yM7
+PhlymV2eP4cDZc/T4Yehsxl99jHmgR7/OwZ7Ldp56bD0W5trz1XvCwAud/2
lHNttdVWTffRo7Dj9P1qUQfIL9ZxW+35y5rXgN7m50dSfEPx7cTjch5rIKYr
kj++zQQ6rh8HfFcmUSTfyyh3syXlWmuttRq/s2fd0mbzML7cXCTtReKdpz5k
hblo2l4rW26zv4jvJw3F19tb+YyqQm+vOl3dgjnW9dZbz82fM38U6iPV1+Vs
nSFu/2Dzavg8S4K8ol+LU1Rvr9v4mEVesHk39peFkuedvDKjzS+309vNLp8r
vv6fJgdl1S9aUWX9jEPfzvjDnn/m1tn76ffpQnQb2gP+I3z/ElzIMEk2Oln1
FWRT/LXa2FtED6INFZU9y8DsXMkz23963nnnORubJMwnChf+qIB5P9Y0k6gi
nVnL2QgtP8Aej/txP3vrrLOO8+mXldC6xlxIO72dPred3u5TZn0NBb8xSbas
rCnyDRtrKEN0m/j6mdnhhthDhsDataWdtUL0pySfisA9exZZkfVE1h5b2Vb4
+7jT6red/8QVl/vwT+PXY5PHfPkpXja0UbuHPWGSDEfemo9cdCZ0Vd/XEHXD
wqAtJfmv8f1acbH+2Q70QvZMIh+1s5/JmtfAPsK4zpnHBwP5whqEhRPv63yd
3t8PwxyG+frhYt0nyQ940XwvWu6E5+vItnYNtDnfft5f+yma9iLxzlMfssD3
WC9jLY/+LunClwPfp4/PQzf09k6kq1swf854iF9WfC1whksWbB4J3SgOtuHc
w0YlCfZ0JNl2FNXb6zY++qTJC9Zn4schlDzv5JUZQ/R2X/eO2xmlyUF55c5W
VFE/4xAv1pmwXcDGiTWBrOeuCNEJGDM5B8fsabiwwYuvH4fqK+hK9NX0Z/im
NN2qiB7E/j2eaedDtBOY7wsu/NAxP8dae5IPKcP6dfONhg2bne8Tp8p0hpZz
1vID9oNaGm1Omn62lW+3NELrmtm3ttLbkdPS9PYq6msozAP7e/cM1rj5Bjoq
sJYS9+8CtnevrPqy2267Nel5/lk6Puzn9sfjuC+YOL6MzpXkj9tAj/KfjZcb
8rTdY0+0Qf7Y74y7Bm3U/N61G9vxm+t/d+mll24as31dqZUNAutd9gxnG7Qb
85Gzka/jZxBgh0N7wuc+72fNax///EqupHP20mAftR+G72edvsP3HeiXFX6L
/PMEkauTKJrvRcvd+i4ufAaazQNrVJy9xD7aJJ2+aNrzxrtIfQiFeoOPynaw
p4Pv49svD+wx77Te3ol01QGztWll35KE2SCjz8WhTXIvSd+iv2JPeRJF9fa6
jY8QKi+Yn8osOnied/LKjCF6u/kA9OdIjFA5KFTuTKOK+unD+gRzoMzrlWGb
IUQnoD9ChrS2FT8j19op8nwrsFvGzpa93qa/hdodtwvXfGzm1QPLAh+vlhbm
OZH50mQKX9fnrCPWYVrRiXS2K+c85QfY5Nmalelkdq5IHkLqBNjZTXn19qrq
ayjYbyTZ3pn+zDwy53m1suewvXvxufA8+L7BuDgDptV8FPbBvq6Vdi4Tc1yt
dL84+Hbzn/XPDWQM9sd/fz8xup6v45kPMOQZ+w2dv1Ud9ucDuB566KHGPdau
fT3M2gz7R20en7VsX4+zdaK473HAXpCyi+/TA3+/NPmaNa99sLf286uV78h2
bL755o338WFEPqPbYjPk7+UnPaZvo5MhD3JeW7z9oaf7/tmK5nvRcjdbIS7T
MfALyLoOsqrdIx+trWKX6ev7edKeN95F6kMI2Bsn+WyLg20V32d+Kg++X7pO
6O2dSBdnV7Nmivxf5KKucWZqXugnsfdnHioU9oeQ7iQ/9sSHeCWB7UL8rDCj
qN5ep/ERssgLpk/jryOUPO/klRlD9HbWnC1tnO/hk1UOStMv0qiifvpgS0X4
ec6REKITIPO0Okfb5I34WTvWTlvpSPRf6G7YmcV/D9GDWoULvm1sO/sv5Dlf
BkAXYW3b9zNUBGQt3x8Qc41p59LE9ZB2/jHyprMVWco5b/kZdq4I6xXo8ewh
zHJGp09InQDOi8qrt1dZX0NAz2ulRzGPzzfYs4YcmeRf3PbukYYy9mDFz6hu
t7+TeW3/2XhdpZ0gS1kdtfQk6RqsL6J/+/qvPRcfi/0zvtnXG7f7Jp9MF+K+
nVeODM6e4Fa26Owt9m3K42cGsefN7plNCX5rec72O7M+bs+ga+KLBx2L/cb+
3mX0UsJARsPfXtwPHfNepquyXpY1r+PYeTxc8fPN0ojbyFMnSDttnPOCzUaT
i/OQLC9Zs0AvY+7H9FryHvkZ23LTccvId8hb7v6ZH1zmi5g4Iu/5urntc+Ks
JeYki6Y9b7yL1od28C59Usg+VDvPkX0EecAnYKf09k6li/GC8R77oiIX8Uzq
87NgPsVC1w4tr+PPm4/9VnohdsVJvjShiN5et/Exq7zgz79SJ0LI805emTFE
b2ed2uTcOO3koDz6RRpV1E8fm78N9XMvRKdhHYP+J6k+m21l3MbKfIBxJe15
tfYYty9DDm2nB6WFC/QDNg4hy+PfOA79NPue/P7C1nJ4p1XYWdl6660b8UWP
CIE9rDyPLNdOz8+bzlZkKee85WeYX1N8JLNGV2S9IKROgNlOoeckxa2d3l5l
fQ2BPaz77rtv4j38txM+vq5arRXY3r2ybDM4G9rShXzS7nxVdCbfVpcxz84J
Zo2eMxNNzwHsLnxdw9oNzzKuxv09mP8ZfLwZhO+fix4/iww4PwzdB9tu1tfQ
keNnbyXhn9fFhX2Aj51pw4UNKjo5+2N838W+Lz3KBJ9+7On3z0lHVzF9zp+b
QP4kzqanoS9SBsx/Zclr9E58ZWOnbXBmmr3LWXNZsDOX7KLNkDb6QEDXtHus
h1BvsStnfcPfo438xzoGZe2vn5WR75C33H1bKDvrnL0Epof76+H0xeQl5xqT
/0XTnjfeWdteFjhDztKehp2LzeXPS4XC/Ie9z56qJJhn4j5zREXoZLrqgvWh
+PEMgT0hSWm2PoB983Hw54Gu2Yoienvdxses8gLymflpoR9Lktdot9gOmI/i
PO/klRlNb8c2PwnSgr0Gz8TPvoN2clAe/SKNKuqnj/kjidsVxGHugzkEnk/y
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
Ouywwzr2PZEO5yDSpyy00EKNc+BOOukk53s+9KzzwQBnxa2wwgruvMlhw4Zl
OjNOCCF6Ffo+5IFbb72121ERfQxj7gEHHODsiVlf4uxZzthlrZKzt1dffXV3
RmE/ySX9QK+We6/GW/QunKVHvWt3zmQV3+SsP1EfOI/0yCOPjE444YTotNNO
i0499dTo+OOPjw4//PC+0l3Z46n+VQghhOg+dia06C96tdx7Nd5CCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBC9wkMPPRTt
sssuba9nnnmmp7571113JYY3fPjw6L///W/JKRFCCCGEEEIIIarjL3/5S/R/
/s//aXuNGDGiZ747atSoaLLJJhsQ1jjjjBM98MADpadDCCGEEEIImHXWWaNZ
Zpmlby4hROcYTHr7d999Fy288MKJYV188cWlp8FnkUUW6XrfqUuXLl26dOma
JZpvvvkqHfNF5+g1O8mZZpop+vnPf+709364hBCdYzDp7TvssENiOAcccEDp
8Y+z6KKLdr3v1KVLly5dunTNKr19ENFrejty5/LLL9/taAghBiGDRW+/9NJL
E8NYa621eq7PF0IIIYQQ0tuFEML45JNPoueff95dp59+esf09jK/+8ILL0QT
TDDBgPcXXHDB6Ouvvy497kIIIYQQonqkt/cPX3zxRfTZZ5+1vb788stMYX77
7bepYcav999/3/myfu+99xrhUA+zhsP1+uuvR3/84x+b4vTNN98MeC5ez7//
/vsBz7AfuB3oPP7zrXSgtO/vt99+0QcffJA5rddee210zz33ZE5rO3788UeX
h88++6wLKytV5mO3uemmmzqmt5f1Xcpw7rnnHvDutNNOG73zzjuVxlsIIYQQ
QlSH9Pb+YZtttkm1xeWaYoopoqWXXjraeeed3fpfO6655pqgMJOut956qxEO
cwpDhw7NFc7iiy/eFKerrroqGnPMMRv3l1lmmejzzz9veubxxx+Pxh133KZw
TjnllLZpPf/886PRRhut8fxpp52W+Fza92eYYYbceXbFFVdkTmucRx99NNpu
u+2iOeecMxprrLEa75K2GWecMVpjjTWi6667Lvrpp5/ahlN1PnabXtTbd911
18R32etOubLHDb1+lVVWic455xw37yaEEEIIIeqP9Pb+YeTIkZn1xNFHHz06
8MADW9YT1mvL0Nuh1Z7crHo74LvQ7rN3OIm55pqrKRx8aaWt/U466aSN5317
gSzfL1NvD00rYOew/vrrB38Lu+rHHnusbX5AlfnYTXpNb7///vub5kNCLvzV
MPcihBBCCCHqjfT2/iGut5900knRWWed1bhY9zzooIOirbbayq25+8+iuycR
19v32muvpjCTrpNPPjlabLHF2urt6HVp4XAdddRR0QorrDAgXnn0dqtb7ey8
y9DbWe9kvXuXXXZpusYff/ymeMTvL7HEErn1dmzhOQvETytljB5/8MEHR8cc
c0y05ZZbujV4/5nxxhsvuvHGG1ums+p87Ca9prcvueSSueaCJp544uill16q
NE1CCCGEEKIY0tv7h7je/tVXX7V8ln3u2Mnbs6y7v/jiiwOei+vtDzzwQFBc
eC+Or7ezJh3KDz/8MOC3vHo716qrrhr95z//SXynDL395ZdfTnxnmmmmabxD
XsRhL3jSN9PSiv48//zzN+niRx99dKIvA/oDbO9nnnnmxvMTTjhh9Morr7RM
a5X52E16SW+//fbbc+nsdv3ud7+rNE1CCCGEEKIYreTquiK9PT9Z9Hagbsw7
77yN53faaacBz2TR29P2S+fV25PIqrfH16LXXXfdxLmFMvT2VqTp7Xm/hX2D
P/8SoneOGjWqKT7sjW5FlfnYTXpJb990000T38F/wbbbbutsU7CZGTJkSEvd
/ZZbbqk0XUIIIYQQIj/S2/uHrHo7YD9tz88xxxwD7sf19jvuuMOF61+s6/79
73+P9thjj7bf8vX26aabbkA4XKw5n3feedGrr77aNqysejt7g7FD99OyySab
DJhr6EW93V9r33///YPDvfvuuxvv4fsOH/hJVJmP3aRX9HZ8+k800UQDnsdO
4sknn2x6Fp+F8fKxi70bQgghhBCinkhv7x/y6O3YTPtrd3Gy+KXLorenXaSl
HVn19qefftrNCSy00EJN38EHv7+XpNf0dvRl39980l6HdnB+mL177733Jj5T
ZT52k17R29l3kfT8sccem/j8M888k/g8++OFEEIIIUQ9kd7eP+TR21k/9d+J
+wkfTHo7fPTRR017A7jwCWf0mt7+4YcfNqUFnToLCy+8cOPdJJ94UGU+dpNe
0dtb7W1vdxbAZJNNNuB5ykQIIYQQQtQT6e39Qx69HV3Nnh9nnHEG3I/r7cOG
DXN+6f3r1FNPjTbbbLNMejs6RDwcrhNOOCFaYIEFKtPb4d///nc0++yzN6Vr
7733dvd6TW9nvd0/o/25554LDpf18ammmqrx7n333Zf4XJX52E3K0NvZI9LO
r34Z37355psTn29lH0GbHXfccQc8z94UIYQQQghRT6S39w959HbOWbPnOb8s
TqhfOuoZe9zbEeqXDt3z3XffbRtWEb0d3n777WimmWZqStshhxzSc3o7LLLI
Ik3zKqH4+iC6P2voSVSZj92kiN7+2muvRUOHDnV+AMk7zttrlX9Fv8sZbknP
+/YNPq30fNnJCyGEEELUF+nt/UNWvZ11QnzR2fO77777gGfyngOXRDf9ycf1
TeDMc9Ygk3ScXtLb8SVu90cbbbTosssuSw0TXXDyySdvvLfeeuu1fLbKfOwm
efX2b7/9tqnd2BV61lqe78btGqys8eHow5xXK5/yrfbDCyGEEEKI7iO9vX/I
ord//PHH0RZbbNF4Ft9m6F9x8urt//znP6N//etfTb/VTW8H9Ncpp5yyp/V2
2vhiiy3WeGbsscd2fuWT1n95ljB8f3STTDKJOxeuFVXmYzfJq7ffdtttLeco
sD+o4runnHJKy2/iI5Cz4FZeeWW31yXpGcqYfQ1CCCGEEKKeSG/vH+J6+/Dh
w905b3YdccQRbk2dM7c5Q8p/lvtJxPX2FVZYwZ0l3e7aeOONne00+olPHfV2
4F6SH69e0dsBfXGeeeZpij9lzBowZY4ev84667h895+ZeOKJo7vuuqvt96vM
x26SV29v51/xiSeeqOS7tMNFF1205XfTrtA6KoQQQgghuoP09v7h4YcfzizP
szf3+OOPbxnmDz/8kFtXiOvtl1xySePe9NNPXyit/p7qc889N/GZOeecs/HM
U0891Ta8Rx55ZIAvr3brkyHfjzP11FM33iEvQgn91qeffhptvfXWzn46pHyW
Xnrp6IUXXkj9fpX52E3y6u1vvPFG09l7dk0xxRRBPuryfpf5D78sQi723+Pr
UQghhBBC1Bvp7f0D69whcvwss8zibGoPOOCAtvbRkOXstnZ6++eff95ky41u
edxxx+VK54UXXujSYWHhlw2d1efBBx9s8rOOPpvGjDPO2BT/VvpOyPfj3HPP
PU369FJLLVVaWuNwhvtee+3l1md9/3Do05zdhu//O++8M+j7VeZjtynil440
+eVJ3l5//fWVf5ey32GHHRLnDeIXZ/xRfkIIIYQQov5Ibxfd4I477mhrUy06
B2e842+AM+NEeWBbwF4U/L298sorHf32+++/7/wRsgditdVWi37xi1+4fe4r
rbSS8+dP3IQQQgghRO8gvV0IIYQQQgghhKgv0tuFEEIIIYQQQoj6Ir1dCCGE
EEIIIYSoL9LbhRBCCCGEEEKI+iK9XQghhBBCCCGEqC/S24UQQgghhBBCiPoi
vV0IIYQQQgghhKgv0tuFEEIIIYQQQoj6Ir1dCCGEEEIIIYSoL9LbhRBCCCGE
EEKI+iK9XQghhBBCCCGEqC/S24UQQgghhBBCiPoivV0IIYQQQgghhKgv0tuF
EEIIIYQQQoj6Ir1dCCGEEEIIIYSoL9LbhRBCCCGEEEKI+iK9XQghhBBCCCGE
qC/S24UQQgghhBBCiPoivV0IIYQQQgghhKgv0tuFEEIIIYQQQoj6Ir1dCCGE
EEIIIYSoL9LbhRBCCCGEEEKI+iK9XQghhBBCCCGEqC/S24UQQgghhBBCiPoi
vV0IIYQQQgghhKgv0tuFEEIIIYQQQoj6Ir1dCCGEEEIIIYSoL9LbhRBCCCGE
EEKI+iK9XVTNZ599Fp1//vnRm2++2e2oCJFKWn3tRn0eNWpUdMIJJ3Tse0KI
wQ/y38iRI6MrrrgieuCBB6L//ve/3Y7SoOeHH36IHn744eiqq66Kbrzxxujf
//53t6MkhOghpLeLDz74INpyyy1LHbN/+umn6KijjoqWWWaZaMwxx3Tldv/9
95cWvug+//rXv1zdGQyk1ddu1Of//d//jYYNGxbNM8887nvjjDNOpd8T7Xnx
xRejv/3tb9HZZ58dHXLIIdHWW28dbbvttt2OVhC9HHcRTmif/NVXX0XHHnts
NGTIENe32KW5wer4/PPPo3322Seacsopm/Kc8eTyyy+v7LuDaZwWQkhvF1F0
/PHHu3y95557SgsTPee0006L5pxzzsb49Pjjj5cWvugurM0gb4w77rjRK6+8
0u3oFCatvnajPrMOc+ihh0YTTDCB+96kk05a6fdEew444IBowgknbJK5N9hg
g25HK4hejrsII7RP/u6776LlllsuOvXUU6OPP/44Ouigg6Lxxx/f1Ykq9cd+
5qWXXormn3/+6Morr3Tr7SNGjIgmm2yyRlvcfvvtK/nuYBunhRDS20UUzT33
3C5fN99889LDvv766xtj0wsvvFB6+KI7sG5n5XrDDTd0OzqlkVZfu1Gfd9hh
B/e9aaedtiPfE6156KGHmnRf5PBeoZfjLtIJ7ZO32WabaI455mj6jfXYN954
o+oo9iXvvfdeNP3000cnnnhi0+/MyzJ3go3DRx99VMm3B+s4LUQ/I729v2Gf
lfXrrMdgP1cmjzzySCN8yQWDhy+//NLZ/A0fPtytHwwW0uprN+rzYYcd5r43
88wzd+R7ojVHHnlko/zZt/DFF190O0rB9HLcRTohffKHH37oyn711VfvcOz6
l7XXXjuaZJJJSpetQhis47QQ/Yz09v6GPY7s2TV57qKLLio1/KeeeqoR9ltv
vVVq2EKUTVp97UZ9Pvroo933Zpttto58T7Rm0UUXbZT/qquu2u3oZKKX4y7K
4aSTTnLlv9tuu3U7Kn3Bc8895/J7ySWX7HZUhBCDBOnt/cvXX38dLbbYYo2x
hYt9b2Xy9NNPS28XPUNafe1GfT7mmGOkt9cA/DuNNtpojfLnTIFeoZfjLspj
iy22cOWPb0JRPdjGk9/rrbdet6PSkn70Z9+PaYZ+TfdgQ3p7/3LhhRdGf/rT
n9zfCyywgMtbZLsy9RHp7aKXkN4uWsFeVCv7McYYw9kc9wq9HHdRHksttZSr
A/i7FNWzzjrruPzeY489uh2VRPBbh0/CfqIf0wz9mu7BiPT2/uW3v/1tQ35D
fze57vDDDy/tG1XqOe+//36p4YnssEe2G/v2qkJ6e36oB6+99lr0+uuvO1ue
+L0y68lnn33mvsX+zSx88sknzrczPgW/+eabTO9ii2Rlv+yyywa9g78v8zn1
9ttvR9dee210zTXXRG+++eaAZ6vMv6xxzxJvzg/lefKUZ+O8++67bp2HMxnS
6Ea5xsmS9qLxroJWfTLlNMUUU/Ss3o5/t16C/J5qqqmC7Bs487MdRWWdpDrx
7LPPOp/2+JrvFzqd5rrU2U6mW3J59Uhv70+QMZgLNpCtWIchf2edddbSznIP
1XMefPBBt8+eM6+w3UdWSuLTTz+N/vrXv0YbbrhhNN5447n6i7+VCy64IFpx
xRXdOV3MR1xxxRWpcbvpppvcPs+ll17aybKrrbZadPvtt0fff/99dNZZZ7lv
4MsbWRA/4uz9v+yyy5yNqR8+MtuZZ57p7BeIG3E555xzWsqpoWnNG9c4PLf+
+utHQ4cOjZZYYgn3zdNPPz1Ijk4CuRjftJwBzVhw7733DniGeGEjSDxJK99c
ZZVVCttnPvPMMy6MNddc0+kilPmOO+4YPfrooy3fyZLfZentefKcfOVMRt77
zW9+Ey200ELOrhUbyzL19jz1rx133nmnW8fz7bApF6Bt7rzzzk5eoL0mzQmi
0+E3CZsffGNOPvnk0aabbup0sTh33XVXtPjii7tvECZpYDx47LHH3H3OsqR9
TDTRRC4MIJxhw4ZFU089dZM/9T/84Q9NYc8zzzyNextttFHTPc7L4jwlu3/K
Kae0zA/O2TruuOOiGWecMRp77LHdRdskr+39u+++u7T8SyM07lnjTd978MEH
u3MO7D5p4Htw//33R/POO2/jHms9V199deK3u1WuedNeJN4+Wep+O0L6ZM4P
sLTgU37kyJGNKz5PlEae/h0dhjPnyA8u3iO+SXE1mD+5+OKLnayCbzegD2U8
3GqrrVwfyUW7sL6VeokfdeQA/ObznZNPPrmtTFP2GAnt8puLdPONX/3qV9Hv
fve7Ae8XlXXa1Qn+tnPoqHfxuCXNI1SRR0bImFRUBsuT5jrX2dBxvBPpLlMu
F+lIb+9POM83flbrCius0BhnyjrLPU3PYX0C33jIpvTHlK3Jf/TBPrw/8cQT
N8mI9F0LLrigk52QEW3ugcv2AMShL9xss83cM4w7hvlbnnLKKaMzzjjDjaX8
n3H1qquucnmG/BXXoZjHxg6Vfg65y74fn9/OktYicfXfJU7IopSDwdrR6KOP
7uSsH3/8MfG7rUC+nWGGGZrkZHys+yADIoeSPpM/X3755WjhhRd2+kMev7bE
c88993R5hextc7rs22VM4nfyxCdPfhfV2/PmOTZss88+u5uDMD/f5BPxxv9z
GXp7nvxI49JLL3WyAPqYv6bLWffAOO7XFdaffPgusg3rgLfccovrd1rpWMhl
ptvS3pEVsBfiXHt+R5acb775ornmmss9gzzDmcWUxRFHHOHajx8Xf67nH//4
R9M9yiseT/9+0royvPPOOw1ddZNNNnFx9M8g4Jppppka8ljR/AshJO5Z4037
w8/dfvvt1/CbyMVv8Pjjj7t2aX2XXWusscaAb3ezXPOkvUi8fT0iS91vR1qf
zLkXpI95BbtPP2xx59/77rsv+Ht5+nf6G8ZG5p5tjy2yJ37y+D76DPnngw9Q
8sziTF6hC9MmDjzwQFf3/DaDbnzHHXdEK620UrT33ns7P+r+vMtOO+00IF5V
jJFJ+T3NNNO4PLOLuSR/nm6ttdZqCqOorNOuThA/ysJ/n3kq/1nytso8MrKM
SUVksKxphrrW2Sx51ol0lyWXi3Ckt/cfyA70efFzgJgjtLa18cYbl/KtdnoO
do2cHf/nP/+56fd1113XPc+cZBzm+RknLEz6L3+vJraMs8wyi7uH3JgkQxx7
7LHuPmtcPuQL8hn3brzxRiefsK7rryGgV7XToXbffXd3n36qaFqLxvXcc891
95mnjsN6Lvd4Jit8e9ddd22UATZYPow9/M4Zgz7o2Ky5YQecFfYHEiZn6sSx
MkGGMH0+b34X1dvz5DljHGMpZzMlza8zTrarcyHkzY920H8wb8Q4T7tERrFy
wH4HGYL1ONYtTUbdZZddGu+zvml5aWsF2AHZb4z7xqhRoxryBuFjd2HYnl0u
9A90CeQd5vbx42xptrRyIUv4+PolenTc1pq2FddN46APW5tENrOyZD3Dl5Os
jRbNv1DS4p413vB/27sTmDnK+oHj+avghXhQBOtBvSCoHGrFA6xYTVSsVzVF
o2KqESxGPBG5tPXAI0qLWBEFqtarilgVrIpag4qoFLRgBTwQj6gVUVQEz/nn
O8lv87zzzs7Mzuz7vrvd7yeZQHdmd595dt6Z5/echx9+eL7uNOJvM8pklPVo
X9myZUt+r0jL0cX+AnP9u7Y59y7pDoNc+03U3ZNBLMc64uynnzznSlxz4403
DvRdg97f4564cOHC0jEMp5xySr7/gAMOmFbXffPNN+ftu3Fe1NMUxTOXjf5J
aZmWczzqqKN6vxNjIMrSNuxnJIr5XcQ9OWK8svJW17JO3TVBey6vz5s3L/83
sTcxYXEt+ZnKo7bPpLZlMAx6zqN2zbbNs5k+72GUy9Wccfvkob8fZbki/g7j
OUIbX/R37KIqzqF9kdeph0xRrxr3rLI+WGeddVbf+zLoQxXfWdZvPOqhy/qc
Uk5mX1m7ELgHVz0zKN/FvWkY59o2rdSHEhNQZi6LBZcvX56/N22fHwTtw5HH
11xzzZR9tLvwOv3CivjtKJ8Ogjps4hbyaNu2bdP2cz2zn/Jy1Pu3ze8ucXub
PCe99Ivjdc6zzDDWgWubH1XWr1/fO5dNmzb18mXRokV53hB7xLOfev90vfsL
LrigF4sedthhvdfTeIb+w4G+w/E6MWMq+pqwcX0F2jEe97jH5f9PbJK2f6Xl
HtK600479fbR5pqiTox4JPZTdiniOUpesJ/PSq9TxrHEeznnGCfdJf+aqkt7
m3STjv322y+/xrlm5s+f3zuGOJjfM/rDf/nLX54S/xb75szl79rm3LukOwx6
7TdVdU8OtP/3iyObGuT+Tl+GqI/iXlOG+Dba60488cRp+2PtOvollGGsQpx3
2XyL1COUXX8z/YxEXX5zHbOfutkyXcs6VddEfHbEcmVmMo/aPpPalsHQ5JxH
+ZrtWmaeyfPueq2qOeP2ycMzgvo5/jbp65Ru8Uxmo46uq6o4h7pa7jPFNeMp
D8R7yvpf0W7BPvrklaEPZby/2P+Pe1Pso52r6Mgjj8z3cX8sw/jjqmcGz2f2
L1iwoPO5dklr1JvSP4/2unQ74ogjen3NyMM249PS35W2pxTxBq9TJ1vc1wZp
5vMoA/VDfW+q7bXVJW5vk+cbN27MX7vPfe7T99yGMS9d2/yowvnGeDfq1+Nz
6K9ILEPf3zK0R6RjohmDic2bN/fGBNAHMJ5N1M2n8VdxjFw6fpm/z8D4EWI8
pGUGPittw4jrKzb6r6TOO++8Kftp8yii/2bspz0yFeOf2dI54drm3yDq0t4m
3bQtU+cA6sziGOrNiNPTOJb+3rGfNvjUXP+ubc69S7ox6LU/iKp7chhG3D7I
/T3aezm3qjH01KlwHGMMim1xdTFHGpsW2w/Ba7GfY8NMPyNRl99Rx0P7apku
ZR1UXRNNYrmZzKO2z6S2ZbCm5zzK12zbPJuN8+56rao54/bJQn0ZdaeUpxhb
U9woc8XfVlWc1FRdHER6irrG7cypEe8vzqOR9n9kbGlRrNtSNk8M6Bva5JlR
7K/Z5ly7pDX6YfE7U7fbb2s7j0HV7xpxZjwDqJNP+5EOKsrB9C8YRJtrq0vc
3ibPo+6lao7vYc0n3yY/mqC8FvMm045Iv1/6zPXD2O34TuruGY9M3vH3TL1h
sR0vfd6zpXN2EadRjol9zJ1UJvpzsqVjSakbi3iJjfaGYh1Q2teascpFtMXG
ZzAnTzr2j1gxTTtjkbrm3yCq0t413eCZEcdwb2T+ooidaQvnc2M/Y35Sc/m7
djn3Luke9NofRJM5M4cRtw9yf6dPL8cx120V+hfEZxbnGJ2pGGimn5FoGrcT
B5fpUtZB1TXRJJab6Txq80zqUgZrcs6jfM2iTZ7Nxnl3vVbVnHH7ZKFN/UUv
elHlMdFvl604hm1Ql112WW1ZIlDHxxyg8azrdw+quz9QBut3f6CvF/Or9HuW
xljHsjFJaPrMqKvzaHKuXdLK3J1lZeVhqSoPEIcw10k6FwkbZeyyfu51qNfl
/dQHt9X02qq7Xqv2t8nzmFOGeWn6mYl14JrmRxPUncdn0E5J7FbWJh3YH8cz
5pg6C9o+0zmPUmmZpFjuOPvss3v7qI9kXuEixoqnsVS0cYK4M+1nTRtSiudj
XH9sxx9//LTPT2PjdM5w/n6Zgyr20TZV1o4xaP41VZf2runm82OeYvKXz0vn
ReL6is/gXsDvkJrL37XLuXdJ96DX/iBmK24f5P4e/W6Zo69KOi6hOI56pmKg
mX5GYqbj9qqyDrrG7bORR6HpM6lLGazJOY/yNVvUNM9m47y7Xqtqzrh9stAm
UbaeTSodZ8faD11cfPHFtWUJ/p5f97rX5fce1ihiPYmqe1Ds73d/oKxUdX+I
vl/Mk5HOycP8+rxOv/N+awB3jdsHPde2aWXcJPuLayINS5P6GF5nnaboS8dG
H9FB1/eM+ok2cfug+V13vVbtb5PnjGWue1YOM24fND+aOOaYY3qfwbOfNpp+
uFbT8j5lgDrUHcbx9NcMtJ+mdYz0ny7DmOc4hjXDom8f7USsUcNY7bLYD4xF
TmOTYrsK13I6P296v2GcUTpnNLFkmUHybxBVaR9Guj//+c9P+XzWqEzHwKYx
aln/gbn6Xbuee9t0t7n2B9HknjyMuD00ub9HXyn6ElSJebPYin0Uov5n2DHQ
TD8jUZffsYZPv7i9a1mn6ppoEsvNRh4N+kya6bh9lK/ZMGiezcZ5d71W1Zxx
++Tgb/2+971v7Tgk+vrF+D3mqSvOOz+IdPxjWVmCOjr6iLLGV/T/adrnp8v9
gTIV+7lXMY8J7QeUPxj3z7y4/TBfcsTRZaqeGW3OtW1aY47nNvOEN5E+d+r6
UXDdkeY4vt8azv1E2aE4p36dNvldd71W7W+T5zFXfFr+LxpW3N72+quSzksW
94uq+Szpn5zGek3GuRELpjFgzBFGWTJeY8xIv/QzN24cR1kHzKXL+FzWGI99
/E1FvkTdJn2TYj9zRJIW4kPGo3OeaezIbxhxK+Vl+qUzZ2TxXkS8G+cwaP4N
oirtMbdT23QjxunERp1W4L6Uxr/xN88c81HmmKvftetv1jbdba79QTS5Jw8z
bg9V9/dYx5B+Y1WY46qYnyHm+Bp2DDTTz0jU5Td1XVVxe9eyTtU1EZ8da4yX
mek8avNM6lIGa3LOo3zNokuZeSbPexjlcjVj3D45aLulfrwJ+u3G3xh1h22l
bT7F5wb3Gvo5FsfT1N2DqF/scn+gbMd8+rTLMDcy8z9Rziub17Mo5kGi/2mZ
fs+MtufaNq3r1q3rfS5t8/1Qjq6Lu8swL1TZ78r9pF/aojxcNjd+lXT+qCuv
vLLRe9rmd9X1Wre/TZ6vXr26955+faOHMZ982/yoU1wfu26dMvrRpscX84mY
iP7cxbzl7yBiJcYFM48f/089JGOG+9VFMody+n0xjy39pLkfpjFcrMVE3z/a
WYv9zDk3ykms18c6wYh+pGzUo4HxzszdRXkr1ucgPiSNjJ3muyNWHDT/mqpL
e9d0c2w6fry4vly0ibHRl57vJu85Lh1nPhe/a9dzb5vuttd+U/3uyamucfug
9/d03EDVeUW/o7IxybH21LBjoJl+RqIuv4mHq+L2rmWdqmuiLs7CTOZR22dS
2zIYmpzzKF+zbfNsNs6767Wq5ozbJwd/b8V+oP2kf8O0a7TFHEvxOcznk4rn
PGvxphiDX3UPijiG9pyy/XX3B+Y3S9ffGQT9guKzy8ZqR5sLbeOptufaNq38
XceaIYyjZF7poquuuiqf47lJfUURZeCy35V2Np4pzJtcFHPc9Jvjqh/Sx3oq
vJc+XGXpZQ1D+htH35C2+V11vdbtb5PnjH3g2V5Vdou5vxgv0Fbb/KjDutTx
fsoTxbWbi4jZ0r7C3FtiHVjamZcuXVq6ljHrixEbUW9yxRVX5G27xTaOMlGG
Y4s1sd/85jf34rW03ZTfizV3GLNAmtK1etjIQ8rZ6dihWBOHjTFI1KvRP5v2
2fQeyvyDrPVGv9h0XqFB86+purR3TXc6xpGtOG9mui4J86Mzl/X++++fX/+p
ufhdu55723S3vfab6ndPTlHWZn/UOw1q0Ps79Rexnn1xzenAfFWRL9yPiqJ9
j34TZdIYiLlci/rFQDP9jERdfvPZ7GduvzJdyzpV10SMR2brV2c8k3nU9pnU
tgyGJuc8ytds2zybjfPueq2qHvXVXA9V8/2PIuP2dmId3X7z8hYV2zPom9RG
Wr6jLJmKNYKYz5dyC304qR8+6KCDeu+hnEB7f9p+EX232Cg/FaXrpzHmJkVc
F/d08uLSSy+dstGeWzYHUqDsxXqmfAZzSMWzkHScccYZvX084ygPxjyrbc61
a1p5D3WfcS+lrY37MW1hpIc0ls1T30TV70q/3+K6NrRP0f+K/rplZb46rIMX
c1AxlpVyEGVm+r3SvsOaL2vXru0d3/baqjqvJvvb5DltGpwbx3MOaXq2bt2a
z28VcR3n0GbcStv8qMKzmd8i3k/c0USs+Rsb9RakgzHHlEuK87kjnb9pkPkR
iBXjeyhDUS5hLjDipeLc38yrxbMl5k+LdYDTuJrXIn8Yr5zuZ6NtOcokjLGO
11lDnfxJf7u2+ddEVdq7phuUG+MY/t7T+n/W704/m3mKia25lotm+3cdxrl3
SXeba7+punsTf/PRl6A4T98gBr2/E9dxnVP3WlxDnDRFLHLssceWfl+6ZkHZ
8466ldh/ySWXTNtPP7XYX7z3zuQzsi6/+ZuJ8gJ9QMp0Keug6prgvTGWhT59
xIrcH2g7T9egnKk8avtMalsGG+ScR/WabZtns3HeXa9V1Yuxb8U5XkcdaTZu
b47YjntblGOYY5cyD2Wcshie/j2UsWKe4GIZo2l7wIUXXpjf39M5a3imc8+I
NiXmOo12VGIT+iUSj1FvG+/jHkydA3hOLF68eMraucwDRBsL5Qaeg3xnzGPG
xnOT98RYQsbiFefBLW7s5zP7xUf0SYrnceQpZVPqH+N+zfgj0kLfoTbnOqy0
8sxKy7ixkRbi3kHxDGEMRXr+/K60W0UaKOvy+pIlS/LnB3PRUvdAH9nis2AQ
tGml8z7FRptGca7FQfO77nptcj2HNnnO32KsBcYYW+7PzOVFe2z0+eVvmL5/
g84P0CY/muCZH+dGmSAd31yFPslxjcRGGyjz3fST5jv5wD2NMdp183DHOnts
3Ddoi4m207SN4p73vGfeXpC2E6R9rRmjUJY3sZY126GHHjqlTStics6tuI43
2uZfE3Vp75JuyqHRR554k36rqYgVOIb74hvf+MZeu3LRXPyuXc69a7rbXPt1
mtyTGf/PeOA0zZw7z/NB+1y2ub9TjmeNWe5B/FZcM8x/Sz8Hrk/qZYto2yWN
6TOQ71m2bFme5uuuuy6vk4n+Smw8+0kf38f1wPupZyCG4zdjI52MNQvDfkai
X36feeaZ+XOd+CvW3Yq/f8opEaN1Les0uSYQfZvTsgzrKRTb5mcij7o8k9qU
wQY951G8Zrvk2Uyd9zDK5WrGuH0yUKdGmYm6MsbP8TdEmwP37rK+LOzjeOrM
4z0cx/2E15v2z+C9/M2mn0M9aTG+5H6zcePGvP8+fXAC68ESn6RzqEfaSAtp
4tz4f74nxHem+/nOdGwin8szlXsr967Y0jmG2ZhbqB/Szb1xw4YN+X0vPp/+
oP36ug5yrsNMa3w3bUqs00SM2KbNG5Hf6e9a/A04N+7HnCv3fJ6xjJdKf4O2
+AzqoumvTp3t5Zdf3vfYQfK77nptej0Xv3+QPOfzaBPheOohYl1onvW8v6pv
RRNtrr+ZxN8KZb7NmzfX3lfS/uTFjXY++mJzXZSh7pI2iWI/Tu4RxBlpXqT4
jRl/zjzs/fog0NbK+Oeyfsm8xvfOdr6iLu2jku65+F2Hce5d0o1Brv06Te7J
PDv5Hp7/UQ7g3+kxTXW5v9NGyPH0MeJe1+83AmksPs/5/6gD4vu4//Ia+ziG
/287j+6wnpEo5jf3ds4l+lNwfbGff8d8kXF8vL9LWafJNRHoN71+/fr8GcCz
YLbyKD6v7TOpTRksDHLOo3bNdsmzmTjvYZXLVc+4XZOKa54x42Vzb/Ds5J5I
Gwj1h037DM+UcUqrNBMYN0zdPX1Jaavo1weFuizKJBoP4/q7jmu6JUnjy7hd
k4h6P+ZnKpvPJHXSSSflY7rarmk9DOOUVmnYYn5txuyk4+Fob2DOcMYip33z
oo+gRtu4/q7jmm5J0vgzbtckWrVqVaO1SFmfi/FSc2mc0ioNG+vTcr8nJuqH
+XXS9bZp47T+arSN6+86rumWJI0/43ZNItYnYrx4XZ9y5hHpMlfQMIxTWqVh
YtxnzLPD/G1V0vndDjnkkFlKodoY1991XNMtSdoxGLdrEjF/JtcQ8waVzanC
vCJr1qzJ53mb63aScUqrNExczzFf8HHHHVd5LP1NYn7cuvm8NbfG9Xcd13RL
knYMxu2aRKxZE20hrBPCtcTcwCtWrMjX4mAd4NNPP30k5ngbp7RKw8acXhEr
sbYP7Zgx/yzXPOuEs8YYczuwrg5zhGv0jevvOq7pliSNP+N2TSrWDWF9ykWL
FuVrnC5fvjxbuXJlbf/HuTBOaZWGjXUUTjjhhLy/MfOBsSY469bSlsna3KwL
e8YZZ7Re+0lzY1x/13FNtyRpvBm3S5LGSaxDrB3LuP6u45puSdJ4MW6XJEmS
JGl0GbdLkiRJkjS6jNslSZIkSRpdxu2SJEmSJI0u43ZJkiRJkkaXcbvUza9/
/ets+/btc52ModnRzkeSJEkad8btUnvf/va3s9vc5jb5ur1XX331XCensx3t
fCRJkqQdgXG71N6ZZ56ZX4tsX/jCF+Y6OZ3taOcjSZIk7QiM26X2/va3v2Wv
f/3rs1WrVmX//ve/5zo5ne1o5yNJkiTtCIzbJUmSJEkaXcbtkgb1u9/9bq6T
IEmSJE0M43ZJg2Duujvc4Q5znQxJkiRpYhi3T66//vWv2U033TTXyRgZf/jD
H1q/l7z8+9//PsTUzK1+57N169bsrne9az7fvCRJkqTZYdw+Wf7xj3/k84S/
5CUvyeOvK664Ivvvf/+bnXXWWdmhhx6aPf7xj882bdo07X1f+cpXsmXLluXH
PPrRj84OOuigbO3atfl7+/nRj36UvelNb8qe+cxnZosXL86e9KQnZStWrMi+
//3v933P73//++zkk0/O08H22Mc+Nk/rN7/5zUbnd/7552dLlizJDjnkkPz9
T3va0/K0//Of/8w+8IEPZM997nOzl73sZdmPf/zj/Pg///nP2Sc+8Yn89dvf
/vbZv/71r3w+tnXr1uXp3WeffbInPvGJ2ac+9anavCymkXXQFy5cmJ166qnZ
Oeeck3/PRz7ykexDH/pQnnerV6/O3vnOd2bf+973Ss9lkDzn/Pg8zpc849in
PvWpef43VXc+/JvX+dvbZZddsksuuWTK9tvf/rbxd0mSJElqzrh9ctxyyy3Z
ve51r946X2xXXXVV9oxnPGPKaw960IN67/nf//6Xx9H3vve9sx/+8Ie91889
99zsVre6VR4b/uc//5nyPfz7Na95TfZ///d/2fOe97xeOzZxLHEfr7/tbW+b
lr6Pf/zj2d3udrc87o7x08TRa9asyd/z4he/OI+zy5DOF77whXn6iW0D38Nr
u+++e/b+978/e/KTn5z/+5GPfGT2y1/+Mtt111175813fOc738ke+tCHZo96
1KOyBz/4wdmtb33r3v73vOc9lXlZjL83btyYv85xL3jBC7LjjjsuT8/KlSuz
PffcM9+3xx57ZNdff/20cxkkz+kzceCBB+Z/DzfccEP+Gr/rwx/+8Hwt9ibz
wtedz89//vP8t0nzY+edd55y/Bve8Iba75EkSZI0OOP2yUJb7Ste8YperEW7
NG3ttD8vWrQoj12PP/743vG0DXPc5z73uWmf9YQnPCHfxzGpV73qVfnrS5cu
nfYe2tvZR/yZ9kuP76F9mnbfolNOOSXff8ABB5T236bdmv0HH3zwtPPda6+9
8n1f/OIX8xiX9v9oh6admjg48uOlL31p9sc//rH3/l/84hfZ/e53v3wfdQ5p
DFzMS/qQp/iOxzzmMdPOh7yM95CmokHznHXbeO273/3ulGOpJ2Ec+s9+9rNp
n1Om7nxw2mmn5fvmzZuX/5v6A9aOK9Y9SJIkSRoe4/bJw7xiEZudd955U/al
8Rdt27RT085KG3DR8uXLe23X4fLLL89jf+Lybdu2TXvP17/+9Xw/8XW0Gf/m
N7/J7nznO+ef9elPf7o0zbQHR9v4iSeeOG1/tBW/5S1vmbaPvuPso19BGeot
2E9bchn6uEd+Rf/6kOblNddcM2Xfs5/97LzdO7V9+/Y8Tzme/uhFbfKcdnVe
Y4xA2bn99Kc/LT2vMlXnE5+Xxu2SJEmSZp5x++Sh73XEZtdee23f46Ldlz7d
jAlPtyOOOCK7053ulO+nL3aMuWYfrz3kIQ/p+7m0caeijfe2t71t5Tx5z3/+
8/Pj7nKXu0xp9ybuj/Ohr33RkUceme974AMfWPq5jF2P8yhz9dVX9z7/oosu
mrKvKi/LxqHT1s+x9AFg7reiNnlOv/7oi1D1ezZRd20Yt0uSJEmzz7h98qSx
GWO8+3nlK1+ZH8MY9a997Wt9t2984xu99zA2nvfQxt3Uvvvum7/n/ve/f+Vx
q1at6qU7nduO+dDi9Y997GPT3ke7N/sY216mLm5nrrz4/OJcbU3zEh/+8Id7
4+g3b95cekybPH/HO97RSwN1H7TJMydgG3XnY9wuSZIkzT7j9snTNNZkHnWO
Yex4U7SF8x7a0JuKPvLMmV6F+eAj3enYb/qTM4cbrzPnW1GMb3/rW99a+rl1
cTt917vG7b/61a9653n00Uf3Pa5NntPuzpxw6ZxxbIyFLxurUMW4XZIkSRo9
xu2Tp2msedhhh+XHvPa1r2382REjDxK3Rxs947SrxJxobKyRlor+5cwhd+ON
N/Ze/+QnP9nrI1823x1Yn60qbv/LX/7SN26/7LLLGuVlzH1H/jCPWz9t8jzw
/a9+9at7fenZ7nGPewy0Ln3d+Ri3S5IkSbPPuH3yNI3bY174hz3sYY0/O+LO
4rzuVVg7nffQZl6F+egi3czzXsQ6b+yjHoC53GmDJoZ9znOek8+t3k/Eom3i
9nQet355ydx/ccyFF144bT/z80WdQps8L6J/AOce3/mZz3ym8Xvrzifyir4D
kiRJkmaHcfvkaRq3r1u3rncc7db9bNmypfc5J5xwQu89V155ZaP0nH322Y3S
wzp1HMO66kW0YTPnG2O/WWv8S1/6Uvatb31ryppu/bz3ve9tHbd/9atfrUw7
a9ZFH37mxytD2zpj3zFonrO+fb9zZP58Pqdsjv1+6s6nro4j0Hf/Bz/4QT5/
viRJkqRujNsnD2u1RWxGjNsPMSH9yzlul112mbZmHFjnbJ999unFjvx3t912
6/V7L4spiWWPOeaY3nzqxHi0z/OeU089tTQtzA0X47fPPffcafuZB4+2/jbe
/va39+aLi7XpUlVxe7oWO/POFxGTR1+CtP9+oG6DGPi6667L/z1ontOPgPn8
br755mnHxRx3H/3oRxvnRd35xFwAbD/5yU/6fk7MBcg5VB0nSZIkqZ5x++TZ
sGFDL/ZiPfUqjCMnroy49ulPf3oeW7/73e/O5zwnLivO4c5abKzfznv22GOP
7OSTT84uuOCC/Lto+12wYEG2du3aKe8hFuVYYv7iuuGs+RZtx8cee+y0NBL/
R/940nvppZdO2YiNib37ib7pbMwfV5SuM8dY+FQ6Vx5t/SnmdI+827Rp07TP
vf7667OFCxdme++995TXB83z+fPnZ0cdddSUz6D/AXUFrGtfFtP3U3U+kRek
if30b+AcqHeh/Z8+DmCewEg/2/ve977G3y9JkiRpOuP2ycHYavJs11137cVU
u+++e7ZkyZK8r3g/rDm2//77T5mrnI0Ym3i8zMUXX5zHo8X30Me9X10BMfPh
hx+efy7t1Oecc072rne9K9tvv/2yBzzgAaVrs4Px3MW51Isb+xnnnq6ZThy8
ePHibKedduodR5o5jriXtm9i5phrj+2Od7xj/h7qIp7ylKfk/459xMjPetaz
et9BH4D4btIfG+3jd7/73XtpLquLGCTPly5dmu/jd/zgBz+Yz0VPHcYjHvGI
aXUg/VAPUHc+IcYVxHa7290uO/DAA6e0z1O/EOPgm6ZBkiRJUjnj9slBuzXx
6C233JK3kbLx//FaHfpl00+csdi0Cde149LuSj/8z372s3k7Nf3zm/jTn/6U
nX/++flYb9p86SNfh7nXmEueWJg4Mradd955SoxJ/+3AXHD02efc6R+f5kfg
/znPdD9xLK/FPvKVcy2+twrv4fv5LN7bT5M8J38uuuiibOPGjXldB3nH2PSq
zy2KtDc9H/q+r1+/Ps/3srXief/WrVuzG264oXEaJEmSJJUzbteOgOuX8e1l
c6nddNNNeUxLPwPa1om/JUmSJGlcGLdr3NEmzLpp27ZtqzzupJNOysddl809
J0mSJEmjyrhd427VqlWN1jtfvXp1tu+++85CiiRJkiRpeIzbNe5Yb46x7XX9
35ctW5addtpps5QqSZIkSRoO43aNO+Yy53p4+ctfXjpvG/PCr1mzJp+Tzj7y
kiRJksaNcbvGHeuexXzxrK/GdXH00UdnK1asyNdIO/jgg7PTTz/d+egkSZIk
jSXjdu0INmzYkK/9vmjRonwd8uXLl2crV67MtmzZMtdJkyRJkqROjNslSZIk
SRpdxu2SJEmSJI0u43ZJkiRJkkaXcbskSZIkSaPLuF2SJEmSpNFl3C5JkiRJ
0ugybpckSZIkaXQZt0uSJEmSNLqM2yVJkiRJGl3G7ZIkSZIkjS7jdkmSJEmS
RpdxuyRJkiRJo8u4XZIkSZKk0WXcLkmSJEnS6DJulyRJkiRpdBm3S5IkSZI0
uozbJUmSJEkaXcbtkiRJkiSNLuN2SZIkSZJGl3G7JEmSJEmjy7hdkiRJkqTR
ZdwuSZIkSdLoMm6XJEmSJGl0GbdLkiRJkjS6jNslSZIkSRpdxu2SJEmSJI2u
cY3b582bl+25557Z3nvv7ebm5ubm5ubm5ubm5ua2w27z58/Pdtttt+zaa6+d
61B8IAsWLMj22msvNzc3Nzc3Nzc3Nzc3N7eJ2LZv3z7XobgkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkaYT8P79Z0ec=
    "], {{0, 915}, {1006, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{704., Automatic},
  ImageSizeRaw->{1006, 915},
  PlotRange->{{0, 1006}, {0, 915}}]], "Input",ExpressionUUID->"2fe7d2b3-b985-\
4f06-b9f5-eccf47c52d51"],

Cell["Plotting functions", "Text",
 CellChangeTimes->{{3.7487034727259417`*^9, 
  3.748703475902677*^9}},ExpressionUUID->"4b7150a1-3e2b-4d54-8583-\
e145c64bbdb7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "DFAPlotExecution", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<SimpleNodes\>\"", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DFAPlotExecution", "[", 
    RowBox[{"machine_Association", ",", "inputString_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "trace", ",", "executionSteps", ",", "ruleIndexes", ",", "graphData", 
       ",", "startTag", ",", "acceptTags"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"trace", " ", "=", " ", 
       RowBox[{"DFACompute", "[", 
        RowBox[{"machine", ",", "inputString"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"executionSteps", " ", "=", " ", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"First", "[", "trace", "]"}], ",", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ruleIndexes", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", "#"}], 
           "]"}], "&"}], ",", "executionSteps"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<SimpleNodes\>\"", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graphData", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"KeyValuePattern", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"Labeled", "[", 
              RowBox[{
               RowBox[{"p", "\[Rule]", "n"}], ",", "i"}], "]"}]}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"startTag", " ", "=", " ", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}], "\[Rule]", 
           "Red"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"acceptTags", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "\[Rule]", "Green"}], "&"}], ",", 
            RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
         ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"graphData", " ", "=", " ", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{
             RowBox[{"KeyValuePattern", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
              "]"}], "\[RuleDelayed]", 
             RowBox[{"Labeled", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"NameTag", "[", 
                 RowBox[{"machine", ",", "p"}], "]"}], "\[Rule]", 
                RowBox[{"NameTag", "[", 
                 RowBox[{"machine", ",", "n"}], "]"}]}], ",", "i"}], 
              "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"startTag", " ", "=", " ", 
          RowBox[{
           RowBox[{"NameTag", "[", 
            RowBox[{"machine", ",", 
             RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "]"}], 
           "\[Rule]", "Red"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"acceptTags", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"NameTag", "[", 
               RowBox[{"machine", ",", "#"}], "]"}], "\[Rule]", "Green"}], 
             "&"}], ",", 
            RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Column", "[", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<Input string: \>\"", ",", 
              RowBox[{"Grid", "[", 
               RowBox[{
                RowBox[{"{", "inputString", "}"}], ",", 
                RowBox[{"Frame", "\[Rule]", "All"}], ",", 
                RowBox[{"Background", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"i", "\[Rule]", "Green"}], "}"}]}]}], "]"}]}], 
             "}"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<Result: \>\"", ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"Last", "[", "trace", "]"}], ",", "\"\<Accepted\>\"", 
                ",", "\"\<Not accepted\>\""}], "]"}]}], "}"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Graph", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"MapAt", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{"#", ",", "Red"}], "]"}], "&"}], ",", "graphData", 
               ",", 
               RowBox[{"ruleIndexes", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"ImageSize", "\[Rule]", "400"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"VertexStyle", "\[Rule]", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", "startTag", "}"}], ",", "acceptTags"}], "]"}]}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"VertexSize", "\[Rule]", "0.1"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}], 
         "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "ruleIndexes", "]"}], ",", "1"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748703574035603*^9, 3.748703574907305*^9}, 
   3.7488011453763933`*^9, {3.748894061583891*^9, 3.748894062781315*^9}, {
   3.748895074206483*^9, 3.74889512922255*^9}, {3.75026613405938*^9, 
   3.750266166777755*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"8ae4d7a2-816c-4e08-b771-a4c50a04d943"],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.761175053940681*^9, 3.7611750553310003`*^9}, 
   3.761175370355309*^9},ExpressionUUID->"0140b824-43ed-4698-a731-\
cbc187ce9af5"],

Cell[TextData[{
 "DFA declaration, where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"L", "(", 
     SubscriptBox["m", "1"], ")"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"\[Omega]", " ", "|", " ", 
      RowBox[{
      "\[Omega]", " ", "contains", " ", "at", " ", "least", " ", "one", " ", 
       "1", " ", "and", " ", "an", " ", "even", " ", "number", " ", "of", " ",
        "0", "s", " ", "follow", " ", "the", " ", "last", " ", "1"}]}], 
     "}"}]}], TraditionalForm]],ExpressionUUID->
  "5845349a-c57d-4435-8c14-f46f7c610a2b"],
 "."
}], "Text",
 CellChangeTimes->{{3.7486960191284437`*^9, 3.7486960229760027`*^9}, {
  3.748721414503212*^9, 
  3.7487214706204453`*^9}},ExpressionUUID->"5ee6d61d-a915-4101-8118-\
5dbf4a21bbb1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m1", " ", "=", " ", 
  RowBox[{"DFA", "[", "\[IndentingNewLine]", 
   RowBox[{"\"\<q\>\"", ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Transition", "[", 
       RowBox[{"1", ",", "1", ",", 
        RowBox[{"{", "0", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"1", ",", "2", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"2", ",", "2", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"2", ",", "3", ",", 
        RowBox[{"{", "0", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"3", ",", "2", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
     "}"}], ",", "\[IndentingNewLine]", "1", ",", "\[IndentingNewLine]", 
    RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7486945198787127`*^9, 3.748694537572001*^9}, {
  3.748694590572589*^9, 3.748694633600367*^9}, {3.748695630364648*^9, 
  3.748695634124699*^9}, {3.748695749298512*^9, 3.748695750427799*^9}, {
  3.7487214095466213`*^9, 3.7487214098627243`*^9}, {3.748721640224881*^9, 
  3.748721640463043*^9}},
 CellLabel->
  "In[146]:=",ExpressionUUID->"8dd9f75b-c7c1-4a9f-9fa0-51035376cda3"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"q\"\>"}], ",", 
   RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"DFA\"\>"}], ",", 
   RowBox[{"\<\"Transitions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "3"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "3"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}]}], "\[RightAssociation]"}]}], 
     "}"}]}], ",", 
   RowBox[{"\<\"StartState\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"AcceptStates\"\>", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"\<\"StateExpressions\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.750261313995665*^9, 3.750261689011943*^9, 3.750262877012582*^9, 
   3.750266476768386*^9, 3.750364372789947*^9, 3.750364458266753*^9, 
   3.750455569894431*^9, 3.750457526940032*^9, 3.75046073375384*^9, 
   3.7505033066754217`*^9, 3.7505046641474247`*^9, 3.750506573442813*^9, 
   3.750531026545973*^9, 3.750531340958053*^9, 3.750532001609273*^9, 
   3.750612937446406*^9, 3.750688987918082*^9, {3.761175140138031*^9, 
   3.761175141446569*^9}, 3.762889827894126*^9},
 CellLabel->
  "Out[146]=",ExpressionUUID->"dd298194-dd4b-49ab-95fd-1d7db7462aeb"]
}, Open  ]],

Cell[TextData[{
 "Plot of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "1"], TraditionalForm]],ExpressionUUID->
  "1447a10d-ef7f-47e8-b840-b60247ca58eb"]
}], "Text",
 CellChangeTimes->{{3.748895512083273*^9, 
  3.74889551820472*^9}},ExpressionUUID->"bf273832-4a50-4fa4-937f-\
b1565ad7899d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FiniteAutomataPlot", "[", 
  RowBox[{"m1", ",", 
   RowBox[{"\"\<Labeled\>\"", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.7487036530554533`*^9, {3.748721481242248*^9, 3.748721481351666*^9}, {
   3.761175191208699*^9, 3.76117519415563*^9}, 3.762889814505137*^9},
 CellLabel->
  "In[147]:=",ExpressionUUID->"68beedad-584d-47e9-8b8c-28409ef429a3"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3}, {{{1, 1}, {1, 2}, {2, 2}, {2, 3}, {3, 2}}, Null}, {
          EdgeLabels -> {
            DirectedEdge[2, 2] -> {1}, DirectedEdge[2, 3] -> {0}, 
             DirectedEdge[1, 1] -> {0}, DirectedEdge[1, 2] -> {1}, 
             DirectedEdge[3, 2] -> {0, 1}}, ImageSize -> 400, 
           VertexLabels -> {"Name"}, VertexSize -> {0.1}, 
           VertexStyle -> {
            1 -> RGBColor[1, 0, 0], 2 -> RGBColor[0, 1, 0]}}]]}, 
      TagBox[
       GraphicsGroupBox[{{
          Arrowheads[Medium], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], {
           ArrowBox[
            
            BezierCurveBox[{{0., 
             0.}, {-0.08847925546776056, -0.19078353238530235`}, \
{-0.2873577330053514, -0.24717977484589643`}, {-0.41452835747980865`, \
-0.18822269607102315`}, {-0.41452835747980865`, 
             0.18822269607102307`}, {-0.2873577330053514, 
             0.24717977484589637`}, {-0.08847925546776059, 
             0.1907835323853023}, {0., 0.}}, SplineDegree -> 7], 
            0.0499898115685081], 
           InsetBox[
            FormBox[
             RowBox[{"{", "0", "}"}], TraditionalForm], {-0.5, 
            9.439029839496054*^-17}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0., 0.}, {1.0004074127454492`, 4.666248974332878*^-18}},
             0.0499898115685081], 
           InsetBox[
            FormBox[
             RowBox[{"{", "1", "}"}], TraditionalForm], {0.5002037063727246, 
            2.333124487166439*^-18}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[
            
            BezierCurveBox[{{1.0004074127454492`, 4.666248974332878*^-18}, {
             1.215969005971036, -0.1425312379880006}, {
             1.2342632844934087`, -0.32493768720862726`}, {
             1.1702710252509327`, -0.43105693297714304`}, {
             0.8305438002399658, -0.4310569329771431}, {
             0.7665515409974896, -0.32493768720862726`}, {
             0.7848458195198624, -0.1425312379880006}, {1.0004074127454492`, 
             4.666248974332878*^-18}}, SplineDegree -> 7], 
            0.0499898115685081], 
           InsetBox[
            FormBox[
             RowBox[{"{", "1", "}"}], TraditionalForm], {
            1.0004074127454492`, -0.5}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[
            
            BezierCurveBox[{{1.0004074127454492`, 4.666248974332878*^-18}, {
             1.5003055284305302`, 0.16440723931737353`}, {2.000203644115611, 
             4.9566794084199865`*^-18}}], 0.0499898115685081], 
           InsetBox[
            FormBox[
             RowBox[{"{", "0", "}"}], TraditionalForm], {1.50030552843053, 
            0.06998573619591142}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[
            
            BezierCurveBox[{{2.000203644115611, 4.9566794084199865`*^-18}, {
             1.5003055284305302`, -0.16440723931736867`}, {
             1.0004074127454492`, 4.666248974332878*^-18}}], 
            0.0499898115685081], 
           InsetBox[
            FormBox[
             RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], TraditionalForm], {
            1.5003055284305304`, -0.06998573619591142}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], {
           StyleBox[
            DiskBox[{0., 0.}, 0.0499898115685081], 
            RGBColor[1, 0, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, {0.0499898115685081, 0.0499898115685081}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            
            DiskBox[{1.0004074127454492`, 4.666248974332878*^-18}, 
             0.0499898115685081], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, {1.0503972243139572`, 0.049989811568508104`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{2.000203644115611, 4.9566794084199865`*^-18}, 
            0.0499898115685081], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, {2.050193455684119, 0.049989811568508104`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False]], {
    FormatType -> TraditionalForm, FrameTicks -> None, ImageSize -> 400, 
     DefaultBaseStyle -> {
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
       Hue[0.8, 1., 0.6]}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"State\"", "\"Start state\"", "\"Accept state\"", 
       "\"Start/Accept state\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.87, 0.94, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[
                    0.5800000000000001, 0.6266666666666667, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                   None, ImageSize -> 
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.87`", ",", "0.94`", ",", "1"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.87, 0.94, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.87, 0.94, 1], Editable -> False, Selectable -> 
                False], ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0, 1, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.5`", ",", "0", ",", "0.5`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                False]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             GraphicsBox[
              DiskBox[{0, 0}]]}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.7502628853954678`*^9, 3.750265026711474*^9, 3.750266487275099*^9, {
   3.761175189276547*^9, 3.76117519441856*^9}, 3.762889829901452*^9},
 CellLabel->
  "Out[147]=",ExpressionUUID->"80a9975b-c662-4776-80b0-1fd8585f12bb"]
}, Open  ]],

Cell["Trace of the computation", "Text",
 CellChangeTimes->{{3.7486960262162848`*^9, 
  3.748696030776394*^9}},ExpressionUUID->"7a42b715-fb40-4bd7-9221-\
f28047f719f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFACompute", "[", 
  RowBox[{"m1", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "0"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7486959754937572`*^9, 3.748695987115589*^9}, {
  3.74872148454349*^9, 3.748721484607255*^9}, {3.7488939805955057`*^9, 
  3.74889398124257*^9}, {3.748894041123741*^9, 3.748894042123575*^9}},
 CellLabel->
  "In[148]:=",ExpressionUUID->"e0d95bd8-24d6-4c69-b5ed-879eeb817a20"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], "\[RightAssociation]"}], ",", 
     
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "3"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "3"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "3"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "3"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}]}], "\[RightAssociation]"}]}], "}"}],
    ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.750262886832357*^9, 3.7502664886608133`*^9, 
  3.76117520149573*^9, 3.7628898327353907`*^9},
 CellLabel->
  "Out[148]=",ExpressionUUID->"ed9a4054-2e8f-4098-9653-75052a48ffaa"]
}, Open  ]],

Cell["Plot of the execution with 10100 as input", "Text",
 CellChangeTimes->{{3.748696035024338*^9, 3.7486960375681477`*^9}, {
  3.7488955249397593`*^9, 
  3.7488955303983088`*^9}},ExpressionUUID->"7128cb84-38a3-472c-89fd-\
047780df2a38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFAPlotExecution", "[", 
  RowBox[{"m1", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "0"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7486959110494623`*^9, 3.7486959217695704`*^9}, {
  3.748721487439805*^9, 3.748721487582782*^9}, {3.748895351295142*^9, 
  3.748895371774064*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"55e35a06-2d24-49c8-b978-e3f9bb34682a"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`trace$$ = {{
    Association["Node" -> 1], 
    Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
    Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {0}], 
    Association["Parent" -> 3, "Node" -> 2, "InputSymbol" -> {0, 1}], 
    Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {0}], 
    Association["Parent" -> 3, "Node" -> 2, "InputSymbol" -> {0, 1}]}, 
   True}, $CellContext`executionSteps$$ = {
   Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
   Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {0}], 
   Association["Parent" -> 3, "Node" -> 2, "InputSymbol" -> {0, 1}], 
   Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {0}], 
   Association[
   "Parent" -> 3, "Node" -> 2, 
    "InputSymbol" -> {0, 1}]}, $CellContext`ruleIndexes$$ = {{{2}}, {{4}}, {{
  5}}, {{4}}, {{5}}}, $CellContext`graphData$$ = {
   Labeled[Subscript["q", "1"] -> Subscript["q", "1"], {0}], 
   Labeled[Subscript["q", "1"] -> Subscript["q", "2"], {1}], 
   Labeled[Subscript["q", "2"] -> Subscript["q", "2"], {1}], 
   Labeled[Subscript["q", "2"] -> Subscript["q", "3"], {0}], 
   Labeled[
   Subscript["q", "3"] -> Subscript["q", "2"], {0, 
    1}]}, $CellContext`startTag$$ = Subscript["q", "1"] -> 
  RGBColor[1, 0, 0], $CellContext`acceptTags$$ = {
  Subscript["q", "2"] -> RGBColor[0, 1, 0]}}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`i$$ = 5, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`i$$], 1, 5, 1}}, Typeset`size$$ = {
     400., {82.5, 89.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = True, $CellContext`i$2925$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
       "ControllerVariables" :> {
         Hold[$CellContext`i$$, $CellContext`i$2925$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Column[{
          Row[{"Input string: ", 
            
            Grid[{{1, 0, 1, 0, 0}}, Frame -> All, 
             Background -> {$CellContext`i$$ -> Green}]}], 
          Row[{"Result: ", 
            If[
             Last[$CellContext`trace$$], "Accepted", "Not accepted"]}], 
          Graph[
           MapAt[Style[#, Red]& , $CellContext`graphData$$, 
            Part[$CellContext`ruleIndexes$$, $CellContext`i$$]], ImageSize -> 
           400, VertexLabels -> "Name", VertexStyle -> 
           Join[{$CellContext`startTag$$}, $CellContext`acceptTags$$], 
           VertexSize -> 0.1]}], 
       "Specifications" :> {{$CellContext`i$$, 1, 5, 1}}, "Options" :> {}, 
       "DefaultOptions" :> {}],
      ImageSizeCache->{56., {2., 9.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.7502628893820467`*^9, 3.761175203790721*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"a581d934-1842-484b-b9cd-d9109264e285"]
}, Open  ]],

Cell[TextData[{
 "DFA declaration, where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"L", "(", 
     SubscriptBox["m", "2"], ")"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"\[Omega]", " ", "|", " ", 
      RowBox[{"\[Omega]", " ", "ends", " ", "in", " ", "a", " ", "1"}]}], 
     "}"}]}], TraditionalForm]],ExpressionUUID->
  "f1743ed4-e6b5-4448-8ad1-a260fa7e09a4"],
 "."
}], "Text",
 CellChangeTimes->{{3.7486960191284437`*^9, 3.7486960229760027`*^9}, {
  3.748721414503212*^9, 3.7487214706204453`*^9}, {3.7487218529441223`*^9, 
  3.748721893079813*^9}},ExpressionUUID->"609290e8-0f03-4d47-9e3f-\
ca37fe9d977f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m2", " ", "=", " ", 
  RowBox[{"DFA", "[", "\[IndentingNewLine]", 
   RowBox[{"\"\<q\>\"", ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Transition", "[", 
       RowBox[{"1", ",", "1", ",", 
        RowBox[{"{", "0", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"1", ",", "2", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"2", ",", "2", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"2", ",", "1", ",", 
        RowBox[{"{", "0", "}"}]}], "]"}]}], "\[IndentingNewLine]", "}"}], ",",
     "\[IndentingNewLine]", "1", ",", "\[IndentingNewLine]", 
    RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{
  3.748721788074542*^9, {3.7487218188419437`*^9, 3.7487218238413563`*^9}},
 CellLabel->
  "In[149]:=",ExpressionUUID->"6077719b-d4ec-4ec8-a51c-aa315d2dd98b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"q\"\>"}], ",", 
   RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"DFA\"\>"}], ",", 
   RowBox[{"\<\"Transitions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}]}], "}"}]}], ",", 
   RowBox[{"\<\"StartState\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"AcceptStates\"\>", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"\<\"StateExpressions\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.750262898110848*^9, 3.7502664951012487`*^9, 
  3.762889836313909*^9},
 CellLabel->
  "Out[149]=",ExpressionUUID->"fc535803-45bf-4be3-9513-3531635798f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FiniteAutomataPlot", "[", 
  RowBox[{"m2", ",", 
   RowBox[{"\"\<Labeled\>\"", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.748721830629924*^9, 3.748721833704445*^9}, {
  3.762889838473734*^9, 3.7628898602763443`*^9}},
 CellLabel->
  "In[152]:=",ExpressionUUID->"d27e0f96-4e2e-4a4d-a7a2-6aba5521eb37"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2}, {{{1, 1}, {1, 2}, {2, 2}, {2, 1}}, Null}, {
          EdgeLabels -> {
            DirectedEdge[2, 2] -> {1}, DirectedEdge[2, 1] -> {0}, 
             DirectedEdge[1, 1] -> {0}, DirectedEdge[1, 2] -> {1}}, ImageSize -> 
           400, VertexLabels -> {"Name"}, VertexSize -> {0.1}, 
           VertexStyle -> {
            1 -> RGBColor[1, 0, 0], 2 -> RGBColor[0, 1, 0]}}]]}, 
      TagBox[
       GraphicsGroupBox[{{
          Arrowheads[Medium], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], {
           ArrowBox[
            
            BezierCurveBox[{{1., 0.}, {1.1769585109355207`, 
             0.3815670647706048}, {1.5747154660107021`, 
             0.49435954969179347`}, {1.8290567149596169`, 
             0.37644539214204714`}, {
             1.8290567149596177`, -0.3764453921420453}, {
             1.5747154660107032`, -0.4943595496917922}, {
             1.1769585109355212`, -0.38156706477060415`}, {1., 0.}}, 
             SplineDegree -> 7], 0.1], 
           InsetBox[
            FormBox[
             RowBox[{"{", "0", "}"}], TraditionalForm], {2., 
            3.549945877679552*^-16}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[
            
            BezierCurveBox[{{1., 0.}, {0., -0.32888149436623376`}, {-1., 
             0.}}], 0.1], 
           InsetBox[
            FormBox[
             RowBox[{"{", "1", "}"}], TraditionalForm], {
            1.942890293094024*^-16, -0.14000000000000012`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[
            BezierCurveBox[{{-1., 0.}, {0., 0.32888149436623376`}, {1., 0.}}],
             0.1], 
           InsetBox[
            FormBox[
             RowBox[{"{", "0", "}"}], 
             TraditionalForm], {-1.942890293094024*^-16, 
            0.14000000000000012`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[
            
            BezierCurveBox[{{-1., 
             
             0.}, {-1.1769585109355212`, -0.3815670647706047}, \
{-1.5747154660107028`, -0.49435954969179285`}, {-1.8290567149596173`, \
-0.3764453921420463}, {-1.8290567149596173`, 
             0.37644539214204614`}, {-1.5747154660107028`, 
             0.49435954969179274`}, {-1.1769585109355212`, 
             0.3815670647706046}, {-1., 0.}}, SplineDegree -> 7], 0.1], 
           InsetBox[
            FormBox[
             RowBox[{"{", "1", "}"}], TraditionalForm], {-2., 
            1.8878059678992108`*^-16}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], {
           StyleBox[
            DiskBox[{1., 0.}, 0.1], 
            RGBColor[1, 0, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, {1.1, 0.1}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            DiskBox[{-1., 0.}, 0.1], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, {-0.9, 0.1}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False]], {
    FormatType -> TraditionalForm, FrameTicks -> None, ImageSize -> 400, 
     DefaultBaseStyle -> {
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
       Hue[0.8, 1., 0.6]}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"State\"", "\"Start state\"", "\"Accept state\"", 
       "\"Start/Accept state\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.87, 0.94, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[
                    0.5800000000000001, 0.6266666666666667, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                   None, ImageSize -> 
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.87`", ",", "0.94`", ",", "1"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.87, 0.94, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.87, 0.94, 1], Editable -> False, Selectable -> 
                False], ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0, 1, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.5`", ",", "0", ",", "0.5`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                False]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             GraphicsBox[
              DiskBox[{0, 0}]]}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.7502628997903852`*^9, 3.75026503344147*^9, 
  3.762889860600264*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"3139c2b8-c613-4385-8f76-adce2cf5f1d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFACompute", "[", 
  RowBox[{"m2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "0"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.748721911799361*^9, 3.748721911908785*^9}, {
  3.748894082049868*^9, 3.748894083035879*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"db71c5dd-6916-491d-ad6e-ec03ba023a5a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], "\[RightAssociation]"}], ",", 
     
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}]}], "}"}], ",", 
   "False"}], "}"}]], "Output",
 CellChangeTimes->{3.750262901047285*^9, 3.762889866087247*^9},
 CellLabel->
  "Out[153]=",ExpressionUUID->"2fe05aec-19b4-4fb7-8992-add5e58f5a6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFAPlotExecution", "[", 
  RowBox[{"m2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.748721917428274*^9, 3.748721943749197*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"f295aa76-95ea-45c1-a9b8-8fa05cb630e3"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`trace$$ = {{
    Association["Node" -> 1], 
    Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
    Association["Parent" -> 2, "Node" -> 2, "InputSymbol" -> {1}], 
    Association["Parent" -> 2, "Node" -> 2, "InputSymbol" -> {1}], 
    Association["Parent" -> 2, "Node" -> 1, "InputSymbol" -> {0}], 
    Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}]}, 
   True}, $CellContext`executionSteps$$ = {
   Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
   Association["Parent" -> 2, "Node" -> 2, "InputSymbol" -> {1}], 
   Association["Parent" -> 2, "Node" -> 2, "InputSymbol" -> {1}], 
   Association["Parent" -> 2, "Node" -> 1, "InputSymbol" -> {0}], 
   Association[
   "Parent" -> 1, "Node" -> 2, 
    "InputSymbol" -> {1}]}, $CellContext`ruleIndexes$$ = {{{2}}, {{3}}, {{
  3}}, {{4}}, {{2}}}, $CellContext`graphData$$ = {
   Labeled[Subscript["q", "1"] -> Subscript["q", "1"], {0}], 
   Labeled[Subscript["q", "1"] -> Subscript["q", "2"], {1}], 
   Labeled[Subscript["q", "2"] -> Subscript["q", "2"], {1}], 
   Labeled[
   Subscript["q", "2"] -> Subscript["q", "1"], {
    0}]}, $CellContext`startTag$$ = Subscript["q", "1"] -> 
  RGBColor[1, 0, 0], $CellContext`acceptTags$$ = {
  Subscript["q", "2"] -> RGBColor[0, 1, 0]}}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`i$$], 1, 5, 1}}, Typeset`size$$ = {
     400., {74.5, 80.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = True, $CellContext`i$4176$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
       "ControllerVariables" :> {
         Hold[$CellContext`i$$, $CellContext`i$4176$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Column[{
          Row[{"Input string: ", 
            
            Grid[{{1, 1, 1, 0, 1}}, Frame -> All, 
             Background -> {$CellContext`i$$ -> Green}]}], 
          Row[{"Result: ", 
            If[
             Last[$CellContext`trace$$], "Accepted", "Not accepted"]}], 
          Graph[
           MapAt[Style[#, Red]& , $CellContext`graphData$$, 
            Part[$CellContext`ruleIndexes$$, $CellContext`i$$]], ImageSize -> 
           400, VertexLabels -> "Name", VertexStyle -> 
           Join[{$CellContext`startTag$$}, $CellContext`acceptTags$$], 
           VertexSize -> 0.1]}], 
       "Specifications" :> {{$CellContext`i$$, 1, 5, 1}}, "Options" :> {}, 
       "DefaultOptions" :> {}],
      ImageSizeCache->{451., {122., 128.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.750262903251924*^9, 3.7502664968843946`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"bfc924bc-f67a-4314-8412-bcb8a696dc4f"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Non-deterministic Finite Automata (NFA)", "Subsection",
 CellChangeTimes->{
  3.761426956159869*^9},ExpressionUUID->"f9e4bb23-9086-490f-8fda-\
7611eadaefe8"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
ofcTIYQQQgghpAX8H1rlceg=
    "], {{0, 205}, {375, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{375, 205},
  PlotRange->{{0, 375}, {0, 205}}]], "Input",ExpressionUUID->"fd6e2982-b3b8-\
4b6d-a695-7801cd5a4b82"],

Cell["\<\
In automata theory, a finite state machine is called a deterministic finite \
automaton (DFA), if

each of its transitions is uniquely determined by its source state and input \
symbol, and
reading an input symbol is required for each state transition.
A nondeterministic finite automaton (NFA), or nondeterministic finite state \
machine, does not need to obey these restrictions. In particular, every DFA \
is also an NFA. Sometimes the term NFA is used in a narrower sense, referring \
to a NFA that is not a DFA, but not in this article.

Using the subset construction algorithm, each NFA can be translated to an \
equivalent DFA, i.e. a DFA recognizing the same formal language. Like DFAs, \
NFAs only recognize regular languages.\
\>", "Text",
 CellChangeTimes->{{3.762889909888114*^9, 
  3.762889914213303*^9}},ExpressionUUID->"b1fa6789-3f64-4e4e-8dac-\
4de7e3c428af"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3QfcFNXZ93EVAStirygEo2JHUcBKfFCMKNYg2BuCvWLDrkSNHew9FlQU
SzSKig0QRSEqaBCs2HtBxYJ43vwm79mcPffM7OzuzM4u/L+fd948cs/Onp0+
11znOu0OOGqXg+ebZ555jlvgP//fLvuf+Kdjj93/5F1b/+c//nLkcYf0P7Lf
QX8+8vh+/fsd2+WAZv/5xwfnnWeeh+efZ57//L95jIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiISEK//PJL3k0QEREREWkov/32m5k0aZL55z//aa655hpzzjnnmKuu
uso8/vjjur8WERHJyJQpU8zFF19sNthgA3PyySfn3ZzUXHjhhebyyy/Puxki
8v9xPF500UV5N6PhvPnmm6ZLly7Bc5I0rk8//dS88MIL5oEHHjBXX321Oe20
08yBBx5o/vznP5uNNtrITJ48Oe8mSgV+/PFH8+qrr5offvgh76YUqdd2uRqh
jaX8/vvvZuTIkeaggw4ySy65pJlnnnlCp8UWW8yce+65wfz1Yk5Y/yKSDeLz
r732mvnuu+/ybsoc64orrsi7CQ1t4sSJpl+/fmbllVcuut4OHjw476ZVbfbs
2aZ///5mww03DK7VWeA9288//5zJsqXY119/HTwDPvXUU+a9994Lzq/SmH76
6SfTuXNnc8ghhwTHqSRz/PHHB+dnzmvSmGbNmmUWXnjhyGfd+eef33z77bd5
N1PKdPvttxe260ILLWT+/ve/592kQL22y9UIbSzl2WefDWLR7nF8wgknmJde
eimIWbdo0aLJsX744Yfn3ezAnLD+RSQb3K/zHpXzQ6tWrcyYMWPyblJD+fe/
/x3k5/7tb38zQ4cONTfccIO54447zP33328efvjh4Pzbu3fv4Pohlbvgggua
xLKY5oTciQEDBgS/7ZNPPkltmePGjTOHHXaY2XzzzU2bNm0K9yiLL7646dq1
a/DO7e23307t+5KaOXOmmTZtmnnjjTcymbKKByYxffp0s9NOOzXZR5s3b246
dOhgjjzySPPOO+/k1r45Cdct3s+mNcXtN5999plp166dOeKII2r4CxsXcZBl
l1228H6fbSWNaerUqcH9zdJLL93kvLbFFlvk3Twp0wcffGBatmxZtB25N+Da
pXbFa4Q2lnLGGWcUtX+++eYzw4YNK5rnyiuvbHKs87vzfi83J6x/EcnObbfd
VnR+6N69e95NaigHHHBA5PtLdzr99NPzbuocgXtrd70OGTIk7yZVhXoFvB8j
/6xaPDeef/755o9//GNwn9KrV68grkr8iHsR/s73DBw40Cy44IJBnIWYVy3z
MumrkuR4qXS69957a/ZbXL/++qvp2LGjuemmm4KcBZ4D6au21FJLFbWPdS/V
OeaYYzLZd7bZZpvI73z55ZeD4+X666+v4S9tTPRNc9frXXfdlXeTpEp77rln
k+PlvPPOy7tZUqYRI0aEnvuGDx+udpXQCG2Mwzthv+28fw/DfaE73x/+8Ifc
+xw2+voXkWzdfffdReeGnj175t2khrLSSislelai/5FUjxwmd72SH92oyKHi
GXnQoEFVL+vRRx817du3D9bJ7rvvbt56663Y+ckTWmONNYL511xzzZrlDY0f
Pz6I37nbkHzGDz/8MHbiHRwxhVGjRgXPx+RC8ozVunXromXlla/HO87999+/
yb9/88035qijjgpy5BdZZJHgN0h1OAeQR/zII48EdWvd/Yk+COxPzzzzjBk7
dmyT6Yknngj+fumllwb7D8ef/Sx5i3HIaeR9MP0yJBpxdPeY3HbbbfNuklRp
9dVXb3JP88orr+TdLCkT77PC7k9ffPFFtauERmhjFO7veIfptnvrrbeOnJ++
9dxj/eUvfzF//etfzfvvv1/D1oZr5PUvItmjb8D2228fnBeWX3553aOU4fXX
Xw/WG/UUycNYdNFFi56PmjVrFqzTTTfdVLVXUjTvvPOWfL9U79gf1ltvveC9
VzV1rei/17dv32BdcL9y3XXXJf4s/ahsv6C2bdsGdZ9qgVxF936E754xY0ZF
yyK37Oijjy4sK686D4xLwL1fFHLj8uwLOaciL26BBRYobP+DDz64rM9/9NFH
hf72xIHjUIOO83mnTp10Po9ArJH4onuO5jrIepbGxHXB3Z5MK6ywQt7Nkgrt
vffeRduS+4d6UK/tcjVCG8Nst912Re3mOYVaKY2mUde/iNTOF198kXv/6EbD
O/6wGhLk5fL8qmeebLjPrzfffHPezakI/QxpP/3TKsUxa5/FqYtVSSyaXCe7
Lqn9VAvEIKh9796XhOU2leOUU04JlkNsPg/Es5ZYYgnFrGqMHEd3PyJPsVzk
W/FZapiXQh8r5lW/w3DUkeT9DePfuduFvi7SmBgHzc+JoN+4NK5//OMfQb4p
fYPz7kfmqtd2uRqhjS7GAvSP32rvt/LUaOtfRKTecc9OfxepLfpt2evyLbfc
kndzykZ9JerrrrLKKkF+ZCXIH6dOFuuAGpmjR4+uaDnEXKl1bdfnc889V9Fy
ykVuoxuXZKLWV6WIkZHrtvbaa6fYyuTIE+Q3UN9Naoe+EHb/IS+okjw/jkFy
iJLU4qP/KOcf8nFrlc/YSOjDzDmZPp3usU2fZmlMJ554YpPn4VrUKWRsWMbS
2W233QoTsTWRasxt+9Vxxx3X5Ph9/PHH825WTcxt27oeaJ3XhtazpIU+YtRq
0Xhltdfo8Sz7DH7WWWdV9Hme2Rkvj2XQD6TaesvHHntsYX1S+6ZWLrnkkqJ7
LGJ89IGsZnnUqcoDY++wLdg333zzzVzaMDeihrvdf8hVrBT9p3jfm4Tt33rx
xRdX/H1zInLlGM+QHEUm+t+rzknjW3fddYu2I3Fj3slkze+XzvT8889n/r0y
Z5ub9iv63NBH3v2tvIup9D1qo5mbtnW90DqvDa1nSQt1qamRWk+oUUJfjzn9
ebrR41k2r+rtt98u+7PkV7v1lsutFxTmnnvuKSyPGlzV1PMqB79lyy23LDof
77DDDhUvjxr4LOPLL79MsZXJ0feY799ggw1qtg7nZuTkEb+0+85JJ51U8bK4
5//Xv/6VaF7GC+X7iCnL/9AHjXGxrH333bfo2Hb/Jo2Bewr/nplzdi3YdzZ2
otaj+hdJteam/SqsrzBjss8t5qZtXS+0zmtD61nScsIJJ5gjjzwy72YUUBd7
/fXXD/brOb2mfyPHsxiXjXbzzrsS5HTZ307+w6efflp1mxh70z0vPvvss1Uv
M6l33323SR5HNTX+l1lmGTNhwoQUW5jcww8/XPgNedWln5v4tbOqybUmLkY9
uqTI56pl/9x698MPPwTHsXvt4Z2Pu32oL0dNfWkcN954Y5Pn4VrUQnvttdea
fG+/fv0y/16Zs81t+9Uee+zR5PfeeuuteTerJuaWbc01derUqUH+M2NA0lcg
L3PLOk9budtQ6zkZ3nlLaYxNR39D6irmneNH7Xk3z+WNN97ItT1Za+R4FvlU
leZVkc/VokWLwm8fPHhwKm3iPJrn/Y7/zMRzcaX9eLt3716T2i5R1llnncLv
GDFiRG7tmBv4tbOIqcS5/fbbQ/+de4lWrVqV9d2Mhcj3DhgwoKzPzakYl4Mx
HlzU5ltxxRWLjm1yQfPwxBNPmEMOOcR07NjRLLfcckHtPs4z1BV2kVfJfrX5
5psHfScZZ4PfxTgASe+NPv7446AvAPma5P3Rj3qjjTYyZ5xxRqKYaS3ban3+
+edBLdD99tvPHHTQQcE4uRwXjNnq3zdPmjQp0TLJk7322mvNMcccY3bZZRez
5557BmPoMAZmKbwv9L+X9wVJVfLdL7/8shk4cGCwrdhviXGz7Tin+7nUV199
dVCrkbGtGTuOnE0X+z5jU5x66qlBzjH141ZeeeUgpssyw3KzGZeC+0neS/Je
pkePHpEx+q+++iqoi8R7MeYlZ7tUvjf7BNd22tumTZvgHjbu3Wet9sNy2wW2
77Bhw4J3ypyLGcuG/M+77747toZipftVJW10sW2JA5Mbxbbi/o86EVmOGUW+
OrVV/d+b5N6KdfjPf/4z6Fv/2GOPRc5Xz/tIHueQrPDe+swzzwzGO+JdGn08
jjjiiGA7HXrooUW/kbrOPvqdsq04t1OXgXMRfTHYXiwvbL08/fTTZtttty2a
Sr3LqGadV3vdrMdzrqvabejKcz0jj3uUpMhR411qz549g3G6SuHazXWD3890
xRVXmOHDhwf7P9u8Fohjcp6hBhr7by372LFf+uNXc89z55131qwNFvWJt9pq
q6K2TJ8+vebt8LFP0X/ntNNOM23bti26x6DNDz74oBk6dGgQy3jmmWfK6s9f
aTxr/PjxQZ8kauj16dMnuHflnoh4YK2suuqqFecg0W77uzkPzZw5M5U2+flZ
F110USrLLQfXH7cNm222WUX3etToLhXXyJJbB5tzdz0ci+RuMsZR1LWKvzci
7j3suu7atWvsvIxNvtJKK0X+vdx3mpy7+F71Ofwv7lcY29DHOdY9rtlmtUSs
nnMJ3+2+C7ATtc4t3gNRz96fx07cZ8ThfHX22Web5s2bF+WkESOyce7WrVtH
jsFZy7Za3FPyjEI8136W6zVxGvZt7kHd5RLnKYVzHtcqux4Yp8NdDuvAzQGm
ri19U/faa69g4p4u7Pf/3//9X2EeprB6d+V+N4jb9e/fP7in4++MDeF+L+8t
7bi1zOv3o7X3fxb3FHaMFX/9MXEecq9t3DPTZv+e0rbX70PCuCnUQPLn5T4w
ypNPPhm6vzAusK+W+2E57QL3apxT2CbM1759++B5zP0sz1cPPfRQavtVuW10
MU6PrUPAOxd/GTvuuGPJZSTFuH/EWTkH8VvdY9qddt5556LfaydyubgPI1bk
HgPcN/vqbR/J+xySFc43nJ9tHwbik8RR2G/4b+IQ7vWGiWdxF/0ViMEwn/u+
1Z3CalsSO/Tn43nNSmudV3vdRD2ec9PahvW0nvO4R0mC2DPxF94TMM6a/Y64
nI/333+/kL/KbyK2yDZhndjPl3quqBaxJN5x+PvhfPPNF2yXWsQmiOVFbSPW
S9I6LNXiPYvfh5aJbUQc3p8uv/zyYN1R96tTp05BnJ5rF/+92mqrNVk+cWti
yOzrG2+8cTA/50ViMpwLwnAcciwRv3bbxP0g5xByIv1x7Zjo+0scJUkMo9x4
1pQpU4J7Cq7RnEfOP/98c9lllxXO1xzDvIfJGnFx2+6k77gtcgDd9cU9XVrI
Z3KXfeGFF6a27KQ4rv3rRS36taSFcyPncs6l7n3r1ltvnUt7uIaSY8Gxy/79
pz/9KbgvI477/fffB/NwTPbt2zfVfalWiH+754FSzxaDBg0Kzotp4d2w/W5y
W+ZmvN/iehz23p/znH+d5v6sFvhu4jK8e+V+fezYsU2uO/ZaTb9n7nmJ13Cf
RQ6APy/HShTeQ/L+2p2fZ20bJyVmTHybf+d+0n9GrGVbLWq6cw9sP8P5l/eu
4J1T2HNBqT4NPE/b45Lzjn3XbfvZ28mNi7HMqPupuIl3sNV+N+xzBeOicE60
8Qc78fxg7b333pHt4Z2drQfAu2G2Pfej7PNR9/yM88t+ErVMf4wL3h37y7NT
2LMV73bIK4laPveyrlrth+W2C8ReqQ9r5+FdOriecT/rfp54F/eh1exXlbTR
4nmYZykbF+L+kvtf7nP95aTxzst/J5nWxDb1n+3rcR/J+xySBc4nbr8bntHc
ayfPbv7v4Vncrd1Kbh3xE3JiOB8Rq/A/wz2r78MPP2wS1+e65Y7pnMY6r/a6
iXo756a9DetlPedxj5JU1Lk+KjeDHEveezAPsVAX9wA2d4RjJ6scWvo0sI5o
I9cAxpy1sUI77bPPPpl8t4vnF97nhcVlmNj3axETiIq1R00cVzyHEQPiGdaP
r/qIA5ETzbWY53J3Xu4rfNxXEF/zj33+m+UQPydPkuOMPE+2p/8bOOZK1dIu
J57F+zHeUxEbD8sjJU/KLivJ+7ZqEOvje+jHQP5vOfzjNc0aaeRQu8uO6peV
Nfrnue1g/ySvqJ4RV+G+mtxtYkack+x2thPvdmqJ9yLkARNXIz/S5vVyXian
lT6ZsH3myJVsNH58N278cd7dkN99/fXXp/b9rEt7HrrvvvtSW24jIqfb72vo
8u/ZyHXPGudXxmXg3tTGb93+qUy8qwHXG97TcK9pY5PumK92uvLKK0O/i33B
75fHuYv7Zhfv+uzfWSd5tNXifs59F8azG+9eXf41v9S+7o+35I67y32zvyxi
ZuDZiRwCO7Ee/Hnpn+DO49dUqPS7Offx31xfwTO0f19kn5uvueaa4F6f5yb/
WY91yTMA9zrcw9g6cfyb/932XRY1UHg+2GSTTYLrnH/dYOK9m8U25d94Nxl2
/07fMBfnvc6dOwfvMfhs2DOZO55wrfbDcttl+cvn/aBF/wz3vpBrH3H2Sver
SttoMTaGnc+Nh7r1T5l4D5BGDVT2N+ru2N/B86btC+BO3OO6v9ed383/txP3
C6563UfyPIdkgd/vxmiJOfnvzcK2l1u3lfl57mFd2D4LPB/7nwkbR4d+Y/58
nPdc1a7zaq+bqLdzbtrbsF7Wcx73KOUiXkFfTvc7hgwZEjqv7dMW1V/AHauM
XIU0sX7IIyMu4ccNWc/kz7rXB7+WQVa4DvHePyqvl/yILBFT5ZihX7n7vRyn
vCvn2OU6RX8+4vR+vyLy2dzPxWEfdvMUWedR2P5ch9xl04857P09x5r/Dob/
jpM0nkX9AJvjSW2QKO77WNZVVoh78B3kupWD/d/dx+gXnibuWdz1b9/R58F/
/815sV5rSPO+1Z4Xeaa37zHZp908W3IgaoXzo91XbrrppiZ/p23Eork3sedL
951bo+D6bdcv5yXbH8jHdd1el9Luk26fF9KqY9eI2Oe5T2N7ROHdjntM+7n/
WSBGz3XCrW/hvzux+e7UxOCdqHvfQG0k/3oeVZeS+19/3rBcevc+hcmOJVDL
toJjxb3P5hxA/ywf5153mRxnUX2TOQbceak343rkkUeK/s670TDsF/a9qZ1Y
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
1DNElLXWWqvwW+Jyxitha4Lb80ytas/FIb+T8zBjcdYbzvt27M6oWoIWtdjt
ug3LbUgL1w83F6xUv3SbV8T1y9aNsaivQf9cOx6OxXWJdyrk4pd6h5Q17int
byWfMu55hvsG5gur3Vct7nlYtq2DObfh/oXfz7X573//e9CPNWoiF9iOn2Mn
tmMthNWHpT8O2417XRfxXX/eqOOc65M/b1gfHfjXaKawvOGs2grGNvXvK8Py
HL744osmNdGjrjv+vTvnB2pQUSvSniepU8B7klK1F8J+u1+DOKvvhl9PlDg+
7yH47aXyD32ck/xnCd6dEU/kuPExZrs7L/2mee9F7qebC0LNW38dkYdazu9i
sjVhomS5H1baLrefiDuVetdf7n5VSRvZ3ksvvXTRfOXWlUhTWP2jsHg06Efm
56lw/JSqcViP+0je55BqXHzxxUVtCatthbB1kqTflP8Zf1wWrlv0z/DnszUE
o5S7zrO4bqIezrlZbsN6Wc+1OO6rkSTfhRohYdcS+psSF8m6vmsp9RTPYpwg
dx35z4wuciV5dqT+YZKJd1T+uSWPeFapZxH2Iztv0niWrZduJ/oBhim1v/JM
7i4ny3FIymGvj6VigT73HO2PJVsN7mN452SXnWUfoKSotcPzA/eC/rujeuDe
F5TKueJ9qJ03y7Eh3PqXpWIrrFMb+/JzR4lZUceO+5eoGmrU2uEaHTeeYNbc
fEX68Mah3kDYeNRpsOMh1WLs7npELJx3mUn5ufK8O8jqXbfLz7knn473iWH3
j2F5Cu648C6/HwoT/V3D8I7WnzcsFzartnJP7tfDirp/9ms8MPHe28d7h7B7
Qib68DAeFPfUSfvmuHUs7UT+RJi0v5v7MFt70E7UTuG+kv4J5XL7FdiJeEdY
ny/e8/vzUu+P/Fj/3tHG0N0pLu+GHBP3Gs9k8xDiZLUfVtMutqUff2DiehaX
11DOflVpG937XTvl9d6Heyi/LbxLiDrX+nVHmJL0IajHfSTPc0g16J/in3/C
6hjwrtIfF4GpVL9WtzY5E8vw43P+uGJ28vtf+so9vrK4biLvc27W27Be1nPW
x321ksSzqIdGvkTU8c/YjGF9FbNGP2H69bj3annHs4jtuftr3NgDxJ6i1mnU
5I9RMqfEs9znfyZyfcO417iw/ZU8Pvt39ou8Y60Wz720KWxsiThuXgN94NPi
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
29xzI7VA88R1lFxGv+9bJTgHkWuWFa79dr2F1ZNx8Sxk550wYUJmbWJMbfs9
pXL3xo4dW5jXrzfi5lWXOn/YPmOlxmNJG+8w3DwKxtXLk10P9Cudm3B9I0e6
0jq5vPN1z+F+bDUtYfVticOFve9hX/Ln5b01OO7JDfDfi9jzuZ3C8tXCckmo
V1PLttqaf+7kvv9l/BpqN5BvGFafyObBM840NUZsnUXGAvDnDeuzAe5vl112
2WCd+bin9ZfD/Zz7vpwckZVXXjkYMzbN74Z772onxt2phHvetxPXN7/mKfzc
WqaofuzkL/vzcu0EsQqeFXhOs/cuHJt+nxYmm1vAOyTyW7l3dGV9zJTbLt7N
hd1Dh+UV+TWfKtmvKmlj2LMbk19jgO/t169fkAuTVV4xtRb8dnTr1i10Xtar
X9+GZ0zbJ4nxmNj27nM56m0fQd7nkGrQb8xvh42vcDzzHpxcF7aL32YbS2C7
s+38cfzcmhd2ss8F9llg6623Dv7br//EOrbPhBxbXPPdMTIrPb7SvG6iHs65
WW7DelnPWR/3aSDH0P3OsPgA6yjs2djl5gmQk5YWtpmbmxcVR6mneJaN+9ci
NwvuMy0Tsc8kODe5n4t7N4Gs41lcd+1nGF8k7P0Wx06p/RV27DE7cR+RBM9q
WY3zZ+tbcq0uF3Uw7W/x80ypTcgzIfu9fcbk/EZtdTeOR39dxndlGcTFoq7d
cbi+UScwjToDXCN5lxiWh1cumztFvnScattv+92XGtvQ3keUGrO72va440mQ
hxGH3Ao7L7XqXG7Ocan+msRjmY94Tpw09xX478vyHGMRtv5c3NiV/Hbuvzn2
034XlRfuy6oZczlsPK2k16xycJ/uf09YPWHuMbgXdOcjf5V3fbw/WX311UPr
fFFXwf0MOQUuzsXuexUmcvPD9oMs20pOr79s+otyzmTfpF8G7525Rw+rKcN7
e+5lOFe77x38+2Um7tXefffdou8ndsbv5v102LsiPy+bye0PyTmENnbv3r3w
+bS+m7iCP4YaU6VjMHGf4S8rqhZ32PNS2JhKnEf9nDmeI8ip470/zx/8du7l
rbDcAsazZT9h/2Bb+tcAZH3MlNMu6przTM1v9/MFiMW4uSQ8H/k5SJXsV5Ws
O2Ju/vxM7viG5KXSf5U2VzJeZlJh/ZLcZ1xXWOya+qy09dBDDw1+p5ufY9XT
PmLleQ6pFnEivx38vpEjRwbXWsZn5timX6ufe0c/UuoF89vYnq6w9W9zgXi2
Ypvxd9vH0t+uNneE7cF7RP+cWOnxleZ1E/Vwzs1qG9bTes76uE8DtXLd7w3L
2WXfoB9pXF9HN55FzeG08O7QbZ//rgC0yx0DLs94FvsvbSAmUqtx9fx854su
uijR57gncGvoUTcwCvu+rXFfal648SzOA3FjPIJcSbctUf25yB0ptb/a5fn3
qeSFEtOJwn0GbWAbZoH62bYtYe8O4nAc2HEbyMFy41TUGaOukG/QoEGFfiWc
g8l1teeWcsYlszgX29gy92X2XUUlqI/ANTJJHapSyOOz7/Pi+n6l0X4bV4xr
N/eDtIfrVlzN9LTWp43lx10jyJV3c5v8/hXufbB/P+fbaqutgvnat28fOU+a
+4rl1s5i3ZL/nBeOX9sW952l6+WXXy7UJGPi/Mm/NTLunfgtSd8PhOH5z6+7
SXwlajz5ShCDCasPS46izx9jgIljinxhnpO5loddv2gvzzj2M358161RyESu
flgdm6zbGtafwJ14x2E/w323/3f6TbO9/HdHtCVsXCDmJ7ZO3Vxbu5s2RI3F
xHiq/jI41qnxa8ehIhbANSzt7+YZzV8G66CS3EOeJcKea8LGlOLey39e4voe
dk4Le55hm/Men/wA2uvn1LrnSjuxj/E+hnNSWLyuFsdMOe1y6/5w7nTzAHjn
4n4+bB1Xsl9Vuu7CatTTr5rnZ9ph332Uum+uVtiYZlHvfQYMGNBkXvZfnqWY
wsZnrLd9xMrzHFINv3+UP3GPZfd78mP9v9M+rithcRB3XCw7sf54n0Rsgn4r
3IeD+I2fq0c/K2qdECvhf9NY50jruol6OOdmuQ3rZT3X4rhPgx8LCcuVIB+E
v/EOP4qtocUzU5o19fx4Fu8NXNx3UE8r7DewD6Wd18vxw7uisBw7nnGINZC/
mFWftTB+fi45pGFxm7Bx49zrH/m0Yf2IqbvD87u7jkuNh+fng5d638m1w87L
+ouKBfp1IuNye8ihCTt38O9sK9YRuU2c9/faa6/g734NvzTxm+y5t5L+dXzG
Xn95BrHPf/QVCesrSsyKvj3k3dmcQeblfUsl/LE+kowxG4b4P+c1+rdU+gzL
+ZD+stx3uONdci7Isv3sN8RJOVaixkm37/1KxZXTWp82Tzyqthr5vVxT7fcw
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
OuWUU/Juioh4OC7pz0G+mYiISC116dKlSZ49+dZ2XB/iXRprREREpHr0b6PG
DLlZ9DNyr73bbLNNMGb9Qw89ZKZPn553U+vOBx98YNZee+2K+wGKSPoYD3Ld
ddcNxm8QERGptXHjxgU51u49Nf0PN9xww+DdMXUyRUREpHqvvPJKkAe92Wab
ma222iro57/DDjsENXy6d+9uNt98c9O5c+egD4409csvv8wRtYZE5hQcjxyX
IiIieZk9e7Z57bXXzNixY83kyZPNN998k3eTRERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERESk
DL///ruZNWtW3s0QERERERERERGJNHv2bPPCCy+YQYMGmZVXXtmMGDEi7yaJ
iIiIiIiIiIg08dBDD5nevXubJZZYwswzzzyF6bHHHsu7aSIiIiIiIiIiIk0M
GDDALLnkkkWxLKZnnnkm76aJiIiIiIiIiIiEolbWTjvtVBTPGjduXN7NEhER
ERERERERiXT//fcXxbNeeumlvJskIiIiIiIiIiISafz48UXxrFdeeSXvJomI
iIiIiIiIiEQifuXGsyZPnpx3k0RERERERERERCK99tprRfEs/ltERERERERE
RKReKZ4lIiIiIiIiIiKNRPEsERERERERERFpJIpniYiIiIiIiIhII2nUeNas
WbPyboKIiIiIiIiIiOQgLp7122+/maeeespceuml5sQTTzSDBw82zzzzTMXf
NX78eHPSSSeZ3r17mz59+piBAweaYcOGmZ9++inR53///XczatQo07NnT3P+
+ecX/W3ChAlBO8866ywzceLEzNsiIiIiIiIiIjI3GjNmjFl99dXNOuusYzbc
cEPTtWvXYOrUqZNZb731zJprrml22223wvybbbaZWWuttYJ5N9lkE9OlSxez
wQYbmLXXXjuYfv7558K8+++/v+nQoYNZf/31TefOnYPlduzY0ayxxhrmX//6
V2G+sHgWcawrrrjCLLPMMkV/sxNtmDRpUuLfOWXKFLPFFluYZs2amV69egWx
qMsuu8xst912wfJat25trr322tDPfvnll+bOO+80Bx98sFlllVUKbbj88suD
v3/wwQfBMt32zTvvvObRRx9NvS0iIiIiIiIiInO7mTNnmieeeMKcffbZZv75
5y+KyRBzGTFihJk6dWph/rffftvce++9ZoEFFijMt/TSS5vrr7/evPjii0XL
fuedd8wll1xiVlxxxWC+1VZbzdx6663m+eefN7Nnzy7M58eziO0Qr5pvvvmC
2BftaN++fZOYFrGur776quRvHD16tGnVqpVZdNFFzciRI5v8/YYbbigs85RT
Tmny97322is0pnbzzTcHsak2bdqE/n3vvfdOvS0iIiIiIiIiIvI/F154YVE8
5rrrroucd8899yyKZ7nxKR95TS1atCiKi7n8eBY5XI899pj58ccfi+Z74403
gpwwd95SMZ+33noriB0x71VXXRU5HzEzu8yw/ozErbbffvui76b/IzG1Aw88
0AwfPtzsuOOORX8/7bTTMmmLiIiIiIiIiIj8F/3qWrZsWYilbLXVVpHzPv74
40WxmxdeeCFyXvoc0vcwih/Pcvsi+r755pugP57b7zAOfRyZjxyxX3/9NXK+
E044obBM6lmF+eyzz4raudBCC5n77ruv8Hdqaw0ZMsR069bNHHbYYeaHH37I
rC0iIiIiIiIiIvJfu+++eyGWQn+/Dz/8MHQ+cqeaN29emPfUU08Nne+9994L
/v7yyy9Hfme54xu6bST+FoUcLzvffvvtF7tM6rjbeckli+rHuOCCCxbmO+ec
c2KXmXVbRERERERERESkad4VfRCjtGvXrqiPYBjG+tt4441jv7PceBa10t35
v/3229D5dt1118I8e+yxh7nllltCJ36j+1vi+vktssgiRfWzksqiLSIiIiIi
IiIi8t8+c+4YfoxxGGbs2LFN6p9/9NFHTZZFbIYa53HKjWdRj96dn36SPup5
LbHEEoV52rZta1ZdddXE01NPPRX63W48i/hTElm1RURERERERERE/uvMM88s
ihdNmjSpyTw77bST2XLLLc3iiy8eWT/+ySefDOqf+3WkfOXGsxgXsFQ8y/Zz
tBN1t9JQSTwrq7aIiIiIiIiIiMh/TZ8+PaidZeMvxx9/fNHfp02bFvydvKF9
9923MN92221XNF+fPn3MgAEDSn4f8bJy4llPP/10yXjWiy++WFQHLG78xXJU
Es/Kqi0iIiIiIiIiIvI/PXr0KMRglltuOfPbb78V/ta/f3/TpUuX4P9+6KGH
imqzz5gxI/j3L774IqhlPnHixJLf9dJLL5UVz6KeVKl41ujRowt/b9asmfnl
l1/K+fmRKolnZdUWERERERERERH5n+HDhxfFjB555JHg3xnvkDgVcSz8/PPP
QZ9CO99dd90V/Dt1zTt16pTou8aMGZN6PMvP+UoSV0uiknhWVm0RERERERER
EZH/IYdoqaWWKsRgdt999+DfjzjiCLPOOusEtd6tvn37NplvtdVWC8YhTOKJ
J55IPZ5Fjap55523MM/f/va3pD89ViXxrKzaIiIiIiIiIiIixY455phCDGaB
BRYwU6ZMCf73zjvvLJpvxIgRhfnI1Xr00UdNq1atStaBt9w+i2nFs7DWWmsV
5mF8wa+++irZD/+PmTNnhv57JfGsrNoiIiIiIiIiIiLF/HEH27VrZ9q3b19U
Sws//vijWWihhQrztWnTxhx55JGJv+eee+7JJJ51+umnF83Xr1+/RO25/PLL
zc477xz6t0rjWVm0RUREREREREREmqLuuxuHufLKK0Pn23XXXYvmI5crqdtu
u63os6+++mrs/EnjWZ988klRnI3puOOOM7NmzYpcNrlnjEE4cuTI0L8vvPDC
hWXdfPPNiX9jFm0REREREREREZGmbrjhhkL8ZckllwxyscIQe7Hz/d///V/F
38E0bty42PlHjRpVNP+nn36aeNlM1P/i3997770gnvT9998HYxDutddewd/3
2Wef0GXNnj07iC/Z5QwdOrSq31lNW0REREREREREJBzxFdvH7tRTT42cb8aM
GaZly5bBfPfdd1/i5X/00UemW7duRTGeQw89NLT2Fv0c3333XXPUUUc1yXNi
OX4/SIv662499rhps802C36zj/r4119/fdG8G2+8sXnnnXeKauOXkkZbRERE
REREREQk3kEHHRT0lYvLg0KvXr3MSiutFBlXcpHP1bp169h4DnG0yZMnB/N/
+OGHTfrr+VPz5s2D+cKMGTPGbLnllpGfZdknn3yy+fnnn4s+N2HCBLP44ovH
fu/8889vlllmmcjctbTaIiIiIiIiIiIiyUyfPj1RztXEiRPNY489lmiZ9K37
+uuvzXfffRfEgch/oj8fE3Ec8pK++eabos8wP3lgjPfH58mL+vXXX4PPf/vt
t8HfSiHedeutt5pzzz3XHHvssebss882w4YNC9oRxf1evo/vJWZHO8kj47vj
Pp9mW0RERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RGpp9uzZZvTo0eakk04yffr0MVtssYXZZZddzNlnn20mTZqUd/NEyvbRRx+Z
K664whxyyCFm2223NT179jTnnXee+emnn/JumoiIiIiIyBzngw8+MB9//HHe
zcjML7/8Yn7++eeafd9vv/1mXnvtNfPdd9/V7DsbCevnuuuuM8svv7yZZ555
Qqf555/fPPLII7m2UdtQknr33XdN7969zXzzzRe6P59wwgl5N1FERERERGSO
MWvWLHPqqacGz2A777xz3s1Jzbhx48xhhx1mNt98c9OmTRvTokWL4Jly8cUX
N127djXnnnuuefvttzP5bvIwunTpEnxfq1atzJgxYzL5nkZF/kqnTp1Mt27d
zMMPP2ymTJkS5GM1a9asSQxgn332yaWN2oZSjieeeMIstthi5sQTTwz256FD
hwb7jbsv9+/fP+9mioiIiIiIzBHGjh1rOnfuXHje6tu3b95NqgoxiPPPP9/8
8Y9/DOJzvXr1Mvfff7+ZNm1akGvD3ydOnGgGDhxoFlxwQdO8efMg5pV2/s1t
t91W9BzbvXv3VJffyKZOnRrEF7fffvsglup6+umnTdu2bYvW3R133JFLO7UN
JalXXnklOJ9suummRf9O3Ha//fYLYujrr79+cB4SERERERGR8lGr6NVXXzVD
hgwx6623XpNcGOq9NKpHH33UtG/fPvgdu+++u3nrrbdi53/nnXfMGmusEcy/
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
PxKtZ9CHjH5Kdl76HcZJug0tnqvd+ZOOu2n3vRVXXDG25vwJJ5xQWDb5JZVI
Y39Ls72VrrOkaN+6666b6DdbxFHcGBX7QZRy9uuk0thG5a7XtM8ReR4LtTin
ioiIiIhIfhotnkWdG7edDz30UGrLpv9J8+bNC8veYIMNUlmu23cuar3edNNN
hXmo7RKH5+y43JIo7jN3XD6CzUthomZymlheOc/9G2+8cWF+tn0U8j7c31Zq
/ey+++6FeelrVEqSbWhV8gxPjoqdn7pEcdw+seQOVVLLutr9Le32Zh3Pcvc7
ppdffrnkZ8gvmn/++QufOfLIIxMtP614VhrnhHLXa9rniDyPhVqcU0VERERE
JD+NFs/adttti9oZlzNRrgceeKBo2YynlYZFFlmksExq0oSh7ridh1yBO+64
I5XvdpFHYb+D+MzXX38dOp+tN1MP8Sy3Xg/1uqPwLFpOPIsa0u783377bez8
SbahVckz/K677lqYn9rVt9xyS+jE+ATt2rUrWn4lfQ6r3d/Sbm/W8Szqstll
r7baaok/9+c//7ko7vn999+HzpdFPCuNc0K56zXtc0Sex0ItzqkiIiIiIpKf
Rotn0TfMtrFNmzapLtvN2WH8rjRqR8GNhfAcFubtt99usg2oFxU3/l65qHdM
HId6UdSuiVKv8azDDz88cr5y41n+OJbk4sRJsg2tcp/h2S7uWGvEXlZdddXE
E/WZylXN/pZFe7OMZ02ePLlo2XvvvXfiz5555plFn73//vtD58sinpXGOaGS
fTHNc0Sex0ItzqkiIiIiIpKfRotnLbbYYoU2dunSJbXlUo94oYUWKiybmsdp
SRoLYdz6sG1BvWLiL7Uaf2tuiGcxXlq9xLPee++9ovmp71ULle5vWbQ3y3gW
28td9sCBAxN/llpp7mdPO+200PmyiGeh2nNCVus1q3hW2vtWvZxTRUREREQk
fY0Wz1p88cULbdxhhx1SW+55551XWC59U1544YXUlp00FvLTTz+ZAw44IHR7
MNFPqlRft2qMGjXK7LTTTkFu2pwez6L2c73Es8iDsfOy7mv1jF3p/pZFe7OM
Z/nnuIsuuijxZ8nHcj/br1+/0PmyimdVe05Ie72We47I+1jI+5wqIiIiIiLZ
abR4Fs8fto277bZbKsucOXNmMH6ZXW7//v1TWa5VTiwEPANSt4e4Wti2SbN9
5KUNHTrUrLHGGma99dYzQ4YMKap9PqfGs/zn7DzjWaNHjy7M26xZM/PLL7/E
zp+2cve3LNqbZTzrr3/9a9GyqSGelD9uJrGRMFnFs6xKzwlprNdqzhH1cizU
8pwqIiIiIiK14eYlNUI8q0ePHoU2EutIw1lnnVVY5vLLL1+yNni5qCNdTjzL
+ve//x08PzNul799qh1bftasWebiiy82rVq1Mh06dCgaJ7Ke+ht27tw5UTyL
8eqyjGeVsw39ZX/yySex81PPx51/4sSJsfNnJen+lkV7y11n5bjxxhuLlh3V
ZzAMuTvuZ08++eTQ+bKOZ1nlnhOqWa9pnCPq7VjI8pwqIiIiIiK1de6556YW
z/rtt9/MlClTMq3/w5hWto2MbRXn999/Lxmbola0fbYhZjFmzJg0mxusE3e9
lhPPsngG3HfffYuWc9RRR1Xcpueee86svfbawXKOP/74oI2ueopnrbPOOoni
WfymrOJZ5W5Df9nTp0+PnZ/jxc0b+dvf/hY7f9ZK7W9ZtLfcdVaOCRMmFC37
kEMOSfxZfpv72dtuuy10vlrFs6yk54RK12ta54h6PRbSPqeKiIiIiEjtnXHG
GaHxLMa4Kgf9ctw+e4wh9uOPP6be3jfeeKPwvMP/vvPOO03m4Zlov/32Myut
tFIw5hVjIr766qtN5qOf4YYbbljyWbUa9NWpNp5l9e7du7AcxrSvBPVpbF8h
+t+Eqad4Vvv27RPFs5544onM4lnlbkN/2eyzpbjjdjK+21dffVXyMxb7cRbi
9re021vJOkuKuLa7T2+wwQaJP7vLLrsUPsf55rPPPgudr9bxLKvUOaGS9Zrm
OaLej4U0zqkiIiIiIpIP+s+ExbPKiWO89dZbRfVUsn7f/Ze//KXwHeSXub7/
/vsgr4D225wCYhvrr79+0XMRfWl69uxZeE697LLLMmnrxx9/nCgWQh+osJib
68EHHyyKF5aL5/oVV1yxsAxqp4Wpp3gW/T+TxLPcdZN2PCvpNrSeffbZovmf
f/75+B/5H6effnrRZ6Lqjvsuv/zyisbirHZ/S7u9layzcgwePLgoLvXRRx+V
/Ay1mxZddNFE8Y4s4llpnBPKXa9pnyPyPBbSWH/kG/PO58orrzTvv/9+onaI
iIiIiEhtuPkH7nT22WcnXgbjhYUtg3ytLEydOrVQn5scLDdOdcwxx5gLLrig
yWcGDRoUPJPg559/Nn379g0+T1/Du+66K5N24s033yxaJ9TyCcNYjeSNxI3n
5T57UfesXKw3ty3XX399k3n4fncMybTjWdSVtstedtllS86/2GKLFeaP6yd2
5513Fv22Us+x5cSzkm5Di+92508ynh79nxZaaKGizx133HFB3DUKv5kx4EaO
HFly+b5q97e021vJOisHce62bdsWls9+WAr1ouz89EWOi5GWu18nkcY5odz1
mvY5Is9jodr1R02+BRZYoPD3pZZaKvg3ERERERHJH7Wl3D6C7rTRRhslHlvK
zX1wJ2IRvO/PwogRIwr9Dsmzst/DGFxh9buIWfXq1cu8/vrrwRhdfI55x48f
n0n7LP95jrHBwtg6ZtRfjmLrvZAz8vnnn5fdFv9Z9dBDDy36O/ls1MoJay91
b9LoP+qOp0lMstT+0bx588L8++yzT+R8fs3vcePGxS531KhRRfPHjbuWdBta
rMcll1yyMD99WsOexf3vpGadfwxRP4x/f++994JlEJdhDLi99tqr5DqJk8b+
lmZ7K11n5XjllVcKcfCll1469hhiX1999dUTxzDL3a+TSGMblbte0z5H5Hks
VLv+DjvssCZtYDwSERERERHJx5NPPhmMTU5eltuXK2yi3vqee+4ZPNPEjf3E
GFS8G/c/v8cee2T6W+655x6z8MILB9+10047mQ8//NC0adMmNA73wAMPBON0
0S+SaeDAgeann37KtH08Hx188MFF62TLLbc0X3zxRZN5H3/88eDvxOjCnp0Z
Z43x65mn0r6R5Cm4tWnIObn66quDmB7/u+666wbPqm4NdsYXpJ/fCiusULIP
Xyn02+vatWvR+uB7eS718W/8TndecvHo2+rHCt59912z+eabN3kO/+GHH5os
l+dr5qcvrJ//QR80v+51OdvQdeSRRxZ9hud4+lFRo41+UBtvvLHZZJNNmnyO
+tduPey4ifE9w9ZdEmntb2m2t9J1Vg7yazhHsPw111wzGO/OR1xm0003DeYh
P6dU/9Jy9utypLWNylmvWZwj8joWql1/5Pr638OyyO8VEREREZHaC6v/zj06
/e7o48HzS1hs6sADD4xdLs8Dbi4NzzhRtZPTRH0TaqbYd+zUDz722GOD51bi
bMS8aLvtH8PfonI8iG+NHTu26jbR96V169axz1/E1Nw+ceTKuc9u5MfxHDhg
wIBCzXpq1vz973+vqm3Ueg6LY/J8yt/g50YQvyGOVKl//vOfhTEkoybaRJyK
/Dn69YTtg3ZiP2M9nHjiiYV4ZtRErgxjWIJ4p9+PKWzZzFfJNnQRS6OWdtjn
iJGwT0aNA8oYm6zzqO/lN1D3rprn6jT3t7TaW806Kwf1/YmnsH3Zz7p37x78
9qOPPtpst912Zv755w/2A/J+pk2bFrmcJPs1++cpp5xSUTvT2kblrte0zxF5
HQvVrj+uLW6/SjsRDxcRERERkdojZvD111+bGTNmBPEbPx/F4j09zwi882b+
uNol1gcffGDuv//+oK9X1HKzwrMH7/N5HqU/ITkYHTp0CJ5Ved7Zf//9g2eR
uLpKl156acm4XRKsK9YZz830v2E9sj5Y9+SOsU7Dnt+Ipd19993mmmuuMX/9
61+DPIgTTjjBXHjhheapp54yv/76a9VtA7lF9L9kvZx66qnm4YcfLlo27bzp
ppuCv/G91fL3OdaPXRc86/Lc6eZWUA+Nf+NvrDs7P23k31h37J8syy6Xcc1Y
Hv/u7rv+enbnd5fLduI7+Rsq3YY+til1ecj/onbQvffem3i8NuJqt956a9Bv
ijgsNe2GDRsWtCkNae9vabW3mnVWDrYxddQ47k866aQgZ5NzCGO1Jsmtitqv
WW/sX/w7f6/muE1zG5WzXrM4R+RxLFS7/tiGvBchP9nGszhPiIiIiIiI1Iqt
WU8fkzA8t1BTh3iciIiIRc0urh/k/4qIiIiIiNSS7We5zTbbNPkbuRjdunUL
xj+rdV6ZiIjUN3LDuH7svffeeTdFRERERETmMvQxsf1F6LNCbS9qfd9+++2F
cczodyQiIuLaddddg2vE888/n3dTRERERERkLnPmmWfG1m1eZZVVqh6PTERE
5izUU+MawVi/IiIiIiIitWafSaLGtKPer4iIiMV4q8suu6zp2LFjMBaFiIiI
iIhIrfEswtjsfiyrRYsW5p577sm7eSIiUkfGjx9vWrVqZXr06BGMUykiIiIi
IpKXSZMmmT/96U9mkUUWMSuvvLLp06ePmTZtWt7NEhGROjN8+PCgvuLvv/+e
d1NERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
REREREREREREREREREREREREREREREREREREREREREREGs4vv/ySdxPM77//
bmbNmpV3M2LVw3oSERERERERkcrMnj3bjB492px00kmmT58+ZosttjC77LKL
Ofvss82kSZPybp4kMGXKFHPxxRebDTbYwJx88sm5tIH96IUXXjCDBg0yK6+8
shkxYkQu7Yjz008/mccff9wccsghZvHFFzfTp0/Pu0kiIiIiIiIiRX777Tfz
2muvme+++y7vptQl1s91111nll9+eTPPPPOETvPPP7955JFHcm2jtmG4iRMn
mn79+gWxI3ebDR48uKbteOihh0zv3r3NEkssUdSOxx57rKbtiHPVVVeZbbfd
1iy44IJFbfzqq6/ybpqIiIiIiEjDIZ/hwQcfNPvvv79Zf/31zTLLLGNWX311
s9NOOwW5Mi+99FLeTQw1c+ZMM23aNPPGG29kMv34449Vt5E8jC5dugTPrK1a
tTJjxoxJ4ZfPOT766CPTqVMn061bN/Pwww8H+T3kYzVr1qxJTGufffbJpY3a
hvEuuOCCJrEsposuuqim7RgwYIBZcsklm7TjmWeeqWk7onz//fdm8803Nwsv
vHCTNv7www95N09ERERERKShjB07NugbFJUXY6devXqZTz/9NO/mFjnwwANL
trua6d577626jbfddlvRMrt3757CL58zTJ061bRp08Zsv/32TWocPf3006Zt
27ZF6+6OO+7IpZ3ahsmcc845RetpyJAhNW8D+xFxeLcd48aNq3k74pCL1aFD
h6I2/vrrr3k3S0REREREpCFQg5h8rHLiO6uuuqr55JNP8m56wfjx44N+aH7M
48MPP4ydqFXz8ssvm1GjRpm77rrLDB061Oy5556mdevWqeeX3H333UXL7Nmz
Zwq/vPHNmDEjeKan39XHH38cOs/PP/9snnvuOXP99dcH9ZDyom2YDOcGdz1d
ffXVubTj/vvvL2pHPeaXUtvLbSN160VERERERCQe/eh69OhReJai/8tGG20U
xBfmm2++2JhWvT3Ln3766UXtI6eHWEklqI109NFHF5Z1+OGHV90+8kXIP2J5
1Id65ZVXql7mnOCAAw4I1gl13+udtmFy8847b+H4ueGGG3JpA3Fu95xQj9vr
yiuvLLSPmLyIiIiIiIiUtvPOOwfPUdRyobaMmxtAHZfzzjvPNG/ePDKmlWeu
jI9+OhtuuGFR+8g7q8Ypp5wSLIcYRlq++OKLoKa4GPP6668X4qa333573s1J
TNuwtAUWWKBwHN588825tIH4lXs+mDx5ci7tiEOsz7avZcuWeTdHRERERESk
7hG72nrrrc2ZZ54Z28eFMcGi4lnUiK8nxEfc52gm+hxVihjZH/7wB7P22mun
2Eqx3H6u9RhrkMotssgihW17yy235NIGxqF0zwX8d71h3dj2ce4SERERERGR
9Oy2226h8Sz+vd5ccsklRW1ceumlzWeffVbV8uiHKekiVrj44osXthM1smTO
oXhWMopniYiIiIiIZOeRRx4JjWdtu+22eTetCXLNttxyy6J27rDDDhUv7623
3gqW8eWXX6bYShkzZkxh+9CndU720UcfmU033dS8+eabeTelZhTPSqaR4llz
434sIiIiIiKN7Z133gmNZ+233355Ny3Uu+++axZddNGitlZTk3qZZZYxEyZM
SLGFwliFdtssscQSeTcnM4wtsP7669dtPfKsKJ6VTKPEs+bW/VhERERERBob
uUlh8SxiEvXqxhtvLGor8S3icpXo3r27uffee1NtH/3t5mYDBw4sbJvllluu
rM+Ws+6yrNteqh0//fRTUa7gG2+8kVlb6o3iWck0Qjxrbt6PRURERESksY0e
PbpJLItnr2rqUtUC/QzdNm+22WZm9uzZZS/n66+/DsZ7rBZ9IUeNGmV69uxp
Tj755ESfmTZtmrn77rvNGWecEUxXXHGFGT58uHn66afNV199VXWbfC+++KI5
5phjgtpop556amZ9i3r06FF2POull14ye++9t9luu+1i56MW15133mk6duxo
nnvuuaK/EdMkV4/1P3jw4GBcz3Ik3YbffPON2WqrrYr2v+nTp5f1Xdb48eOD
sRd69+5t+vTpE8QChw0bFsQZslLtfpA0nsX6/Ne//mVOO+0007ZtWzNjxozC
31iHDz74oBk6dGgQn2ZbzZo1K3Eb4uJZxDmfeuopc+mll5oTTzyxon3BqmZd
hcWz2H+vueaaYHsz9my3bt3Mnnvuaa6++uqKz7mV7kNp7sciIiIiIiK1duWV
VzaJZx133HF5N6ukTz/91Cy11FJF7b7gggtq2gZy24itHHzwwWaVVVYptIPn
5zjvv/++2WOPPQpxuCOOOMLsuOOOQd88u4yuXbum1k7W1QEHHGDmnXfeovU1
33zzBf1K04idELsgvtS/f/+i71lwwQXNQQcdFDodeOCBwe9u3759Yf6dd965
ybLfe+89c91115m+ffsWraMXXngh+PuUKVOCOJj/+5jWWmstM2nSpMh2l7sN
iZl16NChyfewPcN+4+WXXx66HNq8xRZbmGbNmplevXqZ888/31x22WXB72B5
rVu3Ntdee20FWyJaWvtBqXgWMdm99tor6Mvrfs+PP/4YxGn79evXZKxSpmWX
XdZcdNFFieLSYfEs4ljEhP3vTbovpL2u/HjW888/b9ZYY40gjkWM7JxzzgnW
02KLLVaY59hjj028HarZh9Laj0VERERERPLSuXPnoueZNm3aBDlLjWDEiBFF
bW/RooV59dVXa/b9PIuGPTfzTB7lk08+CXKWmI8cChfP++RY8LeWLVtWlG/m
u/nmm81KK60UtInci8cffzyIobnt3Weffar+Hlt/x5941iY3x5+IHRHr8ucn
v8RHDCBs2ePGjTODBg0K4gBrrrlm8GzvxsbsRHwjKt+t3G24zjrrhM4fNdGX
y0dOZKtWrYJ+siNHjmzyd3LM7OdPOeWU8jZEhDT3g7h41vfffx/ESYj7+HGg
u+66y7Rr186ccMIJQR4cOXm0y1+njEVRakxMP55FHId4Fd/D/lLJvpD2unLj
WcTFFlpoIfPwww83me+LL74w22+/fWHe9dZbr+QYFdXuQ2nsxyIiIiIiInl5
9NFHmzxzVtovJy/0UXN/w7rrrmt++eWXmn0/ORLusyjTkCFDIue3/XvokxfG
HcORPK5KEQ8g54hnXvojuchjIQ/Kfdam72M16EvGM/jnn38e9J+yy47rbzhz
5kxz6KGHlowT0A+N2NXaa69dNC+5WvxGv48UNYA22WSTonnj4kLlbENqZ/M7
b7311qL5iaOS80KchT5qHEePPfZYML+LMTXteAZXXXVVZJuIx9hlV3NMZrEf
JOlvyL77hz/8oWgdrbzyyqF17ojbuvsME/8dx49n0f+U9U1M2FXOvpD2unLj
WUznnXde5LzkZBHHsvMSP4uqD5fGPlTtfiwiIiIiIpKnLl26FD3L0Pew0Xz7
7bdBLoX7O84+++yatoG6N+73UwsnzMSJEwvzHH/88ZHL41mS52XqaFWC2FKn
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
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEELk4/fffw/+97//1bsZQgghhBBCCCGEEN645JJLgquuuqrezYiE
dl166aX1bkaz47fffgteeumlYMiQIUG7du2CMWPG1LtJQogqfPrpp8G1114b
HHnkkcH2228f9OzZM7jggguCn376qd5NE0IIIYRIzNdff23WIuPHjw8++OCD
4Ndff613k7wze/bs4Oeff653M4SYa0Hz6Nu3b7DRRhsFP/zwQyHHyHuds47r
3LmzWd/R3qLhXvuPf/wj+Oabbwo/VhE88sgjQe/evYMll1wy+MMf/lDannrq
qXo3TTQwtZj3zf3aKpKZM2ea63aeeeYpu27tNnjw4Ho3sdmieSeEEKJR+eWX
X4KRI0cGRx11VLDlllsGyyyzTNC2bdugS5cuwcknnxx89tln9W5iaj788MNg
1113bfIu06JFi2CttdYKBgwYEPzzn/+sdzMzMXHixKB///5Bt27dghVWWCGY
f/75zbktscQSZszOPffcYMaMGfVuZs358ccfg2nTpgXvvvtuIVtROoXwC+/a
7733XuQY/utf/ypEy+nXr5+x3Zk1a5a3Oou4zj///PNg5ZVXDo455hhv7YwC
7WzTTTc17W3ZsmUwYcKEQo9XBIxp69atmzxDnn322Xo3TTQotZj3c8K1VRRj
x44NWrVqFZx00knBO++8E1xzzTWmj9zrl+8OIj2ad0IIIRqRb7/9NjjzzDOD
P/3pT5Hfsey2yCKLmLUTsUOaA+hzHTt2DG677bbgv//9r1nb4muz1FJLlZ3X
oEGD6t3UxPAuceGFFwarrbaa+e648847Bw888IDRb/hmxu+vvPKKOaeFFlrI
6Hasheem72iHHnpoxXmcd7vvvvvqfYoiBPoRaxZ8SdZZZ50ma5eobb755jN6
fdeuXYPLLrss+Pjjj3O1YdiwYaZOrr+81OI6f+2118x+N998c+72xjFixIiy
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
Kg/HH398aU4RQ16UIz1LCNGISM8SQgghhBCNxksvvWRsbvAlIycdSM+qL//5
z3+Cq666Kthuu+3M2ETFMwtvxOr1DdommpM9xhFHHJG7ztGjR5fqIwbXzz//
7KGljcunn34abL755sH777+fqLz0rGjS9mOj0cjtb4S2NUIbRGWkZwkhhBBC
iEaCNQQxtFdccUUTr9siPas+EG/9nHPOCVq1amX6fLHFFjOxzocMGWL0Lezo
br/99ibb8OHDg4kTJ3pvz1lnnVUaf9ryr3/9K3ed6KfuvHruuec8tLQx+eab
b4INNtggVVx36VlNydKPjUQjt78R2tYIbRDVkZ4lhBBCCCEahdmzZwedO3c2
dj3hmNPSs2rPjBkzSmu6jh07Gr8+YvTXsz3zzz9/afzPO+88L/W+9957ZfMK
Lc4n+Gc2Atg6brnllqXzfPfddxPtJz2rnKz9WBRpr8lGa79LI7StEdrQnKhn
zgvpWUIIIYQQolE4+eSTzXvpdddd1+S35q5n8b3/jTfeMDnv4n5vJN58802T
MxDfwssuu8z4+dWb3r17l8YeGz5sx3wQts+69NJLc9dJfxFHrGfPnsEpp5yS
aJ9p06YFo0aNMnm62K699trg3nvvDZ555pngq6++ytUe/EW32WabsvP88MMP
E+1bSc9iLUustCuuuCI46aSTjMb47LPPZmrj5MmTzT2Acd5rr72CQYMGBXff
fXfJ59g3Wfo7Tz+6EHtu4MCBwR577BEMHTo0tU+bO78uvPDCst9efvllMx7Y
Mr7yyiuFtD8JafvXZ9uy9q/PNtR6Pqch7/zDJ/uee+4x3znCOTTI1XHLLbeY
+16e+4GF5ybzmTiH9CHzHRtacnlIzxJCCCGEEI0Avmnzzjuv+S4epZ00Rz0L
e7ObbropWHfddYPFF1882HrrrYNVVlnFrG2+++47U+aHH34I9t57b/Oe3ijg
87nCCisECy+8cMP43k2aNKls7H3213333VdW9yWXXJKpnn//+99mjUdML/xl
k9qRffTRR8E+++xjynbt2jU45phjgl122SVYcsklS3V06dIlU5uA9aWNn+9u
HPOwww5rsuFH6hKlZ6FjoU8ss8wykbHT1l57baOJJuGdd94JtthiC3P9ExuN
9eqVV14Z7LDDDqYurp0bb7wx8/mHydrfefsR8I895JBDTB4Dt4555pknOOig
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
2NekWb8S57vS+hU7EfsbNnE+Nbtq+Ohvn5rLuHHjTBxA+mFO0LPy9q/vtmXp
37RtqOd8zkuW/kmrZ1W7HwD2zG6ZUaNGJWq/9CwhhBBCCFEP+B47YMAAo50k
2dZff/0mayP8Otwy1IcfY63h/dz9tjx27NiK5V0dZcyYMWW/bb755ubv11xz
Tez+xDC3x6uUay4tVkt77LHHvNXpA9bAtr/22GMPL3XiC7nMMsuU6u3bt6+X
ei1p9QbW0PiguvPI3Xy0L6tWMGXKlFTr1/BxwuvX559/vvQbvrOzZ8/OfE5Z
ydPfeTUX7n1c38T/475GLkI3vntz1rPcY2TpXx9ty9u/advQCPM5DXn7J62e
Ve1+AG4fsg0bNizRuUjPEkIIIYQQzYFGzm/ofp9nqxavfLvttjPlWOt9+eWX
pb/ja7jgggua3x5//PGKdRBHinLV4s6nwdp9YVvVSPTo0aPUt127dvVSp7VF
Y1t22WUr5qLMAnm8sugN+Mti30Les/B8x84hD+F15axZsxLtN2HCBK/r17C9
F/OuXmTp76z9iJ/xZZddZnK4rbXWWmV5Ouvpb5i0/VlI27952uarf9O2oZHm
cyV89c9rr73mXc+aPHlyWRm++SRBepYQQgghhGgO5NGzfv311+Cdd94pLK7J
Qw89VGpTtZhRaFaLLLKIKcu7uIuri1WLoYyvIeWIV+MTcm9h99ZIPjM2Tj0b
7avE77//XlWbeuutt0rra3Qn9BqfMN/ceZpWbwDW0AceeGBZPeQAzUN4XZk0
dwL2hj7Xr1yHrt0OuT7rTZr+ztKP5CS1a2/uZcwRl3rqWbXIoZG0f7O2zWf/
pm1DI87nMD77h7p861nhGGTEiEyC9CwhhBBCCNEcyKpnkavP9Svbf//9jb+e
T5577rlS/dXsh1544YVS2f79+5f9Zv392KrlR+zSpYspt8suu+Ruv4vNmU6e
90aBvrDrRf4ld2IY1pQHHXRQ0LZtW5MzjJyIb7zxRpNy+BlaLZBtxIgR3tuL
P09ePcvSu3fvUj29evXK1a7wurLaHLNgx+F7/ermrEQD/uqrrxKfh6+8mVEk
6e+0/YhObf258MGLop56VtJ54INq/Zulbb77N0sbGnU+g+/+8a1vR7Whffv2
ic5NepYQQgghhGgOZNGzpk+fXhYXpJrdRVaIr2LrxremErxz27KjR48u+w1f
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
RMXttfDeji0G5cidXkuIqcK3fNYW5PDaa6+9Ijd8Olm/1RObDyAuXjbrKWwA
0DqFEKKRIOaWtUsSQgghhBBCiHrx+uuvl761438Th7UpwqYhDps/D/+Pevn8
NQfIeU8/bbfddk1+w56AuFDEYNF3fSFEo4FtF/ev/fffv95NEUIIIYQQQszF
4Ndm9SxiE8VBnC1iJuM7F6ez2Ljy+I6IeNyYa/j8EDeNeO133nlnsMYaa5i/
My5CCNFo9OrVy9yjJk2aVO+mCCGEEEIIIeZidtlll5K28tlnn1UsS757yhHz
NgxxVcg3SDz4qJxS4v9x5plnVozxteKKK+bKlyeEEEXw8MMPm3vUvvvuW++m
CCGEEEIIIeZiiKWLBmU1lCSQ36l169YmxxZxfJ988kljj0U9xKdyY+KKaOya
MC63FvGWhRCikZg6darJ49exY0d9sxBCCCGEEELUHGL5jhkzJrjyyitN/j2r
o6BHXXfddcFDDz0UTJs2rWId5ICiDvKEnXzyycGtt95q1joiGawF//SnPzXR
ssj3njQ3phBC1IrJkycHLVu2DHr06GHyAwohhBBCCCFErdl1112NDdBiiy1m
cui1bds2WG655YzNFXHcyU/Yp0+fejdzjufNN98Mtt5662DRRRc1uSOxbaum
IwohRD249957TXw/8uEKIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBDCD7///nvwv//9r97NEEIIIYQQQgghhBAilt9++y146aWXgiFD
hgTt2rULxowZU+8miQbm008/Da699trgyCOPDLbffvugZ8+ewQUXXBD89NNP
9W6aEEIIIYQQQjQMrJFYZ0+bNq3eTRENzOzZs4Off/65Zsf79ddfg3/84x/B
N998U7Nj+uaRRx4JevfuHSy55JLBH/7wh9L21FNP1btpogGZOXOmmS/zzDNP
2Xyx2+DBg+vdRCGEEEIIIYQolGeeeSY499xzg8svvzy48cYbgxEjRhibkMce
e8z8e/vttwdXX321KdOpUyezVnr55Zfr3exY0Ny+//57b9sPP/xQ71NqeCZO
nBj0798/6NatW7DCCisE888/v5knSyyxRNClSxczd2bMmFHIsRnvTTfd1Byv
ZcuWwYQJEwo5TtH069cvaN26dRNd4tlnn61300SDMXbs2KBVq1bBSSedFLzz
zjvBNddcY+a+O2/69u1b72YKIYQQQgghRGEQmydsD1JtW3755U1cn0Zk4MCB
qc4l6bbddtvV+9QaDnSkCy+8MFhttdWMjcjOO+8cPPDAA8Z2D3spfn/llVeC
QYMGBQsttFDQokULo3n5tqFCf3XHqnv37l7rryVcj7vuumvZ+aAVCmF5/fXX
zfW0+eabl/0dv8ODDjrIaMgbbLCBbGiFEEIIIYQQczQvvvhiam2HOC2NyqxZ
s4x9zuOPPx5cf/31wXzzzVdq98ILLxzcddddxt7lhRdeaLJh88DvV1xxRbDv
vvsa/cXui41RLfnPf/4TvP322yaOUtLtjTfeMH5+teCJJ54I2rdvb/qmT58+
wfTp0yuW/+c//xmsueaapnyHDh3M//ti1KhRZfOT+EHNGTRB93ymTJlS7yaJ
BoHvCOuvv76ZF/fee2+9myOEEEIIIYQQdeOss85KrWehZTQHfvnll2DBBRcs
tfuII45ItT/2DtaPDc2mSPBrvO2224JevXo18RtKs5188smFtvPHH38M9t57
b3MsbERuuummxPt+/vnnQZs2bcy+K620UvD11197aRM2TTvuuKOpd9lllzX2
K82ZyZMnl41pcz8f4Y/777+/NC8+/PDDejdHCCGEEEIIIerGFltskUovWXTR
RWsa5zsP+Gnl1eGwjWHfE088sYAW/t+46cQtW2aZZcxxiDu1zTbbBEcffbSJ
OUVcHHKXJdluvfXW4KOPPiqknfDll1+W9D18mrLoLCNHjiyNB351vtuHn2Nz
h3515+1bb71V7yaJBmH33Xc3cwK7UyGEEEIIIYSYWyHOuY3bjXaCjx4+LOgi
V111lfkbuQzJ/U6ceH7Dr625cP7555c0AdZ/3377beo6sP2Zd955TTx833z8
8cdB586dTftWXXVVE3f/u+++834cH+AfSJws2rrAAgsEzz//fKZ6fvvtt2Dl
lVcujQv+rqIc8jS6ehb/LwS+hossskhJTxZCCCGEEEKIuZUnn3zSrI3WWmut
ejelEIjhbjUB7IqystxyywUPPvigx5YFJifZ0ksvbbSy8847z+hmjQo6IHOE
fvzjH/9obKzycPzxx5fGhRjyohzpWSIKbC/tnPjTn/5U7+YIIYQQQgghRN3A
hy5LXKnmALGzrC1D3rhSxGR69dVXvbXtX//6l7FRIrbX008/7a3eIsAmBM0p
awyyKEaPHl2qjxhczcV/NSvEYSMX3fvvv5+ovPSsYkk7Ho3C+PHjpWfN4TT6
3Kx3++p9fCGEEEII0Th07NjRrI1uueWWejfFO+HYWdiiZQVdjNhMvthpp52M
nVNzyE/m5gtYbLHFjBaXF3xW3bF57rnnPLS0Mfnmm2+CDTbYIFVcd+lZxZFl
PBoFfL6lZ825NPrcrHf76n18IYQQQgjROPBuOM8885R88YYNGxZ88cUX9W6W
N8Kxs8gfWIk777wz8u/EayffoC+wx6JNhx9+uLc6i2LGjBml+Gps+EX64L33
3ivTa4YPH+6lXgu2eY3ATz/9FGy55Zal83z33XcT7Sc9qxiyjkejYO1ppWfN
eTT63Kx3++p9fCGEEEII0Vg888wzTXIXEsupe/fuRl9o5HhOSejRo0fpvLp0
6VKx7Ntvvx20bds29nfitvti2223NfZePuyciqZ3796lPsTn8scff/RSb9g+
69JLL81dJ36R48aNC3r27BmccsopifaZNm1aMGrUqOCMM84wGzkisZnj2vjq
q69ytec///mPyVPpnueHH36YaN9Kehb5G/E7u+KKK4KTTjrJaIzPPvtspjZO
njzZ+OEyznvttVcwaNCg4O677zZrxyLw1d9Z2p1nPPLAvHz55ZeD66+/Pjj9
9NNNfg1ylmKTmPYe697TitSz/v73vwcDBw4M9thjj2Do0KG5fLvwJUbDZ74y
ZtR35ZVXmjmbZp75qgeyznvGEr/z0047LVhppZXK8oswvx566CEztuRToV1J
x7eWczPLNeirfVnnlc/+8XHPK/K5IYQQQgghknHJJZc00bPcbcUVVzTvaUWt
bYuEdcSiiy5aOpdTTz21YnnWmPvss0/h7cJnEc2Q9+hGZ9KkSWXzgfd+X9x3
331ldTMXs/Dvf/87uOeee0xML+ZrUjsy4moz3pTt2rVrcMwxxwS77LJLsOSS
SybWQCtBLkgbP9/dOOZhhx3WZCOXqEuUnoWOxfW4zDLLRF6va6+9dvDmm28m
ah+5CLbYYgszF4mNduGFFxptYIcddjB1Lb744sa3zRe++jtru/OORxbQX9Be
yCXBschj2q9fv6B///7GzgR/Y9rLvYf1ehxoKOQA7du3r9nHjTsX1fY33ngj
c5vR2A855JCy47Bhx3vQQQelehZg60veB7R7xmvDDTc050A9aHHU27p1a2NH
y9wuuh7IOn/QKvbbb78m1x75gdEvsLUlFmJ4frVp08Zo9eR0jaNWczPrNeij
fXnmla/+8XHPK/q5IYQQQgghktOnT5+Kepb7Tj527Nh6NzcVYS2mUsx1NBHW
nDfffHPh7eKbLu3Jmx+wFrB+c/vQZ7wS1vlu3XG+nmnbmMTea9asWaV1MN/l
XVifWpu0BRZYoOI6tBLrrrtuomvLbugbLmE9i3UXehXrvzXXXNOsy9q3b9+k
Htbb1ewDnn/+eeM/Syy0qJhyxNJLqgMnwVd/52l33vFIC2vwddZZp3T/nDBh
QpMyaI+rrbaaKYPtI/H+orDxgpJuWe8tf/3rX42NKtcOti/cM1mzu3UfcMAB
ierifK32Q/unTp1a9jv3XPSDavX6qgeyzp/vvvvO6CnWN9/VYuhr8noMHjzY
2IZOmTLF9GN4vm2//faxOS9qMTfzXIN525d3XvnoHx/3vFo8N4QQQgghRHL+
/Oc/J35H5JvmXXfdVe8mJ+aCCy4otb1FixbmfTMKYnDYmBy1yJdkbeIaPZYt
ay/e/20fdujQwWv9+Jy48yuPXsp39x133LGsvquvvjq2vPVbwXcrCuxh7Jzg
e3wWiE3HWhu/Xbdd2M6gdaBX4XuDT9JTTz1lyruE9SzyNlAuPI+Zv5tttllZ
2Uoa1PTp082ajnL4v8WBXmbry+rLaPHR33nbnXc80jBz5sxg6aWXNvVjs1Mp
9hlr5KWWWsqUJU5dlO6FTxttx05p3333LbUdneeTTz4x85+244OKLxX9mQau
dewbud7Z3wV7p9122610TOxr8LWqBHWwpqf8qquuGmt7duyxx5aNxaOPPlpI
PeBj3jM3V1lllbJjtWvXzsyfMOgZ7lix8f9R1GJu5rkGs7bP17zK2z++7nm1
eG4IIYQQQojk4JNHvI/dd9+9LOZ33Lbwwgs3m7jUbpwZ/A6J12E3zpd3U+wn
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
IFk2
    "], {{0, 433}, {1204, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{681., Automatic},
  ImageSizeRaw->{1204, 433},
  PlotRange->{{0, 1204}, {0, 433}}]], "Input",ExpressionUUID->"f15ddcf8-0c44-\
4247-982c-031de0ed3fe0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NFA", "[", 
     RowBox[{"name_", ",", "transitions_", ",", "start_", ",", "accept_", ",", 
      RowBox[{"stateExpr_:", 
       RowBox[{"{", "}"}]}]}], "]"}], ":=", "\[IndentingNewLine]", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Transitions\>\"", "\[Rule]", "transitions"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<StartState\>\"", "\[Rule]", "start"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "accept"}], " ", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", "stateExpr"}]}], 
     "\[IndentingNewLine]", "|>"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ContainsQ", "[", 
    RowBox[{"list_List", ",", "form_"}], "]"}], ":=", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"list", ",", "form"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ContainsQ", "[", 
     RowBox[{"form1_", ",", "form2_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"form1", "===", "form2"}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"PureNondetStateQ", "[", 
     RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{
        RowBox[{"FATransitions", "[", 
         RowBox[{"transitions", ",", "state"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "\"\<InputSymbol\>\""}], "]"}], "]"}], "]"}], 
      " ", "===", " ", 
      RowBox[{"{", "\[Epsilon]", "}"}]}], ")"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Return", " ", "the", " ", "list", " ", "of", " ", "nodes", " ", 
    "accesible", " ", "via", " ", "empty", " ", "transitions"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFANondetNodes", "[", 
    RowBox[{"transitions_", ",", "state_Association"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"FATransitions", "[", 
      RowBox[{"transitions", ",", 
       RowBox[{"state", "[", "\"\<Node\>\"", "]"}]}], "]"}], ",", 
     RowBox[{"KeyValuePattern", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
        RowBox[{"i_", "/;", 
         RowBox[{"ContainsQ", "[", 
          RowBox[{"i", ",", "\[Epsilon]"}], "]"}]}]}], "}"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFANondetNodes", "[", 
    RowBox[{"transitions_", ",", "state_Integer"}], "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"FATransitions", "[", 
      RowBox[{"transitions", ",", "state"}], "]"}], ",", 
     RowBox[{"KeyValuePattern", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
        RowBox[{"i_", "/;", 
         RowBox[{"ContainsQ", "[", 
          RowBox[{"i", ",", "\[Epsilon]"}], "]"}]}]}], "}"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFANondetNodes", "[", 
    RowBox[{"transitions_", ",", "state_List"}], "]"}], ":=", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"NFANondetNodes", "[", 
         RowBox[{"transitions", ",", "#"}], "]"}], "&"}], ",", "state"}], 
      "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NFANondetNodesRecursive", "[", 
     RowBox[{"transitions_", ",", "states_"}], "]"}], " ", ":=", " ", 
    RowBox[{"FixedPoint", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"#", ",", 
          RowBox[{"NFANondetNodes", "[", 
           RowBox[{"transitions", ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}]}], 
         "]"}], "]"}], "&"}], ",", "states"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "NFAIterate", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFAIterate", "[", 
    RowBox[{"transitions_", ",", 
     RowBox[{"state_", "?", "AtomQ"}], ",", "inputSymbol_", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "next", ",", "deterministicTransitions", ",", "forkTransitions", ",", 
       "deterministicNodes", ",", "emptyTransition"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Get", " ", "all", " ", "the", " ", "transitions", " ", "corresponding",
        " ", "to", " ", "a", " ", "DFA"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"deterministicTransitions", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"FATransitions", "[", 
          RowBox[{"transitions", ",", "state"}], "]"}], ",", 
         RowBox[{"KeyValuePattern", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
            RowBox[{"i_", "/;", 
             RowBox[{"MemberQ", "[", 
              RowBox[{"i", ",", "inputSymbol"}], "]"}]}]}], "}"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"deterministicNodes", " ", "=", " ", 
       RowBox[{"Sort", "[", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"deterministicTransitions", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], "]"}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Run", " ", "through", " ", "the", " ", "empty", " ", "transitions", 
        " ", "of", " ", "the", " ", "DFA", " ", "nodes"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"forkTransitions", " ", "=", " ", 
       RowBox[{"NFANondetNodes", "[", 
        RowBox[{"transitions", ",", "deterministicNodes"}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Get", " ", "past", " ", "the", " ", "current", " ", "deterministic", 
        " ", "nodes"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"forkTransitions", " ", "=", " ", 
       RowBox[{"NFANondetNodesRecursive", "[", 
        RowBox[{"transitions", ",", "forkTransitions"}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Append", " ", "every", " ", "valid", " ", "nondet", " ", 
        "transition"}], " ", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "The", " ", "next", " ", "nodes", " ", "will", " ", "be", " ", "a", 
        " ", "union", " ", "between", " ", "the", " ", "deterministic", " ", 
        "transitions", " ", "and", " ", "the", " ", "nodes", " ", "reachable",
         " ", "from", " ", "nondet", " ", "transitions"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"next", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"deterministicTransitions", ",", "forkTransitions"}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "next", "]"}], ">", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<Trace\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "next", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"next", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NFAIterate", "[", 
     RowBox[{"transitions_", ",", "state_List", ",", "inputSymbol_", ",", 
      RowBox[{"opt", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"NFAIterate", "[", 
          RowBox[{"transitions", ",", "#", ",", "inputSymbol", ",", "opt"}], 
          "]"}], "&"}], ",", "state"}], "]"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFACompute", "[", 
    RowBox[{"machine_Association", ",", "inputString_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"computation", ",", "result", ",", "start"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"start", " ", "=", " ", 
       RowBox[{"NFANondetNodesRecursive", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"<|", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", 
            RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
          "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"computation", " ", "=", " ", 
       RowBox[{"FoldList", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"NFAIterate", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{"#1", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], ",", "#2", 
            ",", 
            RowBox[{"\"\<Trace\>\"", "\[Rule]", "True"}]}], "]"}], "&"}], ",",
          "\[IndentingNewLine]", "start", ",", "\[IndentingNewLine]", 
         "inputString"}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"result", " ", "=", " ", 
       RowBox[{"Apply", "[", 
        RowBox[{"Or", ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
              "#"}], "]"}], "&"}], ",", 
           RowBox[{
            RowBox[{"Last", "[", "computation", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"computation", ",", "result"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748696660242413*^9, 3.7486966647459993`*^9}, {
   3.7486967021050158`*^9, 3.748696831536084*^9}, {3.74869697189542*^9, 
   3.7486969809648447`*^9}, 3.748697215466445*^9, 3.74869751995757*^9, {
   3.7487002667885447`*^9, 3.748700369011458*^9}, {3.748700419261013*^9, 
   3.74870044744256*^9}, {3.748700478215622*^9, 3.7487004832193537`*^9}, {
   3.7487005955665207`*^9, 3.7487006595068207`*^9}, {3.748700694288843*^9, 
   3.748700746453335*^9}, 3.748700817284863*^9, {3.74870133603623*^9, 
   3.748701338714301*^9}, {3.748701412553027*^9, 3.748701433385751*^9}, {
   3.748703690592517*^9, 3.7487036910563593`*^9}, {3.74872577206177*^9, 
   3.748725873675222*^9}, {3.748726096655231*^9, 3.748726097862135*^9}, {
   3.748726161467107*^9, 3.7487261661149473`*^9}, 3.748726593319901*^9, {
   3.748726796627596*^9, 3.748726818991522*^9}, {3.7487268513408527`*^9, 
   3.748726851865614*^9}, {3.748726887823266*^9, 3.748726897576947*^9}, {
   3.748727017532686*^9, 3.7487270198114967`*^9}, {3.74872708125178*^9, 
   3.7487270820410557`*^9}, {3.7487288780661297`*^9, 3.74872887985073*^9}, {
   3.748730819090145*^9, 3.748730822972616*^9}, {3.748732013638582*^9, 
   3.748732058344652*^9}, {3.74880113462694*^9, 3.748801136463613*^9}, {
   3.7488035603062153`*^9, 3.748803604623309*^9}, {3.74880375095224*^9, 
   3.748803753859046*^9}, {3.7488042695495777`*^9, 3.748804274425645*^9}, {
   3.7488047683020563`*^9, 3.7488047718077297`*^9}, {3.748804812399547*^9, 
   3.7488049951363697`*^9}, {3.74880505264699*^9, 3.748805053420678*^9}, {
   3.748805470504953*^9, 3.748805476503813*^9}, {3.748807279102119*^9, 
   3.7488072869248123`*^9}, {3.748807328740156*^9, 3.748807400696988*^9}, {
   3.748807808587181*^9, 3.748807836949627*^9}, {3.748808099301045*^9, 
   3.748808174415368*^9}, {3.7488082143482523`*^9, 3.748808217419037*^9}, {
   3.748808272406879*^9, 3.748808275718526*^9}, {3.748808399482581*^9, 
   3.748808399578511*^9}, {3.7488084453504753`*^9, 3.748808510178919*^9}, {
   3.748808549481038*^9, 3.748808553538176*^9}, {3.748808682742573*^9, 
   3.748808682986268*^9}, {3.748808785518733*^9, 3.748808809006649*^9}, 
   3.74880891383162*^9, {3.748809105368822*^9, 3.7488091409700403`*^9}, {
   3.7488094667814283`*^9, 3.7488094694792128`*^9}, {3.7488096384105253`*^9, 
   3.748809641309116*^9}, 3.748809871655493*^9, {3.748809926286551*^9, 
   3.748809926477386*^9}, {3.74880996291532*^9, 3.748809993168223*^9}, 
   3.748810655609845*^9, {3.748810913056004*^9, 3.748811010806554*^9}, {
   3.748811060755949*^9, 3.748811061282751*^9}, {3.748811135937064*^9, 
   3.748811136115068*^9}, 3.748811387794766*^9, {3.748811455189604*^9, 
   3.748811493198897*^9}, {3.748811570454311*^9, 3.7488115713057337`*^9}, {
   3.7488183364958467`*^9, 3.748818347315804*^9}, 3.7488184138505573`*^9, {
   3.748818476964366*^9, 3.7488184974181433`*^9}, {3.748818632924273*^9, 
   3.748818656918626*^9}, {3.748818795287841*^9, 3.748818963348254*^9}, {
   3.748819708145546*^9, 3.748819721079083*^9}, {3.74881982125387*^9, 
   3.748819821436996*^9}, {3.748819866580336*^9, 3.748819871655216*^9}, {
   3.748819980285425*^9, 3.748819984589164*^9}, {3.748820625590354*^9, 
   3.748820705429714*^9}, {3.748820745775682*^9, 3.748820746633438*^9}, {
   3.748820992073642*^9, 3.748821001058663*^9}, {3.748821103036991*^9, 
   3.748821111674374*^9}, {3.7488211428106337`*^9, 3.74882115195549*^9}, {
   3.748821305823208*^9, 3.748821306269497*^9}, {3.7488242901542473`*^9, 
   3.748824290476968*^9}, 3.7488247109240713`*^9, {3.748873218603817*^9, 
   3.748873337382937*^9}, {3.7488733681466618`*^9, 3.748873411836718*^9}, {
   3.7488734559127913`*^9, 3.7488734846393967`*^9}, 3.748874369479238*^9, {
   3.7488748523353148`*^9, 3.7488748915303173`*^9}, {3.748874984927391*^9, 
   3.748875042232397*^9}, {3.748875076959214*^9, 3.7488751458652973`*^9}, {
   3.748875251786681*^9, 3.7488752642448053`*^9}, {3.748875340638957*^9, 
   3.7488753476113367`*^9}, {3.7488753838410873`*^9, 3.748875405935307*^9}, {
   3.748875555618806*^9, 3.748875559889102*^9}, {3.748875658590469*^9, 
   3.748875658864766*^9}, {3.748875696679154*^9, 3.7488756969853992`*^9}, {
   3.748889791049992*^9, 3.748889811896161*^9}, {3.74889007150378*^9, 
   3.7488901091101933`*^9}, {3.74889048215899*^9, 3.74889051222755*^9}, {
   3.748890629123641*^9, 3.7488906440530777`*^9}, {3.748890753176607*^9, 
   3.748890805779504*^9}, {3.7488908426502247`*^9, 3.7488908689660378`*^9}, {
   3.7488909142413054`*^9, 3.748890914664418*^9}, {3.748891441953947*^9, 
   3.748891446155963*^9}, {3.748891538016032*^9, 3.748891582391594*^9}, {
   3.7488916155734787`*^9, 3.748891712650625*^9}, {3.748894094876234*^9, 
   3.748894099111452*^9}, {3.748895551322866*^9, 3.748895570330468*^9}, {
   3.7502559198574057`*^9, 3.7502559502206593`*^9}, {3.750256329382059*^9, 
   3.75025635028307*^9}, {3.750256700770001*^9, 3.750256741046235*^9}, {
   3.750261562702235*^9, 3.7502616043085537`*^9}, {3.750262809143704*^9, 
   3.7502628357536173`*^9}, {3.75026619353651*^9, 3.7502662181861563`*^9}, {
   3.750266316706027*^9, 3.750266374824163*^9}, {3.7503647141078377`*^9, 
   3.750364714673781*^9}, {3.750364767204461*^9, 3.750364816349908*^9}, {
   3.750366727570877*^9, 3.750366734490394*^9}, {3.75042022868252*^9, 
   3.750420229108513*^9}, {3.762890039987027*^9, 3.7628900429142857`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"680049cd-df21-43fa-aec4-f635d6151bc8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TransitionApplyThreshold", "[", 
    RowBox[{"transition_", ",", "threshold_"}], "]"}], ":=", 
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "+", "threshold"}], "&"}], ",", "transition", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Key", "[", "\"\<Parent\>\"", "]"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"Key", "[", "\"\<Node\>\"", "]"}], "}"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MachineApplyThreshold", "[", 
    RowBox[{"machine_Association", ",", "threshold_"}], "]"}], ":=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Name\>\"", "\[Rule]", 
      RowBox[{"machine", "[", "\"\<Name\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"TransitionApplyThreshold", "[", 
          RowBox[{"#", ",", "threshold"}], "]"}], "&"}], ",", 
        RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<StartState\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}], "+", 
       "threshold"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", 
      RowBox[{
       RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}], "+", 
       "threshold"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}], "]"}], 
         "\[NotEqual]", " ", "0"}], ",", 
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "+", "threshold"}], "&"}], ",", 
          RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"All", ",", "1"}], "}"}]}], "]"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "|>"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.7488011080330544`*^9, {3.750257081825346*^9, 3.7502571060047483`*^9}, {
   3.750257582428767*^9, 3.7502576073845387`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"18e97e79-dd4c-4401-9d37-c7849cf9ddef"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetDirectSuccesors", "[", 
     RowBox[{"machine_", ",", "state_"}], "]"}], ":=", 
    RowBox[{"Select", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Nest", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"NFANondetNodes", "[", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", "#"}], 
          "]"}], "&"}], ",", 
        RowBox[{"{", "state", "}"}], ",", "2"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"ContainsQ", "[", 
           RowBox[{
            RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
            RowBox[{"#", "[", "\"\<Parent\>\"", "]"}]}], "]"}]}], " ", "&&", 
         RowBox[{"PureNondetStateQ", "[", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
           RowBox[{"#", "[", "\"\<Parent\>\"", "]"}]}], "]"}], " ", "&&", " ", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"FAParents", "[", 
            RowBox[{
             RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
             RowBox[{"#", "[", "\"\<Parent\>\"", "]"}]}], "]"}], "]"}], 
          "\[Equal]", "1"}]}], ")"}], "\[IndentingNewLine]", "&"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ReplaceKey", "[", 
     RowBox[{"assoc_", ",", "key_", ",", "replaceTo_"}], "]"}], ":=", 
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"replaceTo", "&"}], ",", "assoc", ",", 
      RowBox[{"Key", "[", "key", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeleteIntermediateTransition", "[", 
     RowBox[{"transitions_", ",", "startState_", ",", "endState_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "deleteState", ",", "replacement", ",", "newTransitions", ",", 
        "cleanedUp"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"deleteState", " ", "=", " ", 
        RowBox[{"endState", "[", "\"\<Parent\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"replacement", " ", "=", " ", 
        RowBox[{"ReplaceKey", "[", 
         RowBox[{"endState", ",", "\"\<Parent\>\"", ",", 
          RowBox[{"startState", "[", "\"\<Node\>\"", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cleanedUp", " ", "=", " ", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{"transitions", ",", 
          RowBox[{"KeyValuePattern", "[", 
           RowBox[{"\"\<Parent\>\"", "\[Rule]", "deleteState"}], "]"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"cleanedUp", " ", "=", " ", 
        RowBox[{"DeleteCases", "[", 
         RowBox[{"cleanedUp", ",", 
          RowBox[{"KeyValuePattern", "[", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", "deleteState"}], "]"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"newTransitions", " ", "=", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"cleanedUp", ",", "replacement"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "newTransitions", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SimplifyStateIteration", "[", 
    RowBox[{"nfa_", ",", "state_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newMachine", ",", "newTransitions"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newMachine", " ", "=", " ", "nfa"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"Fold", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"DeleteIntermediateTransition", "[", 
           RowBox[{"#1", ",", 
            RowBox[{"<|", 
             RowBox[{"\"\<Node\>\"", "\[Rule]", "state"}], "|>"}], ",", 
            "#2"}], "]"}], "&"}], ",", "\[IndentingNewLine]", 
         RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"GetDirectSuccesors", "[", 
          RowBox[{"nfa", ",", "state"}], "]"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"newMachine", "[", "\"\<Transitions\>\"", "]"}], " ", "=", " ",
        "newTransitions"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SimplifyState", "[", 
     RowBox[{"nfa_", ",", "state_"}], "]"}], ":=", 
    RowBox[{"FixedPoint", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"SimplifyStateIteration", "[", 
        RowBox[{"#", ",", "state"}], "]"}], "&"}], ",", "nfa"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SimplifyMachine", "[", "nfa_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"simplified", ",", "oldStates", ",", "newStates", ",", 
       RowBox[{"stateRelabelRule", " ", "=", " ", 
        RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"simplified", " ", "=", " ", 
       RowBox[{"Fold", "[", 
        RowBox[{"SimplifyState", ",", "nfa", ",", 
         RowBox[{"GetStates", "[", 
          RowBox[{"nfa", "[", "\"\<Transitions\>\"", "]"}], "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"oldStates", " ", "=", " ", 
       RowBox[{"GetStates", "[", 
        RowBox[{"simplified", "[", "\"\<Transitions\>\"", "]"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"newStates", " ", "=", " ", 
       RowBox[{"Range", "[", 
        RowBox[{"0", ",", 
         RowBox[{
          RowBox[{"Length", "[", "oldStates", "]"}], "-", "1"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"stateRelabelRule", " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{"oldStates", "\[Rule]", "newStates"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"simplified", "[", "\"\<Transitions\>\"", "]"}], " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Replace", "[", 
            RowBox[{"#", ",", "stateRelabelRule"}], "]"}], "&"}], ",", 
          RowBox[{"simplified", "[", "\"\<Transitions\>\"", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"All", ",", 
              RowBox[{"Key", "[", "\"\<Parent\>\"", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", 
              RowBox[{"Key", "[", "\"\<Node\>\"", "]"}]}], "}"}]}], "}"}]}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"simplified", "[", "\"\<StartState\>\"", "]"}], " ", "=", " ", 
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"simplified", "[", "\"\<StartState\>\"", "]"}], ",", 
         "stateRelabelRule"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"simplified", "[", "\"\<AcceptStates\>\"", "]"}], " ", "=", 
       " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"simplified", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
         "stateRelabelRule"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"simplified", "[", "\"\<StateExpressions\>\"", "]"}], "]"}],
          "\[NotEqual]", " ", "0"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"simplified", "[", "\"\<StateExpressions\>\"", "]"}], " ", 
          "=", " ", 
          RowBox[{"MapAt", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Replace", "[", 
              RowBox[{"#", ",", "stateRelabelRule"}], "]"}], "&"}], ",", 
            RowBox[{"simplified", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "simplified", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750364998620798*^9, 3.7503650158668737`*^9}, {
   3.75036515975064*^9, 3.750365172407138*^9}, {3.750365205458529*^9, 
   3.7503652380323153`*^9}, {3.7503660801827383`*^9, 3.750366090758335*^9}, {
   3.7503663461945887`*^9, 3.750366374019957*^9}, {3.750366748755925*^9, 
   3.750366778092875*^9}, {3.750366929251663*^9, 3.7503669714568996`*^9}, {
   3.750418126799262*^9, 3.75041812711924*^9}, {3.7504188815057087`*^9, 
   3.750418882737925*^9}, {3.750419763370091*^9, 3.750419802856162*^9}, {
   3.750420144465686*^9, 3.750420144797082*^9}, {3.7504557414041567`*^9, 
   3.7504557418426123`*^9}, {3.750455807898966*^9, 3.7504558158804197`*^9}, {
   3.750455885104082*^9, 3.7504558890245743`*^9}, {3.7504559602622547`*^9, 
   3.7504559609399433`*^9}, {3.750456077257615*^9, 3.7504560776730328`*^9}, {
   3.750456563904047*^9, 3.7504566001341677`*^9}, {3.75045683067983*^9, 
   3.750456850430387*^9}, 3.750456945376627*^9, {3.7504569899984837`*^9, 
   3.750457054656065*^9}, {3.7504571702230186`*^9, 3.7504571903594513`*^9}, 
   3.750457228095786*^9, {3.750457755513661*^9, 3.750457768254644*^9}, 
   3.750460239484729*^9, {3.750460316589691*^9, 3.75046037279637*^9}, {
   3.75046046293909*^9, 3.750460489202183*^9}, {3.7504605243792677`*^9, 
   3.7504605285463743`*^9}, 3.750460626232395*^9, {3.750460756664249*^9, 
   3.750460757604216*^9}, {3.750460858165915*^9, 3.7504608718712378`*^9}, {
   3.75046129217626*^9, 3.7504613431681747`*^9}, {3.7504613795029593`*^9, 
   3.7504613815429*^9}, {3.750462019486672*^9, 3.750462043861949*^9}, 
   3.750462125452442*^9, {3.750462202208126*^9, 3.75046236819396*^9}, {
   3.750462408880802*^9, 3.750462413123973*^9}, {3.750462667053422*^9, 
   3.7504626872869053`*^9}, {3.7504627358468637`*^9, 
   3.7504627581677322`*^9}, {3.750463038129942*^9, 3.750463077273861*^9}, {
   3.750463175146579*^9, 3.750463191360002*^9}, {3.750463564110938*^9, 
   3.75046357731059*^9}, {3.750463648460927*^9, 3.750463660917789*^9}, {
   3.750466103797947*^9, 3.750466106124605*^9}, {3.7506138823329782`*^9, 
   3.750613899429646*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"8ce2d6db-5913-4394-bbf7-b9e791eb5e48"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQW4JcURqIO7LO7uzsKiuzgEggRZ3F0/bHG3RYK7OwvB3d0dFofgi7sl
ECBhXv5+r87rM3emp7tn5si99X/fgb0jPS3V1VZdPeNWu6293ch/+tOfhoz5
v/+sveW+y+6555b7rzPh//5Yd9chO26/67bbrLLrXttuv+2ei201yv8u3vS/
Z1f43z9G/d+/E0VRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVR
FEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVR
FEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEXpcvbbb7/kyy+/TL7//vug3/XX
X5888MADjXB+//33Hs8U8cMPPzQ9/8svv2Q+x/XQ+H3xxRfJ4Ycfnnz++edB
+fHPf/7TK/xff/3VO8xWxP/jjz9OXnrppeSZZ55J3nvvveSnn37yeu+PP/7o
8e2ff/7Z+Q5h28/b3/rvf//bIzzytAr+85//BMdVqKNcy0Ba3nnnneTll1/2
ToPNjz/+6JUen7CrlM+68zlWBqrSc8D30s9Rj0LSUKbsybv09//973873/nX
v/7V9Dx/+37rH//4R/L8888nH330UeF3FEVRFKUbmWaaaZI//elPUb+///3v
jXDefvvtZJJJJmncm2+++ZLffvvN+e3NN9+8Kbybbrop87nrrrsuOo4ffPBB
UH5ccsklyaijjuoV9sQTT5wstNBCyUknnZR88803uWHWFf/7778/WX/99ZNJ
J500890ZZ5wxWWeddZLTTz89eeWVV5LHHnusRxj0q1daaaWm94ivC9I70kgj
NZ6nXyx89dVXyYorrtgU3hlnnOGR88Uw5ptuuumawj7vvPO83q2jXENhrLrd
dtsls88+ezLaaKM1vkdeTjvttMlf//rX5IYbbjBjyiJOOeWUZJxxxvFKz4QT
TpjMM888yRFHHJF89tlnPcKqUj7rzudYGahKz8E111zTlMZBgwaZuR0XVZb9
c889l4w55phNcTzttNOc71x00UVNddZVJ5GRPfbYw8Rr5JFHbvoOYcw///zJ
7rvvbvQP82CKoiiK0u1U2U9YYYUVGveYjy3ioYceagovD+ZT6xhP5DHDDDME
f2fyySdP3njjjZbEn7n51VZbLTisvffeOzN+jEPlmXHHHdcrj+hjyzvpNYKY
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
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFUdrJK6+8khx//PHJYostljz66KPtjk6f4J///Gdy2223JTvt
tFPy5z//ud3RURSll9HNOqYb415HnOvMh8cee8yEu9RSSyUDBw5M9t9//+Tn
n3+u9BuxVJ3uTk6rolRJN+jOyy67LFlhhRWS6aabLplgggmSiSaaKBlvvPGS
OeecM1lxxRVNfW0HjIX69++f/OlPfzK/J598si3x6GscddRRSb9+/UyeL7ro
oj3un3DCCcmAAQOSN954ow2xU9qBlnnr6c15XqRjOplujHsdca4jzH/961/J
5ptvnhxxxBHJ+eefn0wyySSN9v/WW2+t5BtlqSrdrUhrb9YhSvfRTbrzxx9/
TMYff3wT14UXXjj5448/2h2l5L///W8y7rjjmji9+OKL7Y5On+G8884zeb70
0kv3uDfHHHOYe2eccUbrI6a0BS3z1tPb89ylYzqdbox7HXGuOszVVlstOfvs
sxt/f/rpp8nBBx+cHHDAAR21ZlJFuluR1t6uQ5Tuo5t059xzz23iyrxFpzD7
7LObOL3++uvtjkqf4c477zR5vtJKK/W4xzod4/wffvihDTFT2oGWeevp7Xnu
0jGdTjfGvY44VxnmFVdcYeaO//3vf1cQs3opm+5WpbW36xCl++gm3bnAAguY
uG677bbtjkoD1tWI05tvvtnuqPQZ0KPk+corr9zuqCiK0gvpZh3TjXGvI85V
hjnttNOafcLdQNl0d1NaFaVKukl3LrTQQiauO+ywQ0u/e+211yZfffVV5j30
ho6HWstTTz3VNTKbh0umlJ5ofvV+OqmMu1nHdGPc64hzVWG+9957Jpx11lmn
opjVS5l0d1JaO0kflEXT0h10k+5cZJFFTFx33nln53NV7i3CtnWkkUZK3n77
7cz73T4e6oR9WKH4yKwrXe1Oc5FMKc345lfV5dpuOekGqqpn7SrjPLqpXUzT
6rhXUSadPB669NJLTTg77rhj7jPsJc6j1XqkTLrbkdasd3pTG1lnWlotW51c
Lp2qh+pCxh677LJLj3vvv/9+ctpppyWLL7648W2AfxTsYNlrtN566yU33nhj
8PeGDh3a8KmCXeHw4cPNzx772OOhESNGJCeddFKy4YYbFn6TZ9mbuM022yTr
r79+cuCBByZffvllUPz+85//mPI7/PDDk3nnndeM2fF7d+yxxyYbbbSRCf+d
d97p8d5nn31mfMZgI0kcsRM++eSTk8GDBycXXnhhdDx/+umn5NxzzzX+Cjfb
bLNkzz33zPRFExImMn7VVVclu+66a7LxxhubcA855JBMmbXThV9CmzLywZzZ
brvtlmy66abJuuuum5xyyinm/VtuucWk8fTTT09+++233Pdt8mSK3w033GD8
Pd5xxx0m34gTZYz/Hb4l1/k3/P7778nNN99s3rn99tuTu+66q+lbv/76a3L5
5Zcnu+++u8k7fKXyfCyvvfZasscee5iwkHHy5NVXX+3xnG/5+shLUR10lXlM
PsTKiW/ehMC+5SplogqdA1XXs5AyLtJXMTLvq2PuvvvuRl7//e9/N+UA7777
bnLdddeZ/L7pppvM/7Not370hfymP4wtODKd9e0y+rSOOMeE6ZPP1EF8CxAO
z9j6+tlnn03OOeecZNVVVzVtQFX5067yb2VaXTrEp98Vmk9FFMl8bN33TUuI
3qJPh/7Drxj/Rh8S9r777ptssMEGxieAjFn5zpAhQ0y5bb311skTTzwRlf6Q
tPiE5UM36qFWkjceoq6K7zl+xx13XLLccsslm2yySeMdfnn9pSywI8Q+j7Ew
784111zGd8L0009vrqfjxJ4mfJZTDkXfvP/++5OZZ57ZjGWAukDbPvXUUycf
ffSRdxwJR3y08Ntnn32SY445xvSB8JM51lhjmXzhOQEdMvnkkzfeoW4jS6OP
Prr5e+SRR05++eWX4Hg+8MADJm+22mqr5NtvvzXXiANhImcxaf/444+TZZZZ
xvQfxKcNfm6WWGKJHjKblS6hjHygk8hHfIMCaaP8xxhjDDMuwuc777KGXIRL
phZccEGjD8kb7nH9mmuuMXrtrbfeMnqO67PMMkvjW9yjTSF+2DfYfasXXngh
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
VeJDAx+Z+N4oOgdd8YMz0MQPFL5I+BvfYIMHDzY+UHQ9TlEURVEURVHax4gR
I8yeBMZFzD/j8wQf7LE+xJRmGFfi44Q9RPhh5Cww/I8qiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoSl/lnXfeSc4444xk
hRVWSIYNG9bn46HEw1lIPtfznlPCwB8JvkkOP/zwZN55503ee++9dkdJUbqe
V155JTn++OPNOVz4/VGUTsC3fVV6B3l9Yu0r18Onn36aDBo0qOEHG79kfTke
Sjz0zVdeeeVkrrnmMudMTTTRROb/AwYMSNZYY42mZ3fYYYdk0UUXTcYdd1zz
3AQTTJBMO+20ydJLL53cfffdjefwm4fPcM5WmnDCCc1vmmmmSVZddVX1If4/
HnjggWSOOeZo1JuPP/643VEynHDCCabc33jjjXZHpXJ6c9ps+ko60zAW6t+/
f6NOPfnkk7V8p6/mbyfSDWXx1VdfJUsuuWQy+eSTm3azX79+pt3kfI2VVlrJ
tL3LL7+8+Zu+1DbbbJPcdttttYyVuiG/uoms/MzrE2tfuX7ow5K3N998s8ZD
KQX6d/HFFzflOProozvPmNpuu+0a9bqozGefffZk4MCByU8//VR1lLuar7/+
upGH33zzTbujY5AxGnNYvY3enDabvpLOLJjboc9J+l988cVavtGX87fT6Kay
YB6QMRHx/fOf/9zjPueuX3rppcnCCy9snllggQWSp59+utI4dFN+dQOu/Mzr
E2tfuT6oV+StPTffl+OhlOO0005r9NGfe+653Oc4i0qeY44kD/onrCO9/PLL
dUS36xlzzDFNHtIWdgLMqXMO8A8//NDuqFROb06bTV9JZx7Mv1CnXn/99VrC
7+v520l0W1lgW4Fsbr755rnP/P777+Y+z4099tiV9qm6Lb86HVd+5vWJta9c
H+uvv77J2/vuu0/joZTm3Xff9RrnsJaEDRzPYReXB+f4rrjiinVEtVcg84Vq
Q6go1SB9zjfffLPdUVGUJrCTQDa32GIL53O//vqrscPi2fHHHz/57LPPWhRD
pSry+sTaV66PDTbYoCPytlPioZRH5ldXW2213GcYD7EfiOcmnnhisw6UxZ57
7plce+21dUW165liiin69HgI2cC+XgmjU/OtVfFyfQdfCjoe6j10qqzHwD5b
n/EQ3HPPPY25ya233roFsVOqJK9P3G195W7y+VFl3pZJd6fEQynPHnvsYcqS
PZ95e4juv//+ZOqpp27o68cee6zHM8xxzT333Mlvv/1WW1y7XVY6dTzkyteq
8hyb65FGGil5++23KwnPl2739eSbb61OT6vKs+g7rRoPtaKOhNAt8pvGFe9O
lfVYlltuOe/xEGmaeeaZzfP4N6qyjeh2HdhpZOVbN4+HWI88//zzjb+PG2+8
0cjeySefbGyBLrzwwqZnR4wYkRxwwAHGDwhrXwceeGDy5ZdfZoaLH93ddtst
2XTTTZN11103OeWUU8xegVtuucXMnZ9++unJ7bffntx6663mGj4npA+K7dJ1
111n7t90003m/2mK8pZ07bjjjsaGgH5uOp4h6XbhikdRHOD99983e1fYz88+
WPLoiiuuMHa06623nolbHj55TJ8ce83YfPZJQ2h8BF95eu2118y3N95442TD
DTc033j11Vdz4xHLvffeW7iHCJ849DdYy+e5/fbbr8czV199deZ1CKlDacrI
CjBOu/zyy5Pdd9/d5OX+++/ftLfx559/Tm644Qbj4+eOO+4wMkOYyAt+ZChH
uc6/AZtvwuAd5Oeuu+7ySouMh9566y0jX2uuuWay1FJLJTvttJNJZx5V6yDk
0dYFl112WaV5nmbo0KENGbvzzjuT4cOHm1+6D1tUVr7kpS00XYQjOkJkAFkh
/9CdPC/3iCflJFRRz4vyzVWGQqh+8tF9vuVZpt77fsceD/G9k046yeRjkZz6
xM2Vv2XaUnTLU0891fC/z3oI/vKOPfbYZKONNjLxwldvmpBv+tal2LjE5mNe
vKuQ9U5rW/Gz7DseAuIjefDQQw/1uB+iH6vSgWlC9UkevmVQtk2oqn0vkr9u
HQ9RZ8SOX/zgIRv42OLvkUceOfnll1/Ms8yLM2ZHXwBlQx1mrvyjjz5qCpf8
G2ussRr7ML799ttkoYUWSsYYYwwjM+yrIHzKU+bk+X3//ffmeXTO2WefbXw1
cn2GGWboEXdX3lJWu+66qylD5JTn8G0hshmS7iLy4lEUB3j22Wcb/Wp+xx13
nJlH2WSTTRptG78smfPNY9bckeOYfPZJQ0x8wFeeqJuUlegH/BPMMsssRr9X
DXEQH01Ze4jwFb3XXnuZf4u+Zh0oDXoiq90MqUNpysgKvPDCC8k888yTrLXW
WmbOkXkdxny0+/g8/fDDD40uR9/K3Bz2g9dcc42xCWTcIrJO/ks5cg85oezX
WWcdU14+yHho7bXXbviYw+8ccoKvhSuvvLJU/vnK4znnnNNDF1SV52nYg0oc
mPeVukQeTz/99OZ6SFn5kKXnYtP1+eefJxdddJGxEeUezyEbtKX06a666iqz
R4C9dcccc4wpy5Ayc9XzonzLS2eMPIhc++g+3/IsU+9DviNlt+2225q9y/Tr
iuTUJ26u/C3blvJ92//+PvvsY+SHftcRRxxhygxZ5bmYb4bUpZi4lM3HdLwf
fPDB0rLeiW1r6Hjo0EMPbaQR33M2IWVapQ60CdUnefiWQRVtQhXt+8UXX1wo
f906HgLqypxzzmniiY0nY17qDPWHeRKg/zzppJMmRx55ZNO72ArxHj6IBeYg
sDei/tp7K+jf8Ozee+9tdBXyx7OMWaXuSz9duP766811/C+mycvb7bff3siN
jfT3bdsmn3T7kBUP3zjAP//5T5Nf3DvxxBOb7jEvxXX889uE5jGE5nNIGkLj
EyJPM844o8ljG+aL0teqgnUK4pC1h2iVVVZp2HMzryI6wT5TlDmnLD8KIWnO
I0ZWgDhPNtlkRt7TfRPO/8GXD7qcuSBgzZCw0Js2zGNxnT6xbU9I2ngWGfNF
xkNpX1j0u+UcKHudqE4dZOsCmRcTYvPcBWNo3ss6eym0rIrIS1tsupjD4h79
mzTMuXAmqFB1PXflm6sMQ+UhRPcVxauKeu/zHZB+HGM4m7zyDImbK3/LtqW2
/33WQ2zOO+88cx25t/fS+Hwzpi7FxCU2H115FSvrndq2ho6HzjzzzEY5nHvu
uY3rMWVatQ6M6X/l4VMGVbcJZdt3l/xBN4+HQPw+YA+RhbSBjBlZs5XfWWed
Za4zJyjwDNcYS9owlpX5jjTSN0r305EL0RtpsvIW33/0+Rn32+y8886ZY9mi
dPuQjkdoHCDPLxBhjTLKKGZsbstnTB6Dbz6HpiE0Pr7yxHwGf3Pu6Y8//tgU
hm2PUyXS5pF2O8/Z43nQQQc1/kYvyVoSa+4CzzDnkiakDrkIlRXYcsstG3Ng
WWAbwH3mtYA5cNpUrj3++ONNz7KGmL7OHFq6PSlCZDFr7pg5Ou4xzy3UrYNE
F1DOaWLy3AV97by+TmhZ+ZCXtph0MTeJbhh11FF7nB21xBJLNI2Jq67nrnxz
pTNEHmL0tyteVdV7n/Tn7R/KK8/QuLnqSNm2VPzvZ+kDObfE1r8+34ytS6Fx
ic1HV17Fynqntq2h4yHbZtDOp9gyrVIHxva/0viWQdVtQhXtu0sXdPt4qCie
2EGwDojdYtaPeUEZJ19wwQUmrLSfefEZsuCCC/YIX8ogr5+++uqre8eZcmTt
z2aXXXbJbMuqKJ+sMELiAK59sMyVc4+5DCEmjyEkn0PSEBqfEHkSn2/MT2Bf
Xff+e9of0cNPPPFE4zprQ999913Ts1L2sh6E3iStWfaEIWl2ESorMNVUU5nr
jzzySGaY6FHur7rqqo1r2D9zjblygfUa1m24TrsrMLcZeq6qy58CdtfcYw5K
qFsHuXRBTJ67cPV1YsqqiLy0xaZLfEXZdizsvcPGxabqel7UR8xLZ6g8hOpv
V7yqqvdF34HQ8gyNm6uOlG1LXf73RRexRhfyzdi6FBqXKvNRiJX1Tm1bQ8dD
m222WaMdtu0EYsu0Sh0Y2//KwqcM6mgTyrbvMbqgt4yH+vXrZ3wM+8C+P8LC
ptEGfynp/BeK+unYMKWRMbErb5Et7CVnm2222sZDRfEoigO46qT4MrPrZEwe
Q0w++6QhND4h8oQ9rZxbzY91Y2wBfPsQMcw///xNOgG7ibT9Aci6M/bfzO9g
p7LvvvtmhhmSZhehsmLbf+T5nWLvB/ft+MnaOfEWHY2vA+aKmD+XfVNffPFF
lE9U13hI4kN7JNStg2LHQ1l5XkReXye2rIqI6Qu40oUusOcBgH1gyIJN1fU8
to8Yqy/BR3+74lVVvS/6DmDbE1KeoXGrczzk0gfYS3GPZ3y/WaYuhcalynwU
YmW9U9tW6p7veIjvTznllOZ52261TJlWqQPL6JM0RWVQV5tQtn13yXBen9in
z94JFNVPyggbRZ96wjPMH2JPwR4wIL+R60kmmcTsD0gT009fY401cuPMOjf7
H9lTylor8lnXeCgvHr5xADl/LEve5awbu07G5DGE5rNvGkLjEyJPwN5B1qj7
9+/f0A117PkUxOaA+LPmg95Lr2cD692kg2cZG5F/ef5RQ9OcR6isUA6UC9fx
lZQFOjDd9oC0FaQNvbjsssua6+wB5jppxc7aXkfzxWc8ZPv3qFsHyZ75LF0Q
mudFSF8nvZe+TFm5yEtbbLqwicN+XvwB8z5+rNJUXc/z8q0onTHyEKK/XfGq
qt4XfQdkHse3PEPj5qojdY6HsD/m3qyzzur9zTJ1KTQuofkYMh4KlfVObVtD
zh+ScuGHvzehTJlWqQNj+195uMqgrjYByrTvLl2Q1yd29dk7CR97Oe7ji88H
+o7szacfiZ3hMsssY9qTvLOG8WdB+Omzx1zjIfHfkY4zfgNnmmkmszYs1Gkv
lxWPkDiA6L6QOhmaxxCSz6FpCIlPqDzZ0FfGD898880X/K4vjz76aEMvUe//
9re/5T4remHQoEGm75RHmTTbxMiK7M1N7w8Wjj76aHMfX582YheAHmOMKL7j
8KnDdeyZ8XcTg/Q5GFOmEXs5236zbh2ErUGeLojJcxcSnu2HQ4gtKxd5aSuT
LvxQc3/IkCFmXjHLP2zV9dyVb+AqwxB5iNXfWfGqqt4XfQfE9sa3PEPj5srf
VqwPYbMc8s3YuhQal9B8DBkPhcp6p7at4o+kaDzEepjkPzZ26XFdbJlWrQNj
+l8+ZJVBHW0ClGnfXbogr2+ed73TKKqf5Av3sRnIKm/8Uoq9NT4u8DeM30hf
ZJyKD3gbwsgbD0n9wm7dRsb7tt+qOsdDWfEIiQPgY4R7tMNpsupkTB5DSD6H
pCE0Pr7yRDyzzrNhHtReO2B+Bb+o2MTi97IsrAmxjkwc0c1ZfXaBs4Zk7JTl
R0EIqUMuQmUFxFcPtuNZyNwd51TZ/PTTT8ZnxGijjWbaWQE7Y54nj9inG4O0
eZyBlUbW1W0/WXXrIMmDtD6BmDx3QVvHO88880yPe7Fl5SIvbWXS9fzzz5v7
2DRiK5dF1fXclW+udIbKQ6j+dsWrqnpf9B3A31VIeYbGzVVHqhoPZfkwoA/N
PdvPmM83Y+tSaFxC89Enr2JlvVPbVvFb4BoPcUaF+KugDqbtWCC2TKvUgbH9
rzS+ZVBHmwBl2neXLsjrm+dd7zRkr1tef455ErGfxqaS/VtPP/20Ga8yNrZ9
A3LeE8/h390XznThHcIRn4HIoPjVwL4SO0rbdxF71rjHeNpG/GaI3wvqmLQT
w4YNM3Ivcw5F6fYhKx4hcbCfZ10ijZz3YfttjMljCMnnkDSExsdXnvgmOslO
O/GlnnI2iMA+QxmTcLZdFUibZfuOy4L44IOG/MIPZR4hdchFqKwAbRqyjs+s
tN7nHAXsnvL2AHGdMNNnQLC2P8444xg/PDFg10G4rMfbYE+NvUfaD3HdOihP
n0BMnrsQ3zy2DMs8cJmyyqNIV8amS8LN8jEEVddzV7650hkqD6H62xWvquq9
T/pDyzM0bq46UrYtlTHIww8/3HQdmx32eHPOStrPV9E3Y+tSaFxC89Enr2Jl
vRPbVvoTkqfpPTfwySefGF8slBNtKXtw83w7xJZplTowtv+VxrcM6mgThNj2
3aUL8u653ukEGJsyF4s/EplTwPYBv4Fp6CdTl+QMG378m36L3Q8U+9r0D9+F
nHVG+OlzSqgP4s8c+0vGx5z5y7wE1/D3gm9D7Cdpo/DHK/FgLZHzfEU/HXXU
UeY69Q8bJtYBOXORa7Rp1OmQdOfhiodPHIBrnHMjecQcivho4gxV7IXkHvMm
cj5BTB6H5rNvGmLj4ytP6CTizPewk8WnLzZqdj3F/g+9hi7N0msx8C10lY/P
HdaUOQu8CN80ZxErKwLjX/ZpYlNz6qmnmvOTeB9fn5zJi87NgrMgKe+0zzzW
6EPOTkkjMsU8KON0bJixkyN+yGNWftShg3jWDpN6LL50y+Z5Hqw7UP94b7rp
pjPfpP2TPnZsWaXJS1tV6aKOFPlSqrKe5+Uba7R5ZSj5EKKfQnSfT3mWqfc+
3yH9cm5aaHn6xM1VR6poS0H6y6TvkEMOMfspmCvBbnGrrbZqkoOQb8bUpZC4
hORjSLxjZd03LlB328q7rB2LfzT5UYewncK+nPgzN7bUUkuZs8s+/fTTwnBD
yrQOHRjb/8rCpwxC0xxCaPvu0gV5fWLk3tVn7xTIY9aEiRf5SZ5Qjq69eKyx
Md+AzGSdiUsY2JQzlsW+Un6Uuew9z/K/Qb+TtWHOVhbffnwrbU8jceb/xFn+
tsF3BmVj+ztiLC8yFpPuvLzLi0dRHCTN/CQM4iH9bzuOxIvrosti8zgkn33T
UDY+RfL0wQcfmP183Gd9Or33SSBvstbXYyFNef5c0pB3Lpu6NEVpziJWVtLw
DOXKfCHzUz4yn7U/lHms0H2jNvZ3iQf27uSJTz5WqYN4Nl2PJV+ryvMseBa/
ztTDtF82Iaas0vmQlbaq0sW7zLH4UGU9T+ebqwzlfqh+8tV9rniF5oEPPumP
KU9X3Fz5W0VbCjIGwcaLNQnOecSeKKtfGfPNkLoUEpc0rnwMjXeMrPvGBVrR
tqLPbV1DWkU+ued7hmgWPmVahw4s099J41sGIWkOJaR999EF6T6xT5+9t0J5
4WsoyyaaPGZOgDGuEk+n5XGnxUfp26g8KjYqD52Py4dBX46L0nmoPlF8wW7I
dVY9dor481Pi6bQ87rT4KH0blUfFRuWh8+mkMUgnxUXpPFSfKD6wFsZ+Q+xt
8xg6dKg510GJo9PyuNPio/RtVB4VG5WH7qCTxiCdFBels1B9oviCLSx7ytin
n2Wvyr5B9rCF7LVQmum0PO60+Ch9G5VHxUbloTugj8kYpBPKoZPionQWqk+U
EDgTCl2CP5JFFlnE/I2PkcGDBxu/PTrnUp5Oy+NOi4/St1F5VGxUHjoXzrHi
3Fvx0bXRRhsZX1vt8D3VSXFROhfVJ4ov6A788mBfie97zq8bPnx4u6PVq+i0
PO60+Ch9G5VHxUbloXMZMWKE8a/FWOSll14yvk/x61yF36xujovSuag+URRF
URRFURRFURRFURRFURRFURRFURRFURRFURSlm3nllVeS448/PllsscWMrWzV
cIbuGWeckaywwgrJsGHDKg/fBWdj3XbbbclOO+1kzsjqNNqZN72dvLzFFhy7
8MMPPzyZd955k/fee6+NsayXjz76yJyVQB4su+yyyX333dfuKBnq1jl9nU4s
907XxYqiKErfhX5J//79G/5UnnzyyUrD//TTT5NBgwY1wmffWSvB10e/fv3M
txdddNGWfruIdudNb8aVtw888EAyxxxzNO59/PHHbYxpfZx99tnJdtttlxx7
7LHJJJNMYtK69957tztateucNCeccEIyYMCA5I033qj1O51Cp5Z7q3Vxu8u9
3d9XFCUbrZv+9LW8Yr583HHHNe3Uiy++WMs35pprLhP+zTffXEv4Ls477zzz
7aWXXrrl3/ahnXnT28nL26+//rrRH//mm2/aFLv6uOOOO5Lpppuu4Sf2u+++
M3nAHH0n0AqdI8jYl7XC3k6nl3srdXG7y73d31cUJRutm/70xbyaffbZTZpf
f/31WsLHPoLw77777lrCd3HnnXeab6+00kot/7YP7cyb3o4rb8ccc8xee+be
Msssk6y44ortjoaTunWOwPoTaxM//PBDrd/pBDq93Fupi9td7u3+vqIo2Wjd
9Kcv5hX2C7RTb775Zi3hr7/++ib8dtixU558e+WVV275t31oZ970dlx5O/nk
k5t7ve3stM8++8yka+utt253VJzUrXP6Gt1Q7p2uixVFUZS+Dfua6+ybbLDB
Bm3r8z/11FMd3Qa3M2/q5Nprr02++uqrtsbBlbdTTDFFrxwPPfTQQyZdu+yy
i/c77SirunVOXyOm3FtNp+tipTydoPerpM709La8UroTlcNmdDzUPnrjeAhb
05FGGil5++232xqPvjgekj0avv3idpVVGZ3zxx9/tOSdbiK03EOoKu/aoYur
LPeq5a63yWSduqQdeVVnelqtd3ubrKXRNiEfVzp95bCv5BXYfZMRI0YkJ510
UrLhhhsm6623XnLjjTfmvsez+HXdZpttjG3SgQcemHz55Zc9nkv3S9nvS9so
Po8Zm+J3Cp9IG220kQkTf8mhUGZXXXVVsuuuuyYbb7xxstlmmyWHHHKIsw12
pQEblJtuuim5/fbbzV7lW2+9NbnhhhuS3377zfSjyRu5x75lwiqbNza//vpr
cvnllye77767Sc/++++f6Xehjvwk7TvuuKOxa9pjjz0y457F0KFDG74K2C8w
fPhw80v3e33TVuYdn/HQW2+9ZdK55pprJksttZTxB/z++++XjsNzzz1nriMb
+BlGVpCb1157LbnlllvMdf7/4YcfVpbmn3/+OVlttdVMupA5yXv8L2fhW1a+
sgw//fRTcu6555p8pP7tueeept6kCdU5lMlpp52WLL744sYHA/u+rrjiimTz
zTfPfQcZPv/8881+lcsuuyw3zy699NJkn332SdZdd91khx12MPWGsjnxxBMb
z7EHjXRwHX+F4rPg3XffTa677jqjB0RXZOGbh8gH9Y2yJj9222235NVXX80M
006DT7mHyJKdd+Qt+u7kk09OBg8enFx44YXO+EDVujgkj4rKHR/7vLPpppua
Mj/llFOMPFG2yOvpp59u6ipULXcx4cXE24VLt8fKeR16nzYLmVt44YXNv5FB
wt53332NbmcOAN8swHeGDBmSrLrqqsZm9IknnohKf2h6YtrJOtvIdNx863Ad
Oj42Db5yXnXdvPLKK43uv+aaa4x8E0/WTgjzoosuMn2sNCH5JpTtr/nInE/Z
F8mhT/sZIgvdgvRNtt12W7MHHXmSa/yy8uL+++9PZp555oaMIPfk9dRTT92j
HU73S3nX9nlMX+SYY45J7rrrruSII45IxhprrGT88cc3z/mC32T2E1Mu9A8A
v8tLLLFEbhtclIbPP//c1IOJJ57YhEGeUFeQZ+SL9n7gwIHJhBNOaOKP37Ky
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
SzKfCe3nZVGmv+Yjc3WNh0JkQfo9Wb8iP0Htgn3DeTIl6bFlijYI20afdhrW
WGON4PEQfgu4N+ussxaGL/su33jjjR738trg0DSwPo+tqvgmJK/Yy5mmbN6Q
F8gZ12xbVhv2CHI/bUtaVX6yfsu+OPa5s9aKHooZD6X3FMakrUx+5Mkd+IyH
ZM9wmTiAbYeMjk7r5zRlvhc7Hsra/+kry9guEQb2Cb7joVCdAwMGDAh+R/ac
pmVgyimnNNdZ208jOoM5wDSh/cRQfcD+G2wwpD3m5/KnIOSVexlZihkPtUIX
++RRVrlLPSQ/2OsN5A/pxg8FewezqFLuYsKLjXcWvrq9zHioCr0vyP6FqsZD
IW2bSzeGhuUbdtm2Jk1RHa5Dx8emIUbOq66bgG8D7q+yyiq5aQzVWVnE9NdC
ZC5kPJQn41l5FSIL6Py89SH2J3UiYoPgK1Nia4LPYB/EJ0jM+pBLJgX2dvJs
ln9Fl41GSBoAf028g19PfCdljW+ryBuxmU7vsxOOPvpocx9fszZV5Cf9mJlm
msms+Qqx9nLs4UsTk7bY/MiTO5C8Yu0mjdjL2TYhsXEA/MdQ/1lv8O3fxn4v
djyUVVYhsoxvAp7Ns49IE6pz7LiGvCP+LNIygD7gOvbXaURnZO2RwJcZ99J+
SfL6iTF6RmBczr6z+eabr/BZV7nHylLMeKhVuljIy6O8cqctJ47MQWMbjx88
+hT4ls2jSrmLDS8m3mlCdHuonNvpqkrvg4zLqhgPhbZtrvSUbSfryKssfOzl
6tDxsWkIlfOq6+YHH3xgxjns00mPEfhb7NXK6CwhtL8WKnMh46EsOYS8vApt
77sJ/HnkzellyRR75LjGWl2WnNL/s+0cxQcG+21sXHva8cfFPeSiCL7Hs1k+
/vBZyD3G0zahaYDnn3/evIOtDbZyWVSRN2eeeaa5hg1qFrLWQB/bpor8lPkW
2+9a6HiIvgnPYzuaJiZtsfmRJ3cgeYW/gzRiZ2fvCYyNA+vtzOeAyCJ2x1nf
tYn9Xuh4yFVWIbIs+zrxeZql30mvbS8cqnMA32Kh70g+pWVA2mPW69J2zNJv
Z79XGrHPwL+VjezhTvcTffOQ8Jg3S8M6WpYP7zSuco+VpZjxUJ26OCSPssqd
cmZvNGUVQpVyFxNebLzThOj2UDmHqvU+4MOL61nrKFxnD0aavPFQaNvmSk/Z
drKOvMqiqA7XpeNj0hAj51XXTbEpwa91GuZxnn76afPvmP5jmtD+WqjM+ehv
lxxCXl6FtvfdhOicRx99tMc9OXvH9uNJ+sVukf4Ee+OQE+YCGNOn/aGyD45n
mcuzEXnAF7oN9mj4O8ZPvY/9DfaMrKeyzpr2g8E6Dt9gPlrOB4pJQzotWX6D
qsob7EHw7c0cRbqe458fmz3OYkhTRX6KLEj6OHdC+q74PCU+RWvE4pMEP/mC
zD/EpC02P/LkDljv5h5+OW3Yn8D8UNpfZkwcOIOI+Rz7bADRL8y7uPIxNs2c
n0P4+H/xwVVWIbJMHRT5I43s/cRvBGHRdjB/YOvHUJ0T+06eDOCvR9pL1ntt
ZDyU5V9/r732MvdIu6SH9lb8KbG3BT0jPid985B6Rnzs+BOunIdRhKvcY2WJ
dwgT2w1f6tTFIXmUVe74j+Ia5wCFUKXcxYQXG++87/ro9lA5h6r1PqCLs8Zl
+Hnl+mijjdZDj9LH5h5rC7HpL0pP2XayjrzKoqgO16XjY9IQI+dV1k3sz/L0
Pj6/0TPSf4rtP9qE9tdCZc5Hf7vk0JVXoe19N0A+Mc9DmvjhT0n8peF3CXsh
uYf/P9tvObqQMpdzCvjxb/qRYhdIueG7WJ5hDZVzKaWMJT9pPzm7HJtw+qf0
ITnjiT6LL4xH2aPNt0jTfvvtZ8IQPya0z4yvbT+tPmlIg91rkT+fKvIGWWKf
MH0H+jrYn1A2+JrlXDz0TZoq8pOzKQmDsAYNGmT8SooPXeoeZxwXwfwFceAd
1lVJG/VN6mpM2kLeKcpbkLQxP0Lbz9nr2MkRPvbDWeXvGwfme7C7ZR2IH3qf
8JjDkXEYP+SIc2PyCEkzeYs9p+whZR8HfZes/TEhZRVSRzhfT2wU5Ye/U+bK
ZA4pRucgf8z1hrzDd+x4k660r3naDzkXj7MwkAfyG13OtfQ6BnzyySeNPQ3k
G2sTnOMnNufMV+Mv1rab981D2m/Cpo6hZ/DVhhy56q1vuYfIEmswrJEiuzIH
ylgGv7c+1KmLi/LIVe5ik5/+YQePHNjnx0LVchcTXky88wjR7TFyXqXep89M
/ZO0Yp/Emi6gM4m/3OO8TzmfCF3DdxlHoXuQD1lTDG3bXOkp207W0UbahNTh
qnW8EJqGEDmvum4SF3xWSrvMWhA/0krbgE1ueq4ppv9oE9pf85W5kLLPk8Or
r766sP0MkYVugHlr+m7ILfLA35IOrnGPPiR1lOtZZcyYkHExMpg+b1jCkPDl
b0HkgfVG7BDx9cQ8kI9uzwM9zvwQ5UzciTfr564wXWlIQzr4hg9l8kYgDfh+
ZN6B+QDXnFNV+cn3GFPYvvOYswkZnyIrzBlgI5P2wSeEpC3kHZ+8td8jHOyA
Kaus/UQxceB7XLe/LfWL64TBdR+96ZtPhMc3SHNI+D5lFVJHCIP1dc5aSp8T
E6Nz+D+/kHfS3+H/WTqae9iMozNYz2PeK2+fi0A42BeQX3IeGflTZANZlIfE
gzhwH5sRn7OoIaTcQ+oPz0p+o0NC9w7XoYuL8shV7txjLZA5a/YoyI9+v6xD
2D6sqpa7mPBi4u0iRLfHyHlVet+lJ0QniB7l3/YafFXpL0pP2XayrjYSYupw
VTo+Ng0hcl5nm5AVL/oFeWPQkHyziemv+chcaNlnyWFIXoXIgpKPaz+ZEo7m
p6KUp2g8pHQn9A/wCZpl148tGOsRzGV3Gt0ab0UJoa/JufbXFBuVh2rR/FSU
8uh4qHdywAEHmDPn8+Cs7awzp9pNt8ZbUULoa3Ku/TXFRuWhWjQ/FaU8Oh7q
fWDzwR5lbPTzGDp0aMMXZKfQrfFWlBD6opxrf02xQf6RB589G0oxmp+KUh72
p1CP2LOq9A6wn2dfNn4Bsmz82WvM/uxO053dGm9FCaEvyrn21xTgHB/OlBKf
FPjtwDeG79n2SjOan4pSHvwFnXfeeQ0fpLRX+NNiD7/S/XD2o/hAwv8df+NL
cPDgwcZ3U6fO03ZrvBUlhL4i59pfU2xGjBhh5mCRi5deesn4sMF/fKj/IuX/
ovmpKOX5/vvvja/Shx56yPzwmYPfwc8//7zdUVMqgP4GvpnYo4Dvb/zfDx8+
vN3RKqRb460oIfQVOdf+mqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoSnfwzjvvJGeccUaywgorJMOGDetz31eq4cYbbzR72GNgH+Kb
b75p/v3KK68kxx9/fLLYYouZfYl9kbw6wR5N9msefvjhybzzzpu89957bYxl
NfSV+u9KZ7flQSviyxn2t912W7LTTjuZs+yV1vHRRx+Z8zQp32WXXTa57777
2h0l5f+h7aOSh8pGOT799FNzLof4CsQHSF/6vlINX3zxRTLSSCMlo446ajL1
1FMnyy23nDn/kh/99kkmmcT8uEffhuv8f+GFF04mnnhiU/abbrqpqc/9+/dv
yMOTTz7Z7qS1HFedeOCBB5I55pijce/jjz9uY0zL01vr/wknnJAMGDAgeeON
N8zfrnSWyYP0d1pBq8oMn7z9+vUz31h00UVr+YbSk7PPPjvZbrvtkmOPPdbo
bPJ/7733bne0Kqcddacs2j62BpWNvs1cc81l8vDmm2/uk99XynHaaaeZ8jv4
4IOTX375peneTz/9ZMZK3N9rr716vPv222+bOcgJJpgg+fXXX80ayLjjjmue
f/HFF1uVhI4jr05wro7ovG+++aZNsauW3lb/ZczKGoqNK50xeZD3nVbQijLj
/Ci+sfTSS9f2DeX/gz/66aabrnF2ynfffWfKl7W63kY7604ZtH2sH5WNvg1z
9eTh3Xff3Se/r5SD+VvGQnlMOumkpnz/9re/Zd5nDMWZbbTHMPvss5vnX3/9
9Vri2w246sSYY47Zq87C7m31n7k51jd++OGHpuuudMbkQd53WkEryuzOO+80
31hppZVq+4by/1lmmWWSFVdcsd3RaAntrDtl0faxXlQ2+jZyhnu77ITb/X0l
HnTGzjvvnPzxxx+5z0wxxRSmfFmHzuO1115rzMcwvuJ52VPUF3HVicknn9zc
6y1nfPeV+u9KZ7flQSviS7+Eb2Bfq9TLZ599ZvJ66623bndUlAK0fVTyUNko
zwYbbNDWtrjd31fqxWc8ZMN+wHbW6WuvvTb56quv2vJtwVUnJD97y3ior9R/
Vzq7LQ9aEd+nnnpKx0Mt4qGHHjJ5vcsuu7Q7KkriboNa0T52QhsYSjfGOYZ2
y0Zvp8q2zbVO0Irvx8ZBqY9uGg+xRsV+J/Y1tRMdD3U/aT1U13jIpe/q0oU6
HupdyF6tVo6HOqGdbkfdKaKoDaq7feyUNjCNqzzqiHPe99opt+2WDaET6q4L
7LhvvfXW5JZbbjE+f2RP5Lvvvptcd911ye23357cdNNN5v9pXG0b6+g77rij
WYfbY489ki+//DLzmfPPP9/YeeN3mX7aySefnAwePDi58MILC+Ne1Lb6xOH9
9983+/oXX3xxs5eMvRVXXHFFsvnmmyfrrbeeiVce+C3ebbfdjI+zddddNznl
lFPM++TlnnvumZx++ukm32Lz1zcNIfH57bffGs+PGDHC+EfdZpttjB3LgQce
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
U12EynjVsiFUWRZK90HZ4n8my9acthC7dcbufTU+iqIoSrXgu961/6ybcPlT
6Ctou60oSrdzwAEHZJ4vL2BPjm+tvhofRVEUpVqwFyxay+0WdDyk7baiKN0N
a37s98TeOY+hQ4c2fGz1tfgoiqIo1YDdELaD2BHKfpXeQF8fD2m7rShKt4Pt
I/sd2e+bZXfOPjH20LVqHq/T4qMoiqKUh/1A+PTGLwR7pUPP5+xk5Gy5vtou
abutKEpvgLOuxAcK/o34G7+QgwcPNj5JWj3n1WnxURRFUcrBHmXx24TfqN4A
5/xwvqWkCz/d+Oly+UXsrWi7rShKtyP+brH9xbcrfoWHDx+u8VEURVEqA99R
+NPtLYwYMcL4wGNc9NJLLxk7QM5o6Iv+prTdVhRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFUZTW8c477yRnnHFGssIKKyTDhg1rd3QU
pU/SqfWQs9I/+uijdkfDG/Zms0/78MMPT+add97kvffea3eU2grld9tttyU7
7bSTOfO+Cl555ZXk+OOPTxZbbDGzH17Jp2p57FQ9URXoGs4qJX3LLrtsct99
93m999hjjxkZX2qppZKBAwcm+++/v/FrrSihvPnmm+2OgtIGPv3002TQoEEN
/5f4OFEUpbV0aj3kzJO//OUvyT/+8Q/z9wknnJAMGDAgeeONN9ocs3weeOCB
ZI455mjk5ccff9zuKLUVfPf269fP5MWiiy5aOjzGQv3792/k75NPPllBLHsv
ZeQxXd989EQ31NE88Cu+3XbbJccee2wyySSTmDTuvffeznc4o2fzzTc3Z5ee
f/75jff43XrrrZXEq5vzVAln3333Tc4888x2R0NpE3PNNZfRHzfffHO7o6Io
fZZOqof022abbbbkoYcealyTfh3z053M119/3egTffPNN+2OTts577zzTF4s
vfTSlYTHmgdnhRLmiy++WEmYvZlYecyrby490S11NM0dd9yRTDfddI2ziL77
7juTPtY3XXBuqX0+E2PGgw8+2KwxVbU+1K15qsTxxx9/JKusskpy5JFHtjsq
ShvAjoL6fvfdd7c7KorSZ+mUevjbb7+Z+dDjjjuu6TprAaw3/PDDD22KmT9j
jjmmyUs94/3/nmNDXqy00kqVhTn77LObMF9//fXKwuzNxMhjXn1z6YluqqM2
yyyzTLLiiisGvXPFFVeYtc+6zy7t1jxV4mHeYvrpp0+uv/76dkdFaTHrr7++
0a++trqKolRPp9TDPffcM5l77rm7+tz4ySef3OSlnvP+f/tz5MXKK69cWZjY
3hGm2tr7UaU8doqeqIrPPvvMpGfrrbcOem/aaac1e9gUpQ6uvfbaZMIJJ0w+
+OCDdkdFaSEbbLBBr9KvitKNdEI9fPvtt5ORRx7ZtAXdzBRTTKHjof/HU089
FTUeQga++uqrzHv0Q3U85E+V8hirJ1zl2U6wySU9u+yyi/c7+KXgnXXWWafG
mPnRqfkaQm9Ig1BlWuabb75kk002qSQspTuosh+G7aXSflpVDp3+nW6Sx06o
h9tuu20y2WSTGZu5qsNuJb1lPFRFXseMh9grMdJII5nxcRY6HgqjjDymZcBH
T6TfKSrPdiL720LGQ5deeql5Z8cdd8x9hn1uecTUq6x3OjlffakzDa1uK6pO
y+mnn56MOuqoyfvvv19JeErn49KvrGWjc7CP2GOPPZIvv/yyxzPIymmnnZYs
vvjiZn8tNtLY9uL3Zb311ktuvPHG3G8zz7Pbbrslm266abLuuusmp5xyinn/
lltuMXY7yCP+YvEVwzV86ogdz7vvvptcd911ye23357cdNNN5v9Z+KQhJD52
X3HEiBFm7+Y222xj7BgOPPDAzPBfe+018+2NN9442XDDDc03Xn311dx4xKSB
Z/Cxwz4B8py29+STT04GDx6cXHjhhU3P+sY7izLlDb/++mty+eWXJ7vvvrvJ
D3yjZu0Njv1OXflQt6wW9XOKZCAk3VmwF3mMMcYwYyJXnl522WWFYdmUkbVY
pP/51ltvmTxbc801jS9efPK62jZXXD/88EOTr5Qxe3IoZ8pSyviuu+4y1+Qe
fwu+Mg9l6hf9j6uuuirZddddzXc222yz5JBDDgkaDw0dOrSx/5+0DB8+3Pzs
sY89HiLPTjrpJKPXfOp/FfLw008/Jeeee64pT9JI/cvyJ1ZUZyg7xoviD5t5
ZXzo4eNso402MvHEx3Uevm1LqDy66luensh7J688H3zwwWh5dhEi6/g8wCcC
cUMWJG4uH/957/B79tlnk3POOSdZddVVjT62ialXrnLwqSdQhbwXyRl7yWLa
Hd80hJQp9YV2Z+GFFzb/ph0ibPy2IbuMf2WsyneGDBliygt7ySeeeCIq/SFp
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
lZHt3HPPnUw33XTJL37xCxPndLHFFkvWXnvt5E9/+lOnk+jN6aefngwcODAZ
N26c929oJwYMGNCK5/P000/XmML2ESKLuumkrIlPveiii7be/fHHH7ft3Wma
VDahcmlSHiLNoUn1rBshNuYMM8xgZMdZx1XQV9s4DZ9++mkyaNCglgyIvxPp
H/SVtopYk7vvvrs5f5BzadHjgw8+uNPJ6pNw/tu0005rZLzCCiuYc066DWmH
mQPSwJwm5z3w25dffrmm1LWXUFnUTSdlzZlu0h5y1mGnaFrZhMilaXmINIem
1LNu5eKLLzayW2211Sp7Zl9s40JYfPHFjQzuuOOOTicl0ib6Qlt17733mjUL
OXPgu+++MzrMenKkHpZYYgmjNzvuuGOnkxIE817Mr4WcE7nIIouYvL/xxhs1
pKz9lJFF3XRS1pNPPnnHz3hsYtlo5dLEPESaQxPqWbdCrG1kt84661T63L7W
xoWADyIyuP/++zudlEib6Att1eqrr278tSLtY9lllzW2Yrfddut0UtoOvgnk
/c033+x0Uvo8nZT1rLPOat4dz2vtSZRLpEqiPoVD/w3ZrbvuupU+N7ZxSbLV
VlsZGcR9F5Fu4bPPPjM6u+uuu3Y6Kf2K5Zdf3sh9zz337HRSauGmm25Kvvrq
K+c99pl2W1uRl59O01RZzzbbbLGf5qAb5NJkfY/0pBv0qak888wzweOhptpd
aEL93XrrreN4qA/SBN2qi8cee8zo7L777tvppPQrVlxxRSP3ffbZJ/d7ndxb
5PNu13fwHZ1gggmSt99+2/mbMm1FJ+RRlB+hiWmL46H/o0l79ELl0q48+Op7
O2ln+bXrXVW9p131rEl1CKpIT+h4qMl2tyn1t0njoabpbrupKv+d6gu1q/xk
P2Ed46H+roN5iL10yf39999PzjnnnGSllVYy+zHxC7/mmmvMXqMtt9wyue22
24LeyVrgXnvtZdbyDzjggOTLL790fueSSy4x/tS8hzb2zDPPTIYOHZpcdtll
vb5DzDybUaNGtfb34pv9yiuvmI/dLthtxfjx45Mzzjgj2WabbTLzRuxO0kDs
Cf5Pmnj2oYceamwuOsweVuCZI0eOTDbYYAOz5jlmzJhMefBu4ikOHz7crO0f
eeSRvWRSlJ88WcDf//735KKLLjIxXXfYYYfkwAMPTO66667MNGmoQ9Ya2RQh
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
b5nxkOy7yxsPZe1FXGaZZdR5Ex/MKvoQ1BF8PbXzbVn5ScuCtVr+Zj23XeOh
qmStlU0ePv00e785aPSUfQH4DQwYMKBlq9L7JusqG/LE+IJnERfIBXs9uZ/2
z9bKJas++paVNs9FOuUj9zyqtEVV6muIzQ0ZD1Vpy0CrT1qZ+bQH7dQJbTlJ
DItx48b1+n7Z8VAT7W5W2kJsVhk7t9FGG2XqTRl9aZr9qKstuPHGG829hRZa
KDi9PnVXI09tXwjKyCfEJpfRrazxUJk8xPFQMWIvifXkQvSuivEQ7cD8889v
1lOFsv5yrAkWjYfYO+ZC1jRD+h1V+ctx/d57783MnyY/LlkQl4RrWWurVVG1
rLWyyUNsPX69acSPx/Yn0uqpDf0+4gIsvfTSPa7XWTayDyS9F1Y46aSTzH1i
ftpo5ZLnL+dbVpo8F+mUTZbcs6jaFlWpryE2l9hFXE+fT5g3HqrSloFWn7Qy
07bndeuEtpyIacE1V3zesuOhJtrdvLSF2KxQO0d8Qx+90ehLU+1H2bYgb31o
vfXWC05vUf5D656mLwSh8inbD9baojx/udA8xPFQMSJb9ru6IE5G1pyWdjwk
Y2w7/lDZ8RD7hPnOgw8+2Oseuse95557zvlbYjRq80ZMlaw5L67jh5smqw/B
fjiusy5MfPg0xL60fWqL8uOShexJJEaky9ZxTonEISH2Medg4H+qnaeqWtZa
2eQhtp68phFfCnsfv6+eEoeLuKRpmGNIrzeVLZs8zj//fPMcfLZdyLs5q8ZG
K5es+qgpK02es3RKI/csqrZFVepriM0Vfw5kYyPxD1zjoSptGWj1SSuzvDLo
hE5oy4n8cM0VR5/YxdxjblxDk+1uXtpCbFaonZM4ZbbtLasvTbUfZdsCVzyF
nXbaydxjXBSa3qL8a+UZ0heCUPlo6noVtihvPBSahzgeygeflV/+8pe581LS
Zj755JO97s0444zmnu95YfIsifnBGRlir4n5iq7Z/fAhQ4aYe6zXZrHccsuZ
7zD+TiPxNIhpL9jzCSF5Y43Y1e8gRjDXJ5lkkl5jCfSSe5w7YUO/Q3xk8UFl
HPLss8+acT9pT8dmLMqPSxbs2RBbRz1h3yJnYfI7bBpnhUj/8+ijjzbf48NZ
XRqqlrVWNnmwts9ziI1pg48v5ZmOZeqrp1zHFtrpxibiW23LAcqWTR6sy1NX
iM+Tttecz0bsHs6XKSuXLHuqKStNnrN0SiP3LKq2RVXqa4hdOuigg8x13iPy
QyYSiwhfdnzP5cwbqNKWgVaftDLLK4NO6IS2nNB9zhPB3yUd94rziPg+6zmU
ky9Ntrt5aQuxWaF2zmV7y+pLU+1HqIzEJj/++OM9rnO2DXHyOdfG9nGusu6C
Vp4hfaEy8tHUoyps0dlnn22eSTzWNKF58OlP90eQB2c2SR2QD+uVrDNy5gSx
QeWMXD7EXeBsPuAMQPwe5B7xGH1imJ944onm+7x30KBBJmajxCBF96UPztia
+UTil8gcBO0F503ZeaDOybkbrHPZ8SCBuQbaH+7jp8N30McbbrjBzJdq8oae
MXcn11kvZl0SiBVPfuQeZ2TJmR7Mk/Be+gPEZCTGkD13QNtn54MP/6fvQMx4
3/zkyYKzucRnQD6khbTZc/Schyb36ZdqqFLWIbLJQ3SNOSX6jTfffLPx36Hv
wdlz6Wf56ilgC9mHwTX8dilffJeJwwlFeupbNkXQB2a/JnnCluKTg5yJ+cm5
nNjQsnKRNsg1v6QpK988Z+kU7WKR3Iuo0haFyMBFGZv7ySeftPYDITPmIrff
fntTjlxjrWfzzTc3Pud12TKtPvnKzLcM2qUTZcqJtTNiHJBH7OJhhx1mfNUl
JhRjJebK03F6s2iy3c2rvxBiszS/oW+N34tte0eMGNHq15fRlybajxAZCdIX
pLzwEWHfC/Ma9AnRT5dMqqy7mjYXQvtCWvmE1vVQ3aJucO6qxGhgzyFzWpxF
EZoHjQ72Rzjvl3lCdFZsA//SF8H3mzLh/3yQO7LlN9JX4RrrqvxGvutbX8eO
HWvs1BdffNG6xhnAtp7Yz5d3k157foBrfEfSx7+u/iPpYg4afwR5Z/q3PnnL
+w33+T/fFznaZyr7wBw58yvUMdcZ25r8ZMmC77N+/Mgjj2S2t5ydOGzYMO95
DG3aQvTIVzZZ2HrD3A0+zzzPtc9B8NFT+OCDD5IxY8aYtOGblN6/UWXZ+IAs
STvzdOQ1z+9RKxfxyXadjydoysonzy6dgiK5+1CVLUoTqq9lbS7X8B9BVnKm
LWlJ+6/VZctC6pmQJzPfMmiXTlTRNjJ+Za2Nfp3ImXplr9/50lS7m5W2NBqb
pfmN5NO2vbY/WFl9aZr9SKORq4yH8H1jbyfnmLJu7KOPVdRd8G1zhTJ9IV/5
hNb1MrrFM3kP7+PZ/J3Vv9bUA40ORiKR/4Pz011nBkb6N8xxERtO488TiUQi
kWaTF08hEolE+iPMabAm7LNvJdK/YJ0dn6tIJBKJ9B3ieCgSiUT+A7EkiVPl
Gz8o0n9gXy1naWadfxeJRCKR7iSOhyKRSOQ/vPrqq957jyP9B/yM119//eSW
W27pdFIikUgkUjHEkGM85LPXLxKJRCKR/gZ7MInRRIycSCQSifQdXnzxRXMG
qsRII74zMdHs2NqRSCQSifR3iB2UF08uEolEIt3J+PHjzZ5hxkX4hxCfkjN2
YuyxSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQ6zzvvvJOcd955yZAhQ5Jrr72208lpLH/+85+T0047zZwrxD7JSL1E
eXcX//jHP5K777472XvvvZNf//rXnU5Ov6Eb6kk3pLGb+Oijj5IjjjjCtNlr
rLFG8tBDD3U6SZF+TDfWb+JcEPPi+OOPT5Zaaqnkvffe63SSIv/L6aefngwc
ODAZN25c29/96aefJoMGDWrFiPyv//qv2t7VyXyWhfo+YMCAlpyefvrpTiep
TxPl3X2ceOKJyQwzzGDK61e/+lWnk1MpxEin7zn33HMn0003nTlPl3NGFlts
sWTttdfuWNzAbqgn3ZDGbuIPf/hDsvvuuye///3vk5lmmsnI9OCDD+50siIF
dHP/J49urd+PPPJIsuiii7bSHc9HbwZSJqzRdIrFF1/cpOGOO+6o7R1NyGcZ
mE+YeuqpTR5efvnlTienzxPl3X1cfPHFprxWW221TielFv72t78l0047rcnj
CiuskPz73//udJK6op50Qxq7gXvvvdeMyeVMm++++8602azNRppNt/d/8ujW
+v3111+3xkPffPNNp5MT+V8YTzO3+te//rVjacC/BZ24//77a3tHE/JZlkUW
WcTI6Y033uh0UvoFUd7dxX//93+b8lpnnXU6nZTaWGKJJUwed9xxx04npUU3
1JNuSGPTWX311c16ZKT76Av9nzy6tX5PPvnkJt3//Oc/O52USEPYaqutjE5E
P+R88ANCTm+++Wank9Iv6Ovy/vDDD5N99tmn08moDNp8ymvdddftdFJqY9ll
lzV53G233TqdlBbdUE+6IY1N5rPPPjPy23XXXTudlEikF91av2eddVaT7v/5
n//pdFIiDWHrrbeuZDx00003JV999VVFqeoMeXlgv2A31vlupa/L+4UXXkhW
XXXVTiejMp555pk+Px5afvnlTR733HPPtr63G+xSN6SxW3nssceM/Pbdd99O
J6XPUVW/pS/0f/Loi/V7ttlm6zfjoU75d4e8t5O+6FWMh/CLnWCCCZK33347
93t5+ey0P35RHtpV5zsth6bQrTbWl6aMh6rSt7LjoQcffDC57rrrCr/Hvon9
998/6B1lWXHFFU0ei9b1qqzDTbFLeXRDGvNous2VvXlNHw81XY5pfPstVT2n
avm0S97dXr+z6OvjIeJHn3nmmWa/K/8nn/i1H3rooabfj11h/xdQdiNHjkw2
2GADsw49ZsyYzOeyXr3XXnuZdcEDDjgg+fLLL3vcf//995NzzjknWWmllcye
MvwRr7nmGuNnvuWWWya33Xab85mXXHKJ8bcnhpHAfkn6FhILkDE5cTyIKbPt
ttuaWJvkzYa9P3fddVdy5513mjhxsufy3XffTW6++ebknnvuSW6//Xbzb5q8
8VBRvmHUqFGtfWnI+pVXXjEfqRtZ+QyVm0CMxBEjRiTbb799ssUWWyRnnXWW
+T0yOPDAA5Nzzz03+emnnzJ/r8kD2HV+/PjxyRlnnJFss802henku5TZ8OHD
jW/ikUce2UuOdeltGcaOHWvKfNiwYSafyPr1118398roG/z9739PLrroIhOf
eYcddjDlxfNsQuXtg49eF8mgLHWOh+qwVza0w9dff32y3377GdlQhsccc0yp
8RB2jv056EUWjIWoI/jidwLRSVe/tKxMXdRpl8DHNnVTGn/88cfk6quvNuNl
9PLwww/PjBNkt0ukAZuLDR46dKiJH8w1YsiTJ2wT9kzs3H333WeuyT3+1qBJ
57/+9a/kN7/5jZEf+Rf5Endbg4/NDUlflW1XO/s+PnoLRba0TP8nRN512Jk8
Ot030qCRI8h46K233jJlvMkmmySDBw82dQQ5dzNPPPFEMtVUU7XK7ne/+52p
c/SLjzvuuGTOOec015H9sccea2wC99Ajxr6TTjqpM14guky7j22k380ziMkm
fe3nn3++FXeIzymnnJKsueaayXbbbdfSEz52XUAPxHcxHev64Ycf7hEL8JBD
DklOPvlkY3PJ0xRTTGHex/cE6jp1VX7z/fffm+vYDmJ0rrLKKub6vPPO2yt/
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
PuMhOw4HbVzW+pDWl6NdSL2oom7S7hNbxj7vomjNVKOjrN+FjIdkjmS99dbr
cZ34V1xPn5uVZxMkFpudBk2+7byzJ9VFXj5D5IadZ38ka0T45hLvCluFj00o
RXkQ/ynfdNLX5VrazyKLKvW2arAN+NAvvfTSPa5r9Y24SFzPWte20crbB61e
22TJIJQ6xkN12yvqHNddMVSrGg9JrEjGQgLrUegDPoSdRNp91vZchMi0iKrt
EmhtU9PTKPtX0vvvBWLBcZ9xjI3v2Xuy/4N+FXGciUcVQmg6y/jLaWxuaPqq
brva1ffJ09sQW6rt/4TKuw47k0en+0ZFhMpR9Iz9wmnEX87lZ9lNELfCNZaV
uolvapqsuinjcDv+RFadYC9A1txplo6yzsF1ziJMk7fXa6eddjL30md1yDoq
6/k2snfRZRMkZoqdBk2+gT4i9/CvdJGXT63c8NMkxil5qpKiPBDPTpNO9vZx
jTV21ziNWKK2f3KVekufkvNg8JvVzsGgO67zNOgLpuNna/VN9qMSI9TV1tHX
ED9crbx98NVrjQxCqWM8VLe9Qme5no7RC8RP5R5zqaFI7ATXvljGRMTitePO
pWE9j/i87DGQuMJVIu0ue21dhMi0iKrtEmhtU9PTyDiZ77LvwIW0P8zj2viO
hzjfge8NGTLExLl+8sknc7+fRWg6y4yHNDY3NH1Vtl3Qrr5Pnt5qbGlo/ydU
3lo7U6Y/AJ3uGxURKkfRM+pAGtlH4opD0k2wDueqF8SU5Pokk0zSSyeQE/dY
Z7CRei5xQYhpL2VPbEnKX54l33XZyhlnnNHcS8d/Zu8/15l7TiNl9fjjj/e4
Tmx14gASAzS9Bn7QQQeZ32DnxcahhxJ/g74G/pb2vgRXGjT5Bpk/I1a/YM8l
5OVTK7dbb73VXCMWf5UU5UGbTtoC8TfGhxZb9Oyzz5o5DN6Vjttcpd4effTR
5jofzsrTQFljw+y8oEP4/NqyAa2+0d8VvcZGsWcVfxTkjI1k3lWeE1KfivDV
a40MQqljPFS3vaL88EnFPyEdK4nziPgNc4WUuRb8XNAXYrRmwZgI35ysMRFz
4KF6XwS29pe//KV5dtYaWB06W7VdAq1tanoaGQczViEeWLpPxliGWGGci5OG
3/B8fLDywBeGdLI+nLa1GkLTefbZZ5t0EitOi8bmhqavyrYL2tX3ydNbjS0N
7f+Eyltbn8r0B3zyV3ffqIhQOeK3RxrSbQ57h9FpbdzvJkG+mZuUcqevwToZ
EL9/0KBBrXuc2SSx8hmLMu9H/okLSAwlmRvmHHS+T/3k98QJlJiz1A10i78l
Bg0f9txy9hhwVhjrbXKPWJHsk8b+UuYSM5/3Z8WPpP/B2J59DJQba7j4a6Tj
fwK+9uLLy++Yz2YfKHOmMk9DnGr8LKnnzHPaaRgxYoSxMz75tmEOhfdxn/V5
nkXdueGGGzLzGSI3EP/h9AcfaeaP7XMiNeTlgbklbToB+2vnnw//p56Jv2kd
ess5cvKbEN8ObBh6RDnjI8Kz8YFO65xG3wTORRMfTfmQfvKDnaR8Q+VdhEav
fWUQSh3jobrslQ1zaeyfRY8pp8MOO8zYI4nhw1iJudV0nPIieLfPHiHmE9N+
DwK+MrTN6FPoHH4a9BG/XLHH8sEO4wdDfJeyMs2jDrsEPrapm9JIH5h4J4zH
GT/g08m7iFnCuZz0mQTsJPO/xLjimfTNaDeok1nIeN8+lzUETTrpb7MeJXvS
2cNE/5442RqKbG5o+upou6Duvo+QpbfIXdNWhPR/QuQdamfK9gc61TfSoJGj
IOXK+hfj6Ztvvtn4yfEM9Kape4J84Mxg1leRC3nnb6nr5Iv/o+f09/l/+jz6
LMaOHWvGDl988UXrGmsTUid5Fh/Xe7lGmngn7+Y6aUmnlX/TdklsAu0/856c
5cX8S1Ffn+ewron/ipyzxnxQek1Q0manwV6fLsp3GvLF3BPvld/k5TNEbvLM
kSNHmrkA9jPIB1so81ShMeZ88uCbThvkz/wHNiJ9TnJdektciWHDhgWtZ3zw
wQfJmDFjTHrxN0j7ZNv46lsa5Iv/AGen233nKuSdh69ea2QQQl3xFOqwVy7o
fzDHS1spuokPTJmYeFVAejVnZBaBfMgTz5U5ackvfucipypkmpenOuwS5Nmm
bkwjz6MOMNfMnL7LP8h+t6SLMs7zJWJczB6VqmJQ+KQTSCfpI538hr9D+2lZ
Njc0fXW1XXX3fWxceito+kDa/k8aH3mXsTNl+gO++au6bxSCb70C+x7fZT8T
aXHtJ4p0lrw9hf0Z9H348OFO/1LWx5mvYnwfSZLBgwc7z86MdB7a6Kx9KJFI
pFkQ3yNv71qkOmLfpx5ifyDSrUSb4OaII45IRo8enXn/yiuvTFZaaaU2pqiZ
sLbB+nVTzwmLRCKRbgFfqzhv3B5i36d6Yn8g0s1Em9Ab1mTZT4k/cRajRo0y
Zwb0Z4h7SbwdTYyWSCQSifwHfMrwu8IHK73vI1Ifse9TLbE/EOl26PdjE+Kc
1H/Af5i4CeyVdPmasieD/Yb9XWavvvpqZfv+I5FIpL/B/sGpp57axAdhT3bo
Od8RPbHvUy2xPxDpVl588UVzBpjE3CDGJrFMis6X7i8QW0ri4xDnir+JmTJ0
6FATEybOKUUikUikDOyrljaY+FSR+ol9n0gkYjN+/Hjj64ltYFzPWj2xY6uK
a9PtYBuJ+cIeImL8cjYaMW8jkUgkEqkKYlQRtzfSHmLfJxKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSNN55513kvPO
Oy8ZMmRIcu2113Y6OZGG8o9//CO5++67k7333jv59a9/Xcs7/vznPyennXaa
OXeBPbmRvl0/25W3duhuJNKN/OlPfzL1YvDgwcmqq66aHH744eaMjLrJqvtN
snfRbvhTh6w++uij5IgjjjC6sMYaayQPPfRQJc9tOqeffnoycODAZNy4cZ1O
Sr/i008/TQYNGtSKlUnct0jEBXHRZ5hhBqMnnJldNYyFBgwY0NLFp59+uvJ3
dBvtrJ/ttsHtzFvduhvpTWzTO4eP7DknaMcddzTnoF9yySXJTDPN1KqLd911
V63py6r7TeuPtNNudHt9qVpWxMvffffdk9///vct3Tz44IMrSGnzWXTRRU1+
mReItJ/FF1/cyP+OO+7odFIiDebiiy82erLaaqvV8nxitHKeIu94+eWXa3lH
N9KO+tkpG9wu21O37kZ6Etv0zuEje85At89oYixy9NFHm/n4dqwPQVbdb1J/
pF12oy/Ul6pkde+99yZzzz136wyr7777zugCa1D9AeaCGV/G83g7A+ub6PH9
99/f6aREGgxne6An66yzTm3vWGSRRcw73njjjdre0W20o352yga3y/a0Q3cj
/yG26Z2jSPbXXHONmcvv9DnoWXW/Sf2RdtmNvlBfqpLV6quvnqy99toVpSoS
0bHVVlsZPe4v/pmRMLDZ6Mm6665b2ztYa+cdb775Zm3v6Db6cv1sV97aobuR
SDcw11xzmT2anSar7jfJ3kW74U8Vsvrss8/MM3bdddcKUxYp4qabbkq++uqr
TiejEWy99daNsT+R5vLMM89U0jbk1T3a6SaNh5pgJ/py/WxX3qrS3ch/aELd
iOh47733TD3YfPPNO52UzLrfJHsX7YY/VcjqscceM8/Yd999K0xZd/Lvf/+7
Le/BR3OCCSZI3n777ba8T0O7ZGBTpf3pRPojxVRRLlXYu6K616TxUFPsRDv7
B1l6Ule9juOh9lNFWfrWjar1JrYv/rhkdeWVV5p6sNdee2X+jn2c7SCOh3pT
pX63u65UISvZg1THeKgbbAfrY8Q3wefwqquu6nV//PjxZo/f8OHDzTrqkUce
mXz55ZfOZ/39739PLrroIhPzb4cddkgOPPDAXrFSRo0a1Ypfgr/jK6+8Yj52
/2vs2LHJAQcckAwbNizZZpttkhEjRiSvv/56qTxif/AF4rnp9NsyuO2224xf
75lnnpkMHTo0ueyyy4Ll4Uue/SlKO7z//vvJOeeck6y00kpmHzyxa/BRJn7N
lltuafKUBfNVyHf77bdPtthii+Sss84yv7/zzjtN+Z177rnJPffcY8qRa8Sc
kX127777bnLzzTeb+7fffrv514VPHjTp+emnn1rf9y2PdusUlCkXbMf111+f
7LfffibN1KdjjjmmlL3zqXv2eAjZnnHGGUZeRemtul74pBV+/PHH5Oqrr072
339/Iyfi1RbtA9b+Jqt+VqVTWTa4jP6Ajz125Y19A2Xqe4ju1mFXfcuZ/NGX
OP7445OlllrKrLkQb5HYSttuu61JF3GIs/BJu6aNKbItRXWjqE3XyAZC9bBK
m5v3rHaUn1BUp/JkT5wE4ihQbrxHyo3P888/n1x44YXJBhtsYNq4kHfbafBp
b33HQx9++KEpY+I5o2+8k/ovduG+++4z1+Qef4dQl90o0kOf+uLbLylrs311
sY7+QZZ+EnfbRmM7NHav0yD7WWedNTO+4sMPP5wssMACxtYAciAfc8wxRy8Z
PfLII8k888yT7LLLLsm3335rrhFLkudSVoB/4/LLL2/mtbhOHBP2b/M7rgP1
iTSJvr722mvJggsuaPQiBMoCnaEuo8fyXulTu2SALk866aTm7wknnDD54Ycf
1PLQkGWXitIO2NFpp522lf5TTjklWXPNNZPtttuu1bfl46rn6PAUU0xhYk0C
5UY5TDbZZKa+s6eO36Lv2BN51vfff2++TxtDjJxVVlnFXJ933nnV8g9JD34i
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
PWl9kdgv6V/gx7f++utXticu0h3gw4l/JPujXf6p7HdjX2C75n+alp5IJNL/
oO9Dfzrame4kll99sA9n6qmnNnv12TvvOoe0rxH7Jf0H/CKJJULMjUj/gzOz
JEYNsUr4m7idQ4cONXFq2j3H1rT0RCKR/sGLL75ozrCUmE7EmiUelSuuVqR5
xPKrH/b3i3zT8cD7MrFf0j8ghkVWPLlI34e2gjg0+MYSp5Hz2oj9GdMTiUT6
E+PHjzcxqOhXv/rqq8YfiLNDmh4HKfJ/xPJrD8QSI75yfyL2SyKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE+jecxXveeeclQ4YMSa699tpO
J6eR/PnPf05OO+205P/9v/9n/Lj7G8Tp9Lme9b2mwHlzd999d7L33nubc+eq
hL2LPHfw4MHJqquumhx++OHB52p3kv6u65FIEbHNjGSRpxt16k2dbVtsEyLt
4vTTT08GDhyYjBs3ru3v/vTTT5NBgwa14qywt64uOpnPMmALBgwY0JLR008/
3ekktRX28K677rrJ4osvbuK/crYX/1KWG220UY/v7rnnnsmvfvUrE8eU7003
3XQmlulqq62W3H///a3vsaeTeDbE/Zx++unNZ84550w22GCDWuPbED9nhhlm
MOVIOquA2KQ77rijObPhkksuSWaaaaaWrtx1112VvKNd9Hdd78t0q/1tGu1s
MyPdRZ5u1K03dbRtENuESDtZdNFFjZ4xb9Ap6OuShjvuuKO2dzQhn6EwJqCP
T/pffvnlTienI7D2w7nVyGDSSSfNjf26++67t+xnkU4tssgiZj2F+JDt4OKL
LzbpYoxWBZzXYMdrpd07+uijzTng3bg+FHW9b9LN9reJtKPNjHQnebpRp95U
3bYJsU2ItAvG24zt//rXv3YsDayvouv2HH7VNCGfZaDfjozeeOONTielY5xz
zjmtcQ5nt2VBjFj5HvPSWWBnWUd67bXX6kiuE2Kskq511lmn9LOuueYaMyfX
185siLre9+h2+9s02tFmRrqTPN2oU2+qbNvSxDYh0l/YaqutjK4/9NBDnU5K
Y2ENGhm9+eabnU5Kx3j33Xe9xjmsJeEDx/fwi8uC8zXWXnvtOpKaCf1C0oUP
YFnwBcSnuq8RdT0SySe2mZEs8nSjTr2psm1LE9uESH9h6623rqSO3nTTTclX
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
hzEscyhpmUq8EcogjfSP07YfJI79UUcd1eM6eXPZPuyItL9p0nVUm2+QefGs
+pSXT63cmGfi++m97MwTyhyHlqL0Z/nP5pUt83MyL8bv5HPBBReY66z52lSl
t3UjfUL0w84zZWvrI3ora0n4hgh858Ybb+zxTK2s8mBdht/gU5Mmy8da+358
W7LGQ7Sf3EvnEbS6XqVchDp0Xeo3/jcuNPmoMs8777yz+Q39MRf4e3CfeWwb
re3VpjlPXu20v6Hy0egxflN8l3iMf/vb33p8n/UrX9qRVl9c/dp29BdC2j5N
n0CbB216fOtJVTqTB/6vrj4+XHHFFeZ6SF3Ujoc0tiOkbfOhCf2fLJjzxW7x
LllHZ96I9RzXWR30l1jz5HuUE7CuTBr5vcwJsU4r457f/va3rd9zX67/8Y9/
9Epjk8kqW/y0s/qVMmZN9yvxR5Qxp0AfyFUX8vaccc4K95gXssmrO+Ln4Drf
hHVB7qXnNkQPsmwf639pXGnQ5BuK6lNePrVyu/TSS8011mxtZFxvj/99CbUH
WWkEzhnFZwDfVNcHXwZ7jqdKva0T0if2wt67xNwN61w2Uu6yHoTNpHzSfgZa
WeUhfgNp/YWsNkP7/rzxEOv63MNHP41Wj6qUi1CHrhftp9Dko8o8zz777CZd
+KS6oO/MffZ72WhtrzbNRfJql/0NlY9WRyQuJb4p7JEKObOrXWn1IUuedfcX
Qto+bZ9AkwdtejT1pAqdyUP8oIrGV9q6qB0PaWQS0rb50IT+TxZffPGF+Re/
Gel3MF61xzA2tk8dMmGtknWqZZZZxoyLBBmX8cHvTmA9S67b5cQYFN8Y1wf/
XdfcWROoq1/J75HJwgsvrLZvUvc0/QiZ13HZAfb/ufJSZPsouzQyr5bVNhfl
G+oaD7nkhs8Y1/AXt2G/HdeZn9dSlH7Wg7Vlyxose3/KpqFp4yHAtvBe5oCA
tfr0ujgwJuB7zMswz8ecG/M9abSyykPOPsKnOk1Wm6F9fx3jIZceVSkXoQ5d
L+rfa/JRVZ5tv7esuEjsSeZ++n1a26tNsybOVF32t4x8tHrMPC5+/PI+/N6w
F77j2nam1YeiNhPq6C+EtH0hfQLfPGjTo6knZXUmD+bteObEE0+sWhv0qYt5
uuG6p5FJSNvmQxP6P0XgT8x7GCfj+yb+bTZyxjvfY90K33XaaFfMKXtv3Sef
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
Jphggla8VVdc/Uh7oQ3jzGDixhP3KaKDuKczzDCD0WfO8e7L0E8ZMGBAq/7G
8wO6k/6ks93E6aefngwcODAZN25cp5Oi5g9/+EOy++67m3PpaefRrYMPPlj9
nGhj/CGOMW23yIr4c/0xDZFIN/Lggw+26s3yyy/f6eRE/pfDDjusVSabbrpp
p5PTlVx88cVGfquttlqnk1I7xMqceuqpTX5ffvnlTicnEkh/0tluYdFFFzVl
wlx7N3Hvvfcmc889d+scqe+++y654447zDpkCNHG6Fh88cWNrJB5f05DJNJN
nH322a2+96hRozqdnMj/cvXVV7fK5Mgjj+x0croSYuojv3XWWafTSWkLiyyy
iMkvZ6xFupP+prPdAGshrN399a9/7XRSVKy++urJ2muvXekzo43xB59XZHX/
/ff36zREIt0EPsXS9452rj3861//Sj744APzYe+WC854w58xnpMVBv0YdHrd
ddftdFLaAj5W5PfNN9/sdFIigfQ3nY3Uw2effWb0aNddd630udHG+LPVVlsZ
WYXu1+oraYhEuoWvv/46mWiiiUydYe6n22BvzRZbbJEMHTo0ue+++zqdHG+2
2247I3P2bX3yySedTk6fhNggfa1vyfnSX331lfMe+5z7Sl8lL5+doF3p6Ys6
2w00Td/K8thjjxk92nfffdW/7S82pm623nrrjo9FmpCGSKRbuOKKK1prQ4cf
frj3737++WezZ++HH36oMXXFHHvssa30P/roox1NS5osGf3P//xPMs0008R9
0zn8+9//Lv2Mvta3ZP8C4+e3337beb+dfZUqyieLony2m3amp8k6W2eZ10lR
un3Lt5vyL/vQtOOhJtkYF91UBlWPRULyXmUaukn2kf7N448/btZI5p133mTK
KadMpptuOhOjTKB9XXLJJU28Mjue9sYbb9waTzz//PPOZ9OvP+ecc0zffY45
5jBrsLK+8ctf/rK1XxNbutxyyyXTTz+9+dxwww3mOjFkl112WfN56qmnCvPy
/fffm7EZ61VzzTVXstZaaxm/ehcbbLCBScfEE0+cPPfcc2avzeDBg02+svLD
vtIzzzwzWW+99ZKVVlop2W+//XrIKiQfPjJ69dVXTX/npJNOasl8++23N9de
eOGF1rPwk9thhx2SeeaZJzn55JOD5EM8oJ133tmkFX0gPfDFF1+Yd84yyyzm
+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
lyLFXYu7FqfF4cPdXxyKe4EXKdqiP1rcmf+65//XfufkJHsn2dl29nNfV672
JNnJZDJJ1jOz1hp755FPLA/kkWHeQjsOeZjJhxTNrV0Pmqksov1gDkbaHbm+
yPHI3+RKxb4gZ5nGK6un2eq42cojRDWQy4SceGh58rAx1yz/Z52+o0KIrgw5
xciznBfmhMbXGC3CGC9+d+R9zZOjrlqaqSyi/cBeICcZ8STkt2fejbg5OkR+
mq2Om608QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhOh6/PPP
P+6hhx5yhxxyiBswYIDbeuut3SmnnOLuvfde99dff6U+zgcffOAuvPBCt88+
+7jNN9/cHXzwwe7qq692v/32Ww1LL4QQQgghhOiqvP3222788cdPXL744ouq
jv/KK6+4RRZZxP3P//xP7LLwwgu7hx9+uOwxfv75Z6+lunXrFnuMOeec091z
zz1VlVMIIYQQomi+//5799Zbb7X88umnnza6KoWoGeihJK3CUo0eev75590k
k0xS9vi2DB06NPE4/fv3r/j7iSee2L3++uu5y2p88sknDX/naNGiRYuWrrHI
f6Fx4JvSDPzv//5vKjuo2Zetttqq0VUpRM2olR76448/XM+ePVM/Z+ONN54f
S4oyfPjw1MdYbbXVqq0Ot9lmmzX8naNFixYtWrrG8p///Kfq75LIx99//93o
InjOP/983xauu+46d99997XsMnLkyEZXpRA145133nETTTSRX9Ak0Xd5Xj10
7bXXdjrWNNNM4+N/eCfMP//8nbYzDhSld+/eHfbh72eeecY9++yzbskll+yw
bdJJJ636/Ycma/Q7R4sWLVq0dI3lxx9/rOqbJPLTLHrIxof+z//5P40uSttB
3/yvv/6a+/f4OjYTjHlmfac02zW0AnvssUdhemivvfbqdKzLLrustP3DDz/0
8Unh9qmnnrrDMb766is37rjjdtgHHzyDuKPoOUaPHp3v4oUQQgjRZZAeai6I
RzjwwAPdAQccELscdNBBfiwN2+6nn35KPM5RRx2VeIxw2X///b3fEPm8jBdf
fDHVb1nI3dWrV6/Sb9Eihx9+eGn78ccf36lsxH6ExyAPWFJdcL22Xzj2Vu48
Y8eOdUsssUTqa9hzzz3dzjvvnOkaojAGce655/pjDRw40A0ZMsTnMvv6668r
/raI+mgEReqhFVZYodOxaIchc889d6d9Qh3P8/Dqq692WP7888/S9rvvvrvD
byebbLKmef8JIYQQonE0iz0gPfRf/vWvf6XyM51lllncNddcE3sM7OYsPquh
HoIFFlgg9W/ptw8555xzStvwg4oybNiwDr/HHyoJci2zz5RTTtlpW9J50ENZ
fXa32267TNdgkKds+eWXTzwuPlloxnJ5Noqqj3pTpB56+eWXvU9buPzwww+l
7WjUKaaYosO58NlLw7fffusef/zxTm26b9++ucoqhBBCiK6F9FDzseGGG5Zs
tiOOOMIdffTRfmHMBxt0vfXWcxNOOGFpn0MPPbTTMfidbR80aFDpGNGFY3K8
qB5abLHF/G/J95X0WxbOs+iii3b47UUXXVQ6980339ypbFdccUUnuzYph/JO
O+3k95l22mk7bUs6D3qIsQRyW9iy6aablvbt0aNHh23ExO+www6ZrgGieoB6
QFcx5rbBBhu47t27l7ZR/ueeey72OEXVR70pUg9V4pFHHul0rmi7S2Ldddft
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
uimmmMJNPfXU/t9evXr5d/xDDz3U6CJm5vDDD3fbbrtto4tRkeOPP951797d
t8Flllkm8+8feOABb88lLffdd5/7z3/+43799ddUx3vkkUfcfPPN58vD8skn
n2QuU1Y+++wzt9JKK5XOef3119f8nKIY0M99+/Z1CyywgJt88sn9u4N/e/fu
7dZff/0O++66666+jU822WR+vymnnNLNNttsbpVVVnH//ve/S/v99ddfbtNN
N3WLLrqom2qqqfwy66yzunXWWcf99ttvhZa/2ucvDr5tvHuOPfZYN3z4cDft
tNOW2vZdd91VyDlqCVpoiSWWKJX5mWeeaXSRmha9u5qD008/3b9z3nrrrUYX
pWX4+OOPfdtdZJFF3EsvvdTo4rQ10kPNBzbz9NNP7+sD+wa7pBUZNWqUm3DC
Cd0aa6zR6KKkYtiwYb7OsQuzwPjX0KFD3ZFHHukmmGACf4xBgwa5s846y519
9tl+Oe6449xaa63lbdQhQ4akuqdff/116fv+zTff5Lyq7NDmOOcdd9xRt3OK
YmDsZ7nllvP3j2evXDujjVr7qnSv5513Xj+28uOPPxZd5BJ5n78k1l13XXfh
hReW/sZm5hk97LDDWmZ8CJ2LbqVeXnnllUYXp+nRu6uxWB8e43QiHYccckjp
PbzRRhs1ujhtjfRQc0IfKfWxySabNLoouenXr5+/hvnnn7/RRUkFYziUF92S
B2zF8ccf380555yJ++y5557+HPjspGGiiSby+9fzOcVfiXOGYwWidTjnnHNK
39cXX3wxcb+RI0eW9qNfNwlscsaRXnvttVoUt0S1z1/INddc48ebih7HagRo
UerlzTffbHRRmh69uxoLY5iM9X7//feNLkrLcPXVV5few/jTiMYhPdSc0BdL
fWy55ZaNLkoubr31Vrf33nv7a8DPphXgXU558TvKw/333+9/v+OOOybuw3g4
+zD+l4YZZpjB719Pu26LLbbw52xF/0zh3Pvvv59K5zCWxLPJfvjFJUGbxY+3
1lT7/IXg/0fMTVfA+sbefvvtRhel6dG7S7Qir776qrvlllt835NoHNJDzQk+
I9THVlttVfNz3XTTTe6rr74q7Hj4omDT0LbGGWccfx2t4J/y7LPPVmWP2bg3
/T1JmGaaZZZZUh1zxhlnrLse6t+/v2yKFsfGFPAZSwI9RDwQ+00zzTSJ3+L9
9tvPvyNqTbXPn0HukVYbWy/3DkbXSQ+lQ++u2lO0vSBEsyA91Jysvvrqvj5q
nYsAP180y7vvvlvYMfHRf/DBB/3/LYa51vnRisiZVa09ZnbLmDFjEvchzxX7
7LHHHqmO2ep6qBlzmbUD++67r7+H5EpIiiF6+OGHvS63sSTysEX5/fff3YIL
LliXHJFF6aErr7zSH2e33XZL3KdcP2y922yld3Aj9VCrPb96d8VT1LWktReK
rruudC9E8yI91JyQT4762G677XL9HpucuOGddtrJ+xDgl/rll1922OeEE04o
2UL47jNmy1LNd5ecp+GYFrmiOf5TTz2V6Tiff/65t2fwFcG2i5YdPvzwQx8r
Qfw4sca0ZeIG0JCbb765u+222xKPz/v1uuuuc3vttZcbOHCg22abbXyeg7z2
mMUOzTXXXIn7kINu3HHHdUsvvXTq8TLTQ++8846vjw033NDnDUZXcf1JpLn/
SVSyKSrdm2ruC6Cd8bXceuut3WabbebzUXCMO++8049VnHvuue6ee+7xOcJY
Ry4ps/nxFbv55pv99ttvv93/m+caspQlqhXS1j35Bjk37Q+/WM7zxhtvlK2b
tNAfUSmGiHbOs04OS/ZjfDPKDTfcELu+mvYFeZ6/NOfkuWJMjOOwj73TWF54
4QV30UUX+fx43LeQatpsNXWR5h0c6iHOdeaZZ/r2Uqty8WyQj484Lo5PXwy5
YfCpvPTSS3OfI+2zROxP3me73LsrzTOf5dqToA8BH4F99tnHt21iRePyO3Bd
9AHYnAqMuZBT8OSTT3YDBgzw9cr3NI409Z71WirVT6W2Gp7vqquuqqpuIO8z
mfe9+vjjj/u6If53kkkm8X1J5H4zeC8ttNBCPg/cDz/8UFrPPdt+++3dYost
5n/H/QBsWdo6vvFzzDFHrB899ce7j+0nnXRSh21jx4719cNYP/6/5KWi3qNU
c37REemh5qQaPUS/L3Y571rgHcRzTl+wPd/46i+55JIlfzby8vDc8dywPi+8
p8LxEd6NHD+Lvw3vVOwk8lTz3bTyhXYnto3ZcSynnHKKH1NDi5n9wBL3XiZ3
9aqrruo1hekSck8tv/zyufVQudghtNJRRx3lc8tlnfvE9NDGG29cyjFH3jni
Oci1cO2113b6TZr7X45yNkWle1PNfQG+jRNPPHEp7uXbb7/17bFbt27efuK6
LR+FjYGw8O0A7Adyiq2wwgp+fVxuizTtK0tZwradtu6x94gNs+80uQrmnnvu
wuJpOa/lJYuLISKf+wEHHOD/j93AfowDReH5jdpk1bavPM9fmnO+/PLLbrXV
Vivl7WZ/9rEFW8baC7rIqKbNVlMXad/BVoadd97Z5wvAHqxVuXh3W8wiC3oE
e5RchfxNf47NGZDlHFmeJXRO3mc76d2V5pnPcu1J0AZpZ+QJYwwF3U9/BHoH
e3b06NEd7lE4p8JBBx3kbWK+JeSIp75ol+yX9d5mvZZK9VOprcadr5q6yftM
5n2vohN574T9SMwzYDB2buvD/Jf0FzGfAdrMtqNnmU+N99n+++/vxhtvvNI2
2j0wPn3ggQeW8tGysK9BXXCPWc8zj51OngrqP5xbK+/5RTzSQ81JXj3Et2O6
6abz+Z1D7Hkmx24INhDri5jfhv48+pBC+HZzfPp50rDLLrv4d2aIff+i/jw8
8/ThsO2MM87osI13AusZiwnhHcz4CkvUZ8byW+XRQxY7RN8z/2c5+OCDfT8f
Meu8y8nnlRXTQ9HcUl988UVpjplwnCjr/Y8jyaZIe2/y3BegP5Lf8Y0N7w2a
j9/w/eAbzreRfbGl7ftsNpNBbCrr6TPLcw1ZywJZ6r5Hjx6+nkOYfyy6rhoY
S+S8cTFE5H60GIDwWxr6tdKuonkUqm1feZ6/rOe87LLL/Po4n1TLRR61o/K0
2SKeNaj0Djb7D1u1HuXCviYnqNl+tAnsbGxuxjKyniPPs5Tn2Ya4d1eWb0qa
a0+C54m+eH4f1U3cW/ru0Q5//vlnaX04p0K079/yz/M7e1az1Hvaa8lSP+Xa
ang+bIFq6ybPM5nnvYrOXmqppXy5qFe7H8yhYTDOYuvPP/98vw5bFV1IW6V/
JXyHcj50K3n20LWsR/sa2AUc3/J/sNh4J88IWox1/Nbqmjpl3cwzz+z3qeb8
Ih7poeYkrx6i39z62RjHtuWCCy7w66O53qzPtFo9xLuEvuRonIvphDT5pXl2
+QbSLxQyePDgxD6npNxLHIt+Ed4FYfyEvTfich5UE79gNktcPWIDYqPRN5c2
z7ZheiiuX5K+Mus3NrLe/zjibIqs9ybrfQHKzG+icfD0IVqfZBSrn6jNxDcw
2peX5RrylCVt3fPO5W98IEK/CygXe5YVs6e43rCu8ds84ogjSn/TtmwsKey3
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
M0h0hNy63bt3988582KLYrnwwgvdoEGD3Mknn+ymnXZaX88HHnhg6t9/9tln
vv1a/l/ygKXZJoQQQrQq0kNCFMshhxxSshc32mijRhenKRk2bJivn1VWWaXR
RelS3HvvvW722WcvzV3y3XffuTvuuMOPyWVlgQUW8PeI32fZJoQQQrQa0kNC
FMvVV19d0kOHH354o4vTlNx3332+ftZaa61GF6VLseqqq7o111yzkGPhy5j0
bSi3TQghhGg1pIdEI/nll1/cRx995Jc//vij0cVJRZoyM8/gLbfcojn1Enjm
mWf8c963b9/Cj92KbaoIPv/8c1+nO+64YyHH22KLLfzx4mKPym0TQgghWg3p
IdFIttpqK3+/xxlnHPfpp582ujipaMUyNxvPPvtszfRQu96fxx57zF/3Hnvs
Ucjx+vfvn6h5ym0TQgghWg3pIVFr/vzzTx+H/euvv3ZY/9tvv7nJJ5+86eLq
k8oLzVrmevLPP/9UfYxa6aG896fcPW8VLCZLekgIIYTIhvRQ80MfN7lzyZtL
fMChhx7awW4bO3asXzfvvPO62Wabza2xxho+PiPK66+/7rbffnu32GKLuUkm
mcT7vAB1vfXWW7vpp5/ezTHHHIn+NpXKAdiV55xzjrdFZ5llFn8O66+faaaZ
fJz3yJEjvT184oknluJsOD/rXnzxxQ7HIx78rLPOcv369XPLLbec22uvvXz+
tqKuKU15IW2Z8ZPbZptt/DlPOumkDueq133KCn5Wu+22m6+Dfffd13355Zed
9vnwww99PXEPXnnlFffzzz+7a665xm277bZu8803d7fddlvi8dFP1113nb93
AwcO9PUzZMiQXHro4YcfdrvuuqtbeeWVfZs45phj3Pfff5+pTaW95+SUXnzx
xd1UU03llxtuuMGvJ1c494blqaeeSlXuNHUMvI/ZTj1tueWWbu+993ZvvPFG
xePjI7juuuv6a+B6aIcs4bPy+++/+9i2ffbZxx+ftlguH0JePZTmPJT31ltv
9XVJDoi77rrLtyHq/q233nJ33nlnaT3/B+4bx+E399xzj7v//vurrjchhBAC
pIeam5tuusn3dx999NEln32Wm2++2W8fPXq0m2uuufw6YpyxU8lnjK9QODcI
ttz666/vbQ47Bvl4yTu1/PLLu/3339+NN954pW3ffvttpnLAV1995ZZaaik3
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
QYMGubPOOstrYJbjjjvOrbXWWm7yySd3Q4YMaXrNusUWW7gZZpjB/fbbb4Ue
t931UDO2365Ekc8i46P0d2k8UwjRlZAeErXg5ptv7qBFDjrooFS/wx4aMGBA
IWX4+uuv/fgU58eG/f777ws5bjPSr18/f53zzz9/6t98/vnnmfQH/cbUaVbw
J2NscM4550zcZ8899/TlP/TQQzMfv57MN998fsyxaNpdD+VpvyI7RT2LPXr0
cGuvvXYtiiiEEA1BekjUAnwzQj10/PHHp/rdjjvu6P3Ui2LMmDHummuucZ9+
+mlhx2w2br31Vrf33nv7ep5qqqlS/27TTTd1jz32WOr9qcd99903c/nuv/9+
XzbubRIvvfSS32f66afPfPx6gh5addVVCz9uO+uhvO1XZKeoZ7FWz4EQQjQK
6SFRCx599NEOeujkk09O9bsDDzzQxxGIdBDX3LdvXx/LMs444/i6ThvrvOGG
G7qHHnoo9bmuuOIKt8cee2Qu4yGHHOLLdfXVVyfuY3baLLPMkvn49aQd9BBj
htdff73bcsst3WKLLeZjRYiZsmWzzTYr7FzVtN+uSK3rvqhnUXpICNHVkB4S
IfhQ4Re+3HLLuW222ca98847uY7DuEMePXTEEUd4P/Yk3nzzzVx557A3//zz
z4r74RP2999/pzpm3rIUCfEADz74oP//tNNO6+v6gw8+SPXbeumhZZdd1peL
sbokdt99d79PnuPXk66uhxgbmHfeeb1P4LBhw9zTTz/t38X4SdpSZO6Latpv
ETT6+Q2pR90X9SxKDwkhuhrSQ8Ig3wH530IdM+mkk7p3330387Gq0UOnnnpq
h3XkIr7pppvcBhts4MYdd1yvV9566y233377ed02zzzz+LzHY8eO7fA77Idb
brnFbbzxxj5Pw/vvvx97Tq5v1113dXPMMYdbYIEFvG89+R/OPPPMTrmU85al
Frz33ntuq622Kv1Nmanrp556KtXv66GHLF5hrrnmStwH30rqcumll276sYG0
diCxahdddJE78cQT3XPPPVdaf9ttt3nfUa45JI8eynqOStBuiLO78cYbM/0u
L9W23xByuDDmsc8++7iBAwf62Jc77rgjdl/6fMgZTe4A6orcGOQVwH/00ksv
TXW+Vqz7Ip9F6SEhRFdDekgYfMdDDWPLzjvvnPlY1egh8iAZ/C48DrqGGJaZ
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
6CLUjT/++KPRRehSfPvtt+700093m2yyiRs8eLB/XzSCL7/80u22224NOXcz
0Srt+6effnJ3332323333d3aa6/d6OI0LZ999pk74IADXP/+/d3w4cPdL7/8
0ugiCdE0SA+JWvPmm2/6d/B8883n7+0444zjevXq5VZffXU377zzuimmmMKt
tNJK7phjjnF77723e/vttxtdZJGD33//3a288sr+Hq+55prur7/+anSRasrh
hx/utt1224aW4YEHHvB2YNJy3333+Xf8r7/+2tBypoHnftZZZ/V1+vPPPze8
LEsttVRDy9BomqF9p+X444933bt39++eZZZZptHFqSlFPPM//PCD22ijjdxs
s83m+ySFENJDonb89ttvbo899nDjjz++v6csAwcOdKNGjeqw3xdffOF22mmn
0j7XX399g0osquHJJ58s3UMWxv+6KrThCSec0K2xxhoNKwN990OHDnVHHnmk
m2CCCXydDxo0yJ111lnu7LPP9stxxx3n1lprLTf55JO7IUOGNLVG3WKLLdwM
M8zg3xuNpt31UDO076wMGzbMPwOrrLJKo4tSM4p85hmLnWiiiTQOKsT/R3pI
1AL8F1ZdddUO9vGpp55a9jeHHnqo3+/MM8+sUylFkXz99ddu6qmn9vcQu/b7
779vdJFqRr9+/fx1zj///I0uivcpo89hzjnnTNxnzz339OXlGWtWGD9mfLEZ
aHc91EztOy2Mi1BmtEBXp6hnvkePHvIvFOL/Iz0kasEOO+zQQQsxNl+Jf/75
xy222GLet66rM3r06Kbuqy9HubKPGTPGXXPNNe7TTz+tc6nqx6233ur9OmnX
U001VaOL4+6//35flh133DFxn5deesnvM/3009exZNlAD9GH0gy0sx5qtvad
lmeeecaXuW/fvo0uSs0p6plvpmdOiEYjPSSKxr5L4fLCCy+k+i19fF19fIhv
Gb4O77//fqOLkplWLnsREH+MvUV8C3FwtO1GxyQfcsghvhxXX3114j5mP80y
yyx1LFk2msk2ayY9RN8DPsRbbrml7y8i5oM4K1s222yzws7VjO07Lc8++2zT
6KFa37OinvlmeuaEaDTSQyLk888/9/7Eyy23nNtmm23cO++8k/kYW2+9dQct
tNpqqxVaRuJEs+SkI58DY095IU9AUWM5xLtOOumkvl7IYZUGfA/TUu21liNL
2bEn//zzz7L71Ps+FgF++w8++KD//7TTTuvr4oMPPmhomZZddllfDsbmkiDv
FvsQz9esNJNt1ix6iD5+cs7gR0h8DHk5+Tbim2pLkbkyGtW+i3ium0UP1eOe
FfXMN9MzJ0SjkR4SBnmSZ5555g5aBvv33XffzXQcvgXhMU444YSqy0YZdt11
VzfHHHO4BRZYwPtNL7zwwn4sKS4nL/b6TTfd5DbYYAM37rjjerv7rbfecvvt
t5/XevPMM4/P5zt27NjY8xFPvNVWW/lrwYd+pplmcnPPPbfba6+93FdffdVp
/08++cR/f8ibR/noF+T7bBAjvs8++3Sol4suushdccUVfrn99ts7HI/nkpzD
PXv29GUgNnbdddf1mqDoay2q7Hznb7nlFrfxxhu78cYbL3YMqd73sUjIE0+b
MCg3dfHUU09lOg7XcO+997qjjz7a58V6+OGHc5fJ4gjmmmuuxH3IR0XdLb30
0k3d15/WNiMujfZ34oknuueee660/rbbbvP1yfWG0L7Z99JLL43V6B9//LHP
QxySRw9lLVclaFfE4d14442ZfpeXoto3WL8aud723Xff2P6TDz/80J1zzjn+
OX7llVf8mBS+tuS023zzzX29JYF+uu666/z7mBw99N2ROyCrHsrTNspRj3tW
5DMvPSTEf5EeEgbf7KifG8vOO++c+hiMpYT55IrIF3fsscf6dzvHsm8kNqXl
pKMf84knnijtf/LJJ3c4P7Y532Q0DfZzuG299dbrdD7mPyG3UuiPQHu061pi
iSVK/ZmU47TTTnNLLrmku+CCC9x2221XKmu3bt3cG2+84fejbvGTCM+NH4P5
T3BM49prr3UTTzyx3873GOizxX9lkkkm6WAnVHOtRZad/EbmX2NLNIao3vfx
vPPO87FoWcbXyoGNFvbHErfNudFraSG37QorrOBjmKn7k046ya244orehks7
XhhSLo4Au+moo47yWpqY6mbWQsA9rWSbEbuGnc13C5sbzXLVVVe5I444wo9f
0mbxTcK+BexdbObvvvvO5x07+OCDOxyP55i2TNsPyaqHsparEmgr2vldd92V
ugzVUkT7Bua1oc65bvzCOAZ9H+FcRvhPM8+CPb+nnHKKn38BPWZjHyzUYRTu
Ke2EPhxr02iW5ZdfPpMeyts2kqjXPSvymUcPMdeFEEJ6SPwX3vtxeiiLvxu2
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
6NZYY43Y7d99911p3GyvvfZyt912m///mDFj3F9//VW3cuZhiy22cDPMMIP7
7bffGl0UUTB59NBNN93k9thjD/98DxgwoKrzf/3111X9Pi1c56677ur71Sn7
3nvv7fvZW4Fhw4b5ul5llVUaXZRU/P33326yySbzZX7llVcaXZyWo9K3JIRx
+4kmmkhjvEKkRHpIFM27777rJplkEn8f8eWIwjdx3XXXdbPMMksDSld/+vXr
5+ti/vnnj92ODUk/3o033uhOPvlk9+STT7rjjjvOr3v//ffrXNpszDfffH7c
T3Q98ugheO2113x7x1avhsUWW8z16dPHPfzww1UdpxxPPPGEf87w5TUeeeQR
v+7NN9+s2XmL4r777vN1vdZaazW6KKmZd955fZlboX6bjUrfkig9evRoGV9K
IRqN9JAoGvzDzScC/684+BZ269bNa6M4Ro8e3fRjI2m49dZbfX8zdTHVVFMl
7kdfOD5GCy+8sFtzzTXdlVde2RJjLuihVVddtdHFEDUgrx4699xzfXt/5513
qjo/7wb6CpZcckm39NJL+3HTf/75p6pjhjBWjb149NFHd9pGnzrnTXo/NQv4
nFHXffv2bXRRUoNvH2WmfYn0pP2WhOj9LER6pIdE0Wy55ZYlPbTpppsm7sc4
SBz333+/97Nr9rGRSmBvYacQVzPOOOP4+oiLb/3999/dFVdc4fclpmrnnXf2
uQno+2129L3tuuTVQ7TdGWecsdCyPPDAA2711Vf3/eI8K0XkJrn++uv9MxmO
DRkPPvhgS8S4PPvssy2nh8il0FX0EH12tCO+eYxnMq5IPKUtm222WSHnSfst
iaL3sxDpkR4SIZ9//rnvGyUPwjbbbJOrj5dYT9NDLFtttZX7/vvvU/2WfEmT
Tjqp/x35rYqE44XHRIfUkiOPPNLbVTDttNP6a/rggw867Xf11Vf7fEBfffWV
O+qoo9xjjz3mbbTVVlvN+4s3M/redl3y6CHGb2jrxJXVAvI1ECc+55xz+nwN
1eTw2H777f0zSZxFFJ47tvEM14oixrqkhxrHSy+95H3/8BfGN/Tpp5/2dgtj
/baQW7UI0n5Louj9LER6pIeEQUz/zDPP3EHLoE2IB8oCPnLhMViIFbrooosS
+3XxDdtnn306/Ib96Qtmuf322zvs/8knn/jYpF69evncdfTPYRtEoQ+NeAA0
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
LOfPs+TxEyN2npiQuLx+SWAfUA/0U6Ylix5Ke3xiTejjDaHvld/Sn9oqZKlP
+oXp2w7j48hdRZ7gOLLqofXXX780nsIYA/3YnK8oTYRdR/wfY3jYdeEYcR7o
M6fu4uxD4vSz6AwbA8dGZUyA2JskPcT4RZIesJwyoR6w+QfeeuutTvtn1UPT
Tz+9vydp55mtdF3E3vE3Pmpp9RD+ZlmuPy1ZngX0xogRI3LlPKfdZO0HykpR
3xL8KfB7JB+4EKI80kOiSPCto98V3+w40Dj0JZo+4X6HhHoojME1GLvi99gI
ZsMX5S9XDdhq0VwOIdidnD/JP6cI6CvHVsyzEGOVdSwQ+4d7jTZNC/H1cfe2
XA6LLHooz/ENchfjS5TW76cZyHK9+D+xL+OqxM8wtkouLjRGXA6CLHoI+5px
DPzXDJvDJ9SdWfMT23yX+PHSx018eRHz9gDjV5QvmlMNTGfwvqkEOoXcLPgj
GeX85XjesugB82GOy0Wdx1+O/Sv5uWa5LhvzT6sRmLOnFnoo7bPA3/SjkZcw
7ntRCXKT41dYK4r8luADnDZHohDtjvSQKBLsF/zyo+M+BraYaRPe59H7bPkS
WKLjTBZvyzb6GA3L61qtHqLPGW2V1Z+cPlL8g8r9ju8756evriv5b88999xl
8w/ic3n++ef7/3Pd2Dvk1wghlwO2eRLl9FARxwfm2MKXKE1eXt6ZxJ+nsdmK
3rea6+W35N+lH4FYbNotzxRz4YR56o0seoicHLRv8jMbPL+su+SSS0r7MKaY
FsbpyOfer1+/mvTHk2OS8uEnGYU6TrLZo9h4j+UYh3J6CD+/pPGeOD3Au5R1
0bzVQI6KLL5TaFPzA+RdHIVzWcxQ2uuyHAvkE40b0yffRTiWZ/M+pb3+JP5v
e3eP48TSBWA4I0AgSFkDEhsgJCNjCWyAhBxEygJgCSSwDiIQIiZmG1y9loqv
5c//Ngwz9TxSSfd6mhm33d1Vp35OnXIvdFz5SNO8zvKVHqtchuVhaDz50i5d
l3S/FwNvU99CaynLmbRpX2KYiXiISxv7+5Q/dVkPVlc2D2DMr9jUR/no0aPf
sUtrVKpL28OxuRDLWOrWrVurdf31b9dmGq9Xv1VHLuvw2uzj52OvoXWNCVS/
dMwh+zoMXafN825Pw12q50Yst3xv192u/f5Ge/jJkyer/69dXBtruSaja6J+
+l3tn23x0KV+f/3J7W+1Pla5zejfHzl9/9ax555v12nHLtfM73JMPNR77r11
vw5jfGisx+rvHtPmah7st2/fDj7+FE+fPl3N81vqs2mNzzL39C61jTvPkWex
/vvR5u+aqt2//LzH8c3XWjeencscNo3b1nfUuPh6Lsextr4xl/Ix7tP1MdYA
tVanNf/tYVqOtZ5hPZ+PPa/eX/Mke73xiMYhG38sp3vxV/khl/XAsee/yan3
Qu+1Z32v3blz5+T9VPu82gu4ePRS/kRdsm8/1voZRt14yFgo3GTiIS5t7J9d
aY3Ps2fPVs/4/ruYo7XQ257jnz9//r99WZuz0bqjjLWkldoHtQeq30ZOheqJ
9qBI/b61E/qbrXPpZ9WBtXXWx57qj+v9Nf+rdtw+1Un1u3V84wrNyW+t+rr6
4hs/6Zw6tjlF9WH2Wv2M192u+rY4o2uheXzFqI1JtFaj+Vm1k7rXW8ezb+3S
tnjoEr+/76DvYrRr6i/d1+faOunmCHWt7nPJY88539qjXfvNCezv1G7clB95
6Zh4qHZn18K68hBWipc25Yu+asUQff/1j3cttJdOuWR6Zh06Z2vM1y0m6Lvo
exk5sosfRjuz13r2jedXebdfv369+llrXsoVPX7WGpU3b978/hvFmeUh6FnW
Hk+t5+8zH3sk9CwsHjhkL63Oubhn9P+MsYbiv+VaqkPPK623ag+z5XO7vAON
N40xo2KP3vsp57/u3Hu/+KnY65x8oo0vFhMV7zWXsTHmQ9dlLf3JumRfPDTG
uvquNsWnMBPxEJdWvdSzu3XU9T8Vl3z69GmVH3fTHqyb/n3xSv3KXZ/r6wW+
fv26mquwbK+UD6rXlvVf/259zfWu9m5/95C9S/ifffVt6kde7jvTd9C1UH7m
Q9aC7Fs/dOrvrw+6Mchl/Fu77MOHD3vf01U65XyLsZbP1WKise9lbe3us3XH
xEPt87Lt3mnO0r+8r1OfWfFw+2w2d2hbfold+vwaR1nWWz3Dlp9Jbe9Kz6Tx
HBrt8V6rT6b5xrWpe31Tnoc+x+rq+pM6tuNaX39Kjr3GcBob6povnjn1vJY6
rr6rctmvx2adb+d4zvmvO/Xe79ofa4AOWUu1TZ97c1ybr1hfxt27d1f9DqOc
Mh/vkg55Pvc5b1vvCzMRDwGnOqS+PVfrW54/f37R31n7vbZ+beD6mMv7/vbt
29W51J66aZq7+vDhw9//35rw0Qdd3/qm9tCx+eXgOmhsqTZG8/rqs+u+v6n+
xvMZbgrxEHCq1ns9fvz44r+3ftdy+7bmuT0aW+vQnMsxF/JcYw+Y9dKcymPz
aVwHfY7LXCONsTa/6v3791tzSFx1PNQ+Sc2vOqY0z+067R/F1Sj3Q/kYXrx4
cSPv96F5seIhOIx4CDhV6yEePHhw9l4w/FmN/6yvbWhu0q78BlcdD3358mWV
D/LYchPW5fHn7cvZcN01n7y1SOX/A/YTDwGnav+T5sm/fPny4P0YuR6uOh4C
TtM63XIPlXuhPA/AfuIh4Bw/f/5crUcpz1JzsuSkuBnKb7/cXxX4t3XPti9t
+R3KJakdBYcTDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMS
DwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEA
ALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMS
DwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEA
ALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALMSDwEAALP6
1+Khd+/e/bp9+/av+/fvK4qiKIqiKIqi/NFy7969Vfzx8ePHqw6FVr5///7r
1atXiqIoiqIoiqIof638+PHjqkMhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAACY0n/gT+cL
    "], {{0, 688}, {836, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{680., Automatic},
  ImageSizeRaw->{836, 688},
  PlotRange->{{0, 836}, {0, 688}}]], "Input",ExpressionUUID->"38ea5d02-5d48-\
44d7-88aa-f9a4d1b01785"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NFAUnion", "[", 
    RowBox[{"machine1_Association", ",", "machine2_Association"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "minIndex", ",", "newIndexThreshold", ",", "newM1", ",", "newM2", ",", 
       "newAccept", ",", "newTransitions", ",", "newMachine", ",", 
       "newStateExpressions"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"minIndex", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"machine1", "[", "\"\<Transitions\>\"", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newIndexThreshold", " ", "=", " ", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"machine1", "[", "\"\<Transitions\>\"", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], "+", 
        "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newM1", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"machine1", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newM2", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"machine2", ",", 
         RowBox[{"newIndexThreshold", "+", "1"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newAccept", " ", "=", " ", 
       RowBox[{"Sort", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"newM1", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
          RowBox[{"newM2", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"EmptyTransition", "[", 
          RowBox[{"minIndex", ",", 
           RowBox[{"newM1", "[", "\"\<StartState\>\"", "]"}]}], "]"}], ",", 
         " ", 
         RowBox[{"EmptyTransition", "[", 
          RowBox[{"minIndex", ",", 
           RowBox[{"newM2", "[", "\"\<StartState\>\"", "]"}]}], "]"}]}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newStateExpressions", " ", "=", " ", 
       RowBox[{"SortBy", "[", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"newM1", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
           RowBox[{"newM2", "[", "\"\<StateExpressions\>\"", "]"}]}], "]"}], 
         ",", "First"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"newMachine", " ", "=", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Name\>\"", "\[Rule]", 
          RowBox[{"StringJoin", "[", 
           RowBox[{
            RowBox[{"machine1", "[", "\"\<Name\>\"", "]"}], ",", 
            "\"\<\[Union]\>\"", ",", 
            RowBox[{"machine2", "[", "\"\<Name\>\"", "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"newM1", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{"newM2", "[", "\"\<Transitions\>\"", "]"}], ",", 
            "newTransitions"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<StartState\>\"", "\[Rule]", "minIndex"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "newAccept"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<StateExpressions\>\"", "\[Rule]", "newStateExpressions"}]}], 
        "\[IndentingNewLine]", "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFAUnion", "[", 
    RowBox[{"machines__", "/;", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"List", "[", "machines", "]"}], "]"}], ">", "2"}]}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{"NFAUnion", ",", 
     RowBox[{"First", "[", 
      RowBox[{"List", "[", "machines", "]"}], "]"}], ",", 
     RowBox[{"Rest", "[", 
      RowBox[{"List", "[", "machines", "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7487022125147448`*^9, 3.7487022284560547`*^9}, {
   3.7487037949551*^9, 3.748703810067548*^9}, {3.748703847611432*^9, 
   3.74870404079329*^9}, {3.74870407141705*^9, 3.748704089081665*^9}, {
   3.748704142419063*^9, 3.748704143225679*^9}, {3.748704223761829*^9, 
   3.748704353447658*^9}, {3.748704390442054*^9, 3.748704436263219*^9}, 
   3.7487046978191*^9, {3.748719121151486*^9, 3.748719139032186*^9}, {
   3.74871933691008*^9, 3.748719376249671*^9}, 3.748719468746488*^9, {
   3.748719573108873*^9, 3.748719631982278*^9}, {3.7487196623214493`*^9, 
   3.7487196895780582`*^9}, {3.74871973646187*^9, 3.748719752903273*^9}, {
   3.748801102369158*^9, 3.748801103866334*^9}, {3.750257229482656*^9, 
   3.750257289656272*^9}, {3.750257454533383*^9, 3.750257463970312*^9}, {
   3.7503655558430223`*^9, 3.750365561933421*^9}, {3.750458378519979*^9, 
   3.7504583839423647`*^9}, {3.7504587614814253`*^9, 3.7504587632883*^9}, {
   3.750458798210857*^9, 3.750458827119969*^9}, {3.7504607199153013`*^9, 
   3.7504607241374617`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"c2db15b0-7525-46b7-aaf5-dbf41f2c0288"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvQm81dP+/3/Nc8hUoe8lKjRQUWRKuEqGJnEL0YBIV6UiLlKRSNeUOV25
UjIkiVCSVLoJZbgVMtyocKW+mli/+1rf/9r/0z77nLP3OZ9p7f18Ph7r3py9
9+ezPp/P3mut13pPB13aq033rf/whz/02fG//9Pmkv7Neve+5Lq2e/z3P9pf
3eeKy67u1rXF1X27Xdatd5NLt/nvHz//73v/57//2Pa//zYAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AX/+c9/zMsvv2yGDx9uunXr
Zk4//XTTuHFjc8QRR5iDDz6YRqPRsmq1atUyDRs2NKeeeqq58MILzeDBg82E
CRPMt99+G/cwBwAA4AVr1qwxNWrUMHvuuecW7fDDDzc//PBDqZ/997//bapX
r55xjq5atar55JNPIrqK4ixZssTcdNNN5uijjzbbbLON+cMf/kCj0Wihtdq1
a5uePXuaOXPmxDbuAQAA+MBPP/1kPv/8c/Pqq6+arbfeOjWX3nnnnWV+9quv
vjIvvfSS1Rv6TOvWrc3UqVPNl19+GUHPt+S3334zEydONE2bNjVbbbXVFuuC
HXbYwRx55JGmQ4cOZuDAgeb22283Dz30EI1Go+XUZD+95ZZbTOfOnU2TJk1M
pUqViukQ2Ufuvfde87//+7+Rj4MAAAC+MGXKFHPppZeaffbZx86fNWvWNL//
/ntWn9VcfM4554Tcw5J59tlnra2m6Pz/xz/+0QwYMMC8/vrrrAEAIBQ2b95s
5s6da/czGjRosMUYVKVKFTNy5EizadOmuLsJAACQOPr162fX8Ndee21q7nzj
jTey+qw0y7Rp00LuYXHkW3XGGWek+iu7TZs2bcxbb72VtW4CAAiKRYsWmSuv
vNLsuOOOqXGpbt265u233467awAAAIlC8derVq0yS5cuTfksyUcpG+rUqWN+
/fXXkHu4JWPGjDG77LJLan4/99xzzeLFiyPtAwBAJlasWGHjP7bddtvUvsj1
11+PDQQAAMD8X8y58rc4TjnlFDtfbr/99ub7778v9bPK8dK8efOwu5hiw4YN
1s5S1LdKeawAAJLGwoULbVyIG69OOOEEs3Llyri7BQAAECtau/fq1Sv13888
80xqrhw2bFipn33yySfNoEGDwu6iZe3ataZFixZb2Dp+/PHHSM4NAFAeFBOi
vHsul4dyc8hfFAAAoFBRjMfzzz+f+m/ZFvbdd9/UPKkcUiXRtWtXM3PmzND7
+Msvv5hjjz3W9kk+YWVpIgCAJKGcgDvvvLMdw6pVq2b9WwEAAAqRY445xqxe
vXqLvyn23NkXSosjVxzl+vXrQ+2ftJBqAqov8p8ePXp0qOcDAAiD2bNnm8qV
K9uxTLWVvvvuu7i7BAAAECmK9VANvnSWLVuW8hFo165dxs9+/fXXtsZv2CiX
vrN3oDsAwGeUk3fXXXe1Y1qjRo1C37sBAABIEpMnTzbXXHNNxtekK5ytQTHl
6fz97383t956a6j9k9bINvYEAMAHVIPV5cBSTl4AAIBCoW/fvubFF1/M+NqE
CRNS6/6hQ4cWe71Lly6h5q3/17/+lcqj2759+9DOAwAQNapH6MbXovF2AAAA
+YxiPUrKFaVc9FWrVrVzY/Xq1W2+lqKEHevhYjwOOugg85///Ce08wAARI1y
eLjaqAcccIDNpwEAAJDPaD2vmoKlMWDAgNTenPwEHIr1OO2000Lr2/jx41Pn
nTJlSmjnAQCIiy+//DJl21W+QQAAgHxGOR/lc1Uan3/+eSrmvHXr1qm/K9Zj
8ODBofRL+4G1a9e252zTpk0o5wAASAK33XabHet22mknWw8dAAAgX+nTp4+N
NS+Lovltv/nmG/s31RZ/5513QumXs3lI8yxatCiUcwAAJIFff/015duq3OYA
AAD5imI9fvrppzLfN3HixJT/k8trVadOHVt3IwxcDcGScvsCAOQTyuGnMa9S
pUpm3bp1cXcHAAAgcBTr0aRJk6zeq5hz1eHV3HjggQeaL774wtpCwuCzzz5L
6Zwwc2gBACQFjcc77rijHffGjh0bd3cAAAACZ9KkSTnFNg4cODClCTp06GCG
DBkSSr9uuOEGe46DDz7Y/P7776GcAwAgaZx33nl27PvTn/4Ud1cAAAACp3fv
3jnlj1q+fLnZZpttUvpj9uzZofSrQYMG9vjSOgAAhcILL7xgx74ddtgBvysA
AMg7atWqlXPNjBYtWti5cddddzUbN24MvE8//PBDKqfWjBkzAj8+AEBSWbNm
TarW+WuvvRZ3dwAAAAJj9OjR1obx888/5/Q51d4N0ydAfmAu16RyvwAAFBKq
t6QxUL6nAAAAPjN37lybS+Wss85K2RY0z40cOdL885//zOoYijnff//9bT76
MHB57hs1ahTK8QEAkswVV1xhx8C2bdvG3RUAAIAK8be//c107969WOvatWtO
eVVUe2PJkiWh9LFz58523u3YsWMoxwcASDLaC9IYqBzmAAAAEC7NmjWz8+5f
//rXuLsCABA5qvXqYuoAAAAgXBo2bGjn3REjRsTdFQCAyJk1a5YdA7faaiuz
efPmuLsDAACQ19SsWdPOu4888kjcXQEAiJwPPvgglcf8p59+irs7AAAAec3/
/M//2Dn373//e9xdAQCInH/9618p7fHvf/877u4AAADkNWgPAChk0B4AAADR
gfYAgEIG7QEAABAdaA8AKGTQHgAAANGB9gCAQgbtAQAAEB1oDwAoZNAeAAAA
0YH2AIBCBu0BAAAQHWgPAChk0B4AAADRgfYAgEIG7QEAABAdaA8AKGTQHgAA
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
GmHqFBfnoXyn+LpAnGhP0Y2t7733XtzdAcgKtEf+snjx4lQcpPJAAsSJfP70
fbz44ovj7soWoD2iQf5211xzTZnv0/fDPY8FCxbYv2Ub66F6BzfffLPZbrvt
bC22sDj11FNt/26//fbQzgGQLRdddJH9PpYUSwWQNNAe+cv1119vn227du3i
7gqArfus76P26JTzOSmgPaKhX79+5sUXXyzzfbNnz049D1ebslu3bqXay7p2
7WrtIm3btk3ZesOqAyL7jbSNzkFtaUgCqtep7+PBBx8cd1cAsgLtkb8o94We
7bhx4+LuCoDFjTdJqg+H9ogG+VD9+OOPWb33yCOPtM9jt912M2vWrLHx3Nn6
UEmnhPkdk/3G1fMASALay5F/g76XX3zxRdzdASgTtEd+Ir9p5dRVbt3vv/8+
7u4AWC699FI73tx4441xdyUF2iN8pB9yyTNw7733pp6JYtWaNWuW9WfD1h63
3HKLPb7OA5AUVONc38vx48fH3RWAMkF75CfvvPOOfa41atSIuysAKR566CH7
vTznnHPi7koKtEf4yFbQp0+frN9fNOZ8++23tzEc2RK29rjgggvs8UeMGBHK
8QHKg/veK+8VQNJBe+Qnjz/+uH2uLVu2jLsrAClmzJiRyg+UFNAe4dOrV6+s
Yj2K4mxkavreZEvY2uO4446zx8/1egDCRHkP9L3U7wYg6aA98pMhQ4bY53rZ
ZZfF3RWAFJ9//rn9XlaqVCnurqRAe4TLypUrzT777JNz/s85c+ak8vTlkpsg
bO3h6h/moocAwubBBx+038v27dvH3RWAMkF75Ceultu1114bd1cAUqjOh76X
W2+9tfn999/j7o4F7RE8GzZsMB988IF54oknzGGHHWbv7ZlnnmnefffdUmsL
plO/fv2cYj1E2NpDuYSopQBJY+zYsfZ72aJFi7i7AlAmaI/85C9/+UviYnoB
lKvIrfOTUqMa7RE8o0aNsmt0NeWDatiwoTnqqKPsf7dp0ybr46iux/3335/T
ucPWHn/84x/t8f/5z3+GcnyA8vCPf/zDfi//9Kc/xd0VgDJBe+QnTnv89a9/
jbsrACnQHhA2aA8oRNAe4BNoj/wE7QFJBO0BYYP2yB35P3700UfWznTDDTeY
zp0727gB1W9v3bq16dSpk+nbt6955JFHbA5F+dRBskB7gE+gPfITtAckEbQH
hA3aIzs2btxoc3V16NDB5gJwv4FsmvIfn3baaTZn9k8//RT3pYBBe4BfoD3y
E7QHJBG0B4QN2qN0VFte9RH33Xff1PdecTiydaim49SpU82nn35qvvrqK1tn
ZcWKFWbZsmVm5syZ5rHHHrP5khs0aGBr17o8ZMrrumTJkrgvraBBe4BPoD3y
E1+1h2z5muOGDx9u1xDKcaM4VdVIrFmzpv23xtYrrrjC3HPPPWbu3Llm8+bN
cXcbsgTtAWHTtWtXtEcGZOe44447bH5r9X+//faz84TGUGmMXJu0hmpKHHHE
EfZ40iK697nkMYPgQHuAT6A98hOftIdy9z/zzDOmVatWqVrGru2www5mzz33
tPO9vqt77LGH2W677bZ4z+67727OP/988/LLL6NDEg7aA8JEe/qu9p/WxZs2
bQr8HD5qjwULFqTqklSpUsXu7Xz33Xfl0hzpTT5X48aNM0ceeaQ9fuXKle06
GKIF7QE+gfbIT3zQHpqzbr31VrP33nvbvm611VY2D6ds+prL3n//ffPDDz8U
m+tWrVplc+vrO3v55ZfbGtlu7Vi9enXrN5CUdS1sCdoDwkC5xE8++WQbG53e
9Pfp06cHdi7ftMcDDzxg/aJkl+jRo4f55ptvAtEc6U2676677rJ7Qbo/3bt3
z6kmJFQMtAf4BNojP0my9vjtt99szn7ZM9RH+R0PGDDALFy4sNzz3uzZs81V
V12V8ifYf//9zfjx4+O+VEgD7QG+44v2UO4q1ZZVXxVL/vzzz4eiOdLb4sWL
zTHHHGPPe9JJJ9m/QfigPcAn0B75SVK1h2IWGzdubPsme8ewYcMCs/2rLV++
3OoY57vVsmVLs3LlyrgvG/4/0B7gOz5oD+mOLl262H7WrVvXfPbZZ5HojqK2
afnB6vyyZcsmAuGC9gCfQHvkJ0nUHs8991zKHn/RRReZL774IrS5b9GiReaM
M86w56pWrZqZNWtW3JcPBu0B/uOD9ujXr5/tY5MmTVL5qqJu8qlVThD144QT
TsD/KmTQHuATaI/8JGnaY9SoUWbrrbc2u+22m3n88ccjm/9Gjhxp49XVJkyY
EPdtKHjQHuA7Sdcejz76qO2fYsvj0h1F9UfHjh1tf1SfEMID7QE+gfbIT5Kk
PUaMGJGyP8yZMyfy+W/KlCk2DmTbbbclBiRm0B7gO0nWHqpNLn9TxdCpRkec
usM15dyV3UP3TLoIwgHtAT6B9shPkqI9nnzySZu/St8zzYtxzX/yuVLuR9k/
wsr7D2WD9gDfSar2UH5x1fzTeCv/1rg1R9EmHaT4vl122cXaYiB40B7gE2iP
/CQJ2kN5cLfffnuz11572X/HPf+98cYbdk9QNUI+//zz2O5LIYP2AN9JqvZQ
bnH1SzHmcY+1mdro0aNt/9q1axf3rcpL0B7gE2iP/CRu7aG55qCDDrJ+TlOn
To193nPtscces/dFubZU5xeiBe0BvpNE7fHLL7/YPR61L7/8MvZxtqSmWiu6
d8qJDsGC9gCfQHvkJ3FrD9X80/lvuumm2Oe79Na5c+dU3WOIFrQH+E4Stced
d95p+zRo0KDYx9fS2ltvvWV9wlq1ahX3Lcs70B7gE2iP/CRO7TFv3jyb06p+
/foZ65LH3b799ltTtWpVs+uuu+J7HDFoD/CdpGkP1WqtXr269SUNq2Z5kO2U
U06x+kM1RyA40B7gE2iP/CRO7XHaaafZueX111+PfZ4rqTnfq+7du0d+fwoZ
tAf4TtK0h8ZZ9eeyyy6LfVzNpin/iPp74403xn3r8gq0B/gE2iM/iUt7yOah
86quX9xzXGlNeecPP/xwm/dKe4UQDWgP8J2kaY+uXbva/iiXRtzjajbt+++/
tzaaQw45JO5bl1egPcAn0B75SVza48ILL7TnTVJ8eUntkUceiT0XWKGB9gDf
CVp7rF+/vsL9qVKlSuzjaS5Nua50D7/44otA7iGgPcAv0B75SRzaY+3atTaG
onbt2rHPbdm0lStX2pofmrt///33yO5TIYP2AN8JWnvccsstpn379mbatGk5
j0Nau6sv+nzc42ku7Z577rH9fvzxxwO5hxXlu+++My+99JIZPny46dGjh72f
LVu2NGeeeaY577zzzJVXXmnj+V9++WU7byQRtAf4BNojP4lDe4wbNy6xua1K
ai7n1dy5cyO7T4UM2gN8Jwy7R506dewxDzzwQNO/f3+zbNmyrD77wgsvpHL2
xT2W5tLeffdd2++rr746kHtYHj788ENz7bXXmiOOOMLGJ7oxoKym99arV88M
GDDAfPzxx7H1Px20B/gE2iM/yVV7KFdKRenWrZs9p+aVuOe2bJsbr2+77bYK
X38UaG2sPJXjx4+3tboeeugh88wzz5jJkyfbeXDDhg1xd7FU0B7gO2HEe+hY
2223Xep7qDyBTZs2tb9v1e4oCWkOvX/ixImxj6W5NNkZdI2KC4wSzXO6V0cf
fXTqXu++++7WxjF48GAzYcIE+yxUI2X16tW26d8LFiywY65yGKvPu+22W+rz
xx13nJk0aVLstnO0B/gE2iM/yVV7zJo1y9qWNYZu2rSpXOesVauW2XvvvW0c
d9xzW7Zt+fLlZptttknseL1kyRJr65ftX3NkWXtyquWo3MZ6/lOmTCn3swwL
tAf4Tlix5tpHz/Sb3mmnnUr0yZJ/kN4zf/782MfSXNv+++9v/XOjYsaMGaZu
3br2fknntW7d2u7bSF/k2vdVq1aZp59+2px11ll2/tAxGzRoEGvNRLQH+ATa
Iz8pj8+V8s3qM9WqVbO2cNmks+XXX3+1Y/Cpp54a+5yWazv00EPtNScF6YUx
Y8bYfU/nC6A9QvkGaA1y/fXXm5EjR9o8wU888YS5//77zbBhw6zdSXWDFXPj
1i377bef6dOnj9VYSQDtAb5TlvaQPvjxxx+3aGvWrCnzuEV9r0pq6T5ZLreH
vsNxj6O5NumOKMZd3ftLLrnEjqXam7n00kvt3BbUdcgm0rFjRztGq6mu7rp1
60K/rnTQHuATaI/8pDzaQ7HiBx988BZzXcOGDe06V3tDpaGxXO/XuBv3nJZr
a9Gihe37zz//XNHbXiG0ZlHs5UEHHZTam5N9XxpDa41sr0fPSnuk0o/Kf6Nj
bb/99jYXZ9xra7QH+E5Z2kPjSLaxAyXFE5T1Hq1xVaOvUaNG9r9VLzXucTTX
Jr+nSpUqhfqsPvjgA2uP1z1q3Lixeeedd0K7nunTp5sjjzzSnksa8pNPPgn1
2tJBe4BPoD3yk/LGmitHfKa5b8cdd7R77iX5ZMm/R+8bMmRI7HNark16SX2P
M27wo48+sn7D6scuu+xidYPq/lb02lRXXrYR52sgvy3lmInLNxntAb5TlvbQ
nrfGykztnHPOsbbhkppqDmWjT7SeVk6PVq1a2f9WTELc42iuTfHa8tENC/lY
SdtoPtN8qLEw2759/fXX5tNPPzVLly41K1asyPpz2veR75zOqRomb7/9dmjX
lw7aA3wC7ZGfVCTPlfO9Kqk5nyztKTnkN6vXtK6Ne07LtSnXifoeV66rBx98
0Go7zVcXXHCBne+CvkbF4IwaNcrO9bpW2Xrksxw1aA/wnbDiPWS72HPPPUsc
d7VvIB+ronEfXbp0sa8tXrw49nE01yYbu2y8YaBcuBpTFSuj/Iul9UPjoOLI
tQclO7/0Svq933fffc1JJ51kdcWbb75Z5rXJZ1Z1a3feeWdbdz4K0B7gE2iP
/KQk7aE8H++9955d7ypnueIDnN+t9ts1vykGsGjOldKa9uoffvhhu67Vf6te
X9xzWq5N+4fqu+aUKNm8eXMqN5jmthdffDH0a1U9ALdXWr169chtPWgP8J2w
tIdsIpl8q1y+K/nEpuPi032pae6a9kIUl3bMMccEeg+F4r215lcuqtJq3CqP
R+/evVP7Mc7mLL8pxZBrH0j5V7RPozmy6Jwou9Pdd99ta7SXdHz5CKgf0jKK
CQkbtAf4BNojPymqPeQjpTzwqmWhNW7RuU1xAPoOyCdHc1yTJk1MzZo17ZxX
lu5wseXaM3ryySft3+67777Y57Vcm2I31XflBo4K5cJt06aNPa/m37L8qzRX
y1f5jjvusLGSuu96VvKZln5UrOPNN99s51rVvirrWMonKTuLaivOmzcvsutG
e4DvhKE9FOeVyaeqrLrfigXT+6VN4h5Hc2mKhVC/O3XqFNg9FPKVkpaQzUFr
/0znlp1DuXKlC9SHqlWr2vlS9onScl5pbFAO3j//+c9Wo7j9G+W7KukzmhsV
365zKK9wmKA9wCfQHvmJ0x5al8qO4eY0zZvKyyg79KJFi8zGjRuLfVZ7PaVp
DvkkK6+89nwcqi+h13yrcaXm8lQq5iIK5C9x0UUX2XPKjl9anKie0TXXXGPt
UunPwe2ppf9df9PxVQektOseO3asnaP32muvyOwfaA/wnaC1h/O1yuRTVRba
41dfevXqFfs4mktTjQ31W/GBQaE9tuOPP94eV3b9TOdVThQXn68xVTkCy9qr
ydSkCeWrK78uHUt7PyXFhdx11132PaeddlogdbRKAu0BPoH2yD8UUye/Vbee
0tpS42Q2a2tXJze9aW5UHEhJ8638uPQ+xYHEPa/l2s4991zb96jiH/r27ZvS
hSXNe59//rnNCym7lN6rvTzZrbQ/qnutvrr3yo6hZ6s9Nt3/GjVqpJ7b6aef
bt9f0rWrPqHsH9q/K6olwwLtAb4TtPZQjJz2zpWnPFdkP1VMg9bTcY+juTTt
p+gean8kKJRn3OmATOdUHirnX6Wx9ZtvvqnwdSjmUfZnHVP1PUrKR6haIs4v
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
iuRi15pRuezr1Kljjylbt/ya41zfSktqX1HXl95fl0dAvslxag/ZX6QF0/+u
8UD9e+CBBwK9J2gP8J180B5FUVyG/Kb+/Oc/29gEjZ1F9YhrsiFLa8hPUzEW
8+fPt2NcnBx00EE2X0b6+DVo0CDbZ9ln4hpbNce5XIFF/679sb322sv6qQUJ
2gN8Au2RDDT+Kx+f/HCDqP2aZO3hkD1CuUicBlFO9gsvvNDafD7++ONSx3WN
3/r8/fffb9q1a2fvnbP9K8+K/JiTgNb2yuub3n/3fBRrGNfcKJ8w3a/jjz++
2GsuB3DQeWrQHuA7+aY90lF8nn4H+l1IXyxevNjukaxfvz7urhVD9hk9i4UL
F24xfqmmYZzx5spnrD0d+U+n25QV76i+KQYySNAe4BNoj/hRHivlG9JzUO6O
IPBBezg+++wzW09CdbSL7rOpLqH8shQzqPpMZ511lv23bBuKGSn63tq1a9s8
7998803cl7MF6rd8mtLtG26e0Bo/Lu3h/Kr69OlT7LULLrjAvqa6LEGC9gDf
yXft4RPap9KzuPvuu4uNYZo7ZMOJI4+5sxtfddVVxV5TvI1eGzduXKD3Au0B
PoH2iB/VUNAz6NSpU2DH9El7OGS/X7Rokc3XrnuhPI0uJtI12Ui0nyQ/pksv
vdQ8/PDDibFxZMLZ/pWLvuj8o5hM2RwaNWoUm/a4/PLLbd+kQdJfky+D8oMF
7VOB9gDfQXskB/kIKEd4plxSbl7NFIseZlN+K/muyd/2ww8/zKiJXH71IEF7
gE+gPeJFtlmtr/fcc89AfK0cPmqP0lCNd8VH+sasWbPsc+jZs2exOUgx6HpN
/gFR6w75W+l7J38wzZVFX3P5WYKIO0oH7QG+g/ZIFsrTJduyfHCLjmOaW+Xz
Kg0Q5Rg7YsQI+/1QXav015wvmPyEgwbtAT6B9ogXV3cv6PrR+aY9fGXDhg1W
V+p3ll6/b+LEifYZnX/++ZFrD+U4djl0018bMmSIfU21woIG7QG+g/ZIFs89
95x9HorzSx/LJk2aZHVJvXr17H5L2OOq4mMUe6hY8kx1dDXWq6+vvvpq4PcB
7QE+gfaID+2Ja1xs3LhxuWqXlwbaIzm4uoqvvPJKsbmoQYMGNn/MjBkzItMd
iuFQTgPl5k+v66GmeVrxNOWta1kaaA/wHbRHstDcqVqtiu3IlKNEPlfOjpu+
/xP0uKq4Q83pTz/9dLHXFyxYYP3D5GcbBmgP8Am0RzzIj16aQ/ELYcxhaI/k
MHv2bPssFHeePh8pj5S+A1rvy+cuCu3h4siHDRtW7DXVW9FryrcZBmgP8B20
R/JQ3LaeiWqlpo9pyt3ucrnINpLuYxpEUx0RxSfqHKppm+k90gR6ffLkyaHc
A7QH+ATaIx7cWKmaTWGA9kgWmvukMebNm1dsTnIx3/ouhK07FMevc6mmWKa6
8qpt6XynwwDtAb6D9kgmri7v+PHji41rqn2oeq56XfkS9d9BjanvvfeetXc4
bZPJtjJmzBj7umqjhAXaA3wC7RE9igE45JBDbK4L+byEAdojWUydOtU+jzPO
OCPjvtwxxxxjX+/Xr19oukNzk2z+yhOWyTfBxZ+EOT+iPcB30B7JRLl0d955
Z5tDI1Ne3W+//dacdtpp9tnpGSpOpCLjqfZuFDe3yy672P2a/v37Z9QdynW1
xx57mEqVKtkYkLBAe4BPoD2iZ+TIkfaeDxgwILRzoD2Sh9b0eiaq4Z4+Py1b
tszUrFnTvi47iHK0BKk77rvvPqs7VDNl5syZxV5XHGaNGjVs3l/N22GB9gDf
QXskl8cee8w+G/k/rVixotg4J3+rG264wY5zet/pp5+eMQ6vtKa9ItUVcbYO
xc7JjyHTe1Vvqn79+qHU80gH7QE+gfaIlnXr1tl9Z+XB0NgUFmiP5CF9Udq+
3JIlS2zudz031S/54IMPKqw5VNNQteJ1TNXreOuttzK+T74Ceo9qPIYJ2gN8
B+2RbLp165ayMZe0hyPfV2cDUdO+y9VXX239tZRjvKj9YtWqVdavSnrjoosu
MpUrV7afUWy78ogoxrwkjeL8wK655prQrxvtAT6B9oiW4cOH2/utPKZhgvZI
Jq4Or2phaW5Kn6+09nV5GOWTJx8sxTHmqjl0bNnXpHN1LOU1WLx4ccb3PvLI
I/Y98vuSP2CYoD3Ad9AeyWbz5s2mTZs2qXV4JvuHa9OnT7d1bGUPdmOAa8oD
qHy56X8/4IADTN++fc0nn3xS4nE1jpx66qmp/FpB57HMBNoDfALtER1aa6mW
m2weqpUXJmiP5OLsEKovVVLOlbFjx5oDDzzQvk/+xB07djTPPvusndNKmu+0
x6e8Wdq/q1Kliv2s5tShQ4eWuP+nmubav3P56MMG7QG+g/ZIPr/++qs599xz
7XNSTtuS9l2K7tXI9+qmm26yOf5OPvlkG5uuPRtpCNmFtW/47rvvlpmnd+HC
hSk/K+0jhb2f40B7gE+gPaIjKpuHQHskF81FzZs3t89He26Z8k2pKefuXXfd
ZQ499NDU2lg1euVnrFq+mtekSZS3Rb5a8udy75N/lWwmmepbFdUd0ib6nPIA
RwHaA3wH7eEHsn+4HILaW8kUZxd0U7yJ7CU6Z+/evSOxdzjQHuATaI9oWL9+
fWQ2D4H2SDaq23f88cfbZ9SyZUubg6W0Oe3111+3uQlOPPFEG9uY7gegHCra
3+vRo4e1j5QVq645UvYO1RBUTY+oQHuA76A9/EJrG9mO9cy0Z6Maf0Frjrlz
56b2k6Q9JkyYEPl1oj3AJ9Ae0eDyb0SlBdAeyUdrb5f7SjmuZHvIdq6TD7PW
zPI5Vi6VbD8nW4qrs77nnnuaWbNmRX7NaA/wGbSHfyjPh3SHnpvy/SkGI1O+
v1zbm2++aWNLVLtJx1ZtQ+X3iAO0B/gE2iN8VMP8iCOOsPvMWjNGAdrDD2ST
v/32280222xj/ankI1CWDaS87eWXX07lhWzQoIHNqxU1aA/wHbSHv0yaNClV
f1zt8MMPtzl3p02bllVec71HtZpkg65Vq1bqOMpL+Oqrr8Z6bWgP8Am0R/ho
zad7rNx/UYH28Is33njD1pvUM6tWrZrVI6q5EYTmUPy58ti7eBHNm/IBjAO0
B/gO2sN/5MOqmHL5nLrfvv5dt25da8fo3LmznUPV9G/FrdepU8fmHnTvVw4s
5dxV3vIkgPYAn0B7hI/yZKjuqWpJRwXawz+Um+WWW25JxSrKJ0r5VbTPlmut
QX3XpF+OOuqo1FypfPeLFi2K9RrRHuA7aI/8QbGXsoVovpTtQvGY6bF0rqku
k2L0+vTpY/cT165dG3f3twDtAT6B9ggXrQGlO+RrGiVoD3+RdlAuNPfbdLly
NaeoRtX9999vJk6caDWJ8tO/8MIL5sknn7S6RXmviubFkp/feeedZ2tpJQG0
B/gO2iO/0fir+JD333/fNv1buUGSDtoDfALtES49e/a093fy5MmRnhft4T+K
E5oxY4Z9lvXq1bMatqQ9ufT9OdUOefjhh239kCSB9gDfQXtAEkF7gE+gPcJj
3bp11m9G91i5xqME7ZF/aD9O9gvZOO6++24zaNAgc/3111vfKukMxTqqBro0
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
5fuU6bzKu6u4EL3n3HPPzWgjyaXNmTPHHHvssfZ4hx56aLHYcqdNlE9d79Hz
CQu0B/gE2iN7vv7669SaN+nks/ZweduHDBkS2tyoJq0gG0FQPPvss7bfLVu2
zHg+1SaRzV5+A0H7BSjHvHLp6vznn39+xtgSxT+6eTss0B7gO1FqD61btU/g
9IZi3JQL47zzzrM1MpTHok2bNjZvrfbd9R6NHxob161bV65zyidIx/n4449D
G1tXr15tr0X5cYNEsebKKah9nKlTp2Y8t/SGcgvqGlUTSjVHMvlIlaU5lD9X
OS/dmFpSnSY9J5dvN0zQHuATaI/scTVUVQs76cShPeRzq5p0yvOh/acjjjjC
7gXJT01zperrBRE/MXr06EjqYmiOVx6oIHFxJPKpznRO5TDQOkMaRDkj0+MV
y9P0TOQL7eJHFfOY/h75X2ntIptemP6EaA/wnai0h/JQqPa1zqV4MfkJqV5Q
Sb/zTz75xObLVly1PqN+ah8+V2644YbQc+9J1+gcmiuCRjWJNIbKhjx79uyM
59fei/xg3bOUDpJN+MYbbzSTJk2y/XNjr3LmKvef9o7kMyud58YLjZd6f0nX
6eozqpa76iCGCdoDfALtkT2q8ax7pT3ppBOl9tB8KL9d2dDdmCx/JcUwaGyX
n1FR/wDtv0+ZMqXc51NMn46j2kxhao8TTzzR7msFWUNS+3LSAZobZ8yYkfG8
mjsPPvjglB1fWiuTXiirvf322ymto/P97W9/y/g+zata42gPUHNumKA9wHei
0B7SGRpDFR+tGCzZCbL93WutrDxS+rx+04pzyAXlLNf1BZm7PL1pva5zqM5e
GLz44ov2+lUDuCT7h5ruq/awVK9L+z3pvmyZmsZS+WtNnDix1Gu8+eab7fsV
m6hxP2zQHuATaI/sueSSS+y90lo76UShPTZv3myuu+66lOZQPTrt86guRrpP
j+6ZxvjWrVun7NQa7+XHlivKbaXPy44SpvbQul9+V0Hz+uuv23ug2IpM/sFq
WgP36tUrdW/1O1VOGH22tPh6HU9rFfkgOx8M+YhrnZTp/bJDHXLIIfa9QdfZ
zQTaA3wnbO3hbJDau5k+fXq5x6/nn3/err011siGkS1ffPGFvT75coU1trqa
R8o/Hhay98r3SvpNNo6y+qR4t3Hjxlm7j3yo5A+mmoTykVUMjPKSSzOVVedd
OkP+Vbo++eyqflIUoD3AJ9Ae2XPcccfZPfzffvst7q6USdjaQ9rC1cVTndZc
8jEuWLDAahB9Vr65yguSCy7/fO/evUObG2VnUPxm48aNQ7l/iu3Q+kL1/d57
770S+6E8NpqntYYouu9Wp04dW39E+2+aI+UfpjwIRe1O+numeoauye9Zx9H7
lRc/CtAe4Dthag/lv9YcIzuk7JEVHceUW1bjhXIC5rIGrlu3rvU3LSmGoSJN
tgaNe9p70f5VmGivxo2Lqq8kfRHWnKEmW/Phhx9uzydfY+Ujiwq0B/gE2iN7
NH5rTPaBMLXH2rVrrY3D7Y1lqiWbTZNfgfalNDfmoj+0ZpUvgXxow5pDZKfX
9cn2EBb33nuv9TNW3hXFz5fWH9Xd0J6cdIj0UFGdUVSPqFaI8uGUlaNGsZLu
tx9Ujv1sQHuA74SlPbSnpTFN+wYvv/xyYGOZq4er/Z5scbm2FXMW9Njq6u8p
l28UKGeharfqnPJ31f0IOje77Mcam+W3pT0ljalR5+FHe4BPoD2yQ+OLW2v7
QFjaQ7EPbdu2tcfWWFvRWtyKnZFfkewfufhfab9fY3xYuVikOXSN2jcME/k5
6frlFyHbQy73U+/VXmau8eiKl5Efgu7fnXfeGer1pYP2AN8JS3toLNBx5dsb
9HimXLY6tvbls2H9+vV2baA9nlxzQJXWNF5p/S87blh5vDMhHSA9JVuO7oP8
TLX3o9zFFbmehQsXmquvvtreJx1Xe5Nh+pGVBtoDfALtkR3Oz0c1hHwgLO3h
4hCVxyqovSPNATqmfIiyRfmg9BnVmQ96ntb8qBwp0kNR7F3J58rFlitvSlj5
ZTRPnn766fY8srVobzVq0B7gO2Fpj/r161t/q4rWnMjUpDm016C6e9mieAld
p/pVXtt20SZfK6eBlOcvDuRD1rNnz1T+E+3BtG/f3tpClCesrGuQL65ygSiu
UbYUF1OneHLNjRs3bozlugTaA3wC7ZEdbk9K8dI+EIb2kK+V4h+VP760XI/l
aaqLpf4qPiEb5Ccsv1r5bAXhF120aR9LfZFPWFRIx3Xu3NnOZbLbt2vXLmN9
3PI03R/tpbq4da0/NAfHAdoDfCcM7eHiu+UXFca+g5r8ZLXm1jieLYqpc+tZ
/TbKe27FPbj46wsuuCDQ3IHlQfHiykesPPBFfVflyypNIbv6RRddZMdk9ffM
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
rVt77dq180466SSjOQ4++OBSYzCfu+2227yvv/461muR9hAuIe2RTqQ93AYb
/8SJE73GjRtn5ritt97aa968uXfhhRcaW8ekSZOM/ePJJ5/0pk+fbj4/ePBg
r2vXrt4BBxyw2X7dqaee6r388stxX5a0h3AaaY908MYbb3idO3fO2DV4nuee
e64ZQ9977z3vp59+ytm+//57b9myZcZGwndsv/325jvQJJdeeqn36aefxnJN
0h7CJaQ90om0h5tg+2f+q1WrVmY+69Spk/fYY495X331VZlzor+tXLnSzEOH
H354Zm19zDHHmHkzLqQ9hMtIe7gNNmD2brbYYovMOPToo4963377bUFja8mG
j+s999zj1a1b13zndttt5w0ZMsT7/fffI702aQ/hEtIe6UTawz3wrWrRooV5
bjvvvLPXt29f76OPPqrwnFiyvfjii1779u3NnLvlllt6vXr18n755ZfIr1Ha
Q7iMtIe7zJ071/ii8vwaNWrkPfvss4GMrbb98MMP3sMPP5zZN0KLEEMSFdIe
wiWkPdKJtIdbMGftuOOORhvgM/Xhhx8GOi+W1CDMu7wbBx10kPfWW29Fep3S
HsJlpD3cA1syvqj4V+2www7e7bffbnRCGOMrjbiPK664wozlnG/KlCmRXKe0
h3AJaY90Iu3hBn///bfXu3dv86z22GMPb9asWaHNibbhd9C/f//M3Pj0009H
dr3SHsJlpD3c4q+//sqsydlree211/IaI9mTmTlzpnf33Xd7I0eO9O644w6T
V/C5557zPvvss7y+g7Gc94RxlnyEYSPtIVxC2iOdSHskH+bFs846yzynhg0b
mpwr5WkG/ATYwzvttNNMHEedOnW8fffd16tfv77Xpk0b75JLLvEmTJjgffDB
B+XOjcyt5HMhhv2RRx6J5JqlPYTLSHu4A/aO7t27m+dFjo6yNAPx4+TrOPPM
M71q1aqVmUMQ+0mDBg3M/g2xc2WNsW+++WZmjYWGCRNpD+ES0h7pRNoj2TAv
kiOeZ0TuXOIVc81fK1asMJoCu0jJORAfLXJDoj38uej5f76XXFhl+Rfgg8X3
brXVVt5TTz0V+nVLewiXkfZwB+LleFYtW7Y0flC59nOwadh1EI3/79atm8lr
Tg2PadOmeZMnT/bGjx/v9evXzzv++OPN2MtnsWmQf3fhwoU5x1j2lGrXrm0+
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
P93U3uFvuUuXLpkxn1azZk2z5v37778j62fcLF68OKd9g5wa2EWYf6IYY+1e
E3s4/mPff/+9V6dOHbPvE+R4I+0hXELaI51EpT2wY1x33XVmHOV8jKnYOaj3
xBqWcZ45gf0m5khyCvK5nXbaydSCYl6tLPTo0cNcO7HnufbBmjdvXqrORtCN
GEe0BfUOs52LdQx9ee655wK/B9IewmWi1h6//fabsXNwTtbOxIdR8zPX3zb1
QdlPYHzldzp06GBy0FYWiO1gbHvxxRdL3ZuxY8eae8K45/d9DbI9/vjj3tZb
b+1Vq1bNvC/+4+PGjcvUIwkSaQ/hEtIe6SQK7cH+/YknnpjRHJMnTy43ZgEf
5fHjx5v8TvwednLm18oAORWJ3+Zeffvtt6XuzTnnnGPuCTHp2Y4H0fB9xv5S
pUqVUjlhaNQTZO5GA4WBtIdwmSi1B5qhadOm5nxt2rQpaL+eWtrt2rUzv1uv
Xr1KEw/y6quvmvGrcePGZq7x35fevXube3LYYYeZexT0+IpPHBqRxt6N/zj+
Adhe8JnDFh4k0h7CJaQ90knY2gN/YtannKNTp06l6uaV17744gtT94nfR79U
ljgQattyzddff32pe8L6wN4Tao3788EX24gnQfsQ/0it3WznJyaeOA9qj4SB
tIdwmai0B75S2Cw4F2tKf6xyPo21N/6tdjwhFq8ycOGFF2ZiKfz3hL2xnj17
muPY4F944YVAxlbu9aBBg0zeEGLIn3766ayfszasMWPGBH7d0h7CJaQ90knY
2oN6eHz/BRdcUOH8TMyndn7t379/KP1MGtTKIMYbm3y2eQ97B/Gi1mf7qaee
KnpexL/A5r9nzUQugGyfw1eOz1xyySWhXb+0h3CZqLTHrbfeas5DvHK2/ftC
ml3v4htbGSCeAl2Ra4yloUvQCTR8gbFHVPT+LliwwDv88MPNPSan1SuvvJL1
c9bXqlWrVqHstUl7CJeQ9kgnYWqPZ555JjOGFlsTj7UePgHstb/xxhuB9zWJ
MDcxLzI/ZrP7o+VuuukmMy/iP4AWqUhuemI5mIfwO+Z5MT+SjzPbZ/EV4FyH
HHKIt379+tCuXdpDuEwU2oMxFZ+cvffeu1TdnYq0NWvWmDh1/ICwN1cGGGMZ
P/fcc09TPyPbfcEn6uCDDzbPk1wf2Iiw9+ZzT3lGjJnY7Bk3aWeffXbOOBLs
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
vdNINI1ja5xc/cUPP/yQa32693bu3NnWqM9V87Q05zS/fYZ1n1A+05/VWfD6
s+pztdY9rz8zcuRI+3XaV7AkzlgkeyBMyB7RFMXsIWPHjvXH7y+1X1yzZo19
Hte6Q803SDRvHEfrunft2pVrjfrn/fr1s+Mf+lrtg9WpUyebQ7Tv8IVrQpTH
NH9ZYxbdu3f3xzn0Pk55YvPmzXn+LMaNG+f3n8VxzlVeyB4Is6hnDxkyZIj9
Hjt27HhJc5G0r5Se+3V2ns6ycEH79SlXaE+/n3/+Oc9atf+W1r/pfZB3L0hL
SzPp6en2Xqp7sJ7tO3ToYOdMKZ95X3fTTTeZqVOn5jnWoUvzurw69u7dWyLf
K9kDYUL2iKaoZg+9L2rRooX93l5//fUi94t6r6UxeT2X612VK95YQ6NGjXLd
A9679O+0BlRrNr0+L79LYybqM9Xv/9fP4s0337T9ojJYTk5OiX6/ZA+EWRyy
h9aDe/vg6R1PbvMz87s2bNjg36t0npFLmqOr+5vuh/mtLdfnq/cwOuukVq1a
/njIhZf26VUf9OKLL9qxlfx+Fhpb199To0YNO85SUsgeCBOyRzRFNXuI9k73
2q32KtTc3sL0i6tWrbL9gP685iC5pPPO+/fv78+rKsjacp2DPmnSJHv2ht7D
aT6D9v9q3769/XloPEVjOvm9s9TPzTvfSnO/ErH/JdkDYRaH7CFa++W947nj
jjvsevGC3Fv156ZMmWIqVapkn7cTPZc1Lxr/0JiG5kdpDKKgfYXmnWm8RJlF
993C7HOicWjdn/Uz1Dkeen9UksgeCBOyRzRFOXvInj17/HUMOg9DfUt+fYHm
J2mPKc0BUD+kM8SDQuvJ1Vdrn5mJEycWeTynoJf2ttczhX5+mkOgfjIRyB4I
s7hkDzl16pT/PKvxYe1RoTVoevfz7/uJ3udrnYTmj3pzQ4vrvO7iorUn3tpy
rX/Pb03HpVxz586173P039JZ6xo7KmlkD4QJ2SOaop495MSJE3bMQOsJ9b1q
jP/ZZ581WVlZdk8VjSGo/9PYhvZc99YEan5uovbTLYwL+8a77767RM7e1XOD
zhj21o+ov0rkWheyB8IsTtnDo3VlWh/t/Y7o3qG9ZPU7rH+uuUna30n/Tvdi
7Vmu8YIg0lmp2l9ctVasWNHOmyrOPdu1b6HWiOjvV38zevRoc/78+YR8b2QP
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
    "], {{0, 734}, {799, 0}}, {0,
     255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{505., Automatic},
  ImageSizeRaw->{799, 734},
  PlotRange->{{0, 799}, {0, 734}}]], "Input",ExpressionUUID->"4609e0e4-a8ac-\
4b39-afbb-c0a4dbe3beff"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NFAConcatention", "[", 
    RowBox[{"machine1_Association", ",", "machine2_Association"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "newIndexThreshold", ",", "newM2", ",", "newTransitions", ",", 
       "newMachine", ",", "newStateExpressions"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newIndexThreshold", " ", "=", " ", 
       RowBox[{
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"machine1", "[", "\"\<Transitions\>\"", "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], "+", 
        "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newM2", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"machine2", ",", "newIndexThreshold"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"EmptyTransition", "[", 
           RowBox[{"#", ",", 
            RowBox[{"newM2", "[", "\"\<StartState\>\"", "]"}]}], "]"}], "&"}],
          ",", 
         RowBox[{"machine1", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"newStateExpressions", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"machine1", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
         RowBox[{"newM2", "[", "\"\<StateExpressions\>\"", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"newStateExpressions", " ", "=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "newStateExpressions", "]"}], "\[NotEqual]", 
          " ", "0"}], ",", 
         RowBox[{"SortBy", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"machine1", "[", "\"\<StateExpressions\>\"", "]"}], ",", 
             RowBox[{"newM2", "[", "\"\<StateExpressions\>\"", "]"}]}], "]"}],
            ",", "First"}], "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"newMachine", " ", "=", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Name\>\"", "\[Rule]", 
          RowBox[{"StringJoin", "[", 
           RowBox[{
            RowBox[{"machine1", "[", "\"\<Name\>\"", "]"}], ",", 
            RowBox[{"machine2", "[", "\"\<Name\>\"", "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"machine1", "[", "\"\<Transitions\>\"", "]"}], ",", 
            RowBox[{"newM2", "[", "\"\<Transitions\>\"", "]"}], ",", 
            "newTransitions"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<StartState\>\"", "\[Rule]", 
          RowBox[{"machine1", "[", "\"\<StartState\>\"", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", 
          RowBox[{"newM2", "[", "\"\<AcceptStates\>\"", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<StateExpressions\>\"", "\[Rule]", "newStateExpressions"}]}], 
        "\[IndentingNewLine]", "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFAConcatention", "[", 
    RowBox[{"machines__", "/;", 
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"List", "[", "machines", "]"}], "]"}], ">", "2"}]}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{"NFAConcatention", ",", 
     RowBox[{"First", "[", 
      RowBox[{"List", "[", "machines", "]"}], "]"}], ",", 
     RowBox[{"Rest", "[", 
      RowBox[{"List", "[", "machines", "]"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7487045581490107`*^9, 3.7487045719305487`*^9}, {
   3.7487047047346973`*^9, 3.748704885098873*^9}, 3.748705302383275*^9, {
   3.748719789148725*^9, 3.7487197944868813`*^9}, {3.7488010865882683`*^9, 
   3.748801088815999*^9}, {3.7488012499936447`*^9, 3.748801250218133*^9}, {
   3.750257712785565*^9, 3.750257750828499*^9}, 3.750458782188929*^9, {
   3.750458831040436*^9, 3.750458839488649*^9}, {3.750460710913538*^9, 
   3.750460715354344*^9}, {3.750465443814703*^9, 3.750465482733283*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"0ad7f988-a0ee-4393-9822-32b09524ddfa"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
0ziVpn3sgfpPx3/8119/tY8PHz484s8BMQkARAdiEoQDMQkQ/XSmqcb/TZs2
JYkfdBaJ6vSGMiaZPXt2wrnpiT+n9ZM+ffpE/DkgJgEQb3QO7saNG93kyZPd
O++8YzUP33rrLZuHWrdunZe9e2lBTIJwICYBol9gH4fONk0cI+iMddVrCmVM
EliX+frrr0/4uPa16GzFwYMHR/w5ICYBEA80hul8W51Re/7559u4llw777zz
rBbiG2+8YWNwtCAmQTgQkwDRL7BusXDhwiTxg+7VS5cuHdKYZMSIEfb7Nm/e
fMLH9W99XNfTSCMmARDLdL5gly5dXPbs2W0s0xq3ahmOHTvWrVixwm3dutXm
ffT/33zzjZ1F9cwzz7hSpUrZXFDWrFndk08+afv8fCMmQTgQkwDR78cff7Tx
f/To0Unih65du7pzzz3X/fzzzyGLSZo1a2ZnlOgaevzHZ86cmVDjK9KISQDE
KsUdOl/qnHPOcc2bN3eLFy9O15isc0AeffRRWze58MIL3Ztvvun18RCTIByI
SYDod+zYMXuvPvHEE0muVbq26dqgXORQxCM6QzxnzpyuVatWST6nfSS6Z1as
EmnEJABizaFDh1zLli1t7FI9Eq1/nMr4vGHDBlejRg37efXq1fM2HhKTIByI
SYDYoDMDb7zxxqDXqRIlSrjrr7/e1v1PNSbp16+f5QnMnTs3yecqVark7YxV
YhIAsURjleKQs846y/Xu3TvJuvOpNNU+1Pq49hPu2bMn4o+NmAThQEwCxIaR
I0faNWDZsmVJrk+BPemKJ07lOqf6L5dccond/yf+nHKclXega5EPxCQAYoXW
RypUqGBxw0cffRSyWOT4Nm3atIR7uEiPi8QkCAdiEiA27N2713KJH3vssaDX
J9UDVp1eXadO5vq2a9cu20uZI0cOt3bt2iSf79mzp90va2+LD8QkAGLFI488
Yusj2keS0rirtW2dhfv888/b92icU96s9sJPmTLF1kBS+n59r+KeOnXqRPTx
EZMgHIhJgNih/SRZsmQJek6JYgrlVenzOs8kPfGIfp5yADJlymTXwcSf1/75
Sy+91NWvX9/bYycmARALArXbX3rppWTH3F9++cU999xztndPX6u4okCBAq5k
yZLummuucZkzZ7aPX3zxxe7pp59227dvT/Znvfbaa/a1OtskUohJEA7EJEDs
2Llzp9WzV2wQ7Nq0bds2y18+44wz3AMPPOC+++67FGMRzcG9+uqrVg/moosu
cp999lnQr2vfvr2tweh8FF+ISQBEO61n586d2919993J7h9Rrq3meLSO0qRJ
E/v37t27k4zNmh9q0aKFjb1av04pB6xWrVpWY1hzU5FATIJwICYBYsuQIUPs
WvDuu+8mG2d069bNYhfNvVWpUsUNHTrUcrqWL19u1xCto7Ru3dpdccUV9rO0
d3316tVBf97UqVPtPll18n0iJgEQ7Xr06GHrzTpvJNh4qvNmFYtoXTrY3sBg
TbW6ypYta2NDr169gn6N5p+0Rq75o0ggJkE4EJMAseXff/+1OCNbtmxuwYIF
yV7HdL5h586dXbFixYKeD6ycgMaNG1s+cnI/49tvv7U1FO0z0Z5Nn4hJAESz
gwcP2npGo0aNgo6nY8aMsTVs7f3TuYfpya/VOopqCqsmYuBM98TtP//5j+05
jEQdLmIShAMxCRB7tC+ycOHCtv6/aNGiVK9nP/zwg107tPavGGTVqlWp7p3U
Pverr77aXX755ZYT5hsxCYBopvE1cJ8ebH5H57CXK1cu1bE3uaZcMJ1NovXv
JUuWBP0dillUJzjciEkQDsQkQGzasWOHK1iwoOUQT5w48aSuccm1OXPmuMsu
u8zyotetW+f7oRpiEgDRrG7duq5QoUJBx1StjWjPnmqqn8rYrL3xGpcrV64c
9PPKCdM4Em7EJAgHYhIgdmk9/4477rB8gDZt2lh9rFO53v36669WC0Z7KosX
L27Xz2hBTAIgWimnVmc7BavVrnVpjdHJ7QVJb9P+QI2FwXJ3NX5rHUV5ZOFE
TIJwICbBqTp27Jjtr5s3b57txfvrr798dylDOXLkiNW2VxyhtY0+ffrYXFp6
rnHKbR42bJjLnz+/XTuVl3zgwAHfD+0ExCQAopXyWzU+vfPOO0nG1xdeeMH2
vf/0008hiUk0d6Q8MNUITvy5wPm5K1euDOvjJSZBOBCT4GRpT8Ozzz5r68jH
753WWd/KeVXdEUTOhg0brB6kYgpdr1Qv+M0333Rr1qwJWpNSXz969GjXvHlz
d+GFF9rfTrnOS5cu9f1QgiImARCtlO+a3NpFmTJlrDZwKPNrdY1V/ZLEH1e9
dvVDe1vCiZgE4UBMgpOheEN7nxV/6BwM1ZbVOonqqWvO/sorr7R7Y83ZI7IU
a3Ts2NFdddVVCXGi1vJV9/faa691+fLlSziPS01rK1oXUZ3gaEZMAiBajRs3
zsYnjb+J4wRdK4PldJ1KU2123b8FW0NRP8K9z52YBOFATIL00pnf2qunuk/K
k00uF+jRRx+1MWvAgAG+u5xhqR7w+PHj7TzhDh06uFatWrnHH3/ccglUl9Ln
GYjpRUwCIFqNGjXKxqcff/wxyfVQc3cac0MZkwwaNMh+n87RTfw5jSH9+vUL
6+MlJkE4EJMgvbQOrTl31ZdNbdx88MEHLY9248aNvruNGEdMAiBapbROolxa
7T0PZUyiHATlIvz++++skyBuxHtMcvjwYcun/+STT9zIkSPd66+/7t566y03
efJk25et/cFIu/nz59s4pDmhtIybqgOlWiQPPfSQ764jxhGTAIhWgf0kukYm
vg7qnCddA0MZk2jdO2fOnEk+rtrt6odipHAiJkE4xGNMov28I0aMcOXLl7cz
TYOdYR1o559/vqtatardY1MvKnVPPvmk5W2pBm1ax07lcGnsBE4FMUl82bt3
r1u2bJmbNm2a3T9pnkj3c6oZB8Sa7du32/j09ttvJ7kGVqtWzRUtWjSkMcnt
t9/u7rrrriQfD9TdUl51OBGTIBziKSbZtWuXe+KJJywO0VmmelzaB6bz5Fav
Xp1Qh09nLmiP9tixY+0eW+cw6L2ls+e6dOliX4PgNLYGGwdTaq+99po9v6rT
BZwsYpLYpvMbdP/SunVrO+szpbkira3q/Ln333/f7d+/33fXgVTp9a25N83B
JXcN1H1IKOIR5U1rnOjdu3eSz3Xu3NlqmHA+CWJRvMQkWhdRTJElSxY7Oy69
7/3Fixdb/Sid8XDppZeGvY5erKpQoYK19Dy3qteusUt5XPBL181YRUwSm44e
PWpzx4E4ROOrzrTWHl3V6dP80Nq1a+1soy+++MJybBW3qIaGvl7XKN1naW0W
iGb16tWz13nia6DmQbNly2b7K0MRk7Rr185qKSr/PPHndI67arqHGzEJwiHW
YxLlW9WuXdveG/r/YO/R9DStd+r9rJ+nGkWHDh3y/RCjisZU1ZNNz3Oq2sDa
5657E0SG5si0ht++fXt35513uly5ctm9rl7XWkPUfJ6uXapPqfh73759vruc
KmKS2KOzbm644Qb7u+l8BtWA27NnT5rHjq+//trGHNUtuvjiiy22AaKVXt96
rasufuLXsva4n3XWWUHPL0lPU76j4hHFJYk/p7lYje+aow03YhKEQyzHJJo3
K126tOVq6T0YivkHNe1Hefnll2380JpAPN8DpdcHH3xg45DWldL6fN544432
PCL8tmzZYnGG1gwDOTCVKlWy65dqUWpuWtcS7Y+sXr16wnmXeg81a9bM6kFE
K2KS2KIa4BpDCxUq5D7//PNTGpO1jqJ9f/r7ay6avX+IRv/884/LkSOHa9iw
YZLXsPZJaQ0lb968aapZGawp//yaa66x87+CnQmvsV9jeSTypIlJEA6xGpPo
mqR4RP2fPn16yOKR45vmjzUfUbFiRdZL/j/dD+o+VjFGsLPBEzfNa2rc+vjj
j313Pa7puVbcoXtA1W1Q7ovm6tLyN1J8qX1Vil80x9a0aVPbmxVtiEliw7Fj
x1zbtm3tb9W8eXN7LYVqTFZ9U91zlSpVys5AAqKNzoLSOKw1wmDrGFrvUx0u
rXek57WvGsOa31N+utYPE39eZ03pvaH5pkggJkE4xGJMopz4WrVq2fsvXPFI
oGkfvMYX3ePhf+nMdo1FOvtb8zHJPXf626guu+bpET66Pum8GOW3dOrUyW3b
tu2kXuu6d+zZs6flPWuuT7n+0YSYJDYoX1Cxre5ZwjEmz5w501144YV2f6ba
XUA00Xypzm1XLZhgc0ILFy60tRK9hvv375/kfJHETbmOQ4cOtTkj5eDOnj07
6Ndp3Vs1MSMVqxOTIBxiMSbRXJneCzprJJzxSKAF3nvM9f8f3bvqvkPnJ+re
9fjY5Ntvv7V5UtUL0GtL4zLCQ7l02qtTrFgxt3z58pC83jUfd8cdd9jfV9fM
aEFMEv1076S/UajPrE7cdBaE5osrV64c03UbEJ8mTZqU4vvg+++/d/fff7+N
scrDUhz/2Wef2bVTNYWVqzh16lRbvy5QoID9LM3tBTuPUS3wvlN9iEghJkE4
xFpMsnPnTuuz6kRGIh5R0z219glr7iMW9gJHis6hDIyXmltX3vhll11m/1bO
29NPPx32eoQZmeqZ6RzfGjVqhDQ/JjA317JlS/tbKv6MBsQk0U31QbRW16RJ
k4iMy6NHj7bXwyuvvOL7oQNJqP6n3svKK0gptta9jO5pgtXE1nVV415K+SCa
E9T7TrXsIomYBOEQazGJ5t+VD7Rx48aIxSRqyg1VDpdyRfF/jhw5YmvJ3bp1
c4888ojN6+j8Sa1HI3w0h6bXY506dVKtY6T9lNrXo9hC7x+d2TN48GC7lqT2
uld+nuby3n33Xd8PmZgkimkPia4jmqPQvFGkxmXVb9dZDD/++KPvpwA4weHD
h21tQ/NzY8aMSfF1rOvl3Llz7es0NiuOUbzy66+/pvh9ike0f/DWW2+N+Dk+
xCQIh1iKSVRnS9efYDXwItE0D6E8e9XWAHzR2r72SSq/KqVcZNWl1Fm/gRrA
yqXTOpbm3gLzcFr7U4yis2OC/QytESoW0PvOd00uYpLopX13+ttMmDAhomOy
YhHl0KsuAxBtNFbdd9999p7WnFBaao6ktamGotZHVNNd81KRRkyCcIilmEQ5
k8pVUa6lj5hE8xiB6y7gS7Vq1Sw2Tu4sHn1c+yv1WtXZEH379k1yhqhiEN1H
NmrUyPajaP+kcmGC/bwdO3a4/PnzW507zYf7QkwSvfQ603XEx7jcpUsXWzPU
uXRISnHbrFmzrB6zxgGf7+GMSOslqtGrsats2bKnvO9Pc0NVqlSxn9e4ceOI
r48EEJMgHHzEJFqP1Ps0vfR+1ryvj+teoKk2eKTzNoEA5RXrOpDceTzz58+3
Ws2KMbTfJC3zcitXrnTly5e3HK1nn3026NeovoN+r88z64hJopPusfR30evN
x5isWETzxT169PD9VEQN7ftX/k/RokWT7FG49NJLXffu3aPyjBedq6t7XNWv
0fk2mjfRuR7xYOLEiS5Pnjw2B6Q9V1999VW6XufKH9ceP73WNSflO5+WmATh
4CMmUb6J9kPrnPQVK1ak6Xu0V1rvRZ0J7jMmefTRR21Mp9YLfFBMfv311weN
NTR/pljkuuuus/ot6Xldq27a448/bteYXr16Bf2ae+65x+rq677BB2KS8NI9
6sn8bVV/Wjntoa6zkJ6m8xT1voBzBw4csH3Teq8ov1P394sWLbLzMLTGr/th
3Rfr/D7Vf4oGet0pFylnzpwJsZPmSPT/yo1QnVut/8Y61chR7KzcWz22IkWK
2B6/999/386J0pqW3keKsxWDaH+J9mhqHVJfr/eZcm195GolRkyCcPCVu6Wa
TYGxp3Dhwq537962fpIcxS76WtXL8xmTvPXWW9YP5bMAkaS8i+TWSLTXSnOi
WiNJLqcrLU3zcLon1h76xJ/79NNP7fdPmzbNy+MnJgkv7ZPT79d+PdXQSiud
X6iavD7HZe0L1j1sNJ71GUmaK9M595q/S24tVU1nZKgGrXIyfdcjCey50N9P
NTu0b1t/R827aJ5F9waBfXDRdmbSyVLcqHUsnbOmc0qC1dwKNMUhytfVukg0
1f0kJkE4+NxPUr9+/RPee7oWlytXzo0bNy7JuemBPZTJ1eeOVNP7T/3Q3hIg
kjp27GjX5WB1jQYOHGjX9FM9Q1T3JzrrpHjx4knOw9S/dTajr/3ExCThp/n0
QE2EwFxRSmewqe6eaieE+zyS1JrmmNXneLlnPVkfffSRPQ+vvfZaqs+Zcu40
nrRo0cJrn2vXrm21qVKqmfvTTz9Z7rZqbaQ1tyJWaH+PaiNqHui9996zdS3V
rtT8q+qL6j0WjYhJEA7pjUn0/tF7JBRN91bKgwo2N6C5A+V2adyUYcOG2cd1
ffR57Vu3bh373OGF1u91Fkni16TWSHS+r+bSQvEaD5z3petj4s/pPekrd5GY
JDKUK3L8WKw5d+VGaa4o8T5A5f7oa1K6n4xE0xq7njfl/2RkJUqUcLfddlua
n7euXbva8+Zrz0YgXyKlNZ1AU10O7efUuhy50/4RkyAc0huTaG01pXXG9DbN
u6b2NboXe/jhh23s9HndU1O+p/qkGkVApOg+XHnVffr0SfKa1HxaIKcqVK9z
7fdSXkHijwfOqfORh05MEhnK4dIaSbCxWLmBx+d2aV1FH1ddJ99js3L0VYMr
o1I+sf4Wmr9L63OmPE+tryon2QfVB1Qcldb+KvbVY1ywYIGX/uL/EJMgHNIb
k+i+RzV5Q9WUI5JcLKK+KU9E17tXX32VdRJkWKqNpdfd5MmTk7wmda6h7sdS
OzsxPa1Dhw6W15H4Z2rfpfqhuqKRRkySNq1bt7Z9AmlpefPmtTXpxE1nfqQ2
V6T5atVp03+nt4ZQOJrmt1SnIaMK5BWr9l56njfVxdDfMdL0PlYN5+RqagRr
yi3V/ornnnsu4v3FiYhJEA4+95O8+eabSa5zmgvWnhLlUx5fdzuQJ7t+/Xqv
17158+ZZP/T/QKQoBtDrTrnUiV+TOiv4zjvvDOnrXPsp9fsS75fX3tNArkWk
EZOkjebJlWOXuClWUY2stLQyZcokG4tojFb9N+W966xpfUz/7zsm0b11586d
Q/SXiD2zZ8+2v8XXX3+drudN9WmVrxdp2huq/qpGbnr6e+ONN9q5HPCLmATh
4Csm0Tpz9uzZE65zqkvYrVs3y40KJqV54ki2kSNHWj+U2wpEimpC6nWnPY+J
X5PKfVCtnVC+zgPnoHzxxRdJPqe5zVdeeSXizwExSWQoL0u1YoPl2Spe2bJl
S8LXBu4rtdfE57is9Txfr8toobFBfwvVlU3r86brsJ431S2LtE2bNp3Ua0e5
Fc2aNYt4f3EiYhKEg6+YRHO7x+dmpbZnTeeTqDaH8oV9Xvs036j9xOyxQyQF
1gmD1fm96aabrHZNKF/nqgETuN4c/3HV59Q9s84zizRikvDTHnbFuMfXIU1p
jNbeE/VX9bl8jsuBOSvtmc7IVN9Xez7T+rxpvTOQfxBpyoNQ7Kt727T2V7nb
WbNmtflL+EVMgnDwEZNoT4bmfRVnpIfObLv11lu9XvsKFCjgGjVqFKZnBggu
sG6xZMmSJK9J1URSLk0oX+eBc3gSr8ts377dPq71wkgjJgk/1WE6PjcrLc+1
zioMdUyc3vbGG2/YayO5dfaMom/fvvb3Ux5Xas/Ztm3bXL58+ew150v58uWT
PQM2WAvklKr2M/wiJkE4+NxPkl7Dhw+3GiHpPaM6VC2QO/3xxx/7fiqQwQRy
ZLRekvh1+cQTT1gepPZ/huq1rrOF9TMTn1Gi/bOB/QORRkwSXpqDVl033aum
h2os6PztUNZYSG9r0KCB7dnP6HQWn+pUqj5aSvtK9DdWzSutOehcQl8Ccy39
+/dP9W+ss82vuuoq2+sE/4hJEA6xFJPomnfeeee5Nm3aeLnu1a1b1669ic9z
BMJNOTXKXdQ8duLX5YwZMxLyVkL1Wtd6oM40TfxxzQvod/k4z4CYJDppz1Fg
rsbHuKy6C8oxe/rpp30/FVFB5wtqf2aWLFls/8/xc3iKRVQDQTleikeUo+mb
9obo3E2tyyX3N1btcd2n6O+8du1a312GIyZBeMRSTCKq9aixNtLnuWutOJA3
Dfigc4w1t5n4tRk4X115EKF4rQf20wdbk1Gccu2113p5/MQk0Unn6GqN4r77
7vMSk2hvk9bPfc73RxvlQmnuLlCrQGue2gepvC79W2NFtNzba0+S5vvUr4oV
K7qxY8dazqjmPbTWo7q/gfrUc+fO9d1d/H/EJAiHWItJdF6vxqf7778/Ytc8
3fMpv1r3ffF8P4Toplxx1cjRnGHi12hgr2p662ombppz1hyrxoRgn9N4oVwx
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
X/aSAAAAAAgV7SUJdsZIx44dLSYpXrz4CR+fPXu27YkHAAAAgFOl/KsaNWoE
/Zz2up9xxhkWlyxbtizh48rzSm7vOwAAAACkh2KNbt26Jfv5e++912KSli1b
JnyMvSQAAAAAQuWVV15x8+bNS/bz48aNs5gkS5YsttddOV5169aNYA8BAAAA
xDPtJdH5h8k5fPiwy507t8Ulw4cPt70kAwYMiGAPAQAAAMQr5V/VrFkz1a/r
1KmTxSTFihVzXbp0cStXroxA7wAAAADEu6VLl7oePXqk+nWbN29O2Ot+3XXX
uWPHjkWgdwAAAADiXa9evVLcS3K8ChUqWEySXI0uAAAAAEiPP/74w1111VVu
7dq1afr6CRMmWEwycODAMPcMAAAAQDybNGmSa9OmTcK+9SJFilgtYOVnpUR7
3XPlyuVWrVoVoZ4CAAAAiEdTp05177//vtX4DbTRo0e7nTt3pvq9Osvk33//
jUAvAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACInAMHDrhVq1a5sWPHur59+7pnn33W
tW/f3rVq1YpGo9FoNBqNRou59tRTT7lu3bq5gQMHuilTprjvv//eHTt2zPdt
NxJZvXq169q1qytTpozLlCmTO+2002g0Go1Go9FotLhtF110katZs6YbNmyY
++2333zfjmdYBw8edMOHD3fFixc/4e+TO3duV61aNYsn9TcaM2aMmzx5sps1
axaNRqPRaDQajRZzbeLEiW706NFuwIAB7pFHHnFly5Z15513XsL9r+bkq1at
6mbOnOn7Fj3DOHz4sP09cuXKlfB3uPHGG+1j69ev9909AAAAIOwOHTrk5s+f
75544gl36aWXJtwXly5dmtgkzObNm+cKFy5sz/eZZ57pGjZs6L755hvf3QIA
AAC8OXLkiJswYYIrUaJEQmxSr1499/PPP/vuWlzR86y96meccYY9x/fdd5/b
uHGj724BAAAAUWXSpEkuX758ds988cUXu88++8x3l+LCnj173B133GHP64UX
Xug++ugj310CAAAAotb+/fvdk08+6U4//XRrXbp0cf/++6/vbsWs7du3uyJF
iiTkxm3dutV3lwAAAICYoLrBWivRvXSLFi0s9wjps3PnTlegQAF7DqtXr27n
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
rVoFBx98cElNKp6R6BlqTPmAC02SjagvhTjx8JrjS0G73HfffXn7UqRJhPAb
4qXOOeecLTTCmDFj7OynEHWAw4GfnP3i9ddf3+I19v6+ffvG+l6lSfxAmkRU
BehZUaNGDesn9+CDDwb/+c9/NtsTqXlErgP7MPeYSAZsYDTG3XffbXqD2pQn
nHCC6cXWrVtbjXw+D/Yp6t76RFo0SZSoL6VWrVolvhS0Oj1lQl/KTz/9VOrv
kSYRwm+I0aKXYVQj0OuWZ2G23I+KDvYJYm7xlWd+nRhe6nHxt+JEmsQPpElE
sYNdxXl8gwYNghUrVpS6Z1JjpE+fPrYXv/jii66nLTwnrZokGxXxpUiTCOE3
EydOtDVMXFX0eYgPhbOhQugR9hd6xfbo0WOL18h3C+cQJ9IkfiBNIoodbEJy
fxctWlTu3skZDvswMUO+ncuLdOGTJonCvZ/pS0GXhL4Unpn4UqhRzP/37NnT
9XSFEBVg9erVludOr9nos3DKlCm2vsn3q6wmoabJdtttl/UZTJxu3bp1Y69V
Ik3iB9Ikopih3iE957Kdz5Q2yKfmHps9e7br6QuP8VmTZCP0pRDXhSYJfSn4
FSuTlyKEcAd1XojfivYiIb6A8zn8G9n8KLmOGTNmWE4g/tToa/RP5LyQfihx
I03iB9IkyfPVV1/ZOqWO6ZAhQyxeghrh999/f/Dmm28GP//8s+spFg3Lly+3
++Wxxx7LeQ+lZuHOO+8c3HLLLa6nLzym2DRJFOIgeX/UJSjNlxLmpeB/FEKk
D3LOWbMTJkzY4llIXgm9jw477LCs/dfLG9gz2NeNGze2+onR18khpG/jd999
F/v7lCbxA2mSZOCcgZp7nEeEz+3w2V29enXrtRB+DV9qs2bNLG6CXGxRcdgT
uaZz5szJay/lc1KcfHLwTHr77beDWbNmmZ/q1VdfDZYuXRps2rTJ9dQqTLFr
kmz5JN98881mvpRwX8vMS2FfIy4MH6YQwj3UdyHnkvUbfRa+8cYblptOvMFL
L72U0/MTH8v48eNt/ZPHmU3PzJ8/3+K5iOtKAmkSP5AmiRfiJ/GNEt/A2Tv9
GO655x5bj9hhmWuU+qivvfZaMHToUKtRSy0K1jRx20mcIxQjXH/ul5dffjkv
TcL+S412EQ/r1q0LHnnkkaBLly4WG5Cp0zMHtixnbPgS33vvPdfTzouqqEmi
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
hBBCCCGEEEIIIYQQQgghhBDG/wPyLhOc
    "], {{0, 559}, {805, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{615., Automatic},
  ImageSizeRaw->{805, 559},
  PlotRange->{{0, 805}, {0, 559}}]], "Input",ExpressionUUID->"c20ed050-4334-\
47e2-ba49-4907c1be6db4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NFAStar", "[", "machine_Association", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "minIndex", ",", "newM", ",", "newTransitions", ",", "newAccept", ",", 
       "newMachine"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"minIndex", " ", "=", " ", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"newM", " ", "=", " ", 
       RowBox[{"MachineApplyThreshold", "[", 
        RowBox[{"machine", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newTransitions", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"EmptyTransition", "[", 
           RowBox[{"minIndex", ",", 
            RowBox[{"newM", "[", "\"\<StartState\>\"", "]"}]}], "]"}], "}"}], 
         ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"EmptyTransition", "[", 
             RowBox[{"#", ",", 
              RowBox[{"newM", "[", "\"\<StartState\>\"", "]"}]}], "]"}], 
            "&"}], ",", 
           RowBox[{"newM", "[", "\"\<AcceptStates\>\"", "]"}]}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newAccept", " ", "=", " ", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"newM", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
         "minIndex"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"newMachine", " ", "=", " ", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Name\>\"", "\[Rule]", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<(\>\"", ",", 
            RowBox[{"machine", "[", "\"\<Name\>\"", "]"}], ",", 
            "\"\<\!\(\*SuperscriptBox[\()\), \(*\)]\)\>\""}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"newM", "[", "\"\<Transitions\>\"", "]"}], ",", 
            "newTransitions"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<StartState\>\"", "\[Rule]", "minIndex"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "newAccept"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", 
          RowBox[{"newM", "[", "\"\<StateExpressions\>\"", "]"}]}]}], 
        "\[IndentingNewLine]", "|>"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7487045581490107`*^9, 3.7487045719305487`*^9}, {
   3.7487047047346973`*^9, 3.748704885098873*^9}, 3.748705302383275*^9, {
   3.74870536295217*^9, 3.748705371149591*^9}, {3.748705402510075*^9, 
   3.7487054412116423`*^9}, {3.748705648603009*^9, 3.748705745937058*^9}, {
   3.7487058887337914`*^9, 3.748705894022087*^9}, {3.748705976402442*^9, 
   3.748705995321293*^9}, {3.748719272227729*^9, 3.74871928403937*^9}, {
   3.7487384672229953`*^9, 3.7487384675042257`*^9}, {3.748801068950972*^9, 
   3.748801079915145*^9}, {3.750258036678369*^9, 3.7502580535842323`*^9}, {
   3.750458883956998*^9, 3.7504588853391447`*^9}, {3.750459955991395*^9, 
   3.750459957270669*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"78b93a45-c595-4808-a5eb-376b998b90df"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQe4VNXZtqPB3uKnItao2P2wi1iJMTbsosYSGxasJKKg2AuKYsMOihV7
i70r9oZdE8UusUdj41PEsv/cK/8+gcPMOfucMzNrz577vq4VIjOcs2bP3mut
Z633fd6F+/x5q72m/tWvfnXQ9P/+n612O2Sd/v13G9T7N//+j236HbRP3357
7rFRv4P37Ltn/x59fv3vv9xnql/9av1//59O//7/iYiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiISAbef//95O23
325qH330UYvv//LLL8P7/vWvfyX//Oc/m/7dN998U6Met51ffvklfM577703
GT58eHLSSSclhx12WPLnP/852WuvvWw2m82Wg3bAAQckhx56aBijzznnnOSu
u+5K3nnnneTnn3+OPY2IiEjBQctss802yfrrr5/8z//8T/KrX/0q6dSpU/LW
W2+V/TdnnnlmstJKK4X30maeeeZk9dVXD/NXnnjhhReSoUOHJhtttFEyyyyz
NPXXZrPZbPXVZpxxxmTddddNTjjhhOTpp58Oe10iIiLVAn205JJLhjlo4MCB
rb6f96CHPv/88xr0LhucdbHPuPTSS082p84666zJGmuskfTp0ycZMmRIMmLE
iOTqq69Obr311uS+++6z2Ww2Ww7a7bffnlx77bVhjGZfa88990x69uyZzD77
7JON6V27dk2OOeaY5N1334097YiISMEgRqFXr17JhRdeGOaczp07Jz/88EOL
/+bII49MRo8eXZsOtgJxfH379k2mm266pnlz1VVXDRrpmWeeSX766afYXRQR
kXbCHEUMwOmnnx500lRTTRXGeeIb/vSnPyV/+9vfYndRREQKwosvvpgccsgh
yfjx48PZCvPNNddc0+K/2WyzzZKJEyfWqIel+eqrr0I8OnMjff7Nb34TYtNf
f/31qP0SEZHqwTnRscceG/bwGPunnnrqZNddd00+++yz2F0TEZE6Z9iwYU35
QXvvvXeYZ9ZZZ52y7+csaauttqpV90pCrMU888wT+jrHHHOE+Livv/46ap9E
RKR2fPfddyHnNZ0LiLe74IILYndLRETqGHKLUj+5l156KcwvxCmMHTu25Psf
fvjhEKMWg++//z7p169fUx932mkn9whFRBoYYh2OPvroZNpppw1zwxZbbBE8
U0VERNoCvj6bbrrpZH/XvXv3MLccfPDBJf8N+a5PPfVULbo3GePGjUuWXXbZ
0Lf55psveeihh2reBxERySfPPfdcsuiiizZ5M7z22muxuyQiInUEuUXU8pmU
kSNHNsWncT7THHRUrXOL/v73vycLLLBA6NcGG2zgGZGIiEwB8dTbbrtt0xwW
Yw9PRETqkzPOOCPUO52U//u//wseBswrV1111WSvTZgwIdlyyy1r2cUQ28f8
Rn/w2tZfTkREykEcBF5CzBkzzTRTiP0WERFpDXKLiM1uzr777hvmFDxRJ4XY
tZNPPrlGvUtCrfM0p3bAgAHW8xMRkUycdtppYe6YbbbZQmyEiIhIOagJgd92
KVL/BdqktSHILaLeeC344osvmmLF0WkiIiJt4bjjjgtzCPtr5KiKiIiUgjp5
RxxxRNnXe/ToEeaTAw88sOnvyC368ccfq943zoXQbPx+zrTQcCIiIm1ln332
CXPJGmusUZP5S0RE6g9qh99///1lX7/44oub6qWSc0RuUa3qFtE3fvdSSy1V
Ms5PREQkC/gErbbaamFOIe9IRESkOZzDoHfKQc086uQxl4waNSoZPXp0MnTo
0Kr366233kqmn376ZIYZZkheeeWVqv8+EREpNu+//37yP//zP8nUU0+djBkz
JnZ3REQkRxCXRu271th///2DLlpzzTVD3bxnnnmm6n3beOONw+8cMmRI1X+X
iIg0BhdddFGYW1ZaaSV9TUVEpInnn38+Oeqoo1p938svv9zkv0BN1WrHZt92
223hdy299NLJDz/8UNXfJSIijQN5q+QYMcdQp09ERAROOeWU5IEHHsj03tVX
Xz3MI7169apyr5Kke/fu4XfdddddVf9dIiLSWDz77LPJVFNNlXTt2lUPBhER
CTlFSy65ZDJ27NhM77/00kuDVql2bhH1Zfk9yy+/vHWKRESkKrDHx1xzxRVX
xO6KiIhEgpqsgwcPDjFqzAlrrbVWMnz48OSjjz5q8d+l/gvVzi3CA5x+3XDD
DVX9PSIi0rg8/vjjYa5ZZZVVYndFREQiceWVVyYnnXRS8MAeMWJEct5554X/
fu+991r9t/fcc09Vawh99tlnyTTTTJN07tzZ2AYREakq3bp1C9rotddei90V
ERGRyTjzzDPDHNW/f//YXRERkYJz8sknhznnsMMOi90VERGRyVhvvfXCHGVd
CRERqTbjxo0Lcw7nRiIiInkBP+6ZZpop1NyrZqyeiIhIyhJLLBG86T755JPY
XREREQk88sgjYd9uyy23jN0VERFpEPbdd98w91x77bWxuyIiIhI466yzauID
LiIiknL55ZebYyQiIrliv/32C3PTrbfeGrsrIiLSIDz99NNh7undu3fsroiI
iAT+8Ic/hLnp9ddfj90VERFpEL766qsw9/zv//5v7K6IiIgEll122TA3ffvt
t7G7IiIiDcSMM84Y6uaJiIjkgUUWWSR4AulFJyIitaRLly7JDDPMELsbIiIi
AfbqZp555tjdEBGRBmPxxRcP8Qo//vhj7K6IiIgkv/nNb0LtIhERkVpCbhG6
6P/+7/9id0VERERdJCIiUVAXiYhInlAXiYhIDNRFIiKSJ9RFIiISA3WRiIjk
CXWRiIjEQF0kIiJ5Ql0kIiIxUBeJiEieUBeJiEgM1EUiIpIn1EUiIhIDdZGI
iOQJdZGIiMRAXSQiInlCXSQiIjFQF4mISJ5QF4mISAzURSIikifURSIiEgN1
kYiI5Al1kYiIxEBdJCIieUJdJCIiMVAXiYhInlAXiYhIDNRFIiKSJ9RFIiIS
A3WRiIjkCXWRiIjEQF0kIiJ5Ql0kIiIxUBeJiEieUBeJiEgM1EUiIpIn1EUi
IhIDdVF9Mm7cuOT+++9Pzj333GTIkCHJIYcckuy///7JXnvtZbPZMrYBAwYk
xxxzTHLKKack119/ffLyyy8nEyZMiP14NzzqIhERiUGRdNEdd9yR9OjRI1lp
pZVCW3nllZNjjz22xX/Tq1ev5A9/+MNkbe21107++c9/1qjX2XjttdeSYcOG
JZtttllYM/Cd2Wy2yrdf//rXYexAM911113JDz/8EPvxbzjURdIRPvzww+TB
Bx9MLrnkkuScc85JTjrppOTQQw8N+4c2m631dvTRRydDhw5NRowYkVx33XXJ
Cy+8UAidkIUi6aJffvkl+de//pW8++67yRxzzBE+17TTTpt89tlnZf/NF198
kdx9993JbLPNlqy44ophHfTJJ5/UsNfl4bOcddZZYY2Wrtmmmmqq8J3tvPPO
yQknnBD2uBn/n3322eSNN95I3n77bZvNlrG9+OKLyeOPP57ceeed4ey1X79+
YW9kpplmanrmGEs4i+UZk9qgLpKsMO8/9dRTIW5i/fXXT2adddboeys2WxEb
68+uXbsmffr0SUaNGpWbtXKlKZIuSvnb3/6W/PnPfw7fH58Nzdsaa6yxRthj
ygMff/xx2KueZZZZQv+nm266pHfv3sk111yTfPrpp7G7J1J4Jk6cmDz66KPJ
oEGDkgUXXLBpXlh33XXDPoRUF3WRtMZbb72VHHnkkclCCy3U9Hxy1rvCCisk
O+64Y3L88ccnV155ZXLLLbeEmHP2NWw2W7b2xBNPJPfdd184Kxo+fHjSv3//
EF/VpUuXyZ63jTbaKLnqqquS77//PvaQUDGKqIvY97311lvD/hGfbdFFFw17
SuVgDUR8WmzIayDub4YZZgj9XnjhhZOzzz47nBuJSBx+/vnnoIUYI9gvS/UR
sa1SHdRFUo7nn38+2XrrrZOpp546PIuzzz570rdv36B/vvrqq9jdEyk8nD2w
Nu3Zs2fTnIhe4gzim2++id29DlNEXfTHP/4x+fLLL8MZH3F0fD72i8pBHA17
SzFh3bXYYouFvrL/ddlllyU//vhj1D6JyOTgy8DZLc8pY8thhx1m/lEVUBdJ
c/Aa2mqrrZr2qtdaa63khhtu0CdFJCLkrRx11FFNuSv8ef7554f9xHqlaLqI
c6GNN9646b+32Wab8Pn4sxzk6RAzEwP6S04o55HTTDNNyG/49ttvo/RFRLLB
PsZSSy0VxhY8XojpkcqhLpKUn376KexDpzl/nNXGmq9FpDSsW0899dQmfbTK
KqsEr4Z6pGi66NVXXw25OSnER/L50BwfffRRyX+zxRZbRNlz+vrrr0OON/1b
fPHF6/YeEmlEiKfee++9w/PLOv7ee++N3aXCoC4SwDNpgw02CM/YPPPME+Io
RCS/kPfB/j5xruTG46NcbxRNF+HJiV93CucxaXwa+UbNIbcIXVRriPEjP5R+
EfdXhJhMkUYEPxT2somr4/9Lx1EXCXnfaY73dtttF/YRRaQ+IKZi3nnnbVrj
1pMvQ9F0Ede/+fh58sknN/kYNI95JLdo8ODBtexiOLfCC4I+4fHRkieEiOSf
J598MsQPsEd28cUXx+5O3aMuamzY25xxxhnDfjP1U0TqAWLJHn744eTqq68O
Z5toe+JAGxX8k9OYKDwa6sUXpUi6CH2x6aabTvH31GhlfOVz3nPPPZO9Rm7R
Y489VqsuBj+IZZddNvQltteDiFSOv//97yHWp1OnTsEbS9qPuqhxwReYuHfq
VDzwwAOxuyPSKm+++Way7bbbhvu2ec0fzjwvv/zy2F2MBjFZ1NvkWhAjVQ/+
ykXSRa+88kqo01sK7lk+J342k7L55pvXzE+K+2PttdcO/Zg0B0pEigF1YqkR
jdc+tSalfaiLGhPygYlH5bsfM2ZM7O6ItAranThqYgVWXnnl4CG/1157hRpa
CyywQFMNykY+N+LM4i9/+Uu4FmuuuWby3Xffxe5SixRJF+Gnftddd5V8jXuX
z8leblq/FZ2y5ZZb1qx/aCH6sNNOOxk7J1JQHnroobBv+Nvf/jb54osvYnen
LlEXNR7UJZp55pnDGpP4I5G8Q87GXHPNFfbbS/l6sed+wQUXJHfeeWeE3uUL
1rx9+vQJa2DOI/Ls410kXdSSfwHfCZ5vfNY0n4j4OeLoWoJcscMPP7zDNe6J
l6b+Fdc771pZRDoGfqWMNXmoF12PqIsaC9aX5NxSr8I1pNQL1M+ae+65rTWZ
Ea7TJptsUtYHLS8URRehe9CgLUENBD7rggsuGM400Uf4LpQCLbTnnnsmvXr1
Cv/moosuanff0Grzzz9/2AcjB0FEik1aR42x48orr4zdnbpDXdRYsKfJs3Lc
ccfF7opIZohDIm4afcRZCLWGiaVj7f/000/H7l4uIcceDzRit/Jah6wouog6
9IMGDWrxPZP6L7An1VJu0RtvvBGuyTPPPNNhXYTnHD8DXzwRaQyIq5h11lnD
fiJzgWRHXdQ4sKZkfsS3Ks+xNSLNISdj+umnD/cva+nTTjstOfHEE5P55psv
GThwYOzu5RbW1eQRUkMnj/7dRdFF5BY195orxfbbbx8+L+dAWXKLOqqLxo4d
G3Tx0ksvHfKZRKRxSOPp9FlpG+qixoB1B3l4eHK/8847sbsjkhnWcyuttFKy
++67h7z2gw8+ONlhhx3CGpM9cDy7pTycYzA3HnvssbG7MgVF0UXUfRs/fnyr
7xs9enSTfyK6vjU6qot222238O9vv/32dv17EalfmDsXWWSRkE/++eefx+5O
3aAuagzStVGWuVgkT9x4440hhi6P5x31QLongnfruHHjYndnMoqgi8jfWX31
1TO9l7j/JZZYInzmLJ43HdFFfNecFS633HL6z4k0KMOHDw9jyFFHHRW7K3WD
uqj4UMeEOFPWRrWqlSFSKag/ST2e1mANKaWh/i1z4wEHHBC7K5NRz7qIsfSF
F15I1l9//TC+kueWRX8QA8r+bZa4to7oosMOOyz822uuuabN/1ZEisGECROS
eeedN/i5GkubDXVR8SF+hvnxnHPOid0VkTZz/fXXh/sXj66//e1vYZxPYa/+
ueeeC3WMNtxww4i9zDf4n3FOQY5WKZ/zWNSrLiJ2c8kll0yWXXbZEOOZth49
erSqjYhn2X///TP9nvbqIvqw0EILhbl90udFRBoP6k0zjtx6662xu1IXqIuK
DX69Xbp0STp37mzdCqlLWNetuuqqTXkZpdoqq6xi/HQrXHzxxeFacf6WF+pV
F9WK9uoi6h3x7/bbb78q9UxE6oVXX301jAfbbLNN7K7UBeqiYkO+Lc8Dueoi
aGPiKvHeePvtt0PjvOXZZ58NjVqT6f+n1kn6no8//jj8u1iQW3TGGWcka665
ZogHYNwiLpS6daNGjbKuUQa4huRp4U2Xl3wTdVHLtFcXHXTQQeHfPfLII1Xq
mYjUE4y1xPs6V7aOuqjYpPWKXnrppdhdkSpBTA/7QdREGTFiRIg3w4eK+ihr
r712GA+JL059rjvaGC+oDdy9e/dkgw02CL5w/fr1S0455ZTk2muvDfnk+Grr
BZ8/qP3Ed/jkk0/G7kpAXdQy7dVFK664Yqjjaj6piMCf//znMJY89dRTsbuS
e9RFxYV9AfYHlllmmdhdkQ5Cfgi1Hm+66aZk8ODBwRd4+eWXT2afffYpdMsc
c8wR8h569uwZaqTgb815IV6EeNOgXa677rrws+67777QHnrooaZzIsbN9O/R
WryXdumllyann356cuSRR4b4HPQQOT3oI3IZpplmmsn6gRcWdUXXW2+95C9/
+UtywQUXBM1kjbl43HvvvU25WnlAXdQy7dFFPF9TTz21+XYi0gS5RYwlQ4YM
id2V3KMuKi6sb3kOWJNK/YAG4nwPDbPrrrsG/TPddNM16Q38ltkP3nHHHYNG
QW/cfffdwZMg5vqS86EPPvggefzxx4P/2dChQ0N+ObqI+quTaqb5558/rNuO
PvrooL1ixug1EsTScW6Y1Ve62qiLSvPVV18ln3zySfCu4/rsvffe4dniOWkt
BvLRRx/Vl1dEJoPxhHGB/UxpGXVRcTnppJPCc3DzzTfH7oq0ADk/1CulxtQ6
66wTPHxT/bD44ouHGqac9fA9vvnmm3Ubn8Y+NvlLxPoRd8d5FrE+fM6pppoq
+Hvtsssu4XVymqQ6cI916tQpePnFRl1UmkMPPTR4LLKnhZcU+UL8N601/5wL
L7wwXNMrr7yyRr0VkXqA9T57qtIy6qLiQqwV8yP7BJIvWPez/t9kk02a8n5m
mWWWZI011giagbi1zz77LHY3qw5nY+RGXXbZZWHNt/TSS4cYIK4Hdbr5O64F
++dSGdK6NnnIMVIXVZ6BAweGazpmzJjYXRGRHIGvK3uR0jLV1EXvv/++daQi
Qi1Mvl+JD2c8xLcQV5bGlLFnj78avsnUhKzXc6BKg47HY+5Pf/pTMvfcczfl
Kv3hD38Ie+FffPFF7C7WNeSJcU3RorFRF1UePFe4psTdiYik4MXE2GDNlpap
li5iH5h8f+qKkC8utYUYdPYF2B+QeKB3+vfvH/JpGI/mnHPOZM899wyeB56B
tA738fPPPx9iQrmXibfD36FXr15hXe81bDucE3Evcm4UG3VR5dl6663DNfXZ
EJFJYa+RseHTTz+N3ZVcU83zIryn8KMiT3zYsGFV+R1SGrybuf/xI5PaQh4N
9/sSSywRvgOeMfwTyCGydkDHePfdd4NG4iyUa0sMIjlJ6E/JxnvvvReu3R57
7BG7K+qiKrDRRhuFa8repIhIyr777hvGBvKUpTzVzi9izwr/C76LrbbayhiY
GkEdTq75zjvvHLsrDcMLL7wQzoI4pyNHhtyhW265JZkwYULsrhWSsWPHJkcc
cUTSpUuXcK+vvPLKycUXX2yMQCvgacb1orZZbNRFlYd4U8YfEZFJSWsYUbNd
ylMr3wViXvDZWmCBBUKtFKku7Adw/7M/INWF+/l3v/tdU5wc/lHvvPNO7G41
DNSuvOaaa0IN27R+EzWe8uC3lkc4s+Q6EYsYG3VR5VEXiUgp1EXZqKUfHWvF
1VZbLeQI4LllLe7qQS0baxdVl0n1EDFz5LNTH0bi8corr4S8czwt0EcnnHCC
+qgErJtZP8dGXVR51EUiUgp1UTZq7dPNXiW1HH/961/ryVBF1EXVg5qr1IBJ
9dAVV1xhLH/OeOutt0JOV6qPqI9pbtd/URcVF3WRiJRCXZSNWPWLHnzwweDR
Rc0W6rhIZVEXVR7OHQ488MCw1sZPBC9p9VC+IZ4UDx7OqJdddtlQV7Yl+I6p
LYX2Zc/mww8/LOR3rC4qLuoikfZBTNPIkSOTPn36hNgm6kTMOOOMYYziz86d
O4e/53XeV2/x8uqibMSs64onQ1p7tHfv3noyVBB1UWW5/vrrQ92h6aabLuT6
m9tfXzzyyCNJt27dgj5iTvv8889DvSj+/qijjgrxkHPNNVd4Zpo3fMGpN8v5
E3mS/Nt6R11UXNRFItlh7DnvvPOS7t27N435iy++eLLZZpuFeoPHHHNMiMfm
zwMOOCD8Pa+n7yXu6ZxzzknGjx8f+6O0irooGzF1UUrqybDgggsmDz/8cNS+
FAV1UWVA/+Axx7Vk7cx1lfqEODr80xlraKmPHf9/3XXXDc8K89uVV16Z3Hzz
zckNN9yQXHTRRWE+3HHHHZOuXbs21ZjF/76exyp1UXFRF4m0zsSJE5NTTjkl
7IfxvODbgz7C55Q9+9Ya8QTDhw8P6wL+PZ5LJ598cq7z5tVF2ciDLoLXX389
WXHFFcP9hScD96y0H3VRNr7++utQN7QUr776arLUUkuFGjmMl1LfoHE5G8JH
nVhI6l+iff75z39mmgdp+DrwMxZZZJHwfK211lpl7588oy4qLuoikZahtuaS
Sy4ZnhPqFTz11FOZ54BS7ZlnngmxT/w8co5bi9eOhbooG3nRRZB6MnBvcTZp
7an2oy7KButc9nuac9VVV4V44kUXXbQu170yOY8++mjQMvi9cP7H89GReZCY
X+LLyTPjZx500EG53idsjrqouKiLRMozdOjQsC/G2HP//fd3aB5o3h544IGQ
x8rPHzJkSPLLL7/E/riToS7KRp50UQr3FrkcejK0H3VRNu68885wnYibSjn/
/PPDuoJYKc6TJBv4EzDejh49Osw31BbOA+k8uPzyy4d9vErOg5988kkycODA
8POpK/uPf/wj9sfNhLqouKiLRKaE+alv375hvNljjz2STz/9tKJzQdr4uenv
2X333XPlg6ouykYedRF8+eWX4XyT75B4F2q0S3bURdm44IILwnUid4T9fuKD
yc3HwyxP41meee+998L4P+uss07mV8B1XGONNUKMQgzwVSAml75wRlSteZCG
vsa7iBzJ1157LcrnbQvqouKiLhKZHM5tdtlll/BcnHTSSZnG9Pfffz/E2xFr
TW1CxvgxY8Ykn332WaZ/T+4Sv4/c1LycG6mLspFXXZSCJwP5AHoytA11UTbI
FUnX8fjM8CdracYxdBFj48svvxy7m7nl3nvvDee6XDdiysi34TqSw0peFn//
29/+Nkrf+B7RZscdd1zV9NCk7cUXXwyxevg55N2/VV1UXNRFIpNzyCGHhHHm
jDPOaHEMJ6cYnx3yOHiGSvmTEl/PHIfnAvECLf28s88+O8xBAwYMiH0JAuqi
bORdFwH7r3gyEMfP/a0nQ+uoi7Kx2267TTbm4b/JGccCCywQ7rd55pknrHdl
SpgTGD+YI0qdkRBHx/N666231rxv7NXxfWbVRHgv3HLLLcGXdfPNN0969OiR
LLfccskGG2yQ7LTTTsGnjlqxrf0cnjvqsnEf8d95RV1UXNRFIv+FGHm0CXNR
uXGbmnX77rtvqMNB4xk69dRTk9tuuy15+umngy8YMdjXXntt+DnpuEW+x7nn
nhvyTcv97EGDBoXff9NNN8W+FOqijNSDLgK0UOrJgM98S54M1kFSF2UFf+ZS
e0Lp+QdenFIatAJ+fXmJEUhh/iLfh9i+LLESPCOMg3zneLaiibbYYovgL/T7
3/8++Asxr6GTuV/In2rpZxI3yJ4i8b95RV1UXNRFIv+BmLc55pgjeCuRi1Fq
vGbfjjUw8Q3UbScuPMteGjF2G264YRi/mDNYk5Z6H7+XeYPfQSx3TNRF2agX
XZRCPjcanVyGcp4M/fv3T8aNG1fx302+AvExDz74YHLjjTcm1113XYg95b/Z
b+D1vKAuysZiiy1WUhOxXvvwww9jdy/XkJtFvVPiW/Ee2GabbcLZ0T777BPN
f+D7778PsWx4ArWWT8Q+H2Mf+4N77bVXcvfdd5edO3meyD1DK6ORtt122/AZ
y/1svDu4j6iFlEfURcVFXSTyH4gHoT4dOqDUOE1cHXW70TXl3tNa4xyIeYQ4
gccff7zkezhvIt585513jno91EXZqDddBMS8pLkgrMWaezJsv/32YW6oxD42
5wWDBw8O+8bsAZc7W6DNMMMMyTrrrJMcf/zx4TmIibooG4yJzb/Hnj175joG
Ki8wtqIR0v0yfN94VmabbbYw38SA2HDOdR555JGy89jnn3+e7L333qHfnAvh
1Z51DmT/EX3EWED9ixdeeKHsexmDyDXKo6ehuqi4qItE/jM/8RyUi6WmZjfz
1w477NBhTx5i7ZkP8N4pVwOCdSG/j/kmFuqibNSjLkpJPRnI62YdlEJ+AN89
HiLtAT1FrsGaa64Zfg7nq6yVDzvssGTUqFHh/JRcfM5b+fPJJ58Mf3/44YcH
XZTmm6+22mphLyHGOZK6qHWIoWquidDb1P+UluFchjUt5yycu7A/wd4B+Tg8
B998803N+8T+CHtyeLC2NIel9fc64sdArB45aMyD5OqWes9zzz0X4vlOOOGE
ml+L1lAXFRd1kUgSzmbmnHPOkOfafGwmFpp12qabblo2RqCtjRxb9sHISy31
O8nH7dy5c/Cni4W6KBv1rIuAe3GFFVYI64/Uk2G99dYL3z371m2N50Hj4PHA
v+f+JoeipXiZUu2DDz5IzjvvvMl+Tq3rH6uLWod6rZNqInw89ebOBjGs6II8
eaCwH8f5XzmdQjv22GPDd33mmWdWbB4kZu+jjz4qq8GYm9GReUJdVFzURdLo
UOcF3VPKa4H8c/JiiQEvN263t5HnMe2004a48lKvs7dO3HasHHh1UTbqXRfB
hAkTwv3PXLDqqqsmK620UtNad5NNNsn0M6hdQ84dP4Pz0Ouvv74izwl5SDyD
nJ8ecMABoa+1QF3UOnjNpPdJ6s0t2aBuHTForcGZai3guyP3Z6uttir7LHLO
S4wdMXSVmgepQc38u99++5V8ndwr7i9yEfOEuqi4qIuk0bnwwgvDmov4tuZj
MnvdjDnM/5XURGljfmFOKJWvRHwR/cLjOwbqomwUQRel3HfffWH/ltiWSc8B
Wst95nwTjzvOnPBUJH+pks8JP486Ofx8NFst8vnVRa3DmR5jFJ7O0jaojUeO
zVVXXZV8++23U7z+7rvvBq1Arl8tIN+V+72l/QzOkfFdb63mRFsb+ynsEZbL
NWJfJIuGrCXqouKiLpJGBy9Q4nSaj8WcI5F3Qbx3NTQRjXoOxHOX2ytbfvnl
o80H6qJsFEEXca+Ra8R8kOaBT9rwaWQtVArWb4suumh4D/WMq/Ws0PC7wgeY
fe2WfMYrQTV1EWfA99xzT3LFFVckl19+eVgP1iNHHnlkyL2UtoO2R2Okzxjj
CLWXGUvwH+Hv2ANo7olSLfBb4PeWy58lnpw+oYUr/Vzjfcnnxvuo1Ov4YxLT
+9NPP9XkWmRBXVRc1EXS6BC7TC26cvMA5/fVXOtR8w5/OnRY89fQJrPPPnuU
+BR1UTbqWRdxDsNahHjNlnziaL17957i36OVunbtGny/qd1VzeckbeRis1+x
0EILVfXcqBq6iGu0/vrrl6wDjbZEK+UR1sqcIxDbyz4SfhrkfnXr1i3UcN1y
yy1DHCbnisQbSzbIoyNmgPE/vQ94FrmmeDEQm1orqA9BjYpyzx3PAd7++MlV
47nGf4I9j1L1/agryLV59tlna3Y9WkNdVFzURdLIMIczpowcOXKKsXjAgAHB
q6vSMQPN2zXXXBP6UMoX9ZJLLgmvxahloS7KRj3rImAPlvUGcT2sx0qt2dM2
aYw/a7ZVVlklnBO1RRM988wz4YxhyJAhIX4GTyty0NmHyOprQr4/viT4RVQr
H7vSughvP3IzyGtHVxAfxVrwj3/8Y9ib4XeRl5UXuM7EERMfmZ4hskfDd84Z
Np4wf/rTn8L/x2M6/QypT8Zpp50W1tCSDZ6nGB50KcTPkr9X7pmjNit7I9Wa
B1Ptw5lw89eIq+A1zlbzgrqouKiLpJF56KGHwpjCn83HYvyCeT6qqYlo+NGx
7mAd0fw1PLjoHx4NtUZdlI1610XN4QwJ/cOaHb+sSXURa9+03jD3B+v8u+66
q9V7nHUNsTCciaQ/i1wh9ocnPatibdanT59wJtTazyQXip9BDcxqUEldRA0n
8ifwJuBcuDmsh6lXg2aMDf0jR4yzAdYGa6+9duhblu+EugKccxB7zHdDXBb3
Sewa1dIy5Ddxrw8bNqzk94q+TfPIqjUPsv9Ybh6kEUdH3GZeUBcVF3WRNDLE
hqRr/+bjMHu3u+66a9V1EY09d86nmv/92LFjQ/84U6o16qJsFE0XNeftt98O
5zn40uERgm8uOdqsYYiraum+Zj11xBFHhBw6csyp0cIZKDVbJz0b4nfgO4cm
QntxprLnnnsGL66Wfj5nTfSDs6ZKU0lddOKJJ4YzlbxDHBzncGhVati89NJL
7R7T+I6JT6ZWNudM559/vn51OYX8nvQ8ppzeTf1XYsyDtEUWWSTcT3lBXVRc
1EXSyKRxatQnbD4OM5eX8u6uRltmmWVCXErzv+csif5dcMEFNb826qJsFF0X
TQpz7x133BHySvCIasl3Dq2z+uqrh3MDcphYJ2d5FsgZOvTQQ0MMK7lLLcXo
kYtAX/DRr3ROdiV1EZ6SXC98FqgNzXUhPg1PZK5TbDgvIM+Rz0v+Uylvzo7o
I+Kv+NnUgItVdyAL3N9879zj6Dhq9XDGR7wgfWe9REPjpvEEeLSh99HxnLOd
euqpwWMOT2vu5XrQgtQR4vthb6LUd5jGVZSKcatkI1av3F4kNY6oj5UX1EXF
RV0kjQz7Y4wpeGq1Ze+q0o2zKcb85n9PXhH9i+H5pC7KRiPpIrjpppvCfcGf
La2F8Ubg2pA30J5nAj2ELiKeizjScu9La+hcffXVFf2cldRFTz31VFOsIDlc
5O0cffTR4Swlxp7HpKBTqFnFGRE5ZtUa40aNGhViofhOiauMDWck1157bdDg
G2+8cbhfm+fTcc7J3+MxkWoiNB46iNarV6/wd+SLoXvxt2cfYNKfgb4nJ2v3
3XcPcWropVrV4MoK2jyNSyj13aGTW3q9Uo2zSuJty82RxPbmBXVRcVEXSSPz
17/+NYwpxAk0H4c5w2GfsBa6iPUC83Pzv0/38WLUtFMXZaPRdNFqq60W1onl
7mXyBHidNQ5+Dh15LtivIIefvKNSsa5po094MFSSSukidAd+fccff3xyww03
hOcKzwXOZzhHmjhxYoV63HbI+2GPnrNx8rWqPc49+eSTybzzzhvaO++8U9PP
SkwAGnTbbbcN30eqW3h28WEjRoszIrzmude+++67dv0ezoc4JyLWlHMjYj3R
UKzrU82EBuXMkPMlYkBj3gNAvGsal1DumW4p/6gS7fPPPw9r0ZNPPrnk63xn
Bx10UNTrNCnqouKiLpJGJt3HLRUfwLPRs2fPqq8V0tjuUnMOaxVew3+h1qiL
stFIuijNd2P9WO5+JkeIdR+e05V4PtAn7MNzplHKy57GeSr9Ih+mUlRKF3EG
w9olb/FUxM5RH4d7F71S7XEubdSrZo27+OKLhzjMttIWvYJXBPtNnOXwXZKL
hs7Gd41cmVprM9auDz/8cPBiJC6Ps1D6xbkhXuf06euvv65pn+Dnn38O+X/k
Apb73vAS33nnnat2X3AmXO4cGv2Ox8uZZ55Z82tTDnVRcVEXSSPDOosx5eyz
z55iLGaOYH1HjYlqrhPSHCe8qJq/xvqT12L43aqLstFIuoh8C9ZP7IeXupfZ
Z2D9ctRRR1X0GeG8lHvx4osvLvk6+9msLfGBqBSV0kXEx3JG0RI//vhj8B6v
JeQz4qNRi3OiUvcJZ+QbbrhhWJNnhe+ff9sSaB18y8jTTzUHXuj4pJOvmSf4
3tFJ3Lfp+pbvBO/zW265JbxeK9CL3KflvjPyp8rVF6pEw7O/XH0kYg/T/cu8
oC4qLuqi/8L4jEcS5+08m95njcHCCy9cch8sPUsq59FTqcZchH9xqdfIV8cr
OQbqomw0ki7Cs5n6j+XuZTzr5plnnqrU/FprrbXCs1quxtFGG20UzpQqRaV0
EV507K9wHoxf96QxU5yXPProo8nmm28ezjBqRZpXif92rTVR2sg3SvuQBa4d
+T5jxoyZ4jX0A9qZe5P1DP7gxCpy9tDeeLgYMNYSd0fMHdeGZ4nzLtYk1Qbd
w5lQue8rrS9ETlal7wXOg5jnytVHwh+c77U954vVQl1UXBpZF5FTcvrpp4e9
GdalzfMlaeTeE7vOGpH9G++94kHcD7m1pcZj5ifiwKu1NmDtxf5gS96ksTx4
1EXZaBRdxNqT9X25syDWbvhrc6ZUjWcl9XsoF593wgknhDG8UnVeK6WL2GNL
zy7Ktc0226xmufjoSnK/qDEUSxOljTMrznNaq1vNd7r88suHazXpuRrn/ayZ
U88EcszwtChVI6reIHaafTF8G7iv2T8j3rFakAvFNSxXp4prioci3o+VPjPi
2WUdytlZqdfxxeD7zxPqouLSaLqIe+ess84Kno9pbUG8YvCGHDx4cHLeeeeF
83bi1dFMnO2yB8r5cepPw3tfeOGF2B9FKkS63nrggQemGI/TfdVq+fCwp0k8
SSk/vNQblVztGKiLstEouoj9+tT3rdS9TM42r3fUa6FcY6+Ya819Wep1PIZT
D5VKUEk/OtaU+M8x17DXxudgL474Lvz0agm1B9iL6Uhtoko1fOm4FuxNtUTf
vn2bNCT9pg4ueVv4RbB+YY4mHrCIkG/EWeOCCy7Y5GfIXFVp+D44Zyvl/5O2
22+/PfSBM9BK3QPkm/E98iyUep0aZuzHcI6WJ9RFxaVRdBF7nZzXUzOQz0vN
AbRP1twR5jX2b5iT8UYif5O8SfKQpb754YcfwlqFvblS3ztrmYUWWijErVdy
TcA6jnsRn6pSrxPXwHwRy9NVXZSNRtFFxPZzPxBfWup+xYeY56Sa62jWv8TK
lXot9RIm3qcSVFIX5QXOitjbw++41hqoXMOTjf1J1r+lSGtvp416QjxznE1S
ezYP9Z9qAfGXl112WbLYYouF68DajbOdSsKZFPqrpbpkaFi+L7xcO/rdk6eI
7ys+HKylSr0H/ct6q9YeGa2hLioujaCL2F/ifIhnC7/MluoEZmnEwnKWROxv
uo9R6ZqCUlvYI2MPtVTtSfa/mYeJpyyVE9qexs/knKjcz2Rvnvz2gQMHRrsm
6qJsNIouIq+A+6FcfVbye8g/quYaet999w15CKVeY11N/1g7VoIi6iL8vJjv
S9UliNX43lIvtOageRgnJ9VF9J+1ed7WybWCPV5iWsi141oQv8L+biVIc2pb
8ptEM1GvifjHcmfHWRo6iD0OzqjKxc/xu3je8erLG+qi4lJ0XXThhReG9S57
LHfddVdFx3Niovfee++gt6h9HcMzTCoDWpe5udSZEY1YO3y2iMnne+/IfcMc
QP2Ols6gOCtiviB/PRbqomw0ii5iLcb9QB5RqXsWz2f2naq5hmYPatpppy3p
153WYCEWuhLkWRe1xcNtUviOmKtqqXuytK233jqMh5N6mXM+wr5R81ysdD16
66235s77vJYQ50B8HeMPcxfnKpXwr+PacmaEd1+574vaEqnHBXt3Lb23VONM
lzMi4jTuuOOOFp93fkelz8UqgbqouBRZFxHPzf3CXF3OV7YSDR8c4p2ox0Ce
iNQnxLPxLJTKM6JdccUVIQcWLwZq9rX1PmEtx5oNvUPuKnHVpd6HbkKDkb8e
E3VRNhpFF5Fjx/1QLt6lR48ewVetmuvnww8/PDyDpV5Dr9E/9rLZvyB3b7/9
9gvnEJzvo+tYSxMPzT3NnkNL9TTzrIvYx9lhhx3alFPD2pU9vFI1CWK3NOef
MTGlf//+LXpV0Jhz0Qbjx4+vxmWuC9gP4MyI75Z6yh3VEJwlEidXLo8vbXgv
4KHIXEXszGmnnRbO98q9n7qteFehp1KPjJZy3OgHZ1LE5+YRdVFxKaouwjOJ
e4XznHK1ACvZiM3D45JWC09NqTzk8aB5unbtWjbvjDUV+5o8M6xLyGlo7d4g
pp9YbOYB7kny0srpdP6euZ5+VMpXq72oi7LRKLqI8/ZydbZo+HqWy/2pVGON
xNl/qddYU9M/tFnq2c2zlOaUlltbk2/D/jh+V7///e/D2QV5/pzZ8jq5qJwX
44PC72BsyIP3M/s49I8zIGIHW4vlJuYp9S2IrYOaN84fJq3byRkC6/xy3xnv
7datW/iOqGlULjepkXjkkUdC/Vo0Dd4aLWn+1iDni2eGc53Wvjti76hDlX4v
7I8Qd0FsOnt7++yzT5jzGCd5D3FxI0aMKOu3TyN+Du879FaevLknRV1UXIqo
i1JfJLzkajm241GH/yn3KbXEpf5g3cN5Dvnd5bxI2WfmfD8d55mfmYeI2bzz
zjvD/ISH3Lnnnhv28eaee+7wPu4L/r4l/YRfL3Gf6K3YqIuy0Si66LXXXmux
fgl7x2iQltY7HW3kL5WLA0vrq5R7dtAy7Du8+uqroWYQZ0foCc4biC0gn3+n
nXYKcyLnuakHabnGc8q6jffiEcaYwb/n5/Dz+Ln8fH4Pv4/fy+9vbwxcc9g3
YY8m7Q9e4PzOcusj4p34TLE1ULnGdUxzZbiPJr3W1Pvke+G6cj0Zm2VKuCc4
30RTEoPYXk8K4vH493wPWf0lub9PPvnkZP311w/7enxnxLyyV8wexf777x/2
Vlrz+GYfm3qCaKwHH3ywwleocqiLikvRdBG1DZiv8HysxTlR88aeIr+f+VHq
E2I6eCaoG9TSGo9zQfJTWQ+hpUqtncgjwjOJ86KWfhb3KnvhzGfE6+UBdVE2
GkUXsf/MOqdcfSLu8ZbqC3W0cabA76eeQqnXya/gua3U+iCNo2M9l0VPMQ6g
j1jfo5eyairm4Cx6qlTuSHoGNGlD+/Bzmu+zc45WzVpsHW2cKXDWwLqa68I1
4VyBz9/IeUTtgfhK8ncYm9rrz0jcJVqbs9RanTEyD6bzDnWo8oy6qLgUSRcx
b+P5SOzERx99FG18J86W+xQfZqlPqHGV+hdm8aBjPCfvgnUMNR6Iq8zqAc/6
Zbvttgv3DHkQeUFdlI1G0UXAHjLr1nL3Md5hxC5XY1wlN6+lupOsq4kpqxQd
zS/ifIoxgDNocgbRjdSGoA4pcUrE6hGzR+weMXzUJiWmr5yWYp5m/544Qvbf
iRWkLirzXan345WKtsA/EPg3vXv3jjYvtta4bzj/auRcoUrCvEUMKPMY8Qzt
8cx98803w3kPtUmIg6jm909/uV+5d/NWq6gU6qLiUiRdxHzDGECdjZjjO2vk
tdZaK8TROsbXL+zZEqtNXhAxktW4V1h7sUdKzMDw4cNjf+TJUBdlo5F0ER4G
5EKX85/C54CzEO6ZSq+Z8CXu2bNnydfxIUCTDRgwoGKfNZbvAvt7xOpyDcln
5NwIzwj2TI488shwjfGUwFuC2mrELLV0NsXYQl0a6shyBh5zbmyp8d3hTyaV
g5hNcq1ZF3Ge2Z74fs5pOb/juaYGZDXicDiPWnnllcO9mvdzohR1UXEpii7i
eWdMZd899vhOIxeRZ/zUU0+NfWmkAxAXSSwcPqjkkVaqfhExdegg1tPEvRB7
lDfURdloJF2ERxT3xMiRI0ve1/jOo09Yh1dyPGX/mLUdz2Op10eNGhX6NWbM
mIp91jz70aUwv7SkiVjPclbAOTb6ifyd2HNjuUY/G+U5qjXktTKHLbfcckHn
tBXWV/gMpX6P5Wo7t7Wxn0HMJx6TnEmNHj268h++SqiLiktRdBGxa+iQrDmC
tWhbbbVViCGnzkDRYB+KOj7EtBCnEds7rZowdv/pT38K6zL2XInn4e/aOw+Q
k0QsDD+POJiYNYpaQl2UjUbSRcD5aUt5KmkcMef3lRhHb7vttmSaaaYpW1uM
9rvf/S5ogEqSd130xBNPhHyrSXUQa1/OBcjLISdpUjhbqnZ9qY40fMuIo5Pq
wJ4B6xHiWNLYyraCviKujjUjtVbJY2rPd83+yQknnBD2HPlZ+Ari411PqIuK
S1F0EXthvXr1ij62T9qog8P9isdrUcDfZq+99gq+e5POx8zPxHUQ81FU2HPl
eeHzshYmJuXKK68MHrEt3Qf4M/A+9mqpc8W/p4YDPy/PqIuy0Wi6KK0101I9
RvykiEEln6YjYyjrLq4tuTHl9iJ4D/255JJLKvo586yL2Eshr57+EV/ImMzY
S62Bcmy88cbBzy/2vFiusY+IdpPqwVzFnhzPFGc+7YHcAPY+Um8R9grxJsGn
slz8LHG35CfhjUJ+IusF1p3k1+XBe7U9qIuKSxF0EWcW3BfEUsQe25s3xiCe
/SLAmMZ4Rrwi8/Dll18ecrmoa3vMMcckyy67bPgeGPeK7KOK5yGaYVLPKfa9
8KJi7UEdF/7kv/n79D3ECeBlzJlmPaAuykaj6SLyt6mTQkxOOc9d4k05t+BM
lLwR9oLbOnZyLktOA+PKG2+8UfI9xKOylqbmWEfqtZQir7qIs3pij4YOHdqm
Z5O6FYxZsefEco16B5zLS3XBk4przbjVkbhTnjfqtBIzy5pg0jNLPETwwMLP
jjoVaS0qYnp4Xjkrqvc6j+qi4pInXdTeug5DhgwJ6/VyucAxG2tLxp/2eMHk
CdbzPHvoIeLnSn1W8jHJDya/AI+kejsXbw94yBKzQm12ag/hLYUnFjVW+G/+
njwi3ldvqIuy0Wi6CO6///5wb5x44ollxz40y8EHHxzWRIwHnJlmydm+9957
g+8dP58zhJbG9TS/hrphlSavuqi9cJ7G5yGGKva82LzxHTOHU/+m3kCzU1uW
HDj6z32e19joFOZm9jUYt/AU6iis3fBOwDceH380OGsFYiPJy2WPgzGD578o
qIuKS550ETUKqPVC/iXxp1nBrzSvdRnw6uae5YyhXiHHms9AffUsn5nzebQR
GsG6E/WLuigbjaiLgHpbeEGTK93SeICnCJ6L6Zlpnz59Qu1ttAx+9pw54/3I
/UZMDu/jnL2183+82qpZK65ouujdd98Nn4drH3tebN6INadvzzzzTOzLlBlq
lLIHlp6T4B3A/Zh6qhPXj1bIK5zpcqaD9zs1m6VtqIuKS550ETB2U8OBPhGH
xF58a17X5BFWq2ZGRxt7SWmMXz3y9ddfh3GT2LC2fG5qk/K5ydOU+kRdlI1G
1UXMw8zJxIriU9famEB9STQR2qiUdxp7KcQcc+ZMLaSWfhb3JOP+Ekss0S7v
4SwUTRcBebjEN8aeF5s3ci+Jt6qHuArq65JPw72BB8mFF14Y1i3pZyE2gBhH
7k/8QjgrySuc0xGDit8F8XWSHXVRccmbLoK0fl/aZp111rAnSH5t8/MHfNDo
f6W8j6rR6D81BOoRYsC4vu2p30OuNHWcpD5RF2WjUXURkMeNLuKcJ4s2mnS/
iPMetBL+NMR2lctVat7Y20YPsY7GB6ZaFFEXkddBvNpbb70VfV5MGzFnPEP1
cp2JaSFPZvDgwS3GhfK5yJfiHsKDNK/wLLL3icb75ptvYnenblAXFZc86iK0
D7n7pfYUF1xwwcni7NjjSL2IYo/v5Rq5h+wv1SPsLZIn2Z7PzZ4Z80eRPRiK
jLooG42siwD9gDca+ujhhx+u6liKlmIfHk1U7RilIuoivLuJfcQLI/a8mDb8
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
mgu7d+8e6hWVeo25kf7hHZsH1EXFRV0kjQ4eoKVyTdN1UTnv7kq2NIbhyiuv
nOK1dL4i/rOWqIuyoS4qJuoiaSTYfyOvoNT8RE2JStUsaqmtt956ZWP1qENJ
H+66667YlyqgLiou6iJpdMjnpAZV83GY+ErGmzvvvLPquuijjz4Kv+vMM8+c
4jU8P9J9vFqiLsqGuqiYqIukkSBngPqqpeYn/KfKeQNVshG3QV3ZUq9R35Xn
8Y477oh9qQLqouKiLpJGZ9tttw3n9+XOcEr51FW6tXQ2deqpp4bX8AuqJeqi
bKiLiom6SBoJ9uTwg8MDtdQcNe+88yb7779/VedB6mXwvJV6bfTo0eF5fPTR
R2NfqoC6qLioi6TRwdega9euU4zDn376aZgnTjvttKrrovvvv7+pTlHz1/CF
wB++1qiLsqEuKibqImkkrr766nC/l6vpuuGGG4Y6ftWaA9PzIGpNlnr9mmuu
aepfHlAXFRd1kTQ66J5OnTqF3NLmY/E888yT7LnnnlXXReQQocHGjh07xWv4
IzIf1Rp1UTbURcVEXSSNxHPPPRfud2r2lZqj0vOkcvWFOtqOPfbYFusjDR48
OLw+ceLE2JcqoC4qLuoiaXSo68u4Qj5R87F4l112Cdroyy+/rKouYi+uXK3v
JZdcMnjm1Rp1UTbURcVEXSSNBOvqaaedNjnuuONKzkPUF+L1anh1sydJzMb6
669f9j341FFfMi+oi4qLukganW+++aZsTum1115bNr6tUo39MeoHl6ozzlzE
Ht3IkSNrfl3URdlQFxUTdZE0GviysiYsN1cRc85cxZxQyTlw6NChYZ679957
S77OvuRcc82V9OvXL/YlakJdVFzURSJJstZaayVrrLHGFOPxZ599liy44IJV
rfNNPWHqeJeqpzds2LAwX6Cdao26KBvqomKiLpJGg1g15qJS9cVp1FSdddZZ
w7lOOX+Gtjbi9xhDt9xyy7LvwRM2Tx7doC4qLuoikSR4YaM/XnrppSnGZGo2
MO789a9/rbgmevXVV8P+23777Vfy9dVWWy1othioi7KhLiom6iJpNNBDzIN4
oJabs6ixx5rxgAMO6PD8x37f4osvHvYe0Vzl3kcceZcuXZIff/wx9iVqQl1U
XNRFIkk4p8fzjTiB5mMytRtWWmmlMC5XMn7gk08+CT+3c+fOJffnHnjggTDe
XXrppVGuibooG+qiYqIukkZko402ShZeeOFQL6/c3HXEEUeEZ6NPnz4l/Yqy
tBdeeCHkzjLvPv7442Xf99prr4UzrMMPPzz2pZkMdVFxUReJ/IcBAwaEsxvG
4eZjM9qA2grLL7988o9//KPDmogYBHzmyGPF96HUe6j9/dvf/jaa/466KBvq
omKiLpJGhPpA3Pd4pLY0hw0ZMiT59a9/nfTo0SN5+OGH2zT38bNnn332ZIEF
Fgi/r6X377777smMM84Y9FeeUBcVF3WRyH+gXhFrXHxvSo3PeC9QD5w9ruef
f77dmui9994L+Uo8d+edd17J96S1GmKdFYG6KBvqomKiLpJGZbPNNkvmnHPO
snlGaSO2nL075jLmTeYt4iBKvZd5hPg85k+eq169eiVvvfVWiz8fvYX2wiMv
b6iLiou6SOS/nHPOOWGMGTVqVMlxmvN+YqHZ62KMb2sMAbHZxCgQO8AcUuo9
77zzTjL//PMHb6Bffvkl2rVQF2VDXVRM1EXSqKCH2APcfPPNW53T8Cbi7Ig5
i+eFsx38tKk9sfXWW4f82EUXXTTkLbHWxN8I/4TWfu7HH3+cLL300iH/aMKE
CbEvyRSoi4qLukjkv/z888/Ba2e22WYL8c+lxmv2uLbYYoswzjPe4zGKf0K5
8Z05Bl8H4g0Yv/jzqaeeKhtjQPwcnj/8npioi7KhLiom6iJpZC655JJw/6N5
su77cb5DHtB2222X/O53vwv5s+gj8pDOOuusUHciy88h3/ePf/xjyCt69tln
Y1+KkqiLiou6SGRyiKcj7nmRRRZpcRy///77k3XWWSec8zMuER/AHLDrrrsm
e+21V7LxxhsnK664YtKpU6fwOntonBe1NB/stttu4Xm84YYbYl8GdVFG1EXF
RF0kjU7fvn3DfHTRRRe1O268PY1njmfvggsuiH0JyqIuKi7qIpEpefPNN4PP
whJLLNHiWVB6fnTuuecm22+/fdgjQx8ttthiyeqrrx68FdhvK+X/3fyciPxS
xrfTTz899scPqIuyoS4qJuoiaXR++umnUFeIvT1izKuth/B+3WeffcJzd8wx
x8T++C2iLiou6iKR0qBl8Oaeb775knvuuadqcwE+DHijEpeXF00E6qJsqIuK
ibpIJAl+qDvuuGOYn6izRz5RNeZB4s3TeZC9xLyjLiou6iKR8uCBgDc3+2WH
HnpoiLGr5Fxw0003BR+HWWaZJbn22mtjf9zJUBdlQ11UTNRFIv8B/59jjz02
xIwvt9xyyYMPPljRefCKK64Ivg3Mg/gR1QPqouKiLhJpme+//z7p169fmBO6
du2aXHjhhSHurSPzAL52m2yySRjPunfvnrz++uuxP+YUqIuyoS4qJuoikcl5
6KGHgj8ca0a8FZ5++ukOzYN33HFH0rNnz/Cc8Sf5vPWCuqi4qItEsoEvDt7Z
jEF4Mhx22GHJc889l3kOGDduXDJixIjg1UCswLzzzhv+Gw+8PKIuyoa6qJio
i0SmBM/sk046KZlrrrnC2pE5Ea85npcs8yBerNQjWmaZZcLzhc7CjyhmTYr2
oC4qLuoikbaBF2nv3r2DhyjjEd511GkYNGhQqNN6+eWXh1gAzpVOPPHE4FG6
8sorN/nW4VHH+ziHyjPqomyoi4qJukikPOPHj0/OP//8ZLXVVgvPCY0arxts
sEHwThg4cGDwTujfv3+yxx57BE8ivIx4H3Hp1HW97rrrgrdDPaIuKi7qIqk2
5OhcffXVyRlnnBF8N/EwyLsmyALeOXyuPffcM2gdarWm80PaGP+pcUS9o2HD
hiWvvfZa7G5nRl2UDXVRMVEXiWTjH//4R3LZZZcFX2/iIYinoPY5tWHnnHPO
4OtKDQs0Ejm1xKHXO+qi4qIukmpx6623Br3QXCukNbH33XffUNO6SKCV8Jd7
++23k3/+85/JDz/8ELtL7UZdlA11UTFRF4lIOdRFxUVdJJWG+ONddtklPKvE
jw0fPjz4CqAZ0EGjR48Oaw3OV1hPUh9V8oe6KBvqomKiLhKRcqiLiou6SCoJ
HgLEjE0zzTShFs+XX35ZNv9y7NixofYp70UrSb5QF2VDXVRM1EVSSZgLR40a
Fep3k1tDI+8GzwHmQ6kv1EXFRV0klWTo0KHBa+3iiy/O5E1DPaBVV101xCAX
Iea4SKiLsqEuKibqIqkEP/74Y6hTOttss4X7iXzT9dZbL6y9yMPh7xhDmDvr
1YOgEVEXFRdy4VjH+jxKR0HXML7vtNNObaphwPpj+umnTwYMGBD7I8gkkP/F
eFtPNSVioC4qJuoi6SjffPNNsv766wcv0p133jl5/vnnp5j/qP+w4447hnU2
Z0jffvtt7G5LBtRFxQV/Ya7p119/HbsrUufgS43GfuWVV9pc3414gs6dO6vP
cwT6lrHhk08+id2VXKMuKibkRHL/77///rG7InUIMeXU7saTjboNrc2BV111
VfAjIg49rzXt5D/w/bDWwZM8NuqiyrPrrruGa/rhhx/G7orUOdtuu22y/PLL
t6vu9c033xzuQ/bOJB8wPzveto66qJh88MEH4f7fbbfdYndF6hD8hlg7k1OU
dR4k/px77qKLLordfWkBzhH4njhXiI26qPIcdNBB4ZpyvivSEcgTYpxojy56
9dVXw3144403xv4Y8v+hXt8MM8xQd3XIa426qJjkae0j9QU5RfPOO2+y6aab
tnkuJLeBWuHGTuQX6jXlZc9EXVR5RowYEa4p57wiHWGFFVZItttuu3bpInJY
uA+JJZB8MMcccyTLLbdc7G7kHnVRMSFWZtppp0169uwZuytSZzz44INhPrvr
rrvaPBfedttt4d8+8sgjsT+GlIFzBL4jzhVioy6qPA899FC4pscee2zsrkid
s/HGGydrr712u3RROo88/PDDsT+G/Btq0vJ9EBspLaMuKi5LLrlkMs8888Tu
htQZgwcPDnlFeBG1dS78/PPPgw/RSSedFPtjSBk4R2B+JFYyNuqiysMzSAws
+YEiHeHEE09MpptuupCr1ta54Igjjghzwfjx42N/DPk3d955Zxhrjz/++Nhd
yT3qouKy+eab60skbWa//fZLunbt2q49QtpCCy2UHHDAAbE/hpSBcwTGhTzU
XVQXVYdu3bols8wyS4iJFWkvxMLhR3rccce1aQ7A72y++eYzjj9HHHzwwWGs
feyxx2J3Jfeoi4oL+zV5Wf9I/dC/f/9k/vnnb7cu4oxy4MCBsT+GlAFPIs4T
qL8YG3VRdUjrNz755JOxuyJ1Dv6GaOynn3468xyw9957Bz2F94LkA3LFZp55
5mTixImxu5J71EXF5d577w1z41FHHRW7K1JHDBs2LJlmmmmCp2FbNdH7778f
5sNzzjkn9seQEuCHMfvssyfLLLNM7K4E1EXV4e677w7X9cADD4zdFalziKcm
fuC3v/1t0Nktjf9ffvllcsghh4R77+STT47ddfn/cO7HXhh7YtI66qLiwlqD
2OA11lgjdlekjvj73/8e5rWRI0e2WReRs2I97fzyzDPPhO8nL3GO6qLqgO8O
cUzU1TSWTjrKm2++mSyxxBIh7xTdw/g+6bj/r3/9K7njjjuS1VdfPay/Bw0a
FLvLMglHHnmknultQF1UbKhpT217vHlFskKdg6WWWirkcGfVRPjdLLbYYsG/
SPIJ8Y3Mj6xh8oC6qHqk+QTU1xTpKJwFkXtKLAFriqWXXjpZf/31w1yB/uZe
W3TRRZNbbrkldldlEtgX4ayPOIEJEybE7k5doC4qNpdeemkYr/QHk7bw6KOP
hrmPOPGsumiPPfYIMXRPPfVU7O5LCThDIG+MNUxeYszVRdWDPX6exx49esTu
ihQI4qvPO++8ZJdddgn16ojNIieVuP28jCvyXy677LIwxg4YMCB2V+oGdVGx
+fbbb0OuHZ7drItEskJ8eFr/E3+hlryHdtppp/De008/PXa3pQzUo+I7Iic/
L6iLqssOO+wQru/9998fuysiUmPIJyX+cYYZZkg+/vjj2N2pG9RFxYc9f+bG
m266KXZXpM7Ag4E9Z84ZTjjhhGTMmDHJZ599Fhq5KtRCII+hU6dOei3kHOIb
OQP829/+FrsrTaiLqssrr7wSvnO8qFgjiUjjcO655+Yqn7ReUBcVn3feeSes
W1deeeXYXZE65KWXXko23XTTcA8xxk7a+DviKPRjzTePPPJI+L569+4duyuT
oS6qPvvss0+4xmeffXbsrohIjSA3eI455gjre3J/JTvqosZg5513DnPj1Vdf
HbsrUqfg10pOLesrzoZuvfXW4EMk+Yb42VVXXTX4RD3//POxuzMZ6qLqwzNK
Ttlss80W9shEpPhsu+22YWy98MILY3el7lAXNQb40ZFn1KVLl5ATIiKNwQUX
XNCUJ5Y31EW14brrrgvXuXv37skPP/wQuzsiUkXSehnrrruueeXtQF3UOJxy
yinhWSGuQkSKD95RaSwFOWF5Q11UO/bdd99wrflTRIoJOcDTTz992APXa6F9
qIsaBzw0yTFibrz++utjd0dEqgh1K/Ba4HnHrz+PqItqx/fff5+sssoq4Xrj
oSIixYJ6u8TMUmPqwQcfjN2dukVd1Fi8/fbb4Tsn1vz111+P3R0RqRJpDVfq
jOQVdVFt+fTTT0PtZXLNqEEjIsXgvffeSxZeeOHwbI8aNSp2d+oadVHjgV83
3q0LLbRQ8uGHH8bujohUGHwx0BvojvHjx8fuTlnURbUH7wW89bnu+OyLSH3z
8ssvNz3Tp512Wuzu1D3qosaEujQ8Q926dctl3oGItI8rr7wy7HsssMACwW8l
z6iL4vDuu+8miy++eLj2e+21V4ixE5H6g3rds88+e6gzeP7558fuTiFQFzUu
hx12WJgXqYfMPCki9Q0e6mgivBbyVL+1HOqieLAfhn8715+6r2+++WbsLolI
RsgfHTRoUIibm3HGGZMbb7wxdpcKg7qosTnuuOPCvDjvvPMmTz/9dOzuiEg7
YI5M84k4J6oHTQTqorhw3xxyyCFNa6ujjz5aH2+RnPPss8827WksueSSIY5O
Koe6SEaMGJF06tQpmXbaaZMzzjgj+eWXX2J3SUQyghd36juHzhg3blzsLmVG
XZQPbr755rA3xnexzDLLhJrNzgMi+YK4nj59+oSYABqe+46dlUddJPDYY4+F
fWbmxfXWWy8ZO3Zs7C6JSAtQr49a5sTM8dzuvPPOufZYKIW6KD988803yYEH
Hhj2yPhOlltuueSqq64y90gkMi+++GKy6667Bv9tnk3qrTzzzDOxu1VY1EWS
8vnnnydbb711eO6mm266ELv6xRdfxO6WiDTjkUceSXr06BGeVXJu81qfqDXU
RfnjrbfeSvbYY48QP8B3wxphzz33TO655x6/J5Ea8eqrryZDhw5Nll122fAc
0lZcccWQR8SemFQPdZE0B3+TRRddNDyHs8wySzJgwIDc+1qJFB3mQp7Nnj17
hmeTnJDddtutrv0k1UX5hXjMY445JunatWvTugytRMwm50rDhw8PtSPJbcD7
+1//+pfNZmtDo04KsTlPPfVUcs011yTHHntssu222yZdunRpeuZmmGGGZIcd
dgj7Esa21gZ1kZRiwoQJwfOROmE8m8Sy/v73v08uueSS5JNPPondPZGG4Kef
fgrxEngqzD///E3PYu/evZPnn38+dvc6jLoo/7AWe+KJJ5KjjjoqWXPNNZti
eWw2W3Ua667dd989xLF+/fXXsYeAhkNdJC2BXxH1UMg5wh8/fW7JzSXn79xz
z03uu+++5I033ggxd3oZibQdcjvYOySO/LrrrksGDx6cbLHFFiFGLn3mOnfu
nPTr169uvOayoC6qP7777rvkhRdeSK699tpQF/aggw4KNZDY595mm21sNlvG
Rs7Q/vvvH3IW8L8aPXq0+845QF0kWcH36qyzzko233zzcN/E3lOx2Yrell56
6TBv3n777cnEiRNjDwEVR10kIiJ5Ql0k7YH4HvICb7jhhuTEE09M+vbtm2y3
3XbJJptskvzhD3+w2WxtaMTF7bLLLslf/vKXEL/6wAMPJJ9++mnsx7zqqItE
RCRPqItERCQG6iIREckT6iIREYmBukhERPKEukhERGKgLhIRkTyhLhIRkRio
i0REJE+oi0REJAbqIhERyRPqIhERiYG6SERE8oS6SEREYqAuEhGRPKEuEhGR
GKiLREQkT6iLREQkBuoiERHJE+oiERGJgbpIRETyhLpIRERioC4SEZE8oS4S
EZEYqItERCRPqItERCQG6iIREckT6iIREYmBukhERPKEukhERGKgLhIRkTyh
LhIRkRioi0REJE+oi0REJAbqIhERyRPqIhERiYG6SERE8oS6SEREYqAuEhGR
PKEuEhGRGKiLREQkT6iLREQkBuoiERHJE+oiERGJgbpIRETyhLpIRERioC4S
EZE8oS4SEZEYqItERCRPqItERCQG6iIREckT6iIREYmBukhERPKEukhERGKg
LhIRkTyhLhIRkRioi0REJE+oi0REJAbqIhERyRPqIhERiYG6SERE8oS6SERE
YqAuEhGRPKEuEhGRGKiLREQkT6iLREQkBuoiERHJE+oiERGJgbpIRETyhLpI
RERioC4SEZE8oS4SEZEYqItERCRPzDXXXMkss8wSuxsiItJgLLHEEkEXTZw4
MXZXREREkoUXXjiZeuqpk19++SV2V0REpIGYZ555kumnnz52N0RERALdunUL
+3Xjx4+P3RUREWkgZppppqRz586xuyEiIhJYd911gy564403YndFREQahK+/
/jrMPUsvvXTsroiIiAT23nvvMDfdfvvtsbsiIiINwpgxY8Lcs+WWW8buioiI
SGDYsGFhbjr11FNjd0VERBqEK6+8Msw9hxxySOyuiIiIBEaPHh3mpm222SZ2
V0REpEE44IADwtyDPhIREckD33//ffADmmOOOZKff/45dndERKQBIK8IXfTh
hx/G7oqIiEgT66yzTpifXnjhhdhdERGRgoMWmmqqqZKllloqdldEREQmg9wi
47xFRKQWnH766WHOGTBgQOyuiIiITMYnn3ySdOrUKZlvvvmSn376KXZ3RESk
wKywwgpBF7300kuxuyIiIjIFG264YZinbrvttthdERGRgpL6cy+33HKxuyIi
IlIS6hcxV6266qqxuyIiIgVliy22CHPNyJEjY3dFRESkJL/88kuy/PLLh/nq
gQceiN0dEREpGC+//HLwW1hwwQWTH374IXZ3REREynLDDTc0xTf8+OOPsbsj
IiIF4ve//32YY84777zYXREREWmVdN4aNmxY7K6IiEhBuOqqq8Lc8r//+7/J
xIkTY3dHRESkVf7+978n0047bTLLLLMkY8eOjd0dERGpcz766KNk7rnnDjF0
jz32WOzuiIiIZGbw4MFN8XTff/997O6IiEidQu2HtHb4AQccELs7IiIibeLn
n39O1ltvvTCP7bLLLsGTQUREpK0cfPDBYS5ZaaWVkgkTJsTujoiISJuh1iue
QcxnhxxySOzuiIhInXHGGWeEOWTOOedM3nrrrdjdERERaTfkGjGfMa+dcMIJ
sbsjIiJ1woUXXphMPfXUyUwzzZQ89dRTsbsjIiLSYZjPZp111qCNDjzwQGPq
RESkRdhHw2NhuummS+68887Y3REREakYzz33XPASQhv17t07+eqrr2J3SURE
csZ3332X9OnTJ8wV7KdZI1xERIrIm2++mSy++OJhvuvatWsyZsyY2F0SEZGc
8NprryXdunULc8R8882XPP/887G7JCIiUjW++eabZPvttw/zXqdOnZJ+/fol
X3/9dexuiYhIJDgjOvroo5Ppp58+zA3rrrtu8vHHH8fuloiISE0YOXJkMvvs
s4c5cN55503OPfdc6xyJiDQQEydOTC655JJk4YUXDnMB/gqnnnqqOagiItJw
fPbZZ8muu+4acmuZE+eZZ55kyJAhyQcffBC7ayIiUiUY+4cNG5YstNBCYexP
807HjRsXu2siIiJRefnll5Ptttsu+fWvfx3mR/6kJux5552XvP7667G7JyIi
HeSdd94JcQKbbrppMs0004Sxnj0x/lsPbhERkcnBl2HQoEHJAgss0LSHmObf
9urVK+nfv3/QStddd11y9913J4899ljy7LPP2mw2my0H7YknnkjuvffeMEaP
GDEiGTBgQLL55ptPdi5E69KlS6jZ8Morr8SedkRERHLNzz//nDz00EPJ4Ycf
nqy++urBn2HSOdVms9ls9dOIAVh55ZWTgQMHBt30448/xp5mRERE6hL8GF56
6aWwB3nSSSclhxxySLLPPvskO+20U7LNNtvYbDabLQdtxx13TPr27RvGaOqy
Xn311cFre/z48bGnERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERGR/9ceHAgAAAAACPK33mCCCgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAVgkPt8Y=
    "], {{0, 361}, {838, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{664., Automatic},
  ImageSizeRaw->{838, 361},
  PlotRange->{{0, 838}, {0, 361}}]], "Input",ExpressionUUID->"480a6a93-109a-\
41fd-89c9-fe68ce12009a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Check", " ", "if", " ", "there", " ", "is", " ", "at", " ", "least", " ", 
    "one", " ", "of", " ", "the", " ", "accepted", " ", "states", " ", "in", 
    " ", "searchState"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ContainsStateQ", "[", 
      RowBox[{"stateList_", ",", 
       RowBox[{"searchState_", "?", "AtomQ"}]}], "]"}], ":=", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"stateList", ",", "searchState"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ContainsStateQ", "[", 
      RowBox[{"stateList_", ",", "searchState_List"}], "]"}], ":=", 
     RowBox[{"Apply", "[", 
      RowBox[{"Or", ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"stateList", ",", "#"}], "]"}], "&"}], ",", 
         "searchState"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Get", " ", "parents", " ", "of", " ", "the", " ", "current", " ", 
     "state"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FAParents", "[", 
      RowBox[{"transitions_", ",", "state_"}], "]"}], ":=", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{
       RowBox[{"Cases", "[", 
        RowBox[{"transitions", ",", 
         RowBox[{"KeyValuePattern", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Node\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
        "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Check", " ", "if", " ", "the", " ", "state", " ", "is", " ", 
     "inaccesible"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"JunkStateQ", "[", 
      RowBox[{"transitions_", ",", "start_", ",", "state_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"stateParents", ",", "nonSelfTransitions"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"ContainsStateQ", "[", 
           RowBox[{"start", ",", "state"}], "]"}], ",", 
          RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"stateParents", " ", "=", " ", 
         RowBox[{"FAParents", "[", 
          RowBox[{"transitions", ",", "state"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nonSelfTransitions", " ", "=", " ", 
         RowBox[{"Complement", "[", 
          RowBox[{"stateParents", ",", 
           RowBox[{"{", "state", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "nonSelfTransitions", "]"}], "\[Equal]", 
           "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "True", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "False", "]"}]}], "\[IndentingNewLine]", 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SafeSort", "[", "l_List", "]"}], ":=", 
     RowBox[{"Sort", "[", "l", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"SafeSort", "[", 
      RowBox[{"l_", "?", "AtomQ"}], "]"}], ":=", "l"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Infer", " ", "the", " ", "alphabet", " ", "from", " ", "the", " ", 
     "transition", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetAlphabet", "[", "transitions_", "]"}], ":=", 
     RowBox[{"DeleteCases", "[", 
      RowBox[{
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"transitions", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "\"\<InputSymbol\>\""}], "]"}], "]"}], "]"}], 
        "]"}], ",", "\[Epsilon]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Infer", " ", "the", " ", "states", " ", "from", " ", "the", " ", 
     "transition", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetStates", "[", "transitions_", "]"}], ":=", 
     RowBox[{"Sort", "[", 
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Cases", "[", 
         RowBox[{"transitions", ",", 
          RowBox[{
           RowBox[{"KeyValuePattern", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
              RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}]}], "}"}], "]"}], 
           "\[RuleDelayed]", 
           RowBox[{"{", 
            RowBox[{"p", ",", "n"}], "}"}]}]}], "]"}], "]"}], "]"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Get", " ", "the", " ", "states", " ", "reachable", " ", "from", " ", 
     "the", " ", "current", " ", "states", " ", "list"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Explore", "[", 
      RowBox[{"transitions_", ",", "states_"}], "]"}], ":=", 
     RowBox[{"Map", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Transition", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"SafeSort", "[", "states", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"SafeSort", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"NFAIterate", "[", 
             RowBox[{"transitions", ",", "states", ",", "#", ",", 
              RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}]}], "]"}], "]"}], 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", "#", "}"}]}], "]"}], "&"}], ",", "\[IndentingNewLine]", 
       RowBox[{"GetAlphabet", "[", "transitions", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Explore", " ", "one", " ", "step", " ", "down", " ", "each", " ", 
     "branch", " ", "of", " ", "the", " ", "computation", " ", "and", " ", 
     "append", " ", "it", " ", "to", " ", "the", " ", "explored", " ", 
     "branches", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"StepDown", "[", 
      RowBox[{"transitions_", ",", "branches_"}], "]"}], ":=", 
     RowBox[{"DeleteDuplicates", "[", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Join", "[", "\[IndentingNewLine]", 
         RowBox[{"branches", ",", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Explore", "[", "\[IndentingNewLine]", 
              RowBox[{"transitions", ",", "\[IndentingNewLine]", 
               RowBox[{"#", "[", "\"\<Node\>\"", "]"}]}], 
              "\[IndentingNewLine]", "]"}], "&"}], ",", "\[IndentingNewLine]",
             "branches"}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "1"}], 
       "]"}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NewStateNode", "[", 
      RowBox[{"node_", ",", "newStateRules_"}], "]"}], ":=", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Parent\>\"", "\[Rule]", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"node", "[", "\"\<Parent\>\"", "]"}], ",", 
          "newStateRules"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Node\>\"", "\[Rule]", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"node", "[", "\"\<Node\>\"", "]"}], ",", "newStateRules"}], 
         "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
        RowBox[{"node", "[", "\"\<InputSymbol\>\"", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAToDFA", "[", "machine_Association", "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "protoDFA", ",", "start", ",", "protoDFAStates", ",", "newStateRules",
          ",", "newStates", ",", "containsAccept", ",", "newMachine", ",", 
         "newAccept", ",", "newStart", ",", "newTransitions", ",", 
         "newTransitionsCleanedUp", ",", "protoDFAExpressionNodes", ",", 
         "newStateExpressionsNodes"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"machine", "[", "\"\<Type\>\"", "]"}], " ", "=!=", " ", 
           "\"\<NFA\>\""}], ",", 
          RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Explore", " ", "all", " ", "paths", " ", "until", " ", "there", " ",
           "is", " ", "no", " ", "unexplored", " ", "transition"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"start", " ", "=", " ", "\[IndentingNewLine]", 
         RowBox[{"FixedPoint", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", "\[IndentingNewLine]", 
             RowBox[{"Join", "[", "\[IndentingNewLine]", 
              RowBox[{"#", ",", "\[IndentingNewLine]", 
               RowBox[{"NFANondetNodes", "[", 
                RowBox[{
                 RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], 
                "]"}]}], "]"}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"<|", 
             RowBox[{"\"\<Node\>\"", "\[Rule]", 
              RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
            "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Make", " ", "a", " ", "DFA", " ", "by", " ", "exploring", " ", 
          "all", " ", "possible", " ", "paths", " ", "in", " ", "the", " ", 
          "NFA"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"protoDFA", " ", "=", " ", 
         RowBox[{"FixedPoint", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StepDown", "[", 
             RowBox[{
              RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
              "#"}], "]"}], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"<|", 
             RowBox[{"\"\<Node\>\"", "\[Rule]", 
              RowBox[{"start", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "|>"}], 
            "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"protoDFAStates", " ", "=", " ", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Drop", "[", 
              RowBox[{"protoDFA", ",", "1"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Parent\>\""}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"Drop", "[", 
              RowBox[{"protoDFA", ",", "1"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Match", " ", "old", " ", "NFA", " ", "parameters", " ", "to", " ", 
          "the", " ", "new", " ", "DFA"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"newStateRules", " ", "=", " ", 
         RowBox[{"Thread", "[", 
          RowBox[{"protoDFAStates", "\[Rule]", 
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "protoDFAStates", "]"}], "]"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"newStates", " ", "=", 
         RowBox[{"newStateRules", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"containsAccept", " ", "=", " ", 
         RowBox[{"Position", "[", 
          RowBox[{"protoDFAStates", ",", 
           RowBox[{"s_", "/;", 
            RowBox[{"ContainsStateQ", "[", 
             RowBox[{"s", ",", 
              RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], 
             "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"newAccept", " ", "=", " ", 
         RowBox[{"Extract", "[", 
          RowBox[{"newStates", ",", "containsAccept"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"newStart", " ", "=", " ", 
         RowBox[{"Replace", "[", 
          RowBox[{
           RowBox[{"First", "[", "protoDFAStates", "]"}], ",", 
           "newStateRules"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"newTransitions", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"NewStateNode", "[", 
             RowBox[{"#", ",", "newStateRules"}], "]"}], "&"}], ",", 
           RowBox[{"Drop", "[", 
            RowBox[{"protoDFA", ",", "1"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"newTransitionsCleanedUp", " ", "=", " ", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{"newTransitions", ",", 
            RowBox[{"t_", "/;", " ", 
             RowBox[{"JunkStateQ", "[", 
              RowBox[{"newTransitions", ",", "newStart", ",", 
               RowBox[{"t", "[", "\"\<Node\>\"", "]"}]}], "]"}]}]}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"protoDFAExpressionNodes", " ", "=", " ", 
         RowBox[{"Concatenate", "[", "\[IndentingNewLine]", 
          RowBox[{"Map", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Thread", "[", 
              RowBox[{
               RowBox[{"Cases", "[", 
                RowBox[{"protoDFAStates", ",", 
                 RowBox[{"s_", "/;", 
                  RowBox[{"ContainsStateQ", "[", 
                   RowBox[{"s", ",", 
                    RowBox[{"First", "[", "#", "]"}]}], "]"}]}]}], "]"}], 
               "\[Rule]", 
               RowBox[{"Last", "[", "#", "]"}]}], "]"}], "&"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}]}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "protoDFAExpressionNodes", "]"}], 
           "\[NotEqual]", "0"}], ",", "\[IndentingNewLine]", 
          RowBox[{"newStateExpressionsNodes", " ", "=", " ", 
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Replace", "[", 
               RowBox[{"#", ",", "newStateRules"}], "]"}], "&"}], ",", 
             "protoDFAExpressionNodes", ",", 
             RowBox[{"{", 
              RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"newStateExpressionsNodes", " ", "=", " ", 
           RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"newMachine", " ", "=", " ", 
         RowBox[{"<|", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"\"\<Name\>\"", "\[Rule]", 
            RowBox[{"machine", "[", "\"\<Name\>\"", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<DFA\>\""}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "\"\<Transitions\>\"", "\[Rule]", "newTransitionsCleanedUp"}], ",",
            "\[IndentingNewLine]", 
           RowBox[{"\"\<StartState\>\"", "\[Rule]", "newStart"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", "newAccept"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "\"\<StateExpressions\>\"", "\[Rule]", 
            "newStateExpressionsNodes"}]}], "\[IndentingNewLine]", "|>"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748738116522354*^9, 3.7487381169129496`*^9}, {
   3.748738158246546*^9, 3.7487382802511435`*^9}, {3.7487385894166284`*^9, 
   3.7487386169375763`*^9}, {3.748738680548212*^9, 3.748738682590212*^9}, {
   3.7487387313849397`*^9, 3.748738735385742*^9}, {3.748738769293524*^9, 
   3.7487387933746843`*^9}, {3.748738834312461*^9, 3.7487388501955876`*^9}, {
   3.74873910447606*^9, 3.7487391139458637`*^9}, {3.7487395671939325`*^9, 
   3.7487395678504243`*^9}, {3.7487399301793365`*^9, 
   3.7487400405796556`*^9}, {3.748778288431039*^9, 3.74877829725898*^9}, {
   3.748778336607294*^9, 3.748778346753574*^9}, {3.7487785536527443`*^9, 
   3.7487785656020393`*^9}, {3.748785833642488*^9, 3.748785833808627*^9}, {
   3.7487859100429697`*^9, 3.748785916181673*^9}, {3.748786505715897*^9, 
   3.748786505889102*^9}, {3.748786729968886*^9, 3.748786746499671*^9}, {
   3.748786912970744*^9, 3.748786960223692*^9}, {3.748787020551764*^9, 
   3.748787044188747*^9}, 3.7487872186123533`*^9, {3.748787419786417*^9, 
   3.748787431514227*^9}, {3.748787504666951*^9, 3.748787547671826*^9}, {
   3.74878766431117*^9, 3.748787680662057*^9}, {3.748787887520782*^9, 
   3.7487879249258432`*^9}, {3.748800292059382*^9, 3.748800301736413*^9}, {
   3.748800474346759*^9, 3.7488005101594152`*^9}, {3.74880060174504*^9, 
   3.7488006221840773`*^9}, {3.74880072485863*^9, 3.748800725441907*^9}, {
   3.74880075934431*^9, 3.7488008884978313`*^9}, {3.748800929965019*^9, 
   3.7488009310692883`*^9}, {3.74880099766628*^9, 3.748801043554268*^9}, 
   3.74881915174897*^9, 3.748819560915099*^9, {3.748875904270234*^9, 
   3.748875917410491*^9}, 3.7488760544994373`*^9, {3.748876104117798*^9, 
   3.748876107310285*^9}, {3.7488763188209*^9, 3.748876319090781*^9}, {
   3.748876352807436*^9, 3.7488763610884438`*^9}, {3.748876427632503*^9, 
   3.74887644305375*^9}, {3.7488767113568153`*^9, 3.7488767115476933`*^9}, {
   3.7488771269569473`*^9, 3.7488771388240423`*^9}, {3.748877175832747*^9, 
   3.7488771839931726`*^9}, 3.7488778401039343`*^9, {3.7488779312394753`*^9, 
   3.748877931346951*^9}, {3.748878639644886*^9, 3.748878641819347*^9}, {
   3.748878699517582*^9, 3.748878700291568*^9}, {3.748878733498934*^9, 
   3.7488787640588713`*^9}, 3.748879000885603*^9, 3.748879127485878*^9, 
   3.7488793518544416`*^9, {3.7488794386611223`*^9, 3.7488794399886427`*^9}, {
   3.748879574707954*^9, 3.7488795793609657`*^9}, {3.7488921119514236`*^9, 
   3.7488921221033173`*^9}, {3.7502581600826883`*^9, 
   3.7502582184878197`*^9}, {3.750258347344426*^9, 3.750258457650097*^9}, {
   3.750258588423644*^9, 3.750258608860096*^9}, {3.750258861819542*^9, 
   3.750258888330533*^9}, {3.750260101925166*^9, 3.750260116608245*^9}, {
   3.750260221820777*^9, 3.750260240317586*^9}, {3.7502602769409513`*^9, 
   3.750260308042882*^9}, {3.750260600918014*^9, 3.7502606148493357`*^9}, {
   3.7502606463933363`*^9, 3.7502607050158052`*^9}, {3.75026078890306*^9, 
   3.7502608036382427`*^9}, {3.750260872272193*^9, 3.750260916170094*^9}, {
   3.750260962485422*^9, 3.7502610194214087`*^9}, {3.750261299679121*^9, 
   3.750261300047111*^9}, {3.7502616501646*^9, 3.750261650977852*^9}, {
   3.750262300266654*^9, 3.7502623974920588`*^9}, {3.750262441013131*^9, 
   3.750262460331875*^9}, {3.750262583717654*^9, 3.7502626561775923`*^9}, {
   3.750266446011175*^9, 3.7502664486936817`*^9}, {3.7504203675709667`*^9, 
   3.750420393541206*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"b7c7c195-cdf9-449c-857c-99e973ed93a0"],

Cell["Plotting functions", "Text",
 CellChangeTimes->{{3.748703667427678*^9, 
  3.748703670564142*^9}},ExpressionUUID->"bad21f20-1cb4-4ba6-9259-\
d16512a72e95"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Pretty", " ", "output", " ", "for", " ", "NFAExecutionTree"}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"GenerationTransform", "[", 
      RowBox[{"node_Association", ",", "generation_"}], "]"}], ":=", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"\"\<G: \>\"", ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"generation", "-", "1"}], "]"}], ",", "\"\< S: \>\"", ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"node", "[", "\"\<Parent\>\"", "]"}], "]"}]}], "]"}], 
        "\[Rule]", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"\"\<G: \>\"", ",", 
          RowBox[{"ToString", "[", "generation", "]"}], ",", "\"\< S: \>\"", 
          ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"node", "[", "\"\<Node\>\"", "]"}], "]"}]}], "]"}]}], 
       "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{"ToString", "[", 
        RowBox[{"node", "[", "\"\<InputSymbol\>\"", "]"}], "]"}]}], 
      "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GenerationTransform", "[", 
      RowBox[{"nodes_List", ",", "generation_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"GenerationTransform", "[", 
         RowBox[{"#", ",", "generation"}], "]"}], "&"}], ",", "nodes"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAReplaceParents", "[", 
      RowBox[{"transitions_", ",", "newParent_"}], "]"}], ":=", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{"newParent", "&"}], ",", "#", ",", 
          RowBox[{"Key", "[", "\"\<Parent\>\"", "]"}]}], "]"}], "&"}], ",", 
       "transitions"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAExecutionTreeIterate", "[", 
      RowBox[{"transitions_", ",", 
       RowBox[{"state_", "?", "AtomQ"}], ",", "inputSymbol_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "next", ",", "deterministicTransitions", ",", "forkTransitions", ",", 
         "deterministicNodes", ",", "emptyTransition"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"deterministicTransitions", " ", "=", " ", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"FATransitions", "[", 
            RowBox[{"transitions", ",", "state"}], "]"}], ",", 
           RowBox[{"KeyValuePattern", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", 
              RowBox[{"i_", "/;", 
               RowBox[{"MemberQ", "[", 
                RowBox[{"i", ",", "inputSymbol"}], "]"}]}]}], "}"}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"deterministicNodes", " ", "=", " ", 
         RowBox[{"Sort", "[", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"deterministicTransitions", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"forkTransitions", " ", "=", " ", 
         RowBox[{"NFANondetNodes", "[", 
          RowBox[{"transitions", ",", "deterministicNodes"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"forkTransitions", " ", "=", " ", 
         RowBox[{"NFANondetNodesRecursive", "[", 
          RowBox[{"transitions", ",", "forkTransitions"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"forkTransitions", " ", "=", " ", 
         RowBox[{"NFAReplaceParents", "[", 
          RowBox[{"forkTransitions", ",", "state"}], "]"}]}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{
         "This", " ", "is", " ", "the", " ", "only", " ", "difference", " ", 
          "from", " ", "NFAIterate"}], " ", "*)"}], "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"next", " ", "=", " ", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"deterministicTransitions", ",", "forkTransitions"}], 
           "]"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "next", "]"}], ">", "0"}], ",", 
          RowBox[{"Return", "[", "next", "]"}], ",", 
          RowBox[{"Return", "[", 
           RowBox[{"{", "}"}], "]"}]}], "]"}], ";"}]}], "\[IndentingNewLine]",
       "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAExecutionTreeIterate", "[", 
      RowBox[{"transitions_", ",", "state_List", ",", "inputSymbol_"}], "]"}],
      ":=", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"NFAExecutionTreeIterate", "[", 
           RowBox[{"transitions", ",", "#", ",", "inputSymbol"}], "]"}], 
          "&"}], ",", "state"}], "]"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAExecutionTreeComputeTrace", "[", 
      RowBox[{"machine_Association", ",", "inputString_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"computation", ",", "result", ",", "start"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"start", " ", "=", " ", 
         RowBox[{"NFANondetNodesRecursive", "[", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"<|", 
             RowBox[{"\"\<Node\>\"", "\[Rule]", 
              RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "|>"}], 
            "}"}]}], "]"}]}], ";", " ", 
        RowBox[{"(*", " ", 
         RowBox[{
         "This", " ", "is", " ", "the", " ", "only", " ", "difference", " ", 
          "from", " ", "NFACompute"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"computation", " ", "=", " ", 
         RowBox[{"FoldList", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"NFAExecutionTreeIterate", "[", 
             RowBox[{
              RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{"#1", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], ",", 
              "#2"}], "]"}], "&"}], ",", "start", ",", "inputString"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"Apply", "[", 
          RowBox[{"Or", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}], ",", 
                "#"}], "]"}], "&"}], ",", 
             RowBox[{
              RowBox[{"Last", "[", "computation", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}]}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"{", 
          RowBox[{"computation", ",", "result"}], "}"}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Plot", " ", "the", " ", "execution", " ", "tree", " ", "showing", " ", 
     "the", " ", "active", " ", "states", " ", "at", " ", "every", " ", 
     "input"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAExecutionTree", "[", 
      RowBox[{"machine_Association", ",", "inputString_"}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"trace", ",", "root", ",", "traceTree"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"trace", " ", "=", " ", 
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"First", "[", 
            RowBox[{"NFAExecutionTreeComputeTrace", "[", 
             RowBox[{"machine", ",", "inputString"}], "]"}], "]"}], ",", 
           "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"root", " ", "=", " ", 
         RowBox[{"First", "[", 
          RowBox[{"GenerationTransform", "[", 
           RowBox[{
            RowBox[{"First", "[", "trace", "]"}], ",", "1"}], "]"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"traceTree", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"MapIndexed", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"GenerationTransform", "[", 
               RowBox[{"#1", ",", 
                RowBox[{"First", "[", "#2", "]"}]}], "]"}], "&"}], ",", 
             "trace"}], "]"}], ",", "1"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"TreePlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"DeleteDuplicates", "[", "traceTree", "]"}], ",", 
          "\[IndentingNewLine]", "Automatic", ",", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"\"\<G: 0 S: \>\"", ",", 
            RowBox[{"ToString", "[", 
             RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}], "]"}]}], 
           "]"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"VertexLabeling", "\[Rule]", "True"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"DirectedEdges", "\[Rule]", "True"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "NFAPlotExecution", "]"}], " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<SimpleNodes\>\"", "\[Rule]", "False"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NFAPlotExecution", "[", 
      RowBox[{"machine_Association", ",", "inputString_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"DynamicModule", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "trace", ",", "executionSteps", ",", "ruleIndexes", ",", "graphData", 
         ",", "startTag", ",", "acceptTags", ",", "currentStates", ",", 
         "start", ",", "parentStates"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"trace", " ", "=", " ", 
         RowBox[{"NFACompute", "[", 
          RowBox[{"machine", ",", "inputString"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"executionSteps", " ", "=", " ", 
         RowBox[{"First", "[", "trace", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"ruleIndexes", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{"Apply", "[", 
               RowBox[{"Alternatives", ",", "#"}], "]"}]}], "]"}], "&"}], ",",
            "executionSteps"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"currentStates", " ", "=", " ", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
           RowBox[{
            RowBox[{"KeyValuePattern", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], "}"}], "]"}], 
            "\[RuleDelayed]", "n"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"parentStates", " ", "=", " ", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
           RowBox[{
            RowBox[{"KeyValuePattern", "[", 
             RowBox[{"{", 
              RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], "}"}], "]"}], 
            "\[RuleDelayed]", "p"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"start", " ", "=", " ", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{"Sort", "[", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"<|", 
               RowBox[{"\"\<Node\>\"", "\[Rule]", 
                RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "|>"}],
               "}"}], ",", 
             RowBox[{"NFANondetNodes", "[", 
              RowBox[{
               RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
               RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "]"}]}],
             "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<SimpleNodes\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"graphData", " ", "=", " ", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{
               RowBox[{"KeyValuePattern", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                  RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                  RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"Labeled", "[", 
                RowBox[{
                 RowBox[{"p", "\[Rule]", "n"}], ",", "i"}], "]"}]}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"acceptTags", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "\[Rule]", "Green"}], "&"}], ",", 
              RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"startTag", " ", "=", " ", 
            RowBox[{
             RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}], "\[Rule]", 
             "Red"}]}], ";"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"graphData", " ", "=", " ", 
            RowBox[{"Cases", "[", 
             RowBox[{
              RowBox[{"machine", "[", "\"\<Transitions\>\"", "]"}], ",", 
              RowBox[{
               RowBox[{"KeyValuePattern", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"\"\<Parent\>\"", "\[Rule]", "p_"}], ",", 
                  RowBox[{"\"\<Node\>\"", "\[Rule]", "n_"}], ",", 
                  RowBox[{"\"\<InputSymbol\>\"", "\[Rule]", "i_"}]}], "}"}], 
                "]"}], "\[RuleDelayed]", 
               RowBox[{"Labeled", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"NameTag", "[", 
                   RowBox[{"machine", ",", "p"}], "]"}], "\[Rule]", 
                  RowBox[{"NameTag", "[", 
                   RowBox[{"machine", ",", "n"}], "]"}]}], ",", "i"}], 
                "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"acceptTags", " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"NameTag", "[", 
                 RowBox[{"machine", ",", "#"}], "]"}], "\[Rule]", "Green"}], 
               "&"}], ",", 
              RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"startTag", " ", "=", " ", 
            RowBox[{
             RowBox[{"NameTag", "[", 
              RowBox[{"machine", ",", 
               RowBox[{"machine", "[", "\"\<StartState\>\"", "]"}]}], "]"}], 
             "\[Rule]", "Red"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Column", "[", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Input string: \>\"", ",", 
                RowBox[{"Grid", "[", 
                 RowBox[{
                  RowBox[{"{", "inputString", "}"}], ",", 
                  RowBox[{"Frame", "\[Rule]", "All"}], ",", 
                  RowBox[{"Background", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], "\[Rule]", "Green"}], 
                    "}"}]}]}], "]"}]}], "}"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Start states: \>\"", ",", 
                RowBox[{"Sort", "[", 
                 RowBox[{"start", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], 
                 "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Parent states: \>\"", ",", 
                RowBox[{"Sort", "[", 
                 RowBox[{"Extract", "[", 
                  RowBox[{"parentStates", ",", 
                   RowBox[{"ruleIndexes", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}]}], "}"}], 
              "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Current states: \>\"", ",", 
                RowBox[{"Sort", "[", 
                 RowBox[{"Extract", "[", 
                  RowBox[{"currentStates", ",", 
                   RowBox[{"ruleIndexes", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}]}], "}"}], 
              "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Accept states: \>\"", ",", 
                RowBox[{"machine", "[", "\"\<AcceptStates\>\"", "]"}]}], 
               "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<Result: \>\"", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"Last", "[", "trace", "]"}], ",", 
                  "\"\<Accepted\>\"", ",", "\"\<Not accepted\>\""}], "]"}]}], 
               "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Graph", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"MapAt", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Style", "[", 
                   RowBox[{"#", ",", "Red"}], "]"}], "&"}], ",", "graphData", 
                 ",", 
                 RowBox[{"ruleIndexes", "[", 
                  RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"ImageSize", "\[Rule]", "400"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"VertexStyle", "\[Rule]", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"{", "startTag", "}"}], ",", "acceptTags"}], 
                 "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"VertexSize", "\[Rule]", "0.1"}]}], 
              "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "ruleIndexes", "]"}], ",", "1"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748723710630788*^9, 3.7487237277022753`*^9}, {
   3.748727084847048*^9, 3.748727114283317*^9}, {3.7487273040192413`*^9, 
   3.748727332398481*^9}, 3.7487274161950274`*^9, {3.748727746247192*^9, 
   3.7487277515543003`*^9}, {3.7487279081031237`*^9, 3.748727923710023*^9}, {
   3.748730787312983*^9, 3.7487307928236437`*^9}, {3.7487310231228743`*^9, 
   3.748731029203887*^9}, {3.748732221606511*^9, 3.748732244415888*^9}, {
   3.748801116775278*^9, 3.748801125987548*^9}, {3.748803881391964*^9, 
   3.748803890822966*^9}, {3.748810282056794*^9, 3.748810310150012*^9}, {
   3.748810341046427*^9, 3.748810341372549*^9}, {3.748810373717168*^9, 
   3.7488104247836323`*^9}, {3.7488190100132637`*^9, 3.748819031832165*^9}, {
   3.7488218290643587`*^9, 3.748821922262388*^9}, {3.748822042635623*^9, 
   3.748822061104003*^9}, {3.7488221105576887`*^9, 3.748822144647644*^9}, 
   3.748873660546661*^9, {3.748873707954574*^9, 3.748873711934341*^9}, {
   3.748873825297386*^9, 3.7488738481675158`*^9}, {3.748873889477778*^9, 
   3.748873906095031*^9}, {3.748873946989931*^9, 3.748873950680476*^9}, {
   3.748874048740857*^9, 3.7488740972258873`*^9}, {3.748874584723062*^9, 
   3.748874617867284*^9}, {3.7488810931819077`*^9, 3.748881122111397*^9}, {
   3.748881196902763*^9, 3.748881242044869*^9}, {3.74889173692879*^9, 
   3.74889176808032*^9}, {3.748891799922946*^9, 3.748891809223888*^9}, {
   3.748891865920815*^9, 3.748891878898841*^9}, {3.748892022621436*^9, 
   3.74889202590692*^9}, {3.748894165361425*^9, 3.748894165931028*^9}, {
   3.7488955842011433`*^9, 3.748895615457005*^9}, {3.748895666818984*^9, 
   3.7488956914092083`*^9}, {3.748895754543974*^9, 3.748895797415758*^9}, {
   3.750262844236038*^9, 3.75026285080511*^9}, {3.750336475715466*^9, 
   3.750336508122905*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"c35f797e-e117-4def-a9d9-6bf02dd6be56"],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.76117535778306*^9, 
  3.76117535959519*^9}},ExpressionUUID->"4d7c9f80-90e3-4e7b-864f-\
c4018c52b428"],

Cell[TextData[{
 "NFA declaration, where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"L", "(", 
     SubscriptBox["n", "1"], ")"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"\[Omega]", " ", "|", " ", 
      RowBox[{
      "\[Omega]", " ", "contains", " ", "either", " ", "101", " ", "or", " ", 
       "11", " ", "as", " ", "a", " ", "substring"}]}], "}"}]}], 
   TraditionalForm]],ExpressionUUID->"75402c95-f204-49cb-b86e-646d9930f020"],
 "."
}], "Text",
 CellChangeTimes->{{3.7486960191284437`*^9, 3.7486960229760027`*^9}, {
  3.748721414503212*^9, 3.7487214706204453`*^9}, {3.7487224192767563`*^9, 
  3.748722451223521*^9}},ExpressionUUID->"d0d8dbc0-d6fb-4882-a0f0-\
19388e9ae371"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n1", " ", "=", " ", 
  RowBox[{"NFA", "[", "\[IndentingNewLine]", 
   RowBox[{"\"\<q\>\"", ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Transition", "[", 
       RowBox[{"1", ",", "1", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"Transition", "[", 
       RowBox[{"1", ",", "2", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"2", ",", "3", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "\[Epsilon]"}], "}"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"3", ",", "4", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"4", ",", "4", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
     "}"}], ",", "\[IndentingNewLine]", "1", ",", "\[IndentingNewLine]", 
    RowBox[{"{", "4", "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.748722091354216*^9, 3.748722186333098*^9}, 
   3.748722219767849*^9, 3.74872227206805*^9, {3.748722310426982*^9, 
   3.748722343398905*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"d3822f33-33e6-43cb-ab66-3e575eedef27"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"q\"\>"}], ",", 
   RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"NFA\"\>"}], ",", 
   RowBox[{"\<\"Transitions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "3"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "\[Epsilon]"}], "}"}]}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "3"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "4"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "4"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "4"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}]}], "\[RightAssociation]"}]}], 
     "}"}]}], ",", 
   RowBox[{"\<\"StartState\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"AcceptStates\"\>", "\[Rule]", 
    RowBox[{"{", "4", "}"}]}], ",", 
   RowBox[{"\<\"StateExpressions\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.750261314084539*^9, 3.750261689090506*^9, 
  3.7502628770878963`*^9, 3.750266476866433*^9, 3.750364373066331*^9, 
  3.750364458369781*^9, 3.7504555700727663`*^9, 3.7504575270419407`*^9, 
  3.750460733835918*^9, 3.750503306848978*^9, 3.7505046643192987`*^9, 
  3.750506573552188*^9, 3.75053102666149*^9, 3.750531341050858*^9, 
  3.7505320017079678`*^9, 3.750612937633628*^9, 3.750688990118759*^9, 
  3.7611754370338306`*^9},
 CellLabel->
  "Out[127]=",ExpressionUUID->"d52318ed-da85-4fcf-8cd3-d3abeb2963ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FAPlot", "[", 
  RowBox[{"n1", ",", 
   RowBox[{"\"\<Labeled\>\"", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.748722189670611*^9, 3.748722194106892*^9}, {
  3.7611754459808197`*^9, 3.7611754491620083`*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"5053fde2-b890-41d2-942b-481d38b676e7"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 
          4}, {{{1, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 4}}, Null}, {
          EdgeLabels -> {
            DirectedEdge[4, 4] -> {0, 1}, DirectedEdge[3, 4] -> {1}, 
             DirectedEdge[2, 3] -> {0, $CellContext`\[Epsilon]}, 
             DirectedEdge[1, 1] -> {0, 1}, DirectedEdge[1, 2] -> {1}}, 
           ImageSize -> 400, VertexLabels -> {"Name"}, VertexSize -> {0.1}, 
           VertexStyle -> {
            1 -> RGBColor[1, 0, 0], 4 -> RGBColor[0, 1, 0]}}]]}, 
      TagBox[
       GraphicsGroupBox[{{
          Arrowheads[Medium], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], {
           ArrowBox[
            
            BezierCurveBox[{{0., 
             6.123233995736766*^-16}, {-0.08847925546776056, \
-0.19078353238530174`}, {-0.2873577330053514, -0.24717977484589582`}, \
{-0.41452835747980865`, -0.18822269607102254`}, {-0.41452835747980865`, 
             0.18822269607102368`}, {-0.2873577330053514, 
             0.24717977484589698`}, {-0.08847925546776059, 
             0.1907835323853029}, {0., 6.123233995736766*^-16}}, SplineDegree -> 
             7], 0.05], 
           InsetBox[
            FormBox[
             RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], TraditionalForm], {-0.5, 
            7.067136979686371*^-16}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0., 6.123233995736766*^-16}, {1., 
            4.898587196589413*^-16}}, 0.05], 
           InsetBox[
            FormBox[
             RowBox[{"{", "1", "}"}], TraditionalForm], {0.5, 
            5.51091059616309*^-16}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{1., 4.898587196589413*^-16}, {2., 
            2.4492935982947064`*^-16}}, 0.05], 
           InsetBox[
            FormBox[
             RowBox[{"{", 
               RowBox[{"0", ",", "\[Epsilon]"}], "}"}], TraditionalForm], {
            1.5, 3.6739403974420594`*^-16}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[{{2., 2.4492935982947064`*^-16}, {3., 0.}}, 0.05], 
           InsetBox[
            FormBox[
             RowBox[{"{", "1", "}"}], TraditionalForm], {2.5, 
            1.2246467991473532`*^-16}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[
            
            BezierCurveBox[{{3., 0.}, {3.0884792554677603`, 
             0.1907835323853024}, {3.287357733005351, 0.24717977484589673`}, {
             3.414528357479808, 0.18822269607102357`}, {
             3.4145283574798087`, -0.18822269607102265`}, {
             3.2873577330053516`, -0.2471797748458961}, {
             3.0884792554677607`, -0.19078353238530207`}, {3., 0.}}, 
             SplineDegree -> 7], 0.05], 
           InsetBox[
            FormBox[
             RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], TraditionalForm], {3.5, 
            5.043048344238667*^-16}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], {
           StyleBox[
            DiskBox[{0., 6.123233995736766*^-16}, 0.05], 
            RGBColor[1, 0, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, {0.05, 0.05000000000000061}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           DiskBox[{1., 4.898587196589413*^-16}, 0.05], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, {1.05, 0.050000000000000495`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           DiskBox[{2., 2.4492935982947064`*^-16}, 0.05], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, {2.05, 0.050000000000000246`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            DiskBox[{3., 0.}, 0.05], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, {3.05, 0.05}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False]], {
    FormatType -> TraditionalForm, FrameTicks -> None, ImageSize -> 400, 
     DefaultBaseStyle -> {
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
       Hue[0.8, 1., 0.6]}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"State\"", "\"Start state\"", "\"Accept state\"", 
       "\"Start/Accept state\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.87, 0.94, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[
                    0.5800000000000001, 0.6266666666666667, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                   None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.87`", ",", "0.94`", ",", "1"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.87, 0.94, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.87, 0.94, 1], Editable -> False, Selectable -> 
                False], ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0, 1, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.5`", ",", "0", ",", "0.5`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                False]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             GraphicsBox[
              DiskBox[{0, 0}]]}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.7502629133341007`*^9, 3.7502665060449753`*^9, 
  3.761175449449751*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"68c0e31e-5d8f-4d11-bcfe-184fa253c095"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "@", 
  RowBox[{
   RowBox[{"First", "[", 
    RowBox[{"NFACompute", "[", 
     RowBox[{"n1", ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], 
       "}"}]}], "]"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "All", ",", "\"\<Node\>\""}], "]"}], "]"}]}]], "Input",\

 CellChangeTimes->{3.748894143293449*^9},
 CellLabel->
  "In[130]:=",ExpressionUUID->"c1aed367-ed99-447e-8474-2e5aa11169e4"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", "1", "}"}]},
    {
     RowBox[{"{", "1", "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "4"}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "4"}], "}"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.750262914538477*^9, 3.7502665072702637`*^9, 
  3.750365500585713*^9, 3.7611754528450747`*^9},
 CellLabel->
  "Out[130]=",ExpressionUUID->"d79f469e-daa2-41cf-9e15-d3ce71c0eed4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFAPlotExecution", "[", 
  RowBox[{"n1", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.748722473722959*^9, 3.748722480903648*^9}, {
   3.7487292480745363`*^9, 3.7487292517209377`*^9}, 3.748730961796482*^9},
 CellLabel->
  "In[131]:=",ExpressionUUID->"8a55c60d-e916-4483-acba-f4b05ccad204"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`trace$$ = {{{
     Association["Node" -> 1]}, {
     Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}]}, {
     Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
     Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
     Association[
     "Parent" -> 2, "Node" -> 3, 
      "InputSymbol" -> {0, $CellContext`\[Epsilon]}]}, {
     Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
     Association[
     "Parent" -> 2, "Node" -> 3, 
      "InputSymbol" -> {0, $CellContext`\[Epsilon]}]}, {
     Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
     Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
     Association[
     "Parent" -> 2, "Node" -> 3, 
      "InputSymbol" -> {0, $CellContext`\[Epsilon]}], 
     Association["Parent" -> 3, "Node" -> 4, "InputSymbol" -> {1}]}, {
     Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
     Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
     Association[
     "Parent" -> 2, "Node" -> 3, 
      "InputSymbol" -> {0, $CellContext`\[Epsilon]}], 
     Association["Parent" -> 3, "Node" -> 4, "InputSymbol" -> {1}], 
     Association["Parent" -> 4, "Node" -> 4, "InputSymbol" -> {0, 1}]}, {
     Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
     Association[
     "Parent" -> 2, "Node" -> 3, 
      "InputSymbol" -> {0, $CellContext`\[Epsilon]}], 
     Association["Parent" -> 4, "Node" -> 4, "InputSymbol" -> {0, 1}]}}, 
   True}, $CellContext`executionSteps$$ = {{
    Association["Node" -> 1]}, {
    Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}]}, {
    Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
    Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
    Association[
    "Parent" -> 2, "Node" -> 3, 
     "InputSymbol" -> {0, $CellContext`\[Epsilon]}]}, {
    Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
    Association[
    "Parent" -> 2, "Node" -> 3, 
     "InputSymbol" -> {0, $CellContext`\[Epsilon]}]}, {
    Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
    Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
    Association[
    "Parent" -> 2, "Node" -> 3, 
     "InputSymbol" -> {0, $CellContext`\[Epsilon]}], 
    Association["Parent" -> 3, "Node" -> 4, "InputSymbol" -> {1}]}, {
    Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
    Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
    Association[
    "Parent" -> 2, "Node" -> 3, 
     "InputSymbol" -> {0, $CellContext`\[Epsilon]}], 
    Association["Parent" -> 3, "Node" -> 4, "InputSymbol" -> {1}], 
    Association["Parent" -> 4, "Node" -> 4, "InputSymbol" -> {0, 1}]}, {
    Association["Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
    Association[
    "Parent" -> 2, "Node" -> 3, 
     "InputSymbol" -> {0, $CellContext`\[Epsilon]}], 
    Association[
    "Parent" -> 4, "Node" -> 4, 
     "InputSymbol" -> {0, 1}]}}, $CellContext`ruleIndexes$$ = {{}, {{1}}, {{
   1}, {2}, {3}}, {{1}, {3}}, {{1}, {2}, {3}, {4}}, {{1}, {2}, {3}, {4}, {
   5}}, {{1}, {3}, {5}}}, $CellContext`graphData$$ = {
   Labeled[Subscript["q", "1"] -> Subscript["q", "1"], {0, 1}], 
   Labeled[Subscript["q", "1"] -> Subscript["q", "2"], {1}], 
   Labeled[
   Subscript["q", "2"] -> Subscript["q", "3"], {0, $CellContext`\[Epsilon]}], 
   Labeled[Subscript["q", "3"] -> Subscript["q", "4"], {1}], 
   Labeled[
   Subscript["q", "4"] -> Subscript["q", "4"], {0, 
    1}]}, $CellContext`startTag$$ = Subscript["q", "1"] -> 
  RGBColor[1, 0, 0], $CellContext`acceptTags$$ = {
  Subscript["q", "4"] -> RGBColor[0, 1, 0]}, $CellContext`currentStates$$ = {
  1, 2, 3, 4, 4}, $CellContext`start$$ = {
   Association["Node" -> 1]}, $CellContext`parentStates$$ = {1, 1, 2, 3, 4}}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`i$$ = 3, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`i$$], 1, 7, 1}}, Typeset`size$$ = {400., {84., 90.}},
      Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
     True, $CellContext`i$3884$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
       "ControllerVariables" :> {
         Hold[$CellContext`i$$, $CellContext`i$3884$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Column[{
          Row[{"Input string: ", 
            
            Grid[{{0, 1, 0, 1, 1, 0}}, Frame -> All, 
             Background -> {$CellContext`i$$ - 1 -> Green}]}], 
          Row[{"Start states: ", 
            Sort[
             Part[$CellContext`start$$, All, "Node"]]}], 
          Row[{"Parent states: ", 
            Sort[
             Extract[$CellContext`parentStates$$, 
              Part[$CellContext`ruleIndexes$$, $CellContext`i$$]]]}], 
          Row[{"Current states: ", 
            Sort[
             Extract[$CellContext`currentStates$$, 
              Part[$CellContext`ruleIndexes$$, $CellContext`i$$]]]}], 
          Row[{"Accept states: ", 
            Association["Name" -> "q", "Type" -> "NFA", "Transitions" -> {
               Association[
               "Parent" -> 1, "Node" -> 1, "InputSymbol" -> {0, 1}], 
               Association["Parent" -> 1, "Node" -> 2, "InputSymbol" -> {1}], 
               Association[
               "Parent" -> 2, "Node" -> 3, 
                "InputSymbol" -> {0, $CellContext`\[Epsilon]}], 
               Association["Parent" -> 3, "Node" -> 4, "InputSymbol" -> {1}], 
               Association[
               "Parent" -> 4, "Node" -> 4, "InputSymbol" -> {0, 1}]}, 
             "StartState" -> 1, "AcceptStates" -> {4}, 
             "StateExpressions" -> {}]["AcceptStates"]}], 
          Row[{"Result: ", 
            If[
             Last[$CellContext`trace$$], "Accepted", "Not accepted"]}], 
          Graph[
           MapAt[Style[#, Red]& , $CellContext`graphData$$, 
            Part[$CellContext`ruleIndexes$$, $CellContext`i$$]], ImageSize -> 
           400, VertexLabels -> "Name", VertexStyle -> 
           Join[{$CellContext`startTag$$}, $CellContext`acceptTags$$], 
           VertexSize -> 0.1]}], 
       "Specifications" :> {{$CellContext`i$$, 1, 7, 1}}, "Options" :> {}, 
       "DefaultOptions" :> {}],
      ImageSizeCache->{451., {131., 137.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.750262916229228*^9, 3.750266509491522*^9, 
  3.750365502716214*^9, 3.761175454218972*^9},
 CellLabel->
  "Out[131]=",ExpressionUUID->"35e24bb6-0318-40c9-97db-d571c4b701af"]
}, Open  ]],

Cell[TextData[{
 "NFA declaration, where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"L", "(", "nfa", ")"}], " ", "=", " ", 
    RowBox[{"0", " ", 
     SuperscriptBox["\[CapitalSigma]", "*"], "1"}]}], TraditionalForm]],
  ExpressionUUID->"1ed96f75-c1ed-4b61-9855-dbcf0a0d3e20"],
 "."
}], "Text",
 CellChangeTimes->{{3.748722080901827*^9, 3.7487220815193644`*^9}, 
   3.748723770737221*^9, {3.748723810242036*^9, 
   3.748723842783046*^9}},ExpressionUUID->"c5c2af65-3b56-4ec5-b76b-\
0f07d238571b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nfa", " ", "=", " ", 
  RowBox[{"NFA", "[", "\[IndentingNewLine]", 
   RowBox[{"\"\<q\>\"", ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Transition", "[", 
       RowBox[{"0", ",", "1", ",", 
        RowBox[{"{", "0", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"EmptyTransition", "[", 
       RowBox[{"1", ",", "2"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"EmptyTransition", "[", 
       RowBox[{"1", ",", "3"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"2", ",", "4", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"EmptyTransition", "[", 
       RowBox[{"4", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"3", ",", "5", ",", 
        RowBox[{"{", "0", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"EmptyTransition", "[", 
       RowBox[{"5", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"EmptyTransition", "[", 
       RowBox[{"4", ",", "6"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"EmptyTransition", "[", 
       RowBox[{"5", ",", "6"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Transition", "[", 
       RowBox[{"6", ",", "7", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}]}], "\[IndentingNewLine]", "}"}], ",",
     "\[IndentingNewLine]", "0", ",", "\[IndentingNewLine]", 
    RowBox[{"{", "7", "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.748696995477354*^9, 3.748697062563917*^9}, 
   3.748895999992104*^9},
 CellLabel->
  "In[132]:=",ExpressionUUID->"ffd1c692-c823-4946-9c6e-6cebf9b82304"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"q\"\>"}], ",", 
   RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"NFA\"\>"}], ",", 
   RowBox[{"\<\"Transitions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "0"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "3"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "4"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "4"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "3"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "5"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "0", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "5"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "4"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "6"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "5"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "6"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "6"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "7"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}]}], "}"}]}], ",", 
   RowBox[{"\<\"StartState\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"AcceptStates\"\>", "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{"\<\"StateExpressions\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.750261314128689*^9, 3.75026168912807*^9, 
  3.750262877120823*^9, 3.7502664769152327`*^9, 3.7503643779444113`*^9, 
  3.75036445843116*^9, 3.7504555701095543`*^9, 3.750457527099012*^9, 
  3.750460733876422*^9, 3.750462529729061*^9, 3.7504663016838093`*^9, 
  3.750503306876528*^9, 3.7505046643505497`*^9, 3.750506573599063*^9, 
  3.7505310266979113`*^9, 3.7505313410865803`*^9, 3.750532001744041*^9, 
  3.7506129376675663`*^9, 3.750688990155222*^9, 3.761175503661168*^9},
 CellLabel->
  "Out[132]=",ExpressionUUID->"a2358c4b-2519-453b-bc62-5ce987a4bdc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FAPlot", "[", 
  RowBox[{"nfa", ",", 
   RowBox[{"\"\<Labeled\>\"", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7487037061993*^9, 3.748703709044566*^9}, {
  3.7611755095002623`*^9, 3.76117551229045*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"0ba0cd0c-b616-49bb-9f37-203e50d6557e"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{0, 1, 2, 3, 4, 5, 6, 
          7}, {{{1, 2}, {2, 3}, {2, 4}, {3, 5}, {5, 2}, {4, 6}, {6, 2}, {5, 
           7}, {6, 7}, {7, 8}}, Null}, {
          EdgeLabels -> {
            DirectedEdge[2, 4] -> {1}, 
             DirectedEdge[5, 6] -> $CellContext`\[Epsilon], 
             DirectedEdge[4, 1] -> $CellContext`\[Epsilon], 
             DirectedEdge[1, 3] -> $CellContext`\[Epsilon], 
             DirectedEdge[0, 1] -> {0}, DirectedEdge[3, 5] -> {0}, 
             DirectedEdge[5, 1] -> $CellContext`\[Epsilon], 
             DirectedEdge[4, 6] -> $CellContext`\[Epsilon], 
             DirectedEdge[1, 2] -> $CellContext`\[Epsilon], 
             DirectedEdge[6, 7] -> {1}}, ImageSize -> 400, 
           VertexLabels -> {"Name"}, VertexSize -> {0.1}, 
           VertexStyle -> {
            0 -> RGBColor[1, 0, 0], 7 -> RGBColor[0, 1, 0]}}]]}, 
      TagBox[
       GraphicsGroupBox[{{
          Arrowheads[Medium], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], {
           
           ArrowBox[{{3.9736539084940192`, 0.9442457777446113}, {
            2.8574309970468956`, 0.9444989899398274}}, 0.04240321192020513], 
           InsetBox[
            FormBox[
             RowBox[{"{", "0", "}"}], TraditionalForm], {3.4155424527704574`, 
            0.9443723838422193}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{2.8574309970468956`, 0.9444989899398274}, {
            2.7442010727557227`, 1.8888696629318837`}}, 0.04240321192020513], 
           
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {2.800816034901309, 
            1.4166843264358555`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{2.8574309970468956`, 0.9444989899398274}, {
            2.743395374360817, 0.}}, 0.04240321192020513], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {2.8004131857038566`, 
            0.4722494949699137}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[{{2.7442010727557227`, 1.8888696629318837`}, {
            2.0006298488237024`, 1.4807214933862762`}}, 0.04240321192020513], 
           
           InsetBox[
            FormBox[
             RowBox[{"{", "1", "}"}], TraditionalForm], {2.3724154607897123`, 
            1.68479557815908}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{2.743395374360817, 0.}, {2.000107344363399, 
            0.4083330220818391}}, 0.04240321192020513], 
           InsetBox[
            FormBox[
             RowBox[{"{", "0", "}"}], TraditionalForm], {2.371751359362108, 
            0.20416651104091954`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{2.0006298488237024`, 1.4807214933862762`}, {
            2.8574309970468956`, 0.9444989899398274}}, 0.04240321192020513], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {2.4290304229352992`, 
            1.2126102416630518`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{2.0006298488237024`, 1.4807214933862762`}, {
            1.063497781329974, 0.9443609279561709}}, 0.04240321192020513], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {1.5320638150768382`, 
            1.2125412106712234`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{2.000107344363399, 0.4083330220818391}, {
            2.8574309970468956`, 0.9444989899398274}}, 0.04240321192020513], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {2.4287691707051473`, 
            0.6764160060108333}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{2.000107344363399, 0.4083330220818391}, {
            1.063497781329974, 0.9443609279561709}}, 0.04240321192020513], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {1.5318025628466865`, 
            0.676346975019005}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[{{1.063497781329974, 0.9443609279561709}, {0., 
            0.9448005551844476}}, 0.04240321192020513], 
           InsetBox[
            FormBox[
             RowBox[{"{", "1", "}"}], TraditionalForm], {0.531748890664987, 
            0.9445807415703092}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], {
           StyleBox[
            
            DiskBox[{3.9736539084940192`, 0.9442457777446113}, 
             0.04240321192020513], 
            RGBColor[1, 0, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["0", TraditionalForm], 
            Offset[{2, 2}, {4.016057120414224, 0.9866489896648164}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{2.8574309970468956`, 0.9444989899398274}, 
            0.04240321192020513], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, {2.8998342089671008`, 0.9869022018600325}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{2.7442010727557227`, 1.8888696629318837`}, 
            0.04240321192020513], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, {2.786604284675928, 1.9312728748520889`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           DiskBox[{2.743395374360817, 0.}, 0.04240321192020513], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, {2.785798586281022, 0.04240321192020513}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{2.0006298488237024`, 1.4807214933862762`}, 
            0.04240321192020513], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, {2.0430330607439076`, 1.5231247053064814`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{2.000107344363399, 0.4083330220818391}, 
            0.04240321192020513], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, {2.042510556283604, 0.4507362340020442}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{1.063497781329974, 0.9443609279561709}, 
            0.04240321192020513], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, {1.105900993250179, 0.986764139876376}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            DiskBox[{0., 0.9448005551844476}, 0.04240321192020513], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["7", TraditionalForm], 
            Offset[{2, 2}, {0.04240321192020513, 0.9872037671046527}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False]], {
    FormatType -> TraditionalForm, FrameTicks -> None, ImageSize -> 400, 
     DefaultBaseStyle -> {
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
       Hue[0.8, 1., 0.6]}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"State\"", "\"Start state\"", "\"Accept state\"", 
       "\"Start/Accept state\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.87, 0.94, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[
                    0.5800000000000001, 0.6266666666666667, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                   None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.87`", ",", "0.94`", ",", "1"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.87, 0.94, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.87, 0.94, 1], Editable -> False, Selectable -> 
                False], ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0, 1, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.5`", ",", "0", ",", "0.5`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                False]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             GraphicsBox[
              DiskBox[{0, 0}]]}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.7502665143891706`*^9, 3.7504625327275887`*^9, {3.7611755066186657`*^9, 
   3.761175512542831*^9}},
 CellLabel->
  "Out[134]=",ExpressionUUID->"385de2ed-dd98-46b4-91dd-026b5eb9f7ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFAPlotExecution", "[", 
  RowBox[{"nfa", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1", ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.748697460774969*^9, 3.748697466524932*^9}},
 CellLabel->
  "In[135]:=",ExpressionUUID->"3ae9bf7a-341f-4789-ace1-672b55a9cde3"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`trace$$ = {{{
     Association["Node" -> 0]}, {
     Association["Parent" -> 0, "Node" -> 1, "InputSymbol" -> {0}], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 3, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 3, "Node" -> 5, "InputSymbol" -> {0}], 
     Association[
     "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 3, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {1}], 
     Association["Parent" -> 2, "Node" -> 4, "InputSymbol" -> {1}], 
     Association[
     "Parent" -> 4, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 4, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 3, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {1}], 
     Association["Parent" -> 2, "Node" -> 4, "InputSymbol" -> {1}], 
     Association[
     "Parent" -> 4, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 4, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 3, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {1}], 
     Association["Parent" -> 2, "Node" -> 4, "InputSymbol" -> {1}], 
     Association[
     "Parent" -> 4, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 4, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 3, "InputSymbol" -> $CellContext`\[Epsilon]]}}, 
   True}, $CellContext`executionSteps$$ = {{
    Association["Node" -> 0]}, {
    Association["Parent" -> 0, "Node" -> 1, "InputSymbol" -> {0}], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 3, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 3, "Node" -> 5, "InputSymbol" -> {0}], 
    Association[
    "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 3, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {1}], 
    Association["Parent" -> 2, "Node" -> 4, "InputSymbol" -> {1}], 
    Association[
    "Parent" -> 4, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 4, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 3, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {1}], 
    Association["Parent" -> 2, "Node" -> 4, "InputSymbol" -> {1}], 
    Association[
    "Parent" -> 4, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 4, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 3, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {1}], 
    Association["Parent" -> 2, "Node" -> 4, "InputSymbol" -> {1}], 
    Association[
    "Parent" -> 4, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 4, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 3, 
     "InputSymbol" -> $CellContext`\[Epsilon]]}}, $CellContext`ruleIndexes$$ \
= {{}, {{1}, {2}, {3}}, {{2}, {3}, {6}, {7}, {9}}, {{2}, {3}, {4}, {5}, {8}, {
   10}}, {{2}, {3}, {4}, {5}, {8}, {10}}, {{2}, {3}, {4}, {5}, {8}, {
   10}}}, $CellContext`graphData$$ = {
   Labeled[Subscript["q", "0"] -> Subscript["q", "1"], {0}], 
   Labeled[
   Subscript["q", "1"] -> Subscript["q", "2"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["q", "1"] -> Subscript["q", "3"], $CellContext`\[Epsilon]], 
   Labeled[Subscript["q", "2"] -> Subscript["q", "4"], {1}], 
   Labeled[
   Subscript["q", "4"] -> Subscript["q", "1"], $CellContext`\[Epsilon]], 
   Labeled[Subscript["q", "3"] -> Subscript["q", "5"], {0}], 
   Labeled[
   Subscript["q", "5"] -> Subscript["q", "1"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["q", "4"] -> Subscript["q", "6"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["q", "5"] -> Subscript["q", "6"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["q", "6"] -> Subscript["q", "7"], {
    1}]}, $CellContext`startTag$$ = Subscript["q", "0"] -> 
  RGBColor[1, 0, 0], $CellContext`acceptTags$$ = {
  Subscript["q", "7"] -> RGBColor[0, 1, 0]}, $CellContext`currentStates$$ = {
  1, 2, 3, 4, 1, 5, 1, 6, 6, 7}, $CellContext`start$$ = {
   Association["Node" -> 0]}, $CellContext`parentStates$$ = {0, 1, 1, 2, 4, 3,
   5, 4, 5, 6}}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`i$$], 1, 6, 1}}, Typeset`size$$ = {
     400., {156.5, 162.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = True, $CellContext`i$4578$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
       "ControllerVariables" :> {
         Hold[$CellContext`i$$, $CellContext`i$4578$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Column[{
          Row[{"Input string: ", 
            
            Grid[{{0, 0, 1, 1, 1}}, Frame -> All, 
             Background -> {$CellContext`i$$ - 1 -> Green}]}], 
          Row[{"Start states: ", 
            Sort[
             Part[$CellContext`start$$, All, "Node"]]}], 
          Row[{"Parent states: ", 
            Sort[
             Extract[$CellContext`parentStates$$, 
              Part[$CellContext`ruleIndexes$$, $CellContext`i$$]]]}], 
          Row[{"Current states: ", 
            Sort[
             Extract[$CellContext`currentStates$$, 
              Part[$CellContext`ruleIndexes$$, $CellContext`i$$]]]}], 
          Row[{"Accept states: ", 
            Association["Name" -> "q", "Type" -> "NFA", "Transitions" -> {
               Association["Parent" -> 0, "Node" -> 1, "InputSymbol" -> {0}], 
               Association[
               "Parent" -> 1, "Node" -> 2, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 1, "Node" -> 3, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association["Parent" -> 2, "Node" -> 4, "InputSymbol" -> {1}], 
               Association[
               "Parent" -> 4, "Node" -> 1, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association["Parent" -> 3, "Node" -> 5, "InputSymbol" -> {0}], 
               Association[
               "Parent" -> 5, "Node" -> 1, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 4, "Node" -> 6, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 5, "Node" -> 6, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {1}]},
              "StartState" -> 0, "AcceptStates" -> {7}, 
             "StateExpressions" -> {}]["AcceptStates"]}], 
          Row[{"Result: ", 
            If[
             Last[$CellContext`trace$$], "Accepted", "Not accepted"]}], 
          Graph[
           MapAt[Style[#, Red]& , $CellContext`graphData$$, 
            Part[$CellContext`ruleIndexes$$, $CellContext`i$$]], ImageSize -> 
           400, VertexLabels -> "Name", VertexStyle -> 
           Join[{$CellContext`startTag$$}, $CellContext`acceptTags$$], 
           VertexSize -> 0.1]}], 
       "Specifications" :> {{$CellContext`i$$, 1, 6, 1}}, "Options" :> {}, 
       "DefaultOptions" :> {}],
      ImageSizeCache->{451., {204., 210.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.7611755156922283`*^9},
 CellLabel->
  "Out[135]=",ExpressionUUID->"feeb6efb-f1ca-499c-ad7f-2d2df1c01355"]
}, Open  ]],

Cell["Union operation", "Text",
 CellChangeTimes->{{3.761175554905809*^9, 
  3.761175558803585*^9}},ExpressionUUID->"9724e74d-d86c-460c-9b23-\
0c87be0000ac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FAPlot", "@", 
  RowBox[{"NFAUnion", "[", 
   RowBox[{"nfa", ",", "nfa"}], "]"}]}]], "Input",
 CellLabel->
  "In[136]:=",ExpressionUUID->"f57d8f09-dc46-4837-ab5c-17bb3b9cf3dc"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
          0}, {{{1, 2}, {2, 3}, {2, 4}, {3, 5}, {5, 2}, {4, 6}, {6, 2}, {5, 
           7}, {6, 7}, {7, 8}, {9, 10}, {10, 11}, {10, 12}, {11, 13}, {13, 
           10}, {12, 14}, {14, 10}, {13, 15}, {14, 15}, {15, 16}, {17, 1}, {
           17, 9}}, Null}, {
          ImageSize -> 400, VertexLabels -> {"Name"}, VertexSize -> {0.1}, 
           VertexStyle -> {
            0 -> RGBColor[1, 0, 0], 8 -> RGBColor[0, 1, 0], 16 -> 
             RGBColor[0, 1, 0]}}]]}, 
      TagBox[
       GraphicsGroupBox[{{
          Arrowheads[Medium], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], 
          ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGAQA2ImKGZ5Ucb5sV3G4WDE3nLp1U/ti0Rv8R5xUHTI3uPP
PGclJn8nd+zLA4JKDgwvopIurnbCkL/R7hr7Gyj/hFuqSmL5Vwz1T26f+fxD
XdnhRm4u74nTVzHUb7FZeeQLUH77v1PqDGYfMNSj24cuP8Oar7buvoqD7bwN
84yXP8UwD10/ujy6fnS+heb/+tgtag6LdWadll/y1F57kpnMxIcCDr/eq96r
Bpp3xudHn+YFVgeZML2Ancsx+YIPJziX9jI5MEABuvyLzhOcrX1MDrz5vlYG
K75iqHfK7XminfbH/oDe3XO9J65iqNcxfHn9avofe9Mz62TlgP5BV49uH4Z5
bz+mVPm9tZ/r7LRy2oqnGOah60eXR9ePzof5Y2LQjUdPgfo50n/cNt0i5hDz
5OwKzVVP7dHTI7o8engDAHN3Sug=
           "], 0.03203263832270105]}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], {
           
           DiskBox[{7.132755420572725, 0.6771371210732228}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, {7.164788058895426, 0.7091697593959239}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{8.626495774146608, 0.676954275577271}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, {8.658528412469309, 0.708986913899972}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{9.034674923523072, 0.0005697986968791202}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, {9.066707561845773, 0.03260243701958017}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{9.035120882737758, 1.3532948274230359`}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, {9.067153521060458, 1.3853274657457368`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{9.57807123065681, 0.34056283293986445`}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, {9.610103868979511, 0.3725954712625655}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{9.578039308222607, 1.0131837419902874`}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, {9.610071946545307, 1.0452163803129884`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{10.43651190565815, 0.6766603564655679}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["7", TraditionalForm], 
            Offset[{2, 2}, {10.468544543980851`, 0.708692994788269}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            
            DiskBox[{11.352275848291, 0.6762846924406357}, 
             0.03203263832270105], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["8", TraditionalForm], 
            Offset[{2, 2}, {11.384308486613701`, 0.7083173307633368}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{4.2202801140124775`, 0.6769389475662131}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["9", TraditionalForm], 
            Offset[{2, 2}, {4.252312752335179, 0.7089715858889142}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{2.726641766502871, 0.6767241064105209}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["10", TraditionalForm], 
            Offset[{2, 2}, {2.758674404825572, 0.708756744733222}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           DiskBox[{2.3190713194454777`, 0.}, 0.03203263832270105], 
           InsetBox[
            FormBox["11", TraditionalForm], 
            Offset[{2, 2}, {2.3511039577681787`, 0.03203263832270105}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{2.3195896877598337`, 1.3535616185608348`}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["12", TraditionalForm], 
            Offset[{2, 2}, {2.3516223260825346`, 1.3855942568835358`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{1.7749442031552722`, 0.34036584092676136`}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["13", TraditionalForm], 
            Offset[{2, 2}, {1.8069768414779732`, 0.3723984792494624}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           DiskBox[{1.7753504213352, 1.013212314556552}, 0.03203263832270105], 
           InsetBox[
            FormBox["14", TraditionalForm], 
            Offset[{2, 2}, {1.807383059657901, 1.045244952879253}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{0.9158298465330832, 0.6768296533428956}, 
            0.03203263832270105], 
           InsetBox[
            FormBox["15", TraditionalForm], 
            Offset[{2, 2}, {0.9478624848557843, 0.7088622916655967}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            DiskBox[{0., 0.6767453604284858}, 0.03203263832270105], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["16", TraditionalForm], 
            Offset[{2, 2}, {0.03203263832270105, 0.7087779987511869}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            
            DiskBox[{5.675986706768306, 0.6770218178709331}, 
             0.03203263832270105], 
            RGBColor[1, 0, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["0", TraditionalForm], 
            Offset[{2, 2}, {5.7080193450910075`, 0.7090544561936342}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False]], {
    FormatType -> TraditionalForm, FrameTicks -> None, ImageSize -> 400, 
     DefaultBaseStyle -> {
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
       Hue[0.8, 1., 0.6]}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"State\"", "\"Start state\"", "\"Accept state\"", 
       "\"Start/Accept state\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.87, 0.94, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[
                    0.5800000000000001, 0.6266666666666667, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                   None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.87`", ",", "0.94`", ",", "1"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.87, 0.94, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.87, 0.94, 1], Editable -> False, Selectable -> 
                False], ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0, 1, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.5`", ",", "0", ",", "0.5`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                False]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             GraphicsBox[
              DiskBox[{0, 0}]]}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.7611755608141193`*^9},
 CellLabel->
  "Out[136]=",ExpressionUUID->"e6d834c8-7561-413d-97d2-3c07895c7e03"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Applications", "Subsubsection",
 CellChangeTimes->{{3.748719934365705*^9, 
  3.748719936316678*^9}},ExpressionUUID->"2ea5139c-0ffb-4aaa-b605-\
93411f78c56e"],

Cell[TextData[{
 "This automata recongnizes ",
 StyleBox["a",
  FontSlant->"Italic"]
}], "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.748719945621127*^9, 
  3.748719950101904*^9}},ExpressionUUID->"0d98da2e-4a21-4c20-aa2a-\
52adda772720"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"aNFA", " ", "=", " ", 
  RowBox[{"NFA", "[", 
   RowBox[{"\"\<a\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"Transition", "[", 
      RowBox[{"0", ",", "1", ",", 
       RowBox[{"{", "\"\<a\>\"", "}"}]}], "]"}], "}"}], ",", "0", ",", 
    RowBox[{"{", "1", "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"537860de-7e16-4aad-a42e-8b03b2804179"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"a\"\>"}], ",", 
   RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"NFA\"\>"}], ",", 
   RowBox[{"\<\"Transitions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "0"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", "\<\"a\"\>", "}"}]}]}], "\[RightAssociation]"}], "}"}]}],
    ",", 
   RowBox[{"\<\"StartState\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"AcceptStates\"\>", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"\<\"StateExpressions\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.750261314245799*^9, 3.750261689240656*^9, 
  3.750262877237214*^9, 3.750266477034391*^9, 3.750364378303728*^9, 
  3.7503644585830507`*^9, 3.750455570276332*^9, 3.7504575272666683`*^9, 
  3.750460734009213*^9, 3.7505033070649233`*^9, 3.750504664553674*^9, 
  3.7505065738022366`*^9, 3.7505310268964157`*^9, 3.7505313412432423`*^9, 
  3.750532001880921*^9, 3.750612937883301*^9, 3.750688990393896*^9, 
  3.7611767251014338`*^9, 3.761179819027471*^9, 3.761179870940984*^9, 
  3.761179957861257*^9, 3.7611801303004704`*^9, 3.7611802038771353`*^9, 
  3.762461066194244*^9, 3.762462064904242*^9, 3.762463635133243*^9, 
  3.7624637167717447`*^9, 3.762464537551291*^9, 3.7625262273167*^9, 
  3.762541697439142*^9, 3.7625542224887753`*^9, 3.762557056720949*^9, 
  3.762631900786134*^9, 3.762636868337188*^9, 3.7628035397966413`*^9, 
  3.7628106420282717`*^9, 3.762879480926364*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"019ae08d-02ea-4d2b-ae6c-ea3f9fff0073"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FAPlot", "[", 
  RowBox[{"aNFA", ",", 
   RowBox[{"\"\<Labeled\>\"", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.74872011091124*^9, 3.748720112509213*^9}, {
  3.761176730458411*^9, 3.761176735220364*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"8db49d2f-7bbb-4575-bd20-7731726abbce"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{0, 1}, {{{1, 2}}, Null}, {
          EdgeLabels -> {DirectedEdge[0, 1] -> {"a"}}, ImageSize -> 400, 
           VertexLabels -> {"Name"}, VertexSize -> {0.1}, 
           VertexStyle -> {
            1 -> RGBColor[0, 1, 0], 0 -> RGBColor[1, 0, 0]}}]]}, 
      TagBox[
       GraphicsGroupBox[{{
          Arrowheads[Medium], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], {
           ArrowBox[{{1., 0.}, {0., 1.2246467991473532`*^-16}}, 0.05], 
           InsetBox[
            FormBox[
             RowBox[{"{", "\"a\"", "}"}], TraditionalForm], {0.5, 
            6.123233995736766*^-17}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], {
           StyleBox[
            DiskBox[{1., 0.}, 0.05], 
            RGBColor[1, 0, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["0", TraditionalForm], 
            Offset[{2, 2}, {1.05, 0.05}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            DiskBox[{0., 1.2246467991473532`*^-16}, 0.05], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, {0.05, 0.05000000000000013}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False]], {
    FormatType -> TraditionalForm, FrameTicks -> None, ImageSize -> 400, 
     DefaultBaseStyle -> {
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
       Hue[0.8, 1., 0.6]}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"State\"", "\"Start state\"", "\"Accept state\"", 
       "\"Start/Accept state\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.87, 0.94, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[
                    0.5800000000000001, 0.6266666666666667, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                   None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.87`", ",", "0.94`", ",", "1"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.87, 0.94, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.87, 0.94, 1], Editable -> False, Selectable -> 
                False], ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0, 1, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.5`", ",", "0", ",", "0.5`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                False]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             GraphicsBox[
              DiskBox[{0, 0}]]}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.761176727797305*^9, 3.7611767354758387`*^9}},
 CellLabel->
  "Out[139]=",ExpressionUUID->"b84129ca-2c6a-4920-8c10-80d7f58f8afb"]
}, Open  ]],

Cell[TextData[{
 "and this one recognizes ",
 StyleBox["b",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.7487199626774607`*^9, 
  3.748719968664629*^9}},ExpressionUUID->"3cbea7ad-fa0b-47b1-8ed4-\
c9fddb3d858a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bNFA", " ", "=", " ", 
  RowBox[{"NFA", "[", 
   RowBox[{"\"\<b\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"Transition", "[", 
      RowBox[{"0", ",", "1", ",", 
       RowBox[{"{", "\"\<b\>\"", "}"}]}], "]"}], "}"}], ",", "0", ",", 
    RowBox[{"{", "1", "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"85b88a58-1a8c-4b45-9f6d-af117775e6b5"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"b\"\>"}], ",", 
   RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"NFA\"\>"}], ",", 
   RowBox[{"\<\"Transitions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"Parent\"\>", "\[Rule]", "0"}], ",", 
       RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
       RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
        RowBox[{"{", "\<\"b\"\>", "}"}]}]}], "\[RightAssociation]"}], "}"}]}],
    ",", 
   RowBox[{"\<\"StartState\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"AcceptStates\"\>", "\[Rule]", 
    RowBox[{"{", "1", "}"}]}], ",", 
   RowBox[{"\<\"StateExpressions\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.750261314286324*^9, 3.750261689261598*^9, 
  3.750262877290551*^9, 3.750266477062076*^9, 3.750364378353097*^9, 
  3.7503644586152983`*^9, 3.750455570318242*^9, 3.750457527322363*^9, 
  3.750460734070714*^9, 3.750503307093897*^9, 3.7505046645692987`*^9, 
  3.750506573833438*^9, 3.750531026940257*^9, 3.750531341303191*^9, 
  3.750532001924027*^9, 3.750612937927746*^9, 3.750688990433894*^9, 
  3.7611767391723843`*^9, 3.761179819052267*^9, 3.761179870976302*^9, 
  3.761179957887382*^9, 3.761180130325985*^9, 3.7611802039572268`*^9, 
  3.762461066230805*^9, 3.7624620649511127`*^9, 3.762463635250791*^9, 
  3.762463716815138*^9, 3.762464537617406*^9, 3.7625262273375177`*^9, 
  3.762541697519672*^9, 3.762554222541605*^9, 3.76255705680462*^9, 
  3.762631900831081*^9, 3.762636868379883*^9, 3.762803539863461*^9, 
  3.76281064205802*^9, 3.762879480946744*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"d97b24e3-4dd5-4dde-8c1e-e33242855c84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FAPlot", "[", 
  RowBox[{"bNFA", ",", 
   RowBox[{"\"\<Labeled\>\"", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.7487201179199467`*^9, {3.761176744820122*^9, 3.761176745098545*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"8652e727-c0cb-4512-9390-214b8079b39b"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{0, 1}, {{{1, 2}}, Null}, {
          EdgeLabels -> {DirectedEdge[0, 1] -> {"b"}}, ImageSize -> 400, 
           VertexLabels -> {"Name"}, VertexSize -> {0.1}, 
           VertexStyle -> {
            1 -> RGBColor[0, 1, 0], 0 -> RGBColor[1, 0, 0]}}]]}, 
      TagBox[
       GraphicsGroupBox[{{
          Arrowheads[Medium], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], {
           ArrowBox[{{1., 0.}, {0., 1.2246467991473532`*^-16}}, 0.05], 
           InsetBox[
            FormBox[
             RowBox[{"{", "\"b\"", "}"}], TraditionalForm], {0.5, 
            6.123233995736766*^-17}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], {
           StyleBox[
            DiskBox[{1., 0.}, 0.05], 
            RGBColor[1, 0, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["0", TraditionalForm], 
            Offset[{2, 2}, {1.05, 0.05}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            DiskBox[{0., 1.2246467991473532`*^-16}, 0.05], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, {0.05, 0.05000000000000013}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False]], {
    FormatType -> TraditionalForm, FrameTicks -> None, ImageSize -> 400, 
     DefaultBaseStyle -> {
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
       Hue[0.8, 1., 0.6]}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"State\"", "\"Start state\"", "\"Accept state\"", 
       "\"Start/Accept state\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.87, 0.94, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[
                    0.5800000000000001, 0.6266666666666667, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                   None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.87`", ",", "0.94`", ",", "1"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.87, 0.94, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.87, 0.94, 1], Editable -> False, Selectable -> 
                False], ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0, 1, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.5`", ",", "0", ",", "0.5`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                False]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             GraphicsBox[
              DiskBox[{0, 0}]]}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.761176745709023*^9},
 CellLabel->
  "Out[141]=",ExpressionUUID->"da73365e-c25f-49a3-837e-2f50173c837d"]
}, Open  ]],

Cell["The union of both, that is a \[Union] b is represented by the NFA", \
"Text",
 CellChangeTimes->{{3.748719981831565*^9, 
  3.748720006241696*^9}},ExpressionUUID->"1ddcaa92-a50e-4dd9-af26-\
59a430e100b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FAPlot", "[", 
  RowBox[{
   RowBox[{"NFAUnion", "[", 
    RowBox[{"aNFA", ",", "bNFA"}], "]"}], ",", 
   RowBox[{"\"\<Labeled\>\"", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7487200158485813`*^9, 3.748720017266663*^9}, {
  3.76117675234606*^9, 3.761176756800015*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"28006855-cb74-4600-bfcc-09f87c9284b5"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4, 0}, {{{1, 2}, {3, 4}, {5, 1}, {5, 3}}, Null}, {
          EdgeLabels -> {
            DirectedEdge[3, 4] -> {"b"}, 
             DirectedEdge[0, 1] -> $CellContext`\[Epsilon], 
             DirectedEdge[0, 3] -> $CellContext`\[Epsilon], 
             DirectedEdge[1, 2] -> {"a"}}, ImageSize -> 400, 
           VertexLabels -> {"Name"}, VertexSize -> {0.1}, 
           VertexStyle -> {
            0 -> RGBColor[1, 0, 0], 2 -> RGBColor[0, 1, 0], 4 -> 
             RGBColor[0, 1, 0]}}]]}, 
      TagBox[
       GraphicsGroupBox[{{
          Arrowheads[Medium], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], {
           
           ArrowBox[{{0., 0.9428090415820635}, {0., 0.}}, 
            0.047140452079103175`], 
           InsetBox[
            FormBox[
             RowBox[{"{", "\"a\"", "}"}], TraditionalForm], {0., 
            0.47140452079103173`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0.9428090415820635, 0.9428090415820635}, {
            0.9428090415820635, 0.}}, 0.047140452079103175`], 
           InsetBox[
            FormBox[
             RowBox[{"{", "\"b\"", "}"}], TraditionalForm], {
            0.9428090415820635, 0.47140452079103173`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0.47140452079103173`, 1.885618083164127}, {0., 
            0.9428090415820635}}, 0.047140452079103175`], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {0.23570226039551587`, 
            1.4142135623730951`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0.47140452079103173`, 1.885618083164127}, {
            0.9428090415820635, 0.9428090415820635}}, 0.047140452079103175`], 
           
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {0.7071067811865476, 
            1.4142135623730951`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], {
           DiskBox[{0., 0.9428090415820635}, 0.047140452079103175`], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, {0.047140452079103175`, 0.9899494936611667}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            DiskBox[{0., 0.}, 0.047140452079103175`], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, {0.047140452079103175`, 0.047140452079103175`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{0.9428090415820635, 0.9428090415820635}, 
            0.047140452079103175`], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, {0.9899494936611667, 0.9899494936611667}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            DiskBox[{0.9428090415820635, 0.}, 0.047140452079103175`], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, {0.9899494936611667, 0.047140452079103175`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            
            DiskBox[{0.47140452079103173`, 1.885618083164127}, 
             0.047140452079103175`], 
            RGBColor[1, 0, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["0", TraditionalForm], 
            Offset[{2, 2}, {0.5185449728701349, 1.9327585352432302`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False]], {
    FormatType -> TraditionalForm, FrameTicks -> None, ImageSize -> 400, 
     DefaultBaseStyle -> {
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
       Hue[0.8, 1., 0.6]}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"State\"", "\"Start state\"", "\"Accept state\"", 
       "\"Start/Accept state\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.87, 0.94, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[
                    0.5800000000000001, 0.6266666666666667, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                   None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.87`", ",", "0.94`", ",", "1"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.87, 0.94, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.87, 0.94, 1], Editable -> False, Selectable -> 
                False], ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0, 1, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.5`", ",", "0", ",", "0.5`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                False]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             GraphicsBox[
              DiskBox[{0, 0}]]}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.761176749406151*^9, 3.761176757086289*^9}},
 CellLabel->
  "Out[143]=",ExpressionUUID->"08d81740-4ca5-4d67-a2b8-2369e30e93b9"]
}, Open  ]],

Cell[TextData[{
 "Using various operations we can recognize (a \[Union] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"b", ")"}], "*"], "aba"}], TraditionalForm]],ExpressionUUID->
  "0e9b9a8d-49be-45ba-8cde-a094466c6deb"]
}], "Text",
 CellChangeTimes->{{3.748720036075478*^9, 
  3.748720062229355*^9}},ExpressionUUID->"eb2bd016-aeb5-4edc-a327-\
5ac22163c0b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FAPlot", "[", 
  RowBox[{
   RowBox[{"NFAConcatention", "[", 
    RowBox[{
     RowBox[{"NFAStar", "[", 
      RowBox[{"NFAUnion", "[", 
       RowBox[{"aNFA", ",", "bNFA"}], "]"}], "]"}], ",", "aNFA", ",", "bNFA", 
     ",", "aNFA"}], "]"}], ",", 
   RowBox[{"\"\<Labeled\>\"", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7611767658573523`*^9, 3.761176774398149*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"757ccb5d-dfec-4436-af5c-f7b648050fec"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{2, 3, 4, 5, 1, 0, 6, 7, 8, 9, 10, 
          11}, {{{1, 2}, {3, 4}, {5, 1}, {5, 3}, {6, 5}, {2, 5}, {4, 5}, {7, 
           8}, {2, 7}, {4, 7}, {6, 7}, {9, 10}, {8, 9}, {11, 12}, {10, 11}}, 
           Null}, {EdgeLabels -> {
            DirectedEdge[3, 6] -> $CellContext`\[Epsilon], 
             DirectedEdge[1, 4] -> $CellContext`\[Epsilon], 
             DirectedEdge[7, 8] -> $CellContext`\[Epsilon], 
             DirectedEdge[4, 5] -> {"b"}, 
             DirectedEdge[0, 6] -> $CellContext`\[Epsilon], 
             DirectedEdge[5, 6] -> $CellContext`\[Epsilon], 
             DirectedEdge[3, 1] -> $CellContext`\[Epsilon], 
             DirectedEdge[0, 1] -> $CellContext`\[Epsilon], 
             DirectedEdge[2, 3] -> {"a"}, DirectedEdge[10, 11] -> {"a"}, 
             DirectedEdge[8, 9] -> {"b"}, 
             DirectedEdge[9, 10] -> $CellContext`\[Epsilon], 
             DirectedEdge[5, 1] -> $CellContext`\[Epsilon], 
             DirectedEdge[1, 2] -> $CellContext`\[Epsilon], 
             DirectedEdge[6, 7] -> {"a"}}, ImageSize -> 400, 
           VertexLabels -> {"Name"}, VertexSize -> {0.1}, 
           VertexStyle -> {
            0 -> RGBColor[1, 0, 0], 11 -> RGBColor[0, 1, 0]}}]]}, 
      TagBox[
       GraphicsGroupBox[{{
          Arrowheads[Medium], 
          Directive[
           Opacity[0.7], 
           Hue[0.6, 0.7, 0.5]], {
           
           ArrowBox[{{0.012667461411372205`, 1.5486328844462722`}, {
            0.8326138751477679, 1.3608312619569338`}}, 0.03300196858156827], 
           InsetBox[
            FormBox[
             RowBox[{"{", "\"a\"", "}"}], TraditionalForm], {
            0.42264066827957003`, 1.454732073201603}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0.8326138751477679, 1.3608312619569338`}, {
            0.33352333451987315`, 0.7714556706548381}}, 0.03300196858156827], 
           
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {0.5830686048338205, 
            1.066143466305886}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[{{0.8326138751477679, 1.3608312619569338`}, {
            1.821800738580189, 0.7659965425267845}}, 0.03300196858156827], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {1.3272073068639785`, 
            1.0634139022418592`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0., 0.}, {0.8239897431770324, 0.17677077496911175`}}, 
            0.03300196858156827], 
           InsetBox[
            FormBox[
             RowBox[{"{", "\"b\"", "}"}], TraditionalForm], {
            0.4119948715885162, 0.08838538748455588}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0.8239897431770324, 0.17677077496911175`}, {
            0.33352333451987315`, 0.7714556706548381}}, 0.03300196858156827], 
           
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {0.5787565388484528, 
            0.47411322281197493`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0.8239897431770324, 0.17677077496911175`}, {
            1.821800738580189, 0.7659965425267845}}, 0.03300196858156827], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {1.3228952408786108`, 
            0.47138365874794813`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0.33352333451987315`, 0.7714556706548381}, {
            0.012667461411372205`, 1.5486328844462722`}}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {0.17309539796562268`, 
            1.160044277550555}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{0.33352333451987315`, 0.7714556706548381}, {0., 0.}}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {0.16676166725993657`, 
            0.38572783532741906`}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           ArrowBox[{{1.1617792825503936`, 0.7611334484667733}, {
            0.33352333451987315`, 0.7714556706548381}}, 0.03300196858156827], 
           
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {0.7476513085351334, 
            0.7662945595608057}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{1.1617792825503936`, 0.7611334484667733}, {
            1.821800738580189, 0.7659965425267845}}, 0.03300196858156827], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {1.4917900105652913`, 
            0.7635649954967789}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{1.821800738580189, 0.7659965425267845}, {
            3.245909517101779, 0.7660160811374348}}, 0.03300196858156827], 
           InsetBox[
            FormBox[
             RowBox[{"{", "\"a\"", "}"}], TraditionalForm], {
            2.533855127840984, 0.7660063118321097}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{3.245909517101779, 0.7660160811374348}, {
            4.558349439657792, 0.7666670790311572}}, 0.03300196858156827], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {3.902129478379785, 
            0.766341580084296}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{4.558349439657792, 0.7666670790311572}, {
            5.7716582252920805`, 0.768084123701242}}, 0.03300196858156827], 
           InsetBox[
            FormBox[
             RowBox[{"{", "\"b\"", "}"}], TraditionalForm], {
            5.165003832474936, 0.7673756013661996}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{5.7716582252920805`, 0.768084123701242}, {
            6.8578754355910565`, 0.7695424486982898}}, 0.03300196858156827], 
           InsetBox[
            FormBox["\[Epsilon]", TraditionalForm], {6.3147668304415685`, 
            0.7688132861997659}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
           
           ArrowBox[{{6.8578754355910565`, 0.7695424486982898}, {
            7.740336731269508, 0.7710760216989517}}, 0.03300196858156827], 
           InsetBox[
            FormBox[
             RowBox[{"{", "\"a\"", "}"}], TraditionalForm], {
            7.299106083430282, 0.7703092351986207}, 
            ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
          Directive[
           Hue[0.6, 0.2, 0.8], 
           EdgeForm[
            Directive[
             GrayLevel[0], 
             Opacity[0.7]]]], {
           
           DiskBox[{0.012667461411372205`, 1.5486328844462722`}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{2, 2}, {0.04566942999294048, 1.5816348530278406`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{0.8326138751477679, 1.3608312619569338`}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{2, 2}, {0.8656158437293361, 1.3938332305385022`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           DiskBox[{0., 0.}, 0.03300196858156827], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{2, 2}, {0.03300196858156827, 0.03300196858156827}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{0.8239897431770324, 0.17677077496911175`}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{2, 2}, {0.8569917117586007, 0.20977274355068004`}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{0.33352333451987315`, 0.7714556706548381}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{2, 2}, {0.36652530310144144`, 0.8044576392364063}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            
            DiskBox[{1.1617792825503936`, 0.7611334484667733}, 
             0.03300196858156827], 
            RGBColor[1, 0, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["0", TraditionalForm], 
            Offset[{2, 2}, {1.194781251131962, 0.7941354170483416}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{1.821800738580189, 0.7659965425267845}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{2, 2}, {1.8548027071617574`, 0.7989985111083527}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{3.245909517101779, 0.7660160811374348}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["7", TraditionalForm], 
            Offset[{2, 2}, {3.2789114856833472`, 0.799018049719003}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{4.558349439657792, 0.7666670790311572}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["8", TraditionalForm], 
            Offset[{2, 2}, {4.59135140823936, 0.7996690476127254}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{5.7716582252920805`, 0.768084123701242}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["9", TraditionalForm], 
            Offset[{2, 2}, {5.804660193873649, 0.8010860922828102}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           
           DiskBox[{6.8578754355910565`, 0.7695424486982898}, 
            0.03300196858156827], 
           InsetBox[
            FormBox["10", TraditionalForm], 
            Offset[{2, 2}, {6.890877404172625, 0.802544417279858}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
           StyleBox[
            DiskBox[{7.740336731269508, 0.7710760216989517}, 
             0.03300196858156827], 
            RGBColor[0, 1, 0], StripOnInput -> False], 
           InsetBox[
            FormBox["11", TraditionalForm], 
            Offset[{2, 2}, {7.7733386998510765`, 0.80407799028052}], 
            ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False]], {
    FormatType -> TraditionalForm, FrameTicks -> None, ImageSize -> 400, 
     DefaultBaseStyle -> {
      "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
       Hue[0.8, 1., 0.6]}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"State\"", "\"Start state\"", "\"Accept state\"", 
       "\"Start/Accept state\""}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.87, 0.94, 1]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]], {
                    InsetBox[
                    GraphicsBox[
                    DiskBox[{0, 0}], {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, ImageSize -> {20, 10},
                     PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.87, 0.94, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[
                    0.5800000000000001, 0.6266666666666667, 
                    0.6666666666666666], FrameTicks -> None, PlotRangePadding -> 
                   None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.87`", ",", "0.94`", ",", "1"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.87, 0.94, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.87, 0.94, 1], Editable -> False, Selectable -> 
                False], ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[1, 0, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "1", ",", "0"}], "]"}], NumberMarks -> 
                   False]], Appearance -> None, BaseStyle -> {}, 
                 BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                 ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0, 1, 0], Editable -> False, Selectable -> False], 
               ",", 
               InterpretationBox[
                ButtonBox[
                 TooltipBox[
                  GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                   "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                   FrameStyle -> 
                   RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                   FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  StyleBox[
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.5`", ",", "0", ",", "0.5`"}], "]"}], 
                   NumberMarks -> False]], Appearance -> None, 
                 BaseStyle -> {}, BaselinePosition -> Baseline, 
                 DefaultBaseStyle -> {}, ButtonFunction :> 
                 With[{Typeset`box$ = EvaluationBox[]}, 
                   If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                False]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             GraphicsBox[
              DiskBox[{0, 0}]]}]}], "]"}]& ), Editable -> True], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.7611767748265333`*^9},
 CellLabel->
  "Out[144]=",ExpressionUUID->"a7a1204c-14ec-41fd-baf4-8873731275c8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"NFAConcatention", "[", 
   RowBox[{
    RowBox[{"NFAStar", "[", 
     RowBox[{"NFAUnion", "[", 
      RowBox[{"aNFA", ",", "bNFA"}], "]"}], "]"}], ",", "aNFA", ",", "bNFA", 
    ",", "aNFA"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.748723878641993*^9, 3.7487238923565063`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"b7a9c20c-ae08-42e6-b39e-929ea135d310"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Name\"\>", 
    "\[Rule]", "\<\"(a\[Union]b\\!\\(\\*SuperscriptBox[\\()\\), \
\\(*\\)]\\)aba\"\>"}], ",", 
   RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"NFA\"\>"}], ",", 
   RowBox[{"\<\"Transitions\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "3"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "\<\"a\"\>", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "4"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "5"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "\<\"b\"\>", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "2"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "4"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "0"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "3"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "5"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "1"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "6"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "7"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "\<\"a\"\>", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "3"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "6"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "5"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "6"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "0"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "6"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "8"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "9"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "\<\"b\"\>", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "7"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "8"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "10"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "11"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", 
         RowBox[{"{", "\<\"a\"\>", "}"}]}]}], "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Parent\"\>", "\[Rule]", "9"}], ",", 
        RowBox[{"\<\"Node\"\>", "\[Rule]", "10"}], ",", 
        RowBox[{"\<\"InputSymbol\"\>", "\[Rule]", "\[Epsilon]"}]}], 
       "\[RightAssociation]"}]}], "}"}]}], ",", 
   RowBox[{"\<\"StartState\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"AcceptStates\"\>", "\[Rule]", 
    RowBox[{"{", "11", "}"}]}], ",", 
   RowBox[{"\<\"StateExpressions\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.750261314335005*^9, 3.750261689300198*^9, 
  3.750262877335725*^9, 3.750266477108385*^9, 3.750364378378924*^9, 
  3.750364458812911*^9, 3.750455570369349*^9, 3.75045752736539*^9, 
  3.7504607341151333`*^9, 3.750503307126442*^9, 3.7505046646005487`*^9, 
  3.7505065738647366`*^9, 3.750531026986706*^9, 3.750531341346737*^9, 
  3.750532001973366*^9, 3.750612937965735*^9, 3.7506889904799767`*^9, 
  3.761176780509392*^9, 3.761179819076436*^9, 3.7611798710146303`*^9, 
  3.7611799579156857`*^9, 3.7611801303530083`*^9, 3.7611802039969387`*^9, 
  3.762461066271397*^9, 3.7624620649898033`*^9, 3.762463635287167*^9, 
  3.762463716861803*^9, 3.762464537680361*^9, 3.762526227364586*^9, 
  3.7625416975834723`*^9, 3.762554222598695*^9, 3.762557056858995*^9, 
  3.762631900876625*^9, 3.762636868425199*^9, 3.7628035399104424`*^9, 
  3.762810642096241*^9, 3.76287948096982*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"bff7347e-6d39-43fb-a663-f03af018a1a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFAPlotExecution", "[", 
  RowBox[{"example", ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<b\>\"", ",", "\"\<a\>\"", ",", 
     "\"\<b\>\"", ",", "\"\<a\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.748723912813719*^9, {3.748723971941906*^9, 3.748724024960644*^9}, {
   3.7487241748966093`*^9, 3.748724193169682*^9}},
 CellLabel->
  "In[146]:=",ExpressionUUID->"1760108b-28b8-481c-b633-2b389d6b4364"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`trace$$ = {{{
     Association["Node" -> 0], 
     Association[
     "Parent" -> 0, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 0, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
     Association[
     "Parent" -> 7, "Node" -> 8, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
     Association[
     "Parent" -> 3, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 3, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 8, "Node" -> 9, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 9, "Node" -> 10, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
     Association[
     "Parent" -> 7, "Node" -> 8, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
     Association[
     "Parent" -> 3, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 3, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 8, "Node" -> 9, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 9, "Node" -> 10, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 10, "Node" -> 11, "InputSymbol" -> {"a"}], 
     Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
     Association[
     "Parent" -> 7, "Node" -> 8, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
     Association[
     "Parent" -> 3, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 3, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}}, 
   True}, $CellContext`executionSteps$$ = {{
    Association["Node" -> 0], 
    Association[
    "Parent" -> 0, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 0, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
    Association[
    "Parent" -> 7, "Node" -> 8, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
    Association[
    "Parent" -> 3, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 3, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 8, "Node" -> 9, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 9, "Node" -> 10, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
    Association[
    "Parent" -> 7, "Node" -> 8, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
    Association[
    "Parent" -> 3, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 3, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 8, "Node" -> 9, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 9, "Node" -> 10, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 10, "Node" -> 11, "InputSymbol" -> {"a"}], 
    Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
    Association[
    "Parent" -> 7, "Node" -> 8, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
    Association[
    "Parent" -> 3, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 3, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, 
     "InputSymbol" -> $CellContext`\[Epsilon]]}}, $CellContext`ruleIndexes$$ \
= {{{3}, {4}, {5}, {11}}, {{1}, {3}, {4}, {6}, {8}, {9}, {13}}, {{2}, {3}, {
   4}, {7}, {10}, {12}, {15}}, {{2}, {3}, {4}, {7}, {10}}, {{1}, {3}, {4}, {
   6}, {8}, {9}, {13}}, {{2}, {3}, {4}, {7}, {10}, {12}, {15}}, {{1}, {3}, {
   4}, {6}, {8}, {9}, {13}, {14}}}, $CellContext`graphData$$ = {
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "2"] -> 
    Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "3"], {
    "a"}], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "4"] -> 
    Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "5"], {
    "b"}], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "1"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "2"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "1"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "4"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "0"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "1"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "3"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "1"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "5"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "1"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "6"] -> 
    Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "7"], {
    "a"}], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "3"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "6"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "5"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "6"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "0"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "6"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "8"] -> 
    Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "9"], {
    "b"}], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "7"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "8"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "10"] -> 
    Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "11"], {
    "a"}], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "9"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "10"], $CellContext`\[Epsilon]]}, $CellContext`startTag$$ = 
  Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "0"] -> 
  RGBColor[1, 0, 0], $CellContext`acceptTags$$ = {
  Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "11"] -> 
   RGBColor[0, 1, 0]}, $CellContext`currentStates$$ = {3, 5, 2, 4, 1, 1, 1, 7,
   6, 6, 6, 9, 8, 11, 10}, $CellContext`start$$ = {
   Association["Node" -> 0], 
   Association[
   "Parent" -> 0, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
   Association[
   "Parent" -> 0, "Node" -> 6, 
    "InputSymbol" -> $CellContext`\[Epsilon]]}, $CellContext`parentStates$$ = \
{2, 4, 1, 1, 0, 3, 5, 6, 3, 5, 0, 8, 7, 10, 9}}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`i$$], 1, 7, 1}}, Typeset`size$$ = {
     400., {98.5, 104.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = True, $CellContext`i$5521$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
       "ControllerVariables" :> {
         Hold[$CellContext`i$$, $CellContext`i$5521$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Column[{
          Row[{"Input string: ", 
            
            Grid[{{"a", "b", "b", "a", "b", "a"}}, Frame -> All, 
             Background -> {$CellContext`i$$ - 1 -> Green}]}], 
          Row[{"Start states: ", 
            Sort[
             Part[$CellContext`start$$, All, "Node"]]}], 
          Row[{"Parent states: ", 
            Sort[
             Extract[$CellContext`parentStates$$, 
              Part[$CellContext`ruleIndexes$$, $CellContext`i$$]]]}], 
          Row[{"Current states: ", 
            Sort[
             Extract[$CellContext`currentStates$$, 
              Part[$CellContext`ruleIndexes$$, $CellContext`i$$]]]}], 
          Row[{"Accept states: ", 
            Association[
            "Name" -> "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
             "Type" -> "NFA", "Transitions" -> {
               Association[
               "Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
               Association[
               "Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
               Association[
               "Parent" -> 1, "Node" -> 2, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 1, "Node" -> 4, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 0, "Node" -> 1, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 3, "Node" -> 1, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 5, "Node" -> 1, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
               Association[
               "Parent" -> 3, "Node" -> 6, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 5, "Node" -> 6, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 0, "Node" -> 6, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 8, "Node" -> 9, "InputSymbol" -> {"b"}], 
               Association[
               "Parent" -> 7, "Node" -> 8, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 10, "Node" -> 11, "InputSymbol" -> {"a"}], 
               Association[
               "Parent" -> 9, "Node" -> 10, 
                "InputSymbol" -> $CellContext`\[Epsilon]]}, "StartState" -> 0,
              "AcceptStates" -> {11}, "StateExpressions" -> {}][
            "AcceptStates"]}], 
          Row[{"Result: ", 
            If[
             Last[$CellContext`trace$$], "Accepted", "Not accepted"]}], 
          Graph[
           MapAt[Style[#, Red]& , $CellContext`graphData$$, 
            Part[$CellContext`ruleIndexes$$, $CellContext`i$$]], ImageSize -> 
           400, VertexLabels -> "Name", VertexStyle -> 
           Join[{$CellContext`startTag$$}, $CellContext`acceptTags$$], 
           VertexSize -> 0.1]}], 
       "Specifications" :> {{$CellContext`i$$, 1, 7, 1}}, "Options" :> {}, 
       "DefaultOptions" :> {}],
      ImageSizeCache->{451., {146., 152.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.76117678231735*^9},
 CellLabel->
  "Out[146]=",ExpressionUUID->"6253a06a-4d83-42cb-b2e9-4f33c10eb862"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFAPlotExecution", "[", 
  RowBox[{"example", ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<b\>\"", ",", "\"\<a\>\"", ",", 
     "\"\<b\>\"", ",", "\"\<b\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7487291028737698`*^9, 3.7487291032659817`*^9}},
 CellLabel->
  "In[147]:=",ExpressionUUID->"63c30248-3c22-43bd-bfc5-2d0d5fee7fab"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`trace$$ = {{{
     Association["Node" -> 0], 
     Association[
     "Parent" -> 0, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 0, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
     Association[
     "Parent" -> 7, "Node" -> 8, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
     Association[
     "Parent" -> 3, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 3, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 8, "Node" -> 9, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 9, "Node" -> 10, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
     Association[
     "Parent" -> 7, "Node" -> 8, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
     Association[
     "Parent" -> 3, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 3, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 8, "Node" -> 9, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 9, "Node" -> 10, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
     Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
     Association[
     "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
     Association[
     "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}}, 
   False}, $CellContext`executionSteps$$ = {{
    Association["Node" -> 0], 
    Association[
    "Parent" -> 0, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 0, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
    Association[
    "Parent" -> 7, "Node" -> 8, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
    Association[
    "Parent" -> 3, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 3, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 8, "Node" -> 9, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 9, "Node" -> 10, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
    Association[
    "Parent" -> 7, "Node" -> 8, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association["Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
    Association[
    "Parent" -> 3, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 3, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 8, "Node" -> 9, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 9, "Node" -> 10, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, "InputSymbol" -> $CellContext`\[Epsilon]]}, {
    Association["Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
    Association[
    "Parent" -> 5, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 5, "Node" -> 6, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 2, "InputSymbol" -> $CellContext`\[Epsilon]], 
    Association[
    "Parent" -> 1, "Node" -> 4, 
     "InputSymbol" -> $CellContext`\[Epsilon]]}}, $CellContext`ruleIndexes$$ \
= {{{3}, {4}, {5}, {11}}, {{1}, {3}, {4}, {6}, {8}, {9}, {13}}, {{2}, {3}, {
   4}, {7}, {10}, {12}, {15}}, {{2}, {3}, {4}, {7}, {10}}, {{1}, {3}, {4}, {
   6}, {8}, {9}, {13}}, {{2}, {3}, {4}, {7}, {10}, {12}, {15}}, {{2}, {3}, {
   4}, {7}, {10}}}, $CellContext`graphData$$ = {
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "2"] -> 
    Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "3"], {
    "a"}], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "4"] -> 
    Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "5"], {
    "b"}], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "1"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "2"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "1"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "4"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "0"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "1"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "3"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "1"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "5"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "1"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "6"] -> 
    Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "7"], {
    "a"}], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "3"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "6"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "5"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "6"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "0"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "6"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "8"] -> 
    Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "9"], {
    "b"}], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "7"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "8"], $CellContext`\[Epsilon]], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "10"] -> 
    Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "11"], {
    "a"}], 
   Labeled[
   Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "9"] -> 
    Subscript[
     "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
      "10"], $CellContext`\[Epsilon]]}, $CellContext`startTag$$ = 
  Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "0"] -> 
  RGBColor[1, 0, 0], $CellContext`acceptTags$$ = {
  Subscript["(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", "11"] -> 
   RGBColor[0, 1, 0]}, $CellContext`currentStates$$ = {3, 5, 2, 4, 1, 1, 1, 7,
   6, 6, 6, 9, 8, 11, 10}, $CellContext`start$$ = {
   Association["Node" -> 0], 
   Association[
   "Parent" -> 0, "Node" -> 1, "InputSymbol" -> $CellContext`\[Epsilon]], 
   Association[
   "Parent" -> 0, "Node" -> 6, 
    "InputSymbol" -> $CellContext`\[Epsilon]]}, $CellContext`parentStates$$ = \
{2, 4, 1, 1, 0, 3, 5, 6, 3, 5, 0, 8, 7, 10, 9}}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`i$$], 1, 7, 1}}, Typeset`size$$ = {
     400., {98.5, 104.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = True, $CellContext`i$5592$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
       "ControllerVariables" :> {
         Hold[$CellContext`i$$, $CellContext`i$5592$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Column[{
          Row[{"Input string: ", 
            
            Grid[{{"a", "b", "b", "a", "b", "b"}}, Frame -> All, 
             Background -> {$CellContext`i$$ - 1 -> Green}]}], 
          Row[{"Start states: ", 
            Sort[
             Part[$CellContext`start$$, All, "Node"]]}], 
          Row[{"Parent states: ", 
            Sort[
             Extract[$CellContext`parentStates$$, 
              Part[$CellContext`ruleIndexes$$, $CellContext`i$$]]]}], 
          Row[{"Current states: ", 
            Sort[
             Extract[$CellContext`currentStates$$, 
              Part[$CellContext`ruleIndexes$$, $CellContext`i$$]]]}], 
          Row[{"Accept states: ", 
            Association[
            "Name" -> "(a\[Union]b\!\(\*SuperscriptBox[\()\), \(*\)]\)aba", 
             "Type" -> "NFA", "Transitions" -> {
               Association[
               "Parent" -> 2, "Node" -> 3, "InputSymbol" -> {"a"}], 
               Association[
               "Parent" -> 4, "Node" -> 5, "InputSymbol" -> {"b"}], 
               Association[
               "Parent" -> 1, "Node" -> 2, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 1, "Node" -> 4, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 0, "Node" -> 1, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 3, "Node" -> 1, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 5, "Node" -> 1, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 6, "Node" -> 7, "InputSymbol" -> {"a"}], 
               Association[
               "Parent" -> 3, "Node" -> 6, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 5, "Node" -> 6, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 0, "Node" -> 6, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 8, "Node" -> 9, "InputSymbol" -> {"b"}], 
               Association[
               "Parent" -> 7, "Node" -> 8, 
                "InputSymbol" -> $CellContext`\[Epsilon]], 
               Association[
               "Parent" -> 10, "Node" -> 11, "InputSymbol" -> {"a"}], 
               Association[
               "Parent" -> 9, "Node" -> 10, 
                "InputSymbol" -> $CellContext`\[Epsilon]]}, "StartState" -> 0,
              "AcceptStates" -> {11}, "StateExpressions" -> {}][
            "AcceptStates"]}], 
          Row[{"Result: ", 
            If[
             Last[$CellContext`trace$$], "Accepted", "Not accepted"]}], 
          Graph[
           MapAt[Style[#, Red]& , $CellContext`graphData$$, 
            Part[$CellContext`ruleIndexes$$, $CellContext`i$$]], ImageSize -> 
           400, VertexLabels -> "Name", VertexStyle -> 
           Join[{$CellContext`startTag$$}, $CellContext`acceptTags$$], 
           VertexSize -> 0.1]}], 
       "Specifications" :> {{$CellContext`i$$, 1, 7, 1}}, "Options" :> {}, 
       "DefaultOptions" :> {}],
      ImageSizeCache->{451., {146., 152.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.7611767866813793`*^9},
 CellLabel->
  "Out[147]=",ExpressionUUID->"221c91ad-b918-4141-a484-f96f88999b08"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Regular expressions", "Subchapter",
 CellChangeTimes->{{3.757707848639778*^9, 
  3.7577078522051353`*^9}},ExpressionUUID->"3b519190-0088-4cf5-bc8c-\
eba64cf01b88"],

Cell["\<\
A regular expression, regex or regexp  is a sequence of characters that \
define a search pattern. Usually this pattern is used by string searching \
algorithms for \[OpenCurlyDoubleQuote]find\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]find and replace\[CloseCurlyDoubleQuote] operations on \
strings, or for input validation. It is a technique that developed in \
theoretical computer science and formal language theory.\
\>", "Text",
 CellChangeTimes->{{3.7628901509358463`*^9, 
  3.762890157497805*^9}},ExpressionUUID->"2f9d996a-488b-448b-9b6f-\
93d605c4f3b1"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3Qe41FTex3HFroiIimIBBbGAYkVXLFjWLmBvKyhKEXtBwYZiwQoqa0PQ
tYu9Ykd0sXcsqIAgKnbFgg3F8+7vvM/JcyY3mcnMZCZz7/1+nie7cieTnJRJ
zv/U1Q49ds9+Teabb74TF/3f/+zZe9A2J5zQ+5S9mv/vH/scc+KA/sf07bPz
MQP79u97wj8OXeB/fzz9f+vO+t9/LPi//zYAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANwOeff27GjBljunbtav8b
AID6bN68eeaRRx4x55xzjjnssMPs/8+YMSPrZAEAgP+ZMmWKufjii83ee+9t
ttxyS7PddtuZgw8+2Jx66qnmpptuMuPHjzdnn3121smsuL///tsec6dOncx8
880XLDNnzsw6aQ3S3LlzzeOPP26mT5+edVJQBc8//7y59dZbzfDhw83AgQPN
gQceaMu8evTokXXS0MD9/PPP5rHHHjNvv/121klJRbHPzj///NNcccUVpkOH
DjnvNi0bbLBBhVObPt4dAICGZM6cObasfIEFFjDbb7+9ueeee8wHH3xgJkyY
YM4//3yz3HLLBe/t1VZbLevkVpzqEIYNG2bWW2+9nDzL119/nXXSKubOO+80
l1xySaLl5ptvNs8995z57LPPUtl3z5497fldZJFFzLRp01LZJmqTyrs23HDD
OvGAFj2DgEqZNWuWad26dXC/nXbaaVknqWzFPDt///13+37v1q2b+fXXX81/
//tf06VLl+B87LHHHiWlgXcHAADl07u5c+fO9r120UUXRa6j9+cmm2xi12ne
vHmVU5gd1akstNBCQZ5F/26oTjnlFJu/2WGHHcz8888fHHPHjh1Nr169zKGH
HmrbTOy///5m8803N82aNbOfb7rppjZP9tdff5W0X8VoSy21VLC/kSNHpnxk
qEWTJk3Kuc+0PPzww1knCw3Y4MGDc+433X+zZ8/OOlklK/bZeeSRR5omTZrU
ae/14IMP2jYrpfbN4t0BAED5jjnmGPs+U/l5Pp988ol9l+qdW+o7tD5ac801
g3d+YznuNm3aBHUPP/74Y+Q6yg+pDehKK61k11V9y3fffVfS/vr162e3scQS
S5iPP/64nKSjnnjppZdy4qOmTZvaejygUk444YQ6bTPqe9unpM/Or776yiy8
8MJmnXXWqWh6eHcAAFC8b7/91r479U676qqrCq5/+eWX23W//PLLKqSuNrj2
62rX3xh88cUXQX512223Lbj+66+/HtSN7LrrriXtU2Udas/IGHqNR7jOcr/9
9ss6SWjgPvzww5x61d69e2edpLIlfXZecMEF9pj32WefiqWFdwcAAKV54okn
gnfoU089VXB99TtXnuaFF16oQupqw0YbbWTPz4ILLph1Uqpi7NixwT2RdDw/
Vzei5Z133qlwCtEQrLXWWjkxue47oNLUp3z06NFm3Lhxtr62sXBly5Ucs4F3
BwAApVEfMvc+vO666xJ9R/2/GsIYp0nnfdl4441rKiav9Hw1hx9+eHBPaAyg
JFZeeeXgO7fddltF04f67/3338+Jx9Wm9qeffso6WfWe6ilVZ+iWH374Iesk
oQao7GGxxRazvzU93yuFdwcAAKU588wzg/fhVlttlXVyqkbv/qRt0WspJi8m
3aVy9ZeLLrpoov6933zzTU589eSTT1Y0faj/NKeBf8/ssssuWSepQdCYWf55
TRoXoWH79NNPg3uikjE57w4AAEpz991357wTNSd3Q6e5TFUvp3xDErUSkxeb
7lJonAB3L2yzzTaJvnPvvfcG31l22WXNb7/9VrH0oWFw8zy4ZcyYMVknqd7T
vNN6NrhzmjQuQsP39NNPVzwm590BAEDpVH6uOM/PH++2226pjF+qcVUHDRpk
5zefMmVKCqkt3yOPPGLHZ9VxLr300om+ExeTv/fee+aWW24x//73v819991X
dH6imPNTSrpLcccddwT3wdChQxN9Z+uttw6+85///KfkfWtuLM2XM378+Lzr
Ke+nc3fFFVeYG2+80Tz66KPmtddes2MdlKsS96zGUdT4iRrDTG1RNBeQ6oU1
vpGjOQ1OP/10m5cdOHBg7LGoDeqzzz5rRowYYY477jhz1llnmZdffjnv/vUd
3T99+vSx2//nP/9p50SaOHFiznqa5+/666+3+3/ggQdyPtO1OeOMM8y+++5r
tthiC/ub6Nq1qz3vvsmTJ5sBAwbYfL+WqDI+zavoz5ekuZmSjn2tdGns7O22
286eT41roXEwNMaFtqN5C5955pmc76R5/pMo9hppfR2X9qt+zvPmzYtcT9dH
6yjtGqssTH1x/ee4G2NLx6bjP/744+1cl+pPHSXr+1R1pmoHpPvs6KOPtv2R
FUvGzXVR7PpKq/pn7b333mbHHXc0b731Vmxa9Gw/6aST7Ltwyy23NIcccoj9
DRXifie777672WyzzWzZ04UXXpizzoQJE0zfvn3tdvfaay9z8sknlz1maqFn
55VXXlnxmLyxvzsAAChXuB2pm8dEeZJS5m5Vvlzzqi2++OLB9pQH15xr/pg6
mtN09dVXNx06dLDjz2gsNf3/2muvbdq1a2feeOONYF3Na6o5ydZdd12z4YYb
mvXXX99+b4011khcfqD3sNp9+8eo/Fl40VytvnBMrve+9h8+Z8sss4zNl6R1
fspNdykUT7n9KE9dyDXXXBOsf8455xS9P+VPFWN16tQp2I7GXoriYhLNmaU8
sva3xx57BPMGlDNud7HXJCndDypDUZtOpdu/X1xcpVhl+eWXz/nsxBNPrLMt
5VlXXXVVey8oJvLHRtI5jKIyN8VXbj39rhRT/eMf/7D/7t69uy17UCyueio/
Tlbspjxsjx49bPoUo/lp1PkJj22g6+Kvc9BBB9VJk+5nf50kfWaUb1aMo/Vb
tWpljj32WFu2oPLEtm3bBttq2bKlrS+uxPlPothrpPhbZSX+vnXPhSle9n8j
UXHVqFGjcrajMhPF1OE54HXOFJf4srxP586da8sKtF/1edb9oPvPfUfPe78c
odj15Z577jGrrLJKTtoVx4f98ssvOfewnulKs+bq0r81z3ZU/KZn04EHHmjP
re5Bfz/uWuk5on2G3xtaCs1DGiXJs/ODDz6w8bGfJv1e/PeGxmFX+Ua5Guu7
AwCAtKheQfVmUXmFFi1a2PnPlA9KQmPGKU+kuivlQfTe9PPMfvm59qs5U1XX
7NfV690ZLgvQ/lVHc8MNNwTx8U033ZS4zODXX3+1+UPVTbj8m+rUlNdSfK14
v3Xr1na8GeXffC4m1/f23HNP22dT+Q8di+oNV1xxxSDt2qbqWNI4P+WmuxQq
D9E+CrV7VZuAc8891+a7VTZSaj9A5Y+U7/XvOdV1RVH+UfFF+HPNc928eXMb
T5Si2GuSlLana6Z6MG1X5U9um8pHimLecB5ei+rnHI19pno9d9+7eOrhhx/O
iY/DdW2qe/b3qZjk+++/t5/pd+NiNf2/4nG193D9QfU31SPq/lJ9q+YZ1vX2
06i6ap/S6dpyuEVpDFMs7a9z2WWX5T2P2oYbn0rldq5OXXFX+Lz5MWJa5z+J
Uq+R2hGE963flN9uQPM2uzGz3aJ4Ikxxhb+O4mLFgwcccIBNk/+Zfi/u2Zn1
fapnqvvs3XfftX8L96nyx/AuZn09P3WuwuUSWtQmIXwN3RwbWlRG4bav6+H+
rjpun95jeh7rOa3Y1o81tbh2G4rH9RtUWnfeeeecdfQMLVahZ6fiUP12VRft
l0essMIKtv5ez3r9XfOVq8ynXI3x3QEAQCWoHaDe11GxufLm+ephlZ/Re0/v
WcXZvo8++iiIJ7X9KKqLc/vK17dUsbny/aeddlppB/k/imHzpSXMxeR6pz//
/PN1Ple9iWJml/6o+pdyz08p6S6W0uWOQces9gduURpfeeUV2/9P9XgrrbSS
rWtVW1e/XrIUGhvar0t78cUX66zz0EMP2c/i8k4jR460dR5x7X6jpHFN4ii2
UZmJ8sT677fffjvn9+TqhVSPqTpftfF1fYFVPuViWcXCm2yySfA91XE76i/h
b1PtN306Nv9zlX35VN8cjvEUL6nuSb/Bo446yrZLUVwjLs8dt71wPa1imj/+
+CNnHZUJhOPDfO1cdIxufdXR+vV5ukbh55SbSymt859EqddIbfhV1hDuO6TF
tePV/awyDF0HjSehuFmfK6bxqW2yq/PTou365yp8bbQoNsz6Pr355puDv2u7
fh20Yl/3mdtPMevrXlOsrDpo3RfhuHzatGk553CnnXbK+VzH6ltyySXt3/Vc
8I9B6ym2dH2XNM+224Z+Y7qGd911l/09uP4wgwcPztmXysRLkeTZKeqn4tap
RNv1xvbuAACg0lS2rv5wfhtef1Hbvagy8H79+gXrhPuYiuoh3efhfLq4+m8t
6vcYR3U6islVd1Qq1R+VEpPnG+NNfQ39PElYueenlHQXS3PcuTQoL6t6CLf8
61//snUryusrhr3gggtS3bfq8ty+o/p5ulhEcWEU5e1UrlPMfFppXJM4qn/R
91599VX7b/Wn9X9HalOqPKlf16x5rNS/cebMmcHf1A7DfUd19346dE3cZ2qT
7vejDcdWHTt2rNMG34+xVebmU5sUxTyuzYf6kfjba9asWRCri/bdvn37nHWi
5kFW2xZ/HcVxcdRm2sVBWu6///6czy+99NKcben+TPv8J1HqNVK7BNVRuna1
4eesKLZVXbV73rn4wvXxVhmK4uXwc1r11T5dq3BZiPaf9X2qdtP+/m699dbg
M5W/qk29yg5KWV/PFJUrKdby5812vwef+pn7nyvOC7/n/L4drh5evynV1brx
7XWd1I7JracYVO0R1MZA7y5ResLt6FVuUapCz07R3ysZkze2dwcAANWifqg9
e/aMbPOn+rdw/t5/LyqfF+aP5RIV0ysv4/KMyqfG0fs9qr9lMSoRkyvP6/p8
K78VVu75KSXdxTriiCPyplHUhtPVJ6ndatI+DYX4fTg1d3VY7969g8+Vf05D
Gtckjuo5NX6T4/d51P2tOszlllsucqwuR+1W/N+dxn1wVI/t/q62l+H0q67b
/67mPAzz25mHx/LX+EfdunUL/q024f72+vfvn7O+6szDz4moNqmu3bFbLr74
4shj133ln7OoPueuf7lbFDs6aZz/JMq5RqrXPe+88+x/v/nmmznbUb2r+sYq
llN9uqP6SFeHrrhc/Wb02wm3gVd/6zAdr7+OYtes71N/PmstGh8kX/lXMes/
8cQTwX+HY3k/LtS95rcZ0aIyYp/qY/3P1XdcNJ6CX/8abo+gMQg1xp1fD67Y
3F9HMX054+MXenZKpWPyxvbuAACg2vR+Vd1GOL8dHiNVeUX1O1f9SZQk8Y3q
Ytw6UXVVeqer/j48rlSxKhGTi9omxm03jfNT6ZhcdUfavsbBydemUOUnrv5S
4/Slwc9XqW4u7Oqrr865/xRPu7q9UqVxTeKoLa+r21QbWT/tqotUHl11o3FU
l6a6a/cdlfeo/7TSoTjOlf8oVo06X+6edYvajvqmT5+e87nrN+yo3e/nn38e
pEXtTf31/Xy3Pg+3a1ccFx7/WuVW4fY3cb9l9fH311Mff5+umf+5yhT8sSXK
Pf9JlHuNdA5dvK1tueeHFpWFaiyPfGN9q27S/Qb8dtta/LHSRWkKl6+q/XXW
96nf19wt4Xb55awvem/4/QN0Hvz3S7gOXfeo3wZENL6dv47Gz3N0Dh3/maG+
RooR1W7Ar4PVuIf+ttQnoByFnp1S6Zi8sb07AADIgvIcGp/Zf69tsMEGib+v
/I3WLxTfaMwdt05U+zblvTT+erkqFZNrnLVSYuak56eSMbk/hlG43WsUNwa3
8ptpKJSvUl2YxtYL58fV9ll9NdPuC5j0miShOks/zaqfVP2mn5cPC8ceqktT
W3u1wVDMoDYs4TjVp3jOfVf3bTg+1rhq/va1vTiaZ8BfN9yOxW+3mi/fr7bn
/jq6nlFUN6u5zdx6Uf1A/bG4tOR7LpRy/pMo9xqFhZ+x2lZS/piEuvbh34P6
MfvbVvtqjTHuy+I+1X2pum5/G2q/ofbxaawvaosRF0+L37Zei+YxK7SNqDH2
VBbhj/+utioa980fC1yxebhcKjwORLGyjsl5dwAAUD3Kv/n9RZWni5sH1lFd
nOZTUx2aP/5QXHyjujlXnxEeh1bj52iMp3D9TymKjW3dmMeFYvJit1vs+alk
TK68idu/5uYuxKWl3HjVSZKv1D2odqD+uXKL6urUh7pcxV6TJNy8Yy6dGrPr
2muvzfsdf14hVwamcQ01zmKSWNKvF1xttdXqfO6PSRg3dqGjfuF+WjSXmaMx
ttSOJtw/1vWd9YVjn6j21TJkyJCc9cLt2zW/QPj6a/yzOKWc/yTKvUZhGivM
317S+ZlU5+t/z2+L7oT78UeNK5/FfSq33357neuZL24sdv1wDK95/3z+syzq
c/Hrv7XoGREWvn6K7dXPyxfut55vPIWkso7JeXcAAFBdfj22lrg5TTV/jPqi
KhZQvzyVU6tuIsl72B9/3Y+/1f5MYwOnodjY1uXp0orJSz0/lYzJ/bnw4sbu
dTRvjltX4/akQfVphfJVjsa10jiE4XlwFBeWmscr557NR+My+G2GVZalca4L
1c24tqBuiRu7KY7KtNx3Vdfpe+CBB3K2na+OXMetfsBuXdXxqW+tozkG1Lfc
byuvsbDC5XXajsaF8/cb1fdTfUz9uR90vvwx8XXvqR29Xx+p9ilx57PU859E
udcoLNwXWWWQSagfkf89jcEedvDBB+eso7jWl9V9KtqH34/dPWv9+eBKXV/z
ZPvrqU5dY+r5wuPeh+dgUNmCP26bFo21FxZuu6HfisZK9IVj+zT6Nyd5dlYy
Jm/s7w4AAMqlfLPy60nHMNf71r3D1E8wnF9Te1+Ncar8i8ZO999xSfvmatxc
t57rZ6d0qp1bXL/fYrnYVu/lJFwdYLkxebnnp9h0F0PtkV2etdDYOxo7yaVV
aUqD6vaS5qsc1X2oP7ibm0lLsfdIGvdsPuF+0VrcvM35+HGwFjeveFLhOZLV
rlZUjubXU6k9QDgG8YXnserTp0/wmeId/S51vfx4zp+/Wf02dT+F262rbt3f
jhu3Mbw/vy2sxpXUPFOqb3fzAmrR9XM0zpsfc5V6/pMo9xr51K9cZRnhWGHy
5MnBOuFxNZ1evXrlfCfq9+OPB6A+v+F261ndp47ad4f3r3EGy10/fG5Up+rT
O8wv31G7/zCN7e5vQ9fIzXvmaH6CcHo07p4v3LZd/TPcdVDb+1KfMUmenZWM
yRvruwMAgDSp7kp9S5Pwx4tVHYpPeRvXHzKqPjtpfKMYSXlGracxhzVejOp0
ND9vWlxMkrSc3s2BU05Mnsb5KTbdSSlOczHVDjvsUHB9v99pGm0vRbFXsfkq
xx/zW7FoUmnds/n4czZryTengJ+u8Hhcbl7jMJVh+eNy+/yxkNU+U/18VQbn
/qbYVvVW+YTnOHdzPmk8NcXVGltdc2r567h25JoTWvtVm4Nwu3W1IxWNc6a4
zo2RrZjfX88fw/uSSy6x7avDcbubx27o0KH2/vXLCks5/0mUc40UT/r1o4q1
NYf2oEGDbJsDf5t+nbfGBouaN93vN6Cx9cL8slQtUXPUZXmfOq6fsVvcmPSl
rq/67XDfbZX/iM6ja1fuj0evuu4w13fJLVFjk4XnG1cZnysHc8JjOGieNlEf
c5WNlTruWJJnZ6Vi8sb67gAAIG1ql7366qvXGWc2ij8fcHgMtnvvvTdvnqWY
+MZvi6Y2gor/89WZFEvH67afpF7HzRmltgH55IvJ0zg/xaY7KY3lFBUDxdE8
QG59f74sR21wi7XFFlsE2wy3aVa5jMZKimvP4c9TpL6NSaV5z0bRmOJ+HlxL
VF/VKH49cNTvTXStVP8Zdy+oLa/uRbVbVt215iHTvNfaVlzs5FNM49cjaVuK
w9RuRTGky9urPMOto3pGXS/tW3GGyvGi2q2rT7hia/1dfWIc9R3w13N1terX
rM9Un+jXi7lxovS52s/741uXc/6TKOUaqX5OZRBufmvRuObqh62yi5tvvjln
m+rLI6qHVVlcuE1DeKz0qDG2/Dn/NOa1G0/fqfZ9qvtD/UPCfXjDbffdPOPF
ru+E+9CrDEnlH5qfTffpG2+8Yddz83NpCff/DvfzUPlHuO27fhNufE+3uLnS
fOFxxjRPmo5Nz1D1wS9VvmenU6mYvLG+OwAASJvmqNH7yG9vGkV5yTZt2gR5
m3AMr/exe7eF62GUT/bzLIXiG9WzuXWVD9d305rLVDR2kdu+6m8KcfP5aPH7
0oa58xPVDzSN81NsupPy5/x97rnnCq6vsYvc+orxfKr3VB63WP4Y51FpUL2d
6n2juPymxu8pVBfnS/OejXLhhRfm5MEV0ybdjsZ19r+r2Fix68cff2zrWXWO
FV9pXuso+r0oRlV5Uql1/IqD/DQob6s2u6qvVR2lYkjlddV+xI9FVD+u66ky
PJk4cWKdmE/1iKpf88dvU/7Zb9urRfXi2pd+U+rzr+vilxMoP64x4bS/cJ1/
Oec/iVKukcYg17pqn6G/q7xEsbaLJfRdf5s6R6qD1TM3ak6y8Bgf2p5PcZ9f
l614NKza96nidncP+L91tXdw21E5rHvmF7u+44/9pUX1spqrWunxxzT0Y3e/
rlextt9HXNdJ93JYeL5xLZo7zReee1Dz3umaq8xFY/nF9UtIotCzM3yuosoL
StVY3x0AAKRtn332Cd5n6nsXVZ6sOi839ppiZNXNhPn9+5R/Vj2c8s+KHVWP
5o/ZrrJ1vSNdO8Kw8HzI4XGXy6X2oH7eSHVT6rep/Jbyv34bNsUBfl4qbgwb
Hatrc6/3e7geMo3zU0y6C1HbY+VBVA/kzzulumPVo4Xrgnz++MKqe3VUf6pj
KTTOT5jaP/pzd/n1po4b+zs8DrTiQo0hrc+ixkLOJ817NsqGG26Yc+8UmkfZ
p/suPK6Uv6h+Mt959sd3Vmyu+cqKHQtceebwfhVzacx2VzYVjtuVZrUX9q9T
OObTEjX3tj/+k7+ovv3DDz+06/htTd2iedA0/ntYOec/iVKukeqf/XVUnhGu
3w23ydaiY4m6fn69oxbFm64NtMbIbNWqVfCZ2vZHqfZ9quvlPlf6pk6dauNp
9xvX+G3++KHFru/47Yrconbo4fp2vW/ceI56hmu8O5U9+f0o9LyN618fHj9P
5URhGo88nBaNLadnaTmSPDvFv+80/mM5ZVO8OwAASN+JJ56Yk0/Q+DWq+1Dd
k/rnKc+nvylm0Zg1+d63fhtJLarzUv278pJ+XlrtVZWXz0fju7l1y51HOEz5
ufBcwC6eUP5K8YbiXdW9+HWAWlRXojyN6w+q+h+1n/Xr0rXo38qP+uMbl3t+
kqQ7CcVISp9iJ7Wj1bVVXlfXWXl65RW1zY8++ijy+8qvbrfddnbf6p+ssYVV
L7bvvvtGjvkcx53j8LjHOufqU+Hnr5Sf0meq81Ndi/olqhxC+XF9X31xC83N
FyXNe9anfKt/7+i8Fuq7HaYxh8Jtg3Xd1Ddb28/H/X7C94mum+qvo8rVwhQz
+/e17n2NWeyPb6U6c/8YFceH7xu/7EPXT21Wdb9E8cfTVh2/8sr+eGR+2waN
8+DPy+ZL4/wnUew1Uizj7ncdn9rwh6m/jn/eVQYSd739mFuLfsu6h/0yTfWp
0dxkUbK4T5955pmcseGUXv1baVbMFh5/rtj1Hb9dkX6/unfj2lupLE5zCKg8
VeVOrq+F/lv3uOL0OBozwX9/RtWl6553v0G1edAzppz5t5I+O/WsV9lEuP2J
jk9jtPh9KJLg3QEAQGWozZzmB1FbO+UPFXdozCa1F1TfLrUjVx1V0neW2o4p
n6y6RvVT9I0dO9aW1yfJ87lxnCpZfq12nUqrxl9Vmb/Og6O8m/JpaqOv8nTV
pWhR/YLKJdTOVnT+3Hr6m/6t/9e/FdeF2ySmcX7ypbtadFzat+YnVt9ixbZu
nK6k3DlWnlrnWPeYtqv/9s+xaB3lzVUXo/a3ylfp+HXPltu3Pq17thJ0v6nd
qcoHNHZ5uC9wHMUF4XKi8KL6Z41ZHhcfi/LWGstBY7lFnWfd45MmTbJzZOd7
RugY1F8zfH7DFMNpnGvdS1HxnO4DXXM9l+JisWor9hqpbb/K6vL9brU9nfd8
7YHV9tm/nooxRNdC5Snah/qhVyPeKPYcqPzQjXWn9XUs/u+93PVFbb70+9W9
lPRe0TVR+YXOvfoZFCr7ykrSZ6f7t2Jht457P+n7+rzaGtK7AwCAhk79/VTe
Th8voHjqJ6l+lKq/Co+NHV5UN1jOGFPIhuZ9868j7W8BAACQJtXVq387gORU
z6e2tmpze+aZZ9r6S7W71TxM6ueaLz5Pc9xAVJ4/FogWtXkHAAAA0rLZZpvF
jikNoC71MVHfTvVTDo/77KhNsdrph+dl0qK5sVE/qJ2uP6+2ylpohwsAAIC0
aOxVjcEKIBnVh2ssr6RtmBXTHXfccTkxuf6N+kF90v1rp3EnAQAAgFJpLB6N
u6JxdWbNmmXnhKUdJpCcm/daS3jOnzivvPJKTlyncRVRP4wcOTLn2oXnJQcA
AACKoTlZ/Pxl586d64xXDiCe5qJ2v59ddtkl0e9n+PDhwXfUV0TzCqB+CM+J
GDcnHAAAAFCI5jMJzw+t+AJAcXbcccfgd6R5eL/++uvI9TRP0E033WTHW9e6
6lv+zTffVDm1KJaum9pDDB06tM580wceeKBtWzRlypSskwkAAIB6aK+99grG
KRoxYkTWyQHqJc1BPGjQILPUUkvZ35PmJ996663N0UcfbYYMGWL/X2N1t2zZ
0n7evn172wa6GvNXo3wvvfSSvbbNmjWz47utvPLKpm3btvb/l112WbPkkkua
1q1bcz0BAABQNOUhn3zySTNp0qSskwLUe/o9qa3J5Zdfbk4++WTTr18/Oz/a
gAEDzCmnnGKuv/56895779E/BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAEsybN888
8sgj5pxzzjGHHXaY/f8ZM2ZknSyg5n3++edmzJgxpmvXrva/G7LZs2ebO++8
0/To0cNMmDCh4vurpXM7depUM3z4cLP11ltnmg4AAICGZO7cueaxxx4zc+bM
yTopmfnzzz/NFVdcYTp06GDmm2++nGWDDTbIOnlo4PQbfPzxx8306dOzTkpR
/v77b3PqqaeaTp065fxmZs6cmXXSKuLKK680Xbp0MQsssEBwrOPGjavIvmrp
3P7www9mwIABZrXVVgvSseSSS1Y9HQAAAA3RlClTzMYbb2zzWP/973+zTk4m
fv/9d7P99tubbt26mV9//dWeB+W7Xd5zjz32yDqJaOB69uxp77VFFlnETJs2
LevkJKZ2JcOGDTPrrbdeTtz49ddfZ520irjuuuvMtttum3OsTz/9dEX2VUvn
VjH54MGDTevWrYN0tGzZsurpqJRRo0aZSy65JJVF5TYAAABJTJ482Rx55JFm
8cUXD/JYkyZNyjpZmdB5aNKkSZ36pwcffNC20cy6rSgaNtWHLrXUUsHvcOTI
kVknqWg///yzWWihhYJj0L8bKl2vNdZYIzjWF198saL7q6Vz+9prrwXpaNOm
TWbpSJPaSK200krBcS288MLm0EMPNX369Ilc1Kdpn332Mdtss41Zd911TfPm
zXPKTNSGQtsEAAAIU7v0q6++2tbHtWvXrk777Ibc3jSfr776yubB1llnnayT
gkasX79+9je4xBJLmI8//jjr5JRkzTXXDJ4lf/31V9bJqai99torONa33nqr
4vurlXOrWNOlY6211sosHWlTvxH/XVhMuZjaMzz77LNmq622Cr7PGCQAACDK
yy+/nNMHMmr58ccfs05m1V1wwQX22FXvAWRFcdZzzz1Xr9tkuDbWes40dP/6
17+C5+b7779f8f3V0rl17xGlqSE54ogjgmu62GKLmQ8++KCo7ys233PPPe33
qzHuHwAAqJ/Ub/qjjz4ygwYNqhOPzz///LZNZmPj8rpqjwigdBtttJH9LS24
4IJZJ6XiDj744ODZWWzsVopaOrca80BpWX/99bNOSqp++eUX0759++C6du7c
ueg26Orrr7Hv/vOf/1QmkQAAoMFQbK722n5MXgt5vWpTGYTqQ3T8hx9+eNbJ
AWpS0na4bqzIxvAsOeSQQ6oak9fSuV100UVrKiZPs524xgbw25OdddZZRW9j
3333Lel7AACg8VlmmWUafUz+6aefBsdPTA7UddtttyVuL11LcWOlEZPXRkxe
zP2Z1GmnnZbzXnzllVeK+r76ouv+AAAAKMQfZ7ZW8nrVpjmMiMmBaBr3Su1p
FIMlUUtxY6URk2cfkxd7fyY1d+5ce2zu+mp8Pc2RmdQbb7xhx2QHAAAoZOWV
V64XMfkff/xh51CvxPhzmke22Jhc7f7Hjx9vrr/+enPFFVeYu+++29a3F0Nz
zqk/6uuvvx78TWNt33TTTbbep5j8n+/LL780jz32mE3XjTfeaB599FE7d5HG
3C+knOPS2Eba76677przd41b9tJLL9ltqn/l1KlTI7+vdcaMGWPnBdDc8Npe
UlpXZStDhw41xx13nLnooovscVRqbIRK3o/uvlD642jsqF122cWmw/nmm2/M
PffcY/7973+b++67z/z2229lp+WRRx6xY8Drt7H00ksn+k5c3Pjee++ZW265
paT0Vev66v7VOBvnn3++vb6FJI3JNa+D5jTv1atX8Df1UdZ4frfeeqs9z7Nm
zSq4v0qcWyn2uCUck3/44YfmmmuuMUcddZQ59thjzbXXXmvj0qRKucal3J/F
eOedd4J+81qOPvroxN/Vc6/S8+MBAICGodZjcsWSmm9o1VVXNQceeKDp2LGj
za8p/6bPlO8rNV+uPLTyfy1btgyOv23btmbvvfcOFo3DrljH+fbbb83xxx9v
84Gak/bkk0825557rl1Pcwdvuummtt4mjmKpE044wXTq1ClnDiXFwsrL6vy7
v3fp0qWo49F8xQMHDjRNmza1scI555xj9thjjyBPud9++8V+t9Tj0rlXLKB5
fN29pLGNRDGGrpV/ft04gtqXu24PPfSQnU8pPN7gKqusYp5//vmCx602pUqz
5rFTmseOHWv3qzECNFbTq6++WtR5zKdS92PUfTFu3LicdVQ+0r9/f7PaaqsF
6yiu0/2psQnDY0OoX8odd9xR8rGqTMbvU6v7yP9tuOXBBx/M+V44blRc5dc3
Fpu+alzfyZMnm+23394svvjiOffpMccck/d65ovJVQZ2yimnmA033NBuS+to
/kltT+VO+l3457dJkyZm9913zzvmftrnttTjFheTd+jQwfab3mCDDczpp59u
7xvF5C1atLCfb7nlljZez6eUa1zq/VmsSy65JOfcPPnkk2VtDwAAIKyWY/Jh
w4bZ9Bx55JE59T4nnniiGTx4cNAX/u233y5624pft912W7P11lvb2M8d/wor
rGDH2V177bXt35VHVLwqqvNx6yreDXv33XeD86n4KipPqzx8uA+/YnKlxc8X
u2tRTH2X8p/KM6quyaf65+bNm8fOI1zOcalO/p///GeQP9ey1FJL2fW6detm
621Vh6d4XvGJX+ekPLfKDFQn/MQTT9h0qC5R59+ts+yyy+at39f3lG/fbrvt
6qynvLi2ofOquudyVfJ+jLov/Ov4008/mZ133jmoE3TxwejRo+29OmDAAFu+
pHGlVlxxxWAdlafo/BdLbTTU7lbxlGJFty2VEykGVDve1q1b2/tC19jn4kZ9
T3NCqTyn1PRV4/oOHz7cxs1PPfWUvbdVPqKyOZdGpTtOvphczw21u/HLpNRX
SL8XxbAqs1Jdqn7/3bt3z3kGTZ8+PXJ/aZ7bco5b/N+85oQLj03+3Xff2Tjd
ldP57YF8pVzjcu7PYqm8zZ9zXNucPXt2WdsEAADw1WpMrnpapSdqjBz181OM
qc9VT6L4uhwTJ04s2HZ95syZZrnllrPrqJ40ybY0RlCUH374wbRp0yZYTzHV
5ZdfbuvKVR+kvKT+7rdzLUR1zfpOXNyt8YYUD4fbg6d1XMpvu7pALYpfo4wa
NSpYR/lwpTtM8e4mm2wSrBdX36c29aqL0z0Q125Y9ZLaxg477BB7bElU434M
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
ag67JLGpP65i3PUSF7+qP3g+rhxIy4UXXljn8zTObRrH7R+T+p/nc+SRRwbb
C7dRT+MaF3t/JnHppZeaNm3a2LkQS+H6ykf1eXnvvfdsmYj6DOTrEwMAABoH
5SHDcbWWd955p+B3w/XrWs4777yy0qN+hqrrUMwRVS6gelo3/pDaFDqK2cqp
j3jttdeCYzjwwAMj11G/SzdPrupP4kyZMiWYc3ffffeNXe+ggw4K9pnGuNLr
rLOOOeKIIyI/c2UOOneuL6eT1nEpL+2OR+1ho8Z5F/WPdev94x//iN2f2ti7
9TRnWxTlZ/37T2Ojh+d6V3nF8OHDbdmTYuViZHE/+mNeP/fcc5Hr6Py6dVTe
EkcxRaEykiQ0B5Xb3x133FFwfTcvXLnpq/T1HTZsWLDtww47LOcz1Y3641/G
xaZuzLV810tc/Bp3L4n6crtz0rp168hzl8a5TeO4xR8LLq7sUf1nXLuOqPkW
07jGxd6fhdxzzz22HXyx95Nonrl+/foF6QmP0Sft27cPPle/F80xCQAAGhfl
4+6++24bM6huLyomVz7zqquuMnfeeWds3as/DpBbNN9suVwfZ+WLfOoXvf/+
+5vbbrvNfu7GzlFfdrUvDI+FVAxXH6qlQ4cOsfnQp59+2s77q3zxzTffXOdz
1am4ep9ddtkldl4s5TE1H6/bp+YkLpfy1tpWeK4e5fNdmwbV3VTquPw2t1ri
6tz9uZ4UL0Sda8XzF198cbCe2snHjVngj8PmFqW1R48e9ntunDvdz6Wo5v2o
77Ro0SI4jtGjR9dZx2/vq+XFF1+M3JZiK1fWothJZSql0rPC7U/3ie4RxSuK
JQYPHpzTH0LxVJrpq+T11TzT/r2oNChdiuvU/sGPnfTMVJmX7nNHz8ZC18vx
x3Q4+uij6/RP1j3fv39/+7mOKaqcLq1zW+5xO24cBS0qSwrP+6VjdOPS630R
9zws9xoXc38Wov48ulb77LOPueyyy/IuI0aMMEOHDrVlmRoDrkuXLrZPgX8c
s2fPztm+rrPGCfDX6dWrV+L0AQCAhkHxVzj/o7yV6kDD+QktcWNJq+7VHx9O
9b5pUJ5FfdOVt1I8dPrpp9v2oWeffXZQv6S8qz5X3Lblllua++67r6R9qW2o
2j36eUstyjMpT6h9hmmuXY2NrbpK5TOVJ1MdTp8+fWw+WPVbqj+Nqid+6qmn
bLwWHg9dffhVr9W5c+eS5wRSLO62pT6bF110kc2Pqt5J11ZtYvP1SSj1uFTP
pbId7dc/JrWx7dixo83Ty6233lpnPEEtiml0TtSeU4499lhbN618sfqYatG/
FVtobOioPtoPPPCA3VdU+dKKK64YpKEU1bgfFUPoHLh2CG7R71HjbCvW0/VQ
eVH4XtW50d+vu+46u60333zT9u/161O16N+6hrfffnvR52Du3LlB/2N/0b2i
WETlfO4Yws+QNNJXyeurspTws7Bv377mxx9/zBmHQc8EjUsuqg/XbzXc78dd
r6j24C4m13Hqt6JzcNRRR5lLLrnEXluVg+qz/fbbr854gpU4t6Uct0+/Q7XN
UbmAnhObbbaZvRb6LejfOgd6tupZp3r5Qv2hyrnGSe7PpPx28OUuenZF8evR
tai/CgAAaHxUJ6I6C9WhRo1dpfoNjVel9fLlpVQnOGHChDptDdOgfoHqe6jt
R9WRap+qxy+n/k/Hr20rf6nj1Lnwj12fx1HeVflI1XEr/lVdu8op4sYCE+1D
29X2lY/Uuor5tB9dj1LGEnL0/Weeecb2FR0zZoxNk+pyVb9bTB/LYo/LPyYd
h45Hi+q/dW7d/aPjDZ9r/c2d6zSoL8aNN95o45wrrrjCPPHEEyWNlxylkvej
zoP/m3Tnx92fOgZ3PuPOsztOfc9dD/3Nv6d1bfPdn4W88MIL9rzqvtI94teL
umOoZPoqdX0VY2t7qicOj5c/duxY+xvQOAiOjktpjbpe6sMR9dzwx3hT+2a1
KVI52gUXXGDreXU+436nlTq3xR53WLh8TO1pFDurL7auk+ZpyPcMjVLONc53
f9YSXYepU6cGY2yqHz0AAAAAoHKSjruOxkPld7on4voUAQAAAADSQUyOMPWP
1z3x8ssvZ50UAAAAAGjQiMnhUx+Hdu3a2XHsAAAAAACVRUwOR2MBaDxNjceX
r78+AAAAACAdxOQQje+mORQ11vqsWbOyTg4AAAAANApuHjPNH4bGTXOnAwAA
AACq4/XXXw/motac5prvCwAAAAAAVI7mIF9++eVN06ZNTYsWLUyrVq3Mcsst
Z5o1a2ZatmxpevfunXUSAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAA0Mj89NNP5pdffsk6GQAAAAAANAovvviiOeCAA0yLFi3MfPPN
Z+aff36z6qqrmt133928+uqrWScPAAAAAIAG54svvjC9evWyMbhi8ahFnx1y
yCFm7ty5WScXAAAAAIAG4cMPPzStW7cOYu8FFlggNi7Xcvjhh2edZAAAAAAA
6r0vv/zSrLDCCmb55Zc3l156qZkyZYr566+/zPTp083IkSPNEkssEVlf/v77
72eddAAAAAAA6rWpU6eaffbZx3z99deRn7/++uuR9ebnn39+lVMKAAAAAEDj
069fvzoxuf4GAAAAAAAq684776wTkx911FFZJwsAAAAAgAbv5ZdfrhOTX3nl
lVknCwAAAACABu/222/PiccXXnhh8+mnn2adLDuX+nnnnWf22msvs9VWW5n1
11/fbL311ub000+35QgAAAAAANR3gwcPzonJhwwZkml6Hn30UbPuuuvmna9N
y2677Wa++eabTNMKAAAAAECpfvvtN9OqVasgzm3fvr35/fffM0vPKaeckhN3
L7LIImbllVe2deRrrbVWnbnbLrjggszSCgAAAABAOS677LKcNusTJ07MLC3q
w650LLPMMubss882kyZNqrPOTz/9ZIYPH27atGlj2rVrZ+d6AwAAAACgvpkz
Z05QRz7//PObsWPHZpqelVZaybRt29Z8/PHHBdf9+++/zbx586qQKgAAAAAA
0nfooYcGdeSXXnpppml57733aIsOAAAAAGgU7rjjjiAeHzRoUNbJMR988IFN
i/qTa8z30aNHm549e5pddtnF7LzzzqZ3795m/PjxWScTAAAAAICyqG34Ukst
ZWPgww8/3LYDz5rSsMEGG5iFFlrIpmuNNdawcfgZZ5xhTjzxRLPiiiuaZZdd
NutkAgAAAABQsj///NN06dLFxr39+vWriXhcnnvuObPkkkuali1bmgUXXNA0
bdrUdO3a1ey6665mo402MgsssIDZb7/9sk4mAAAAAAAl69+/v43H+/btWzPx
+HfffWdWWGEF06lTJ/P999/b5bbbbrNjr6stu8aGHzduXM2kFwAAAACAYo0Y
McLG43369CkY3z7//PPm9ddfj/185syZ5ueff04lXcOGDbPpeuaZZ1LZHgAA
AAAAteTBBx80TZo0sWOtF4rHNZZas2bNzKhRo+p8NmPGDLP++uvbGFrtyYcM
GVJ22nbccUfbVv2vv/4qe1sAAAAAANSSN99808a8iqMXX3xx+99xy2KLLWbX
W3TRRc3s2bPrbGu33XYLxmt3S7njoe+00052fnTF+0lMnz7dpiMuhte8at27
dzfdunUzDz30UFlpAwAAAACgVLNmzTIrr7xynTi60BI3nprGPg+ve95555WV
xqFDh9rtaHy3Cy+80Lzyyivmm2++MXPmzLHt4zU32ttvv23btmv+8pVWWsnO
jxanffv2QdrUNmDixIllpQ8AAAAAgFJozPJi43EtjzzySOT2NBZ6eN3777+/
rDT+9NNPpmPHjonT1rlzZ/Pjjz9GbmvevHm23b2/fq9evcpKHwAAAAAApSgl
HtcY6HHtwt966y3TqlWrYN2DDjoolXR+9tlndj5yzYMWl65VVlnFXHvttXY+
t3w0x5v/vS222CKVNAIAAAAAkDW1J58wYYJ59913U9+22qnfd999dv6zgQMH
mlNPPdX+t+Yvnzt3bqJtaAy7qVOn2rHjFZPna+cOAAAAAADSN2XKFBuTn3TS
SVknBQAAAACARuWqq66yMfnLL7+cdVIAAAAAAGg0NGZ7u3btTI8ePbJOCgAA
AAAAjYbGXu/Zs6dp27at+fbbb7NODgAAAAAAjYLGd9t///3tWOuamx0AAAAA
AFTP5MmTs04CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAo0Y033mhmz56ddTIAAAAAAGhUPvzwQzPffPOZ559/PuukAAAAAABQ
ljlz5pjff/8962REmjp1qhkxYoQ5/vjjzaWXXmpeeuklc8kll5gll1zSzJ07
N+vkAQAAAABQlL///ts88sgjZs899zSrrrqqmX/++U2TJk1M27ZtzQEHHGDr
obP266+/ml69epn27dub0aNH21j8jjvuMBtvvLFZaKGFTLdu3bJOIgAAAAAA
RXnqqadsnKu233GLYt4bbrghszSq/rtLly6mc+fO5rfffsv57LvvvrPlB2uu
uab54YcfMkohAAAAAADFGTZsmI25W7dubQ477DAzZMgQc8ghh5gWLVrUicsX
W2yxzOrLhw4dahZccEEzc+bMOp+NHTvW1usvs8wytk4fAAAAAID6QPH3VVdd
Zf7666+cv2v88i222KJOXH7RRRdVPY1Ky6KLLmp23XXXyM8POuggs9FGG5kT
TzzRxuaTJk2qcgoBAAAAAEjXBx98UCcmP+KII6qeDpUZaN/XXnttnc/mzZtn
ll12WVu/P3HiRLve6aefXvU0AgAAAACQtqWXXjonJr/yyiurnobtttvO7vvp
p5+u89kLL7xgP9N4b99884397w033LDqaQQAAAAAIE2//PKLHdvN708+ffr0
qqZB48EvtdRSdv/Tpk2r8/lpp51mlltuOVtfLlpX7de/+uqrqqYTAAAAAIA0
Pfroo5nXkX/88cd234qz//jjjzqfr7feenZ+NGfllVe266sdOwAAAAAA9ZHG
VVt99dVtfLv44oubW265JZN0vPHGGzYNGuMt7LPPPrOfaY5yx6X59ttvr2Yy
AQAAAABIxYwZM8xmm21mY9utttrKfPrpp5ml5ZlnnrHpaNq0aZ3PRo0aZedH
U/mB07FjR7v+xRdfXM1kAgAAAABQli+++MKce+65Zskllwzaq6vN+DbbbGMe
fPDBTNKk/SodzZs3r/NZ9+7dbZmBT+O7af2zzjqrWkkEAAAAAKAsmp9cdc7h
uc/85ZhjjjFz586tarpuvfVWu+9lllkm5++///67WWKJJcyFF16Y83dXv6+x
3wAAAAAAqC/UL/voo482a6yxRmxcXu25v6+77jq7X42n7nPjz73zzjs5f3cx
OXOUAwAAAADqI9WZq6/2sssuWycmX3jhhc3UqVOrlpabbropcoy3o446yrRu
3brO+p07d7brn3/++dVKIgAAAAAAqXv//feDucH95aqrrqpaGu6+++6gX7tv
tdVWMwMGDKiz/gYbbGDXHzlyZLWSCAAAAABARWj88nBM3r9//6rt//nnnw/2
6/qyT5482f774YcfrrN+hw4d7Gdq8w4AAAAAQH02a9asOjH5kUceWbX9z5w5
M9jvzz//bP920UUX2bbsv/zyS531NRac1h03blzV0ggAAAAAQKVofHM/Jq9m
u3DVjS+yyCJ2vx9//LH9W9euXc3OO+9cZ12Nxe7S+NFHH1UtjQAAAAAAVIJi
4oUWWiiIdRdYYIGCY7ypbtvVaadhhx12sPt++umnzQ8//GDnbLviiivqrDdj
xgy7XsuWLc3ff/+d2v4BAAAAAMjC22+/nVNH3rNnz9h1FROvv/76Qew+ZMiQ
VNIwYsSIYGw5zdem/54+fXqd9R544IGCaQQAAAAAoJb89NNPsZ8NGjQoiMfX
Wmst8/3338euu9tuu9Xpez5+/Piy0/fhhx/acde1fcXba6+9duR6/fr1s/t8
5plnIj9/7733TPfu3U23bt3MQw89VHa6AAAAAAAoR+/evW2d9oorrmhuvvnm
nM9efvnloN16p06dgv7ccaLmMz/vvPNSSee+++5rx3XTGG4DBw6s87nKFZZf
fnmz9dZbx26jffv2QbqaNGliJk6cmEraAAAAAAAolvqKq2+2H0Pvvffe5t57
7zXnnHOOWWyxxWxMfswxx5hff/214PY09lo4Jr///vtTSesXX3xh2rRpY7c5
YcKEOp/37dvXzqWuvuxR5s2bZ5o1a5aTtl69eqWSNgAAAAAASnHYYYfViaO1
qD5ac55NmzYt8bbeeust06pVq2AbBx10UKppPfPMM+12Fftr3nKNIzdp0iRb
jtCxY0fbNj0f17bdLVtssUWq6QMAAAAAoFhqwz18+HBz9tlnm9tvv928++67
5s8//yxpW4qTVY+tbaRt8803NwcccICtx1dZwo477mj2339/c80110TOVR6m
sdg1ZrziecXkUfOpAQAAAACAXLNnz7b93seOHVv2tqZMmWJj8pNOOimFlAEA
AAAA0LDNmTPHHHfccYnqwwvRnGqKyTWGHQAAAAAAqA7F9u3atTM9evTIOikA
AAAAADQaGntd85u3bdvWfPvtt1knBwAAAACARkHju2k8OI21PmvWrKyTAwAA
AABAozJ58uSskwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAQL1x9dVXm0mTJmWdDGRgyJAh5scff8w6GRXz+eefmzFj
xpiuXbva/wZqxR9//GEmTJhgjjjiCDNs2LCskwNU1OzZs82dd95pevToYe97
AADw//7++29z7LHHmp49e2adFGTkgQceMBtuuKH58ssvs05KanRfn3rqqaZT
p05mvvnmC5aZM2dmnTTAPP3006Zbt26madOmwb15/PHHZ50soCKuvPJK06VL
F7PAAgsE9/u4ceOyThYakLlz55rHH3/cTJ8+PeukAKhh8+bNMyeffLJZdNFF
7bL//vtnnaTAGWecYbbaaitbX5OUyrkvueSSRMvNN99snnvuOfPZZ59V8Cjq
j1o9d4MHDzYbb7yx+fXXXyu+r2rQb071juutt15OTP71119nnbR6o1bv1YZg
4sSJ5pBDDjFNmjQJ7k2VIaWJ64dacd1115ltt90251mscikgLapX0n21yCKL
mGnTpmWdHAA1qm/fvjnvon/+859ZJ8m66667TPPmzYvOh51yyin2+bfDDjuY
+eefPziujh07ml69eplDDz3UHHzwwbbsYfPNNzfNmjWzn2+66aY2n/jXX39V
6IhqX62eO2136623NgcccEBFtp+Vn3/+2Sy00ELBeda/kUyt3qsNidqsu/N6
zjnnpLptrh9qidourbHGGsF9+OKLL2adJDQQureWWmqp4N4aOXJk1kkCUINO
P/30nHi8VmJytVNWHuyaa64paztt2rQJyibj+iTrefnYY4+ZlVZaya6rNmzf
ffddWfttCGrt3Kmvtdpx3HHHHRXZflbWXHPN4LdHnFGaWrtXGwo9f929qfrq
SuH6oRbstddewf3+1ltvZZ0cNCD9+vWz99USSyxhPv7446yTA6DGXH/99fYZ
seKKK9ZcTH7YYYeZVq1a2T44pfriiy+CY1K7tEJef/31oL5m1113LXm/xVA+
c8SIEWXXj+pYR40alVKqavfc9e/f36y88spmzpw5FdtHtbn26+rLiOLV6r3a
ENxwww3Buf33v/9dkX1w/VAr/vWvfwX34vvvv591ctCAqLxd/W8YxxVAmNpl
qU5C7QfVb7CWYvI33njD9mMcOnRoWdsZO3ZscExnn312ou+4+hot77zzTln7
T0L9h7Wv//73v2Vt57bbbjMLL7xwSqmq3XM3ZcoUe2/ovm0oNtpoI3vOFlxw
wayTUi/V6r3aEKgftztPV1xxRUX2wfVDrVBfCXdfffDBB1knBwDQwKl/tuqg
1U5L9bS1FpOr/6DiS9WflOPwww8PjilpzKs6WPcdxbmVpmuhfT311FNlbcfV
Z6Wlls/dHnvsYZZeemnz22+/VWwf1aSx64jJS1fL92p9d8stt1Q8Juf6oVb4
eSFicgBAJSmO6dy5c84Y1rUUk2t+0LTGfl9rrbXs8Wh7v//+e8H1v/nmm5zz
8OSTT5adhkJqNSav5XOn/uTah+KFhoCYvDy1fK/Wd9WIybl+qBXE5ACAatE4
t6pj8Pu01FJMftVVV9k0jB49uqztaIw4dzzbbLNNou/ce++9wXeWXXbZqtTD
1mJMXuvnbtasWUWlrdYRk5eu1u/V+q7SMTnXD7WEmBwAUA0a001j40yYMCHn
77UUk3fv3t2mYdKkSWVtx9WlaknaL11zbbnv/Oc//ylr/0nVYkxeH85d27Zt
7RxiDWG+8riY/L333rMxkcbWuu+++4qKPTT/uebX1fU77rjjzEUXXWTGjx9v
+6oUot+e+lVqLC1H48TedNNNtp1w3DkvZ5+lqg/3aj4aR3zQoEHm/PPPt2Ml
JKHn9y677GL++OOP4G+qO77nnntKuldEY2nqGaS4W+Or63kyc+bMisfkjfH6
Sa3+xrJKl76vMW5UJq+5YDSOQXiMtU8++cS88sor5vvvvy/9AAsoNiav9vVP
Iovn8FdffWXneNcchs6ff/5pxzS79dZbzSOPPGLL0pPK4j5U+aCup55zN954
o3n00UfNa6+9lnc82WK/445LaUpC7Ya0rvLu2sfdd99tPv3000TfddJ8X5Ry
jgDUpfyV5hY78sgj63xWKzG5npvLLLOMnSui3DmhBgwYEBzPs88+W3B9f86f
tOfhzacWY/L6cO707tf+9P5N27vvvmvatWtn1l57bTsm+oYbbmg6depk/62/
uz6vmj9Z85jpM62z7rrr2n/vvPPOwbaUH1l99dXtnMsbbLCB3Z7mwH388ceD
dcIxud7B66+/fs5vUot+G0nmgVO+VWlZZ511zLnnnmvH0FL+ZLHFFjPt27c3
r776ap3v6L19wgkn2GNx+9NcQMoTHHXUUTZt7u+agyqNfaahPtyrUSZPnmy2
3357s/jiiwfpUXnpMcccE5l/VF5Mcw6sttpqwfrK8ypvpTkqNP5GKfeKnrOK
wVXfrFj3rLPOMsOGDTMHHHCAfV9o3JFKxuSN5fpJrf7Gsk7Xyy+/bJ+fmr/5
tNNOs+8y3eva7+67725uv/1224bCpUP/r/X1HNUzVftVGW0433LGGWeYVVdd
1XTo0MGup2ew/n300UfHpiVpTJ7F9U+i2GuhMRX1d/d+cudJ76y77rrLrqOx
6P33nD7X///00092rFX9t5sHQe9HHf/VV19tWrZsaecScceksVl1PePGHc/q
PtScNwMHDjRNmza111/PFY1ZozGQta/99tuvrO9EHde4cePyXsdvv/3WHH/8
8TYvrGM6+eST7THts88+ti5i0003zclDhKX9vijlHAGIpmek5pjR+yhqzq1a
ick//PBDu/8tt9yy7G0pftK2CvVRVPmgnnV6d+jdXe2+ibUYk9eHczdy5MiK
5ss177Hy/36eQvFKeD7k559/PlhH+RLlC8LnTGXjOj/6/M4776zzG3QxufIs
e+65p33fKlZRWf++++6bM1eh3seqP4/zxBNP2DzIdtttV6fs+sEHH7TbUD4y
3A5FzwC9l/3ngPJDem74+U6XJ/bL1UvdZxrqw70aNnz4cJuP1W9ez2bl2RRT
xNUXK++rch7lz/z8v/r36PhLvVc0D7iur9ZT3BOm5/EKK6xQ0Zi8MVw/p1Z/
Y1mmS3GFnnta75lnnsn5TPXPbr8qB1W9wiqrrGL/3bp1a1t2qjoGt47GJfAp
nTNmzLD177pebr0DDzww77koFJNncf2TKOVaqExu6tSpth7V379iOle2oN+l
3lv6+5JLLmnbMihm1KLxGRV7u++ttNJKNv+od6XqxbV9HaNr/6hFz5Tp06en
en7KuQ/33ntv+zwNl++/9NJLpnnz5nXuq2K/E3Vc+eoSNO+Qu8+j8je6790Y
l4r1w2VAlXhflHKOAERT/KLfU1x7mVqJyfV71/6VnnKoHZU7FsU7avPklo8+
+sjGTeqTqDJtvUP+8Y9/2PeMyhGrrdZi8vpy7hRDKI1qB1ZJ3bp1C87HhRde
GLmO5kh260ycODFyna222sqO5RDFxeT6jSrGD1MeQ+VUbh9x9Txq09aiRQsb
t8TlJ1WPoW3ssMMOdT774YcfcuaY0vv78ssvt3ky1TEoH6y/++0Ty91nOerL
veoor6S8jc6V0u5Tel1sojxrlGnTpgX1ElpU3xHOtye9V9TGU/k2raP6xDjK
W1cqJm9s109q9TeWRboUs6l9hj5X/V+Y2ie7+93tV/GInqWuz4LKSONicp/i
aLfeEUccEbtevpg8q+ufRLnX4pdffrFlXS5do0aNyvlceUdtO2pehBdeeCEn
/6jfbJjiRp07t85mm20WmcZq34cPPfRQ3ntHeWfdg3pelvOd8HGpnCiKyp2W
W245u47mRYqjfIbbltqWREnrfVHK8QKIpneHyjb79u0bu06txORuntpjjz22
rO24Ml0tauOk43OL2mFp3HmVqeoZfsEFF6SU+tLUWkxeX86dysWVRuXPKumB
Bx4IzofaxEXx29NGzZuuenGV0SvWiJJkjDf1x/PjlyhqS6/Pu3btGrudHXfc
0a6j/GNUetRm2e3nyiuvzPlMsZDqN/xy+TT2War6cq86/fr1C9KrPnhhfl2e
3/fPp3aM+lzHFCfJvaK+n2474fjCp/6blYrJG+P1k1r9jVU7XaeeempsDOjo
HtDn+cYO0WeFYnLVEeZ7Rjv5YvKsrn8Sadwjaqfg0qU+K649l2Ittd0aMmRI
5HY1FoX7nmLmOOqLrN+zWzeurria96HahLvYP4r216NHD1seU853wsel+v8o
fnuFQvNCbrTRRnY9leXHbS+N90WpxwugLte2S3OLqTxL8UN4UZmlH5Pr3eZ/
XszYHOVw7ZHjnv1JqRzcHYva1kT5+uuvzU477WTX2W233ex7JSm9DzTmhtoP
JZm7J59ai8kree70PfXv2mKLLWy9l/pX6T0VV2acj/JE2r/6iVWS3jd++92o
tm9Kv/tcxxSmOh31vYqTJCZXftS1kVe7tjCVw7s+Yuqz9/DDD9dZFIepP5hL
q+KtMD9PqjqpfNLaZ6nq0+9c/DxZVHr9scvi9pfGvSLqx6TP1S40n0qO8Vap
65fmc8aXxvWTWv2NVTtdKvt3n8W1L3LXXktUGyJRP/RCMfmYMWOC7eQr38kX
k2dx/ZNI8x7xj1GxmGh8CZWZ5Rvjxz1vNA5KPn6bMl3bKNW8D3v37h38Xesl
Ucp3wscVHr9Q3nzzzeBzPbcKlctcfPHFwfpxcwen8b4o9XgB5FLbFVeGXM4y
YsSIqqRX462msT+NQaLt6Dmcr52j2r2pDYHWzVd2Lupnc+aZZ9r2BhoHxb0H
9E4oR63F5JU4d6L2bXpfq2+X3u3atuJqtUfVNvr06VNUOlVWru+pP1Sl+f0a
TzrppDqfq0+X/3vR+MA+1eXnG48l6VxoSy+9tF0vqm3k/fffH+xf9TXK7xZa
dC3Cihl3OK19lqo+/c5F9dFqh6mxaqOkFZNLvntF/RXdfnTv5lPJmLwS1y/t
54wvjesntfobq3a6/DazUfXO4XXi0qT+rMXE5Bp/rJRzkMX1TyLNe0T5ERe/
6tmn8mT1LyjU9sK1kS4Uk2ucb5dWPaOiVPM+1L3gv7tVJlFoTMJSvpPkuPTe
cZ/nK8N3/PbrKpeKeoam8b4o9XgB5HJtwctdVE5aDerLov2pbr5UqiNx6VZ7
pUI233xzu67GaMlH46zqva7noPJ6boyNhhSTV+rcqU2T2n2rr1SY2vhpjFdt
R/OWJKXxQ/Ud5RcqTXPcuPOi8utwPzGNT+3H5erz6mj8HJ2ffGXeSd+b7p6L
em+q7sftX/1wS1VMfiitfZaivv3OC1FdhcoA0orJ890rag/q9lOoTXilYvJK
XL9KPGeSSnr9pFZ/Y9VOl18nGzdmn2ujpJgvrp622Jhc/x2n1Hi5Utc/ibTv
EX97WpS3KERjNCaJydW+wN92eMxUqeZ9qOeC2uWH87ybbLKJHXc+qo90Kd9J
clx+f3uNnVeI8hb+/qOee2m8L0o9XgC5VJ7r5qgoZ4nr65U2V06ouXlKpWeE
S7fmDC3EteEs9B4Na4gxeaXOncYIUdyquT2iuHJY5ZmTcvXk1RrvU3Xd7lj9
Om+N+6Y2c8pbuLlaNEeOo3r1QnGP5kdL8t505zvqvan9uPRpvOxSFZMfSmuf
pahvv/M4uo91HtVXzx+Pp9yYPN+9ojHd3H4KzVtQqZi8EtevEs+ZQoq9flKr
v7Fqp8u/t6LK/f2y0Li2uZJmTK5xDIqJlyt9/ZNI+x5RDOaPI3/ttdcW/E7S
mFxj4fl5y6i+YNW+DzW+nfq6+NfPLZoD7u23307lO4WOS/P9uc811kIh33//
fc5+1f4pLI33RanHC6A0tTLGm6u/yTcOcCH+3CiF+g9qLg+3rsYeKUZaeXWX
hrj2cEmpTZ3ei+Wo1Llz7dXU/jSqTNVvg6XtJuH6XuUb1yVNN954Y5BGN5eO
xjDVO0zz64picX2u/iKzZ8+2eRvVq+cbQ0s0z265702NweDS99hjj5V4lMXl
h9LaZynq2+88TP0kNaa/5o9VeZruFd3LhfL0ri6unHvFbyOZVdv1Sly/Sjxn
4pR6/aRWf2PVTpfa2ro+BRqTWm2ffGq/q880j1S+Z2iaMbnmokxyDqp1/ZNI
+x5R/OXPa61xwPU+yydpTB6OI8PXXLL6fWgMOuU9w/OWqY913PUs5juadyXf
cfn3nuaaKET14v4+o+aXS+N9UerxAihNKTG5ngdRc52Xw9WdJHkexVHbRW1D
czMWGg/Ijd2tRc+kYqSZV1f/rXLzu0cddVTZdcaVOnfK/2o8p6g5kOWee+6x
21H/taRjcGlOWH0nag6dSlA+RXVwLi7Q3M4ak9D/rfjjr998882270i++h3H
zUVaznvT33fc3ChJFJMfSmufpaiPv3NRG1eNnaRyG9Xn+vmYJP1RVSdR7r1y
6623BvtRPjCfSsXklbh+lXjOhJV7/aRWf2NZpEvXTGM2azu6t9WvQOPxa64r
/U1jEEaNh+VzMbm+HydpTO7mB4w7B9W+/kmkfY/onaX5q12ZiBbVkeZTSj25
3qdRsv596F3v6jjctgvVmST5juY2y3dc/jwEaq9RiD8uiPIkUfdcGu+LKKWc
IwDJFBOTz5gxwz53tZ7Gaix3jHTfs88+m/h5FEVlrq6tfpJ5WvX+d8esvjHF
SDOvrrFINZZNqfQs1lhnAwYMKHkb1Tx3YW785ST9Sp377rvPfkdlEdWiPl7u
mNWmQ/eAygYc1eW4OWoV66gtmuaXKcTN0VvOe1NtAF3aVE/4xRdfFNxv1DrF
5IfS2mex6uvvXHW33bt3D2KNsCR5erW7KPdecXMWaGnZsmXe7VQiJs/qWVPK
c8aXxvWTWv2NZZEujQGgc6pxXRVfaR5UxbrqLxc3znpYkngiaUzuX8PwOcji
+ieR5j1y7rnn2nIJjX+i+Nm1VdbzRuNfxkkak7s8nhbN5RWlVn4f/rMv6RhH
+b7j5mOLOy7d7+7zJP1r/LHX4sawT+N9kU8p5whAfsXE5JqPxl9Xy/jx41NJ
h8b21Pai5pNK4u677w7SlGRcOrVBduurHVpYvn70aebV1Zdc2yp1ngmNV69y
e41PVapqnjuf2lto7m69+4vpk6Q0at+aDySK8g/KPylt6meaBo016pdLa9yT
MNd+UXVxcfN5hqmu0JVx5VPovenmItWifNWcOXNit6XrE1VHWmx+MY19Fqu+
/s7vvffeIB1R44cnydO7OsFy7hW1GXZ5NS2qh47jjweXVkyexbOm1OeML43r
J7X6G6t2utTWSO96N+dWqdwc5ioPjUtD0pjcH8sqXD+f1fVPIo17RGOYqx+5
P+6aP+eIP05KmIvJNTZKPv72NBZLlGrdh3oOqtw8apw50TPfbVdtOEv9jqO5
GePuLceNZamlUP94f165uHldyn1flHq8lch/AY1FMTG5q9Pzl/POOy+1tCiv
qDI9tRErll+P+dxzzxVcX2NzufUPPfTQnM80Pmhc2aOk3aZVdQPKUwwfPjzx
d/S8dP2p1I6oHNU8d44bz1PXW/mBYrj9x81rrHnLXfp0XuPmvy2W8pBuu4ot
wvy5Xi677LJE23Rzgxa6n9TnUussv/zykZ/r3ef/LpXW8Pyuumd0jyk+iSrD
Oeigg4LvJxnHNo19Fqu+/s5dOZKWww47LOcz1Re6feXL0/tzW5Zzr/htPlVf
Fbc/9Q1x66XVJqraz5pynjO+NK6f1OpvrNrpUp2svnfbbbeVlF7Hv5/i3oO6
b9w6ekbHceNtRt2bWV3/JMq9FiqnUh869Rvw6Rnjt09W+7Qobh3FgHHj4+t3
6J5LrVu3jn1+VfM+VB8atZ+J8tZbb9ntqRxPY/GW8x3xx+WPe+4p3W4uunz9
BTT+oZunc999941dL433RSnHW6n8F9AYFBOT++OYuKWcfE6Ymx8lLtYK09gj
ehY88MADdo5GlyaVaX/++ed5+7yrvZxb3y831jtFbdPyjT2UdkyudnGuP5Ha
Z6rvo/rsRFF7Ao3lrf7jymeqLqsUWZ07Udu43r1723d4KWPOq+xG79eofqE6
l67vt1vUPzENyvNpe6pPiMp7zJo1y7bLVT26xrMpRO9gP51x5015Pveu1vtP
7+QoGkc7/PtUPYL6bCp2cWOz+PO1Ocq3aI7XJHnXtPaZVEP4nY8bNy5Ih/I+
uoa6rnfccYdNh5+PUXmP8kFq6+n47TTTuFf8vK/279cf63el+S/cXFQuH637
P2osoUKyun7lPmd85V4/qdXfWBbpcm3udN40bpTKMMPL6NGjbT/VuHeh+O2X
9D48++yzbSynZ6vqRXfZZZecccQ7duxo25aFx7ZWXWCLFi2C9bRvX5bXP4lS
r8U777xjx3TTs0JtF8JUZue2p+dBVJ8CP27XnLbhubL1Tu7fv7/9XOmIi7Wr
fR+qbEV/D48tr/IDd39qbPdyv6P+OvnuLd/TTz9t5wtXWb3GpQnT89K1DdC9
HffbSOt9UezxVjL/BTQGfhlyoZhc5WKtWrUK1lW+Lk16BiV9Fqvtk55bis2U
59J7UmnT81d9i1SOqHJC9YuKonGzt9tuO7s/9cf+5JNPbLyrcsdCcW6lxmPW
GN5qI6a4Tu+5Dh062D6XKqtQWjVmhz7TcakOq9T5P7I8d3pmK5+sPlOltN1T
3Kv9asyUOP369cu5p9VuLA3Kt+m65DvGLl262HKufHSfq++dmz/NLYrldc1d
PwaNL6/8pF+XrkX/VowUNZ6V4h7lO8N5FHetwvX7ilWUlvBYqrrPVH6utqGF
7rNi91mMhvQ79+dk1qI6hL59+9q8sN83T3kaNy+wxlvSPeHGKkjrXtHvUOdW
59ClRXU5mvdPeXT141a/JLcdxdJ6FiWp2/Zldf3Kfc5EKeX6Sa3+xrJMlz8O
daFFMUO+OEZzCYR/HzoGvSPVTnjw4MH2b7rXNttsMzvfgNItup91nLo//e/r
2aw5Mfx26lle/ySKuRYqM3b5CbeOzoHapYjyen6ZnL/oWeD3eXExuX7n2p6e
QxrrReV6en6p/YE+22+//SLL9LK6DxVnuv3ouPXM072iunbdK2prHy57L+Y7
7j3v6rTD91bcPa3nm34fei6qHkznUPX8ffr0sb8FPc/Vnzxqfom03xelnKNK
5b+AxkDjUKnc2C1x7ZMc1WlobKtw+6A0qM268m3ljHlWDNWj6Fmu8dEUC+ud
m69/pVPpeYtVp3TTTTeZs846yxx88MG2rFfPY7WfU7l8uXP5pKGUc6d3iI5H
fe/CfZSefPLJvPUhjntHqN4iX9qmTp0ajJuifmZpUb1NvnGbVa6i/qv56Psq
n9b9rvJmnRctavOo35erZ9BxuPX0N/1b/69/Kx+of8dRXlRzuClfpL7Aujbh
+gvR+9TtQ+nSNpUWpUvXQ58llXSf1VZLv3PFADo3+h1rzEyfxuq//vrrc37f
7p6o1L2izx9++GE7j4DyeWqj5PoO6TmkfKOe9fnutUor9vql8ZyJU+z1k1r9
jWWZrk8//dS2CUsalysmeP311/NuT232VL+u/rX+PFsqk9G7IKpNuY5Xvw8d
r45b50TnQf+tvsn6f1/W1z+JpNdCzw+lQelRupQWv99g+HmidfRv/d2PB/0x
3jTWqa6D3tNqz6dyM/1287Uby+o+1LaV/1V7HY0zoHhTbYHUTjEuvcV8x73n
o+4t/9kdR/elzp3qqLQf3VsqK8n3LE77fVHKOapk/gtAdal8Vb/jfON8Zq3S
MXlDpPeRxtRXvUJUTKty1yR5S62nera4fms+tcPSdQq3JQOS4Hde/6T1nEHl
6R2vPliaW1rlPv6i2EPlJ6qTUx2ffocDBw7MOsmIkHTcdTQu5L+A+s/NwaF5
UWoVefXiKJ+s8ZPV109ltap/0KLzp7aoypOp3VkhKq/VeU/ab1LraX3VXQPF
4ndev6T1nEHlqV5bbafjxjvwqV+4foe6tqg9xOSIQv4LaBjUhl5t2EsZf73S
NMaG64OpsUqybNNZH6hOSn0/C7VNVN+/Qvbee287vkmSOnLlxdu1a2fHeQGK
xe+8fknzOYPKUltajeWVtN5bfYGoJ69dxOQII/8FNBzqw6JxJjQeay3Q2KQa
k0NzwWl8E/3/csstZ/9bY2RqzFX1r0Fd6tOVpL+gxunJR30JNTaKxp0qRHk+
jZGiMUxqoe896gd+5/VXWs8ZVJ7m3NK1UB/VJPS71PpRY1oie8Tk8JH/Ahqe
F154wdZT6X2Mxk39QjV2a5IyGtVn7r///nasT43RDgCoHUceeaSN4TSHVRIa
40pzATAOQG0iJodD/gtouDSfiOay8cdQReOjuTXUBipp++HJkydXOEUAgFK4
uarV/qTQvPEau1ljer7xxhtVSh2K5eb0XGeddbJOCmoA+S+g4dL8PJqjMd/8
U2i4Lr74YrPHHntEzmMDAKhfNGeY359A44Rozj3NM6m+SWqjrvmY9d7XfOLk
8WuX+pT585trLjIAQMOl9zTv5cZJbSWSjOkGAKgfhgwZYmO4qD7/bdq0sfMn
vfbaa1knEzE0B/nyyy9vmjZtalq0aGHbMmjsjWbNmpmWLVua3r17Z51EAAAA
AEAeGpv52WeftWO9PfHEE+btt9+mnxoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAP/H3nlAW1JUbVsQFcmMkgUUBsOQJAiSMyJR
cpA0IEMWQcJIGJQkWUCSkiRnEGUEhjAMUSRHAyM5CChIkmDofz31rX3+un07
d/Xpc+59n7V6wdzT3VVdce+qXXsLIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgiRwhlnnBE9+uijbWdDNMi4ceOi
t99+u+1sNMorr7wSnX322dFKK63k/l+IXuGjjz6KJk6cGO22227RUUcd1XZ2
hGiMt956K7riiiuiDTbYwLV5IYQQolf505/+FO21115tZyP63//+5/KxzTbb
tJ0V0TDXXXddtPjii0d/+9vf2s5KUGjDBx54YLTIIotEn/jEJzrX888/33bW
hIhuu+22aL311oumm266Ttvce++9286WEME57bTTomWXXTb65Cc/2Wnr48eP
bztbYojx8ccfRzfddFP0zDPPtJ0VIUQP89///jfabrvtonXWWSfadNNNo223
3TbaZZddoj333DPaYYcdos022yxaa621oqmnntrNXW1zyCGHRCuuuKLbwykK
69/HH398oevCCy+M7rrrruill15q8Ct6k14sp7Fjx0ZLLrlk9K9//avRdLoJ
fY59x0UXXXSATv7666+3nbW+oBfb6VDizjvvjLbffvtoyimn7LRN1pBCofoT
vcI555wTrbrqqgPGYdakhAgJe0i0rc985jPR5MmT286OEKJHueOOOwbMR1nX
0Ucf3Wper7zyymimmWYqLZ/96Ec/cmPimmuuGU0xxRSd71lwwQXdGgRrD6xL
bLHFFtFyyy0XzTDDDO73pZde2smP//nPfxr6ot6iF8uJd6688srRlltuGfzd
bfPuu+9Gn/rUpzrlzL9FPr3YToci2Kxb2R5++OHB3qv6E70Edktf/vKXO+3w
3nvvbTtLYghB+5pxxhk77euUU05pO0tCiB6FM7tFdfKnnnqqtXxiv4xsduaZ
Z9Z6z7zzzttZr0w7q8wYeuONN0ZzzTWXuxf7gH/84x+10u03eqmcOGeNncbl
l18e/N1t85WvfKXTv6RrlKeX2ulQg7HW2iZ71k2g+hO9wMYbb9xp64888kjb
2RFDjDFjxri2Ne2000bPPfdc29kRQvQo7EMU0cfnn3/+VvO54447RnPMMYc7
l1OVV199tfM92Kvl8eCDD3b2cbDtHy70YjntvPPO0Re+8IXovffea+T9bWH2
65xnFOXoxXY6lPjVr37VKd+f//znwd+v+hO9wne/+91OW/zjH//YdnbEEIP1
ds7gyI+rECINs52db775oltuucXtRVx11VVOFkMGw8bmggsuiK6//vpW98gf
eughd7bxJz/5Sa33XHbZZZ1597DDDiv0jO3jcD3++OO10u8XerGc/vKXv7g2
gN3rUGKJJZZwZTbVVFO1nZW+oxfb6VCCs9xWVqeeemrw96v+RK/AWQlrV/iz
FUIIIboJ/kWZg3o9zg3nCj/96U+7fZU64LvO5l3O0ReBvVl75pJLLqmVfr/Q
q+W04YYbRjPPPHP0wQcfNPL+NsB/nXTyavRqOx0qXHTRRY3q5Ko/0Svg01A6
uRBCiLYgvk2v+xklbihnidHL6/LVr37VfS/v+/DDD3Pvf+ONNwbY79988821
89AP9Go5cZ6c96MrDBWkk1enV9vpUKFpnVz1J3oF6eRCCCHa5Otf/7qbg844
44zonXfeaTs7iZx++ukuj2eddVat9+AjzubcVVZZpdAz11xzTeeZz3/+80Nq
fzaNXi6nl19+uVS++gHp5NXo5XY6VGhSJ1f9iV5COrkQQoi2IN4zeoDNQ+xV
YBt89dVXu/jJvcL666/v8vfoo4/Weo/tsXIVPZdODC575rzzzquVfl2eeeaZ
6J577nHyQpP+uXu9nPB9gA+EoRKvPE0nf/LJJ51OhF+Ha6+9tpT+Qf/F9oX6
+8EPfhAde+yx0a233ur8V2dBH+NcJb60DHzE4lMCO+GsMq+aZlV6vZ3mge+O
Aw44IPrpT3/qfCUUZeLEidHaa68dffTRR52/sX/MuF2lrQB+M/Engt6Nf3X8
iTz//PON6uTDtf6q9rGm+1db+eJ5Yo+x9n7wwQc7HwZxH2svvPBC9Ic//CF6
8803q39gDlV08iptoM4Ym0e3x2B47bXXXIx3Yhga//73v50/s4svvjj63e9+
59bSi9JGO2R9kLpkjDv//POjG264IXrggQcy/clWeca+jXzlgd0Q95177rku
Dfw8vfjii7nP+YScK6p8b0hClEeTfU+IujAP+naA/kWsTsZZvy+3AePp5z73
ORc/oq4euuuuu3a+b9KkSbn3+3GAQsbmLQv2Ab5fI65ZZpnF5Ym5LzS9Xk7M
/U2et3jiiSdcjIGvfe1rzif64osvHi2yyCLu3/zdzr0SQ5k4ZvzGPQsvvLD7
97e//e3Ou5BJRo4c6eIuL7bYYu599K2bbrqpc09cJ2feMfsV/6IfFIkFh+xK
XhZaaKHoiCOOcH60kFE++9nPRgsssEB0//33D7ifeXufffZx32FpEQuIOXCP
PfYYsG5HDKoQaYag19tpGvjKXGONNaJpppmmkx98iX//+99PlR+RP4g78KUv
fanzDH0f+Yp4FPjaqNJWGFPRwdlzRt/98Y9/7HyLbLnlli7uJHEumtLJh1P9
1e1jTfWvtvN13333ubGT2M0HHXSQWwuinZPud77znejSSy91NhSWD/6LLrHZ
Zpu5cZQxlbRZp1199dUHvPuQQw6JvvjFL0ajRo1y9zEG8+8999wzMS9ldPKy
bSDEGJtH2brApyJ/t7nJyoj56sorr3T34Iven+P4nf9iU4mvVf7f4iAwN/Lt
2FzOOuusLo6IfRO+WanPNJ/jbbVDfBzvu+++0XTTTefqn3GFfSniMpLW5ptv
XvuZpG/Dj1Maf//7392ZUmRevmn//fd337Tpppu6vYill156gPwQJ/RcUaWM
QlK3PLrR94QIAT7V03Ryuxjj/vrXv7aWxz//+c8uHyussELtd6FTmT1A1tlF
1g3p88wpzOdtnVkk/i5rnMxn6H+s4z322GPRr3/96+iHP/yh+w58doeun14v
J2u3TcrllD06gC9XoK/EYyLffffdnXuQTZAN4mXG2izlw+9XXHGFm+N8TCen
njfaaCM3x6CvsN6P7DnnnHN28sAcxP55GhMmTHByyGqrrTZo/fo3v/mNewdy
pG9zwjzLvOz3e+YsYlP5MqfJxPF19SpphqDX22kSJ5xwgpNj2ZNGfkVeQJ/I
2i9G/mWdB5nEl/9Zq6MMqrYVYoFTx9yH7hOHsXf22WdvTCcfLvUHdfpYk/2r
zXwhRzPmcd/tt98+4Df2ni1d1kCx2Zh77rndv9Gr8THD2unuu+/euQ/fBD7k
9dlnn3V7D9SZ3bfVVlullkURnbxKG6g7xuZRpS5Yj3v66aedjOGnj05n6wr0
S+Ys/j799NM7WwZ0JC78M6J723NzzTWXWxdhnmRfnPfzjWbnyMV4gr1fyPKp
0w432WQTN5bG1/d///vfRzPNNNOgNlXlmaRvS9tPIL6QtfMk+YY2bz4u0TPj
6z9NzBVVyigUdcsDmu57QoSCPrjmmmt25sW0a5555hmki3QLxgHyQL+qA/ZV
9j3oQNir2IVOiy7FWUXWuZlbvvnNb7r5p4l96KIwFrJPleaPGPs+1q35nlD5
7IdyQn8gf9ggNc16663XKY9jjjkm8R7iJNs9d955Z+I9K664YrTNNtsk/mY6
OfMeOn4c5AzWpCyNtH0e7LhGjBjhdJc0mZK9DN5Bv/f55z//OcAWg/n75JNP
djIZewyMAfzdt0+sm2Yd+qGd+iAr0Z8pJ/LuQ35tDEZmTWPy5MmdvQku9jzi
8kPRtoKdJ7Ib97CfmAbydRM6+XCsvyp9rBv9q418obNhm8Hv7HfFwYbU2rql
i/zNOOqfWUAuSdPJfdCj7b7ddtst8Z48nbxuG6g6xuZRty7ef/99t9Zl+frF
L34x4Hfstnh3khzCWTpfVqTPxkFPotzsnmWWWSYxj91uh7/97W8z2w1r/7RB
/xxnlWeSvo11ojisO2H/yO8bb7xx4vsBGcPeg21JEqHmiqrfG4KQ5dFU3xOi
CV566aXoyCOPHGCnGL922mmnVvJm8Wv32muvWu+xtV4u7FOYf+3CPusb3/iG
W2tlbD/66KMD5b46pndm2eQANnTsM4XaM+6HcmJdnPwhnzXNdddd1ykPbEaS
8G1qk2Knsy/Oeiz6RhJFfLxxJs/XYZLAloLfV1pppdT3fOtb33L3ID/G84O9
sqVx2mmnDfgNXYj9jfg6dN00q9IP7dRnzJgxnfxyBi+Ov4+XdV4I2z3u4bvS
KNJWOJdk74nrFz6cs2tCJx+u9Ve2j3Wrf3U7XwceeGCqDmjQBvg9z3cIv+fp
5OwTZo3RkKeTh2gDVcbYPEK0EewULF/IgWbLha6F3da4ceMS34sfCnsOvSYN
ziLTn+3etH3ibrZDbKBNP0uC9DbYYIMBvo+rPJP0bezTxvHtFfLiQmIfyX2s
4ye9C0LMFXW+ty6hy6OJvidEkzCPMHdxbiSuk/O3bvly8DE75bQ5oSisjdu3
YHOTxOuvvx6ttdZa7p51113XzTdFoS/jewI7miIxffJAHmGsKwJ27NiQhVir
bKqceIbzXcsvv7zb9+JsD2Nk0npxHshDpM05saZhrPbtd5Ps33y/DHxXHPZ1
OH+VRhGdHJnUbOSx5YrDOrCdE+Pc3vXXXz/oQg/z+zb6lo8vk7InlUeINKvS
b/3ZlweS8uv7LstKL0RbAex/+R37vSya8vHWD+OMT6j6K9PHutm/up0vbJzt
tzTbIqt7riT7IYOz6Hk6+dlnn915V9oaT55OHqINlB1j8wjZRvzvQxcDfEuw
Zpbly8fGGnygZOHbk1G3SXSzHY4ePbrzd+4rQpVnkr4t7sPw4Ycf7vzGuJWn
Gx533HGd+9NiBIeYK+p8bx2aKI/QfU+IbsGZZf+siV30k26DH1bSPvHEE2u9
BxtvW1vIsn/EFo5zU9ybtp5uYPt/6KGHOhsC/KPY/MBcUQfWRljvw96uCPjO
JF3Of9aliXLCvo35mrNdzO28F70ae1Se/973vlcqj6xn8hxttBv4Zxv322+/
Qb9zjsnvJ/gI9mE/P8veoWgstJlnntndl2QbiY8BS5/9GmTevIv68CnrdzhE
mlXpp/4M7EVjK4ev2iRC6uSQ1VY4o2dp0XazaEon74dxxidU/ZXpY93sX93O
l28zm7TnHL8nK0+caS2jk+ODrEoZhGgDoeOthWwj2Eua/srYx1oy5wvybC/M
RjpPJ8c3n+WV8SmJbrZD2oE/b7MmkeeTsMozRb6Necd+y1q/N3x7bdakksbQ
EHNFne+tQxPloViHop/xbQvtYt2x23DGhbSxD64Keyf2Ddgx5bHccsu5e/Hb
kgV248z1jAfIgOZroq4Mb/lF1y4CayjcX3cvqIlywqYJm2/OBsVh7QEfr7yD
uCVFwX8ozyAvdANi3Phrtr49AnWNf2pfL+fcq4EPHcona5236Nxp7Stp7mTv
x9LnLG4Vys5ZIdKsQr/15zzYq2ANIKROntVWsNuztPLswpvQyftlnClKmfor
08e62b+6nS9/TzbNZ5/ZJ6HzZe3TltXJ+f8k6sjsRdtAaL0gdBvx38eFH/w8
ODtXRCfHtsB/d5KPom62Q8YF7PLjcu5SSy3l/M4n2R1WeabIt/nn7fGdlwdy
hZ9+0rgXYq6o8711aKI8pJOLficef4t4k93G1suI11MVxg77BuKI5mF2nXny
VZxQMjzyB+MoZ/yLYGfPk/yZlqGJcsJHCDorsSySsHVYZOai2D55k/4+47DX
bd/q73nj9w27OeQLi6lBjByDffU8vYf4aEXmTivvpLmTdCx/Ve0lys5ZIdKs
Qr/15zRox5QhZ/V8fzwhdPKstoJPN0srzw9FEzp5v4wzeVSpvzJ9rJv9q9v5
8tsV9tFx/HXQNFtUI5ROjh+DsjJ72TYQWi8I3UbQwXwf8r/85S9znymqk+MH
z5cnk86Bdbsd4t+Osy5+3dlFDDj2O0I8k/dtxPuz3/C1kMebb745IF1sn+KE
mCvqfG8dmigP6eSi34nHyHj11Ve7ngfb08nyDZyHHy8lby+ZGB92Lz5JyhBS
hscOjqsI+NRkXK1LE+Vk9mrYnyatqfo2R7yzCHbWKMuvS2jOP//8Tj4tlg5+
TJnHiLEL6OL8js8hYvUg37CvnuVDC4izW3fuxN+C5e/GG2+s9I1l56wQaVah
H/uzD2fZ8OdP/Fj2oWgntOUiOp3txdVpK75dYBu26/0yzqRRp/7K9LFu9q9u
5wvbUjtTwNo/tk8+2KvyGzGM8sbPUDo5cSiLlkHVNhBaLwjdRtC//LjW+L1m
LsuiqE4e15vidQ5t9Q980CFjxmNmccY6rS7LPkPclbRv89sesSbyYB/YTzNp
PybEXFHne+vQRHlIJxf9jh9XMi1+hQ/9Ih57uS62p1KkX6aBTSPvIGZjnp8g
8+nNVVbPDSnDE/OUM+XoglngL5X78EdVlybKCfkXf05J8Y/h6quvdu/g/FpR
H1yUDc8kxdBpCmQV9uFMNyC2M/4HOaNm+P7XL7zwQhczIG+PByz+Zp250087
LR5IHmXnrBBpVqEf+zNg34rvJNZs2M/15Zii55HZl6jbVi6++OJOWsg+WTSh
k/fLOBMnRP2V6WPd7F9t5Is6w48p76Fdc66AM3PEI+Jv+B+M+8JKwnRy3pFG
EZ3cYgNmlUHdNhBaLwjdRpiviF9tayJc7JFmUWWfnLk0ibb7B/M8PgPsm7jS
/AeUfYZ4Xmnf5schwF4jD98nCPJIUnsLMVckUaWMytJEeUgnF/2Ov16aJuvA
s88+68Zj7sOHY10f6T6TJk0q3C+TYC0WnZV3FInfilxg38yZmTKEluFZh8Dn
Spq/S873zzbbbM4ncV26WU4+5n+5yLlSw3za7bHHHpXTrQLnmuybsd+gvlkf
MNjPsRi16DrYX7FmkofF6a0zd2IHaHljr7CITUv8nrJzVog0y9Kv/Zm9W1vj
TPJ1XlSnw+6ibluxuAVcxGvIIrRO3k/jjE+o+ivTx7rZv9rIFz4AKFP8t6Jf
Ee8UPZfYaFl+1uMU0SmK6OR+HSaVQYg2EFovCNlGjjjiCLcuge8T9GezVWas
wf9lGkV1cpPluIhdlUSv9A9/3CvqyyjvGYvJlvRttHf7rcj5Gt/3WpoP+xBz
RRZVyqgoTZSHdHLR67DXlxZHk/iR1n7987FJoBPavXbdeuutQfKIz0/elxRj
qghXXXVVJ09J59biYJds92ObFictliqE1smZ17EtRc/DzxE+6Fkb4TtsTZ91
bWzC6tLNcjKwqyBuN3N/mTNJ5I90iX+RBjIE8hN546xpCPA36q/F4vskjtkv
sh+XFtMzDvuFtp6VRd7cafFIuWgfWbELqZ/4HmmVOatummXp1/58zTXXdPKR
5D+8qE5ne4J12gp2wyavcbEXnYbvDy6ETt5P44xPqPor28e61b+6nS9kD+Z0
i7lVB4tjzjyZlo8iOrnvyyppfz5EG2hCLwjRRvBhzjly3++aH28kSwY0nRy/
KFn478MPSxLdaoeMgayZJ/mZA8Z8ey+2mlWf8SE+Y1b7Ml+WXHnn4/24cmkx
XerOFXW+N4T8Fbo8pJOLXgbbE/QKxlPWp/05xOZL2i5jXt55Itvn86+i/smK
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
2267re1siSGExg8hhBBiIOx1XnXVVdFSSy3Vkb8WWmih6Kyzzmpdd7zyyiuj
mWaaqbQO8qMf/cjN+WuuuWY0xRRTdL5rwQUXjLbddttohx12iLbbbrtoiy22
iJZbbrlohhlmcL8vvfTSTkf6z3/+k5vGd7/73Wi99dYrlS/eu/LKK0dbbrll
qed6nXfffTf61Kc+1Sln/i2K0Y22GhrGjBlnnLGT11NOOaXreRDNQh1/+ctf
7tTxvffe23aWxBBB44cQQggxkD/+8Y/R8ssv35kbp5xySrcv3YacHwcbb/SP
M888s9Z75p133s56fNp5bmSEG2+8MZprrrncvdht/uMf/8h8L/rShhtuWDo/
nLWeeuqpo8svv7z0s73MV77ylU476oX204801VabYMyYMS79aaedNnruuee6
nr5ono033rjTpx955JG2syOGEBo/hBBCiP8DW1hkf5O5Zp111uj2229vO1sd
dtxxx2iOOeZw586q8uqrr3a+D1vMPB588MHOXuU666wz4LeNNtrI/e3FF190
/z7ggAOiPfbYw/3/a6+9Fm222WbRt771rUL52nnnnaMvfOELzv59qGD265x5
EOUJ2Va7Aesu2NHLn9/QBVsga5Os3woRCo0fQgghhjvss+25554DzgqyH/3Q
Qw+1nbUO5IU9+5/85Ce13nPZZZd1vvGwww4r9IztVXI9/vjjnb9jR49NPzZ3
v/rVr6KTTjop+ulPf+rS+NznPudsjYvuff/lL39x34fd8lBhiSWWcGU21VRT
tZ2VviRkWxUiBJyZsPb1pz/9qe3sCCGEEEIMCfDJtdVWWw3Qx7Gj7qX9ceDs
7Kc//Wm3d1iHXXbZpfOdd9xxR6Fn2L+2Zy655JJBv0+aNMntic8333xOJ1p3
3XWjm2++uXTesHufeeaZow8++KD0s70Ivuukk1enibYqRB2233576eRCCCGE
EIE58sgjB+jjXPh36yXwZc46AXp5Xb761a921h2KxHV74403BpRNkq6NTs45
yy9+8YvRl770Jff/VXwSs6dOGhdddFHpZ3sR6eT1aKKtClEH6eRCCCGEEGG5
7777nL7ky/G9GPP79NNPd3nD73sd8BFn37nKKqsUeuaaa67pPPP5z39+wB42
8cW//vWvOz/w559/vrNdP+aYY5zNMfcSP+7iiy8unL+XX365VN56Henk1Qnd
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
jl0Q+iU2QOPGjUt8L75b7Dl05jQ4f02/tnvT9oq7OZaV7bN1+nje+AG+vUJe
fMgllliisyac9D5s3vmdcTSNIvOTEEIIURX2NeM6OefbkmCPJn4vfk+6hdly
p8k7RWHvx/KPDV0Sr7/+erTWWmu5e4gxjizVbZBlSR+bhCZBNmK/ysokyWaR
vQr7nbN+cdiP45xgGkV0cnQJs5HHHjEO+yd2vo9zAddff/2gC99JnF20vOLn
KI6vS7CfmEWoNKvSdFtFXscnEvadRWKsFcUv47gPMhg9enTnd8ovBL4cn1RW
vt+7Ot9apv1A3TaEfbP9Pc1GxeqfK8kOxeAsep5OfvbZZ3felbXOk6WTh6qL
smWdR8j+7H8j+iccddRRbu0sy9+JjXH408jCt02ifpPo5lhWts/W6eN548fD
Dz/c+R37oLx1meOOO65zf1Ic1RDzkxBCCFGH5ZdffoCOzTpymh+3X/7yl4N0
8rp+zMqAn2HSPPHEE2u9B787vAfZI8vGF1sBzgTm7Rc1BXscpM1Ztqbxz6Tu
t99+g37nLJ5f7/h29mEvP82PDhSNhTbzzDO7+5JsWn/961930mefDV0l7+J8
ZJwy/qJDpVmVJtoqZyEPPfTQaKeddnJ+qkxOD+kjIq+MWffz2xP6TV0fedhI
Y7uLT+ckmtDJi/gbr9uGfJvZpD3n+D1ZeeIMbxmdPG19Nq8cQtVF6HhrIfsz
86Tpr/Qh1iU5Y5BnJ2N20nk6Of75LK+Mi0l0cywr22fr9PG872L8st+z1oIN
336ddan4WBpifhJCCCHqYDZbds0222yp98bPwnFh594tOMNFmthRV4U9Rct7
kdhkyy23nLsXv0TdBt+vpI2c1zTEJvL3HfwzfuhqM8wwwwC9nDPLBj4JKJ+s
vYqiMo/540mSedizs/Q5R12VMnJsqDSr0FRbxQ82ehdyKvt5Vubd1MmxV8bG
Nz6eLLXUUs6HdZlz5EVgj4v1hzZ08rptyN+PTfPbZ3Yu6HtZe7RldXL+P42q
+nKZugitk4fuz/77uPCFnwe+Govo5NgX+O+OnyeDbo5lZftsnT6e913+eXt8
5+XBHOXngbPoPiHmJyGEEKIOnB/256q088Rgfs/9C12tW9ja+PHHH1/5HcgC
lnfi5OaB3+IQcnwVbJ+8qv/psrDXbd/q73nj9w1bR2RCi7FDbCODffW8s8zE
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
Cwbo5P3ui4/Yp8STwkeWqIevk+NfRXRXLnj44Yc7aS200EKNppVE2b6k8b5/
kU4uhOhlpJOLfqRJnUQy2tDDH+e43nvvvdxnJk6cGK299toDYpe/8cYb0dVX
X+18b1x77bXRBx98EDyvxI3i3CP+r5L43e9+5/y58h0zzzxz4fdyThdfWz/5
yU+iH/zgB9Gxxx7r0iB2S95zN954Y7TOOusM+Dt+bH7/+99H5557rrNDePrp
pxOf556zzz7bxZ+74447Cp8X/tvf/ubSZV4iXtkNN9wQPfDAA4Xqrgzd1sn5
Jvy7//SnP43+8pe/FH6uifb48ccfR7fccosrY3y84l/m+eef76pcQHlYWiec
cEKjacWp0pfSxvsnn3zSlVuVuqjaN8tg48qDDz7Y+Rs+oVmvZA36X//6VyP5
41nijuHT4+CDD3bnJeP+1Tiv8Ic//CF68803q39gAcrq5FX7ap2yLkM32k2c
1157zcV733bbbTt/+/e//+3OoBBXgT718ssvF3pX1XKq891V5pUqz+TN4z7Y
BnEfcylpXHXVVdGLL76Y+5xPyPmhW3OvQZ7pX2+//XYj7/ep0qeH2tzLeHzk
kUe6OBQrrrhi9PWvfz1aeeWV3fh83333BUun2/075NjURv6hat+rmmaItl1V
JynCcJLRhhNFdXLmQvxEf+lLX+rcS5+mje64445urcZ/z+c+97no8ssvr50/
+sU+++wTLbLIIplxoeinvp9qYnltsskmg67f/OY3A55D3l144YXdPiRx4S67
7DLXrvCptcACC7j4VD60M8pshx12iL7whS+4tKaffnr3G2Maz84666wDymKK
KaaI9t57704b/e1vfxt99atfHXAP19xzzx3dfffdqWWBDcO+++7r4mchQxOj
Ez9sFrds8803r1vcA+iWTv7UU09Fa6yxRjTNNNMMKDPicqf166baI+spyAGf
//zn3Vz84x//2Pm323LLLaMZZpghmmOOObqmk5900kkundlnnz166623Gk3L
p2pfio/3jMvINPF2XrQuyvbNMiSNK8QAQweg3fMN9vdll102eP6Q7xZffHEX
r/mggw5yciftmXS/853vRJdeemm0yiqrdPLBf5kvN9tsMxdLfLHFFnPpzjff
fNHqq68+4N2HHHJI9MUvfjEaNWqUu2/BBRd0/95zzz1T81NUJ6/SV0OUdRnK
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
v/3tb9FBBx0ULbbYYtHUU0/tym/eeeeNjjjiCKf79iL//e9/nU3YoosuOqA9
vv76621nTeTQr2OhEFkwVn75y1/utOl777237SyJIc6ll17q2tq0007b6tyH
3DfXXHO5vBx//PGt5aNXwGbdxoHDDz886LtV56IfYD6cccYZO/3glFNOaTtL
g+j3OZv8r7baagNk6TPOOKPtbHXohzbQS1BejKUzzDBD9PWvfz1accUVo9lm
m21A/W600UZO/+1V3n33XbcuZPnl36L36fexUIgkbP+K65FHHmk7O2KIg100
bW2ZZZZpOyvRFlts4fKy4447tp2V1sGW3MaB0Pqq6lz0C+zV2vrRc88913Z2
Eun3OZu9U19n+9Of/tR2lgbQD22gVzj11FOdvw72yQ10Jc4mfPazn+3U8WWX
XdZiLvPhPJXltenzVCIc/T4WChHnu9/9bqdN//GPf2w7O2KIw/xNW1trrbXa
zkq0yy67uLyss846bWeldTjXaeMAZztDojoX/QLy+F133dXTfp76fc5m79nX
yXutrPuhDfQDJ554YqeOe328Nft1zieL/qHfx0Ih4my33XY9u14thh69pJ/1
Ul7ahn0NGwfY+whJL5VzL+VFiCr0+5x9+umn6/zuMABfaVbHq6++etvZyWSJ
JZZw+ZxqqqnazoooQb+PhULEwb+T2rToFr2kE/VSXtrmoosukk4uhizPPvts
21kIRr/P2fhZ93Xyf/zjH21nqRZDqW2FBF+eU0wxhavj/fbbr5U8FK2bJZdc
Ujp5H9LvY6EQcdSmRTfpJZ2ol/LSNtLJxVCFmFtDySa13+fs8847b4BO/s9/
/rPtLFVmqLWtkNx+++0d//VttNMydSOdvD/p97FQiDhq06Kb9JJO1Et5aRvp
5GIoQpzpT3/60y4+01Ch3+fsCy64YIBO3q9+rodi2woJse+o35NPPrnraZet
G+nk/Um/j4VCxCnbpm+88cbogAMOiH76059Gf/nLXwqnM3HixGjttdceEHv0
jTfeiK6++mrnU+raa6+NPvjgg8LvI7YGsQ84m3bwwQe787BxHw8vvPBC9Ic/
/CF68803C7+3DlXLBkJ8D+8gRuNPfvITF4v52GOPjW699dZC8UHxm0r+0cfO
P//86IYbbogeeOCB6L333iv1HXmE0oloR5Tx22+/3Xpe8uiVPgMff/xxdMst
t7h6xr86vt0499cPOjn948gjj3S+Vom5Q+ydlVde2fWX++67r6t5qQsxmzkL
9+CDD3b+ho9n9BX2d9JiuHezj7/22msuDuy2227b+du///1v5//q4osvjn73
u99FL7/8cuFvrpN3gz3V66+/PvrFL37h8nbHHXdEr776auK95A/f2dT3zDPP
XDgNqxvy1iRVy6Pf5VB/rOHKm2OaGAfzyGsDVdsWVKl3nqHvxn2l4Y/u97//
fXTuuec6+4Onn3468XnuOfvss13cOfpM07HJfvvb37r4YsTz6DZV6iZNJ3/y
ySdde60qo9Yd77KoOofUzVsvyd7d0l/qlHURmm4rSYSe3/tBpukHirbpp556
KlpjjTWiaaaZpnM/Z4W+//3vp5bdVVddFe28887Rl770pc4z1DnzKbGIWMf0
5+bPfe5z0eWXX56bZ+TvxRdf3MURPeigg5xeQTqMp9/5zndcPORVVlnF/dvG
WcbUzTbbzMUzXGyxxaKFFloomm+++Qb5HjnkkEOiL37xi9GoUaPcfQsuuKD7
95577hm0bEJ8jw/j38ILL+y+i1gzxB6hfROPZIEFFojuv//+xLTZo9h3332j
6aabzrUFYlNvuOGGzt6MtDbffPPc/Jehrk5Ef0Mno0622morVz98J/2a3zir
WHQca1o/66U+g+yGDv75z3/e6bE//vGPo6OOOiracsstXWzZOeaYo2d1csZZ
2rb/3UnXuuuu68qpybzUAd1in332iRZZZJFOnonf8uGHH7p8Wf/mWnbZZQc9
340+zlz2ox/9yI1HdhZ0/vnnd+0VeX7WWWd19qCWzymnnNKNUXk+qqvm3Zg8
ebKLY0cZkTeeRR786le/2ql7Xy6kDfv55Fs32WSTQddvfvOb1LoZP368++20
005zeWSsYU4gfb6FtCmbm2++2d33zDPPRCNHjoy+9rWvufUimz+Yc6688spg
5ZE0Z1NnpM28hQ9pfFbxX/JCHh966KHO85QjsZ9In28hrzxHPrsR+6uITt7U
OJhFVhvwKdu2fMrUO32Ostphhx2iL3zhCy6t6aef3v2GrMxz9Ee/HOizxJ60
+QXd2PqIf80999zR3XffXau80vj1r3/tZKui66QhqVo3cZ0cnYB+ES+3ou2s
7niXRt05pG7eek32blJ/CVHWRShbH4cddtiA+cjKivHf5hn80TPGk3fqi9/5
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
4VxcnnzEepiNL+ZvqSjY8nEGjudZ58WGp87+aS/1Gc4QWlqcQcwipE5et86B
tk5eWGPBzol1c97DGSrey7hc1S926DovSxlfsW32cdvrypuz8eFj7/f9HNfN
u3+eIm1vJo86Onla3bC+ZPdMmjRp0O/4V0vy71W3PMrkkTN6dk/SWgXtnTMB
nN/sNqF1csiTHcpQtH8WbVsh6r3fdHLgrJHv2+DQQw9tLK04TejkkNXOQvXv
IpT1N143b70kexcth1CyWBNxLkK2lZdeeqmjv9LfOCvAOYM8G4y687tPP8g0
1HHe1Qv27lXbG2uGvmwSQr8w36Jp46i/HpSme5mvKtpb1hpR2XEh61xenKJl
U/d7WD+05/ErVBbsdbBv8ds3F3vO+G+s2z4592F+PpD/0KvK7EuiO5mfH/w6
psG6mo1HnLGpAnIK+17W/sraWReh233GzmNz5e03h9LJ69a5wd4nZWV2bvhs
RQ/nTDz6ND53mHfq0I06T6LMmNtmHzffUnlztr+fzWW20HXzjm8lez7J/3UR
mtDJ/X6Fz0Afzu7hLzapXOuWR5k8+rafSX0fH7f4X2+DJnTyPNmhDKF18hD1
3o86Ofg+vdgT6xZN6eRZ7SxU/y5CWbm9bt56Vfbuhv7ShE4euq347+PCViuP
uvO7T6/LNPh0jN+fdOE7s23MjrNoe+NcAH50sEvyzwyF0C/yxlF/Lk/yc4Jt
lP2eJ280oZOXLZu630Na9ju+s6uADstedPz8Fxd+Sov6MM8C+3P2aTkXQlso
asPmn9/Kkh14N/fgT6QsjC9mm4MPiib2jdrqM+ivlhaxIrIIbbtetc4NYmTi
LxT/oJQB68DYA1NX7EOyx1013kU36jyLMvNXm3286JyNvxz/neaLr27eOW9h
z6fZS+bRhE6OD2E7Y8c84q8D4us6fp7OCFGXUGTO5ky77VHiB8iHtU7OJftx
ZLuJ+QexK+vcXyjZoQyhdfIQ9d6vOjmxqy0t9lG7Rdn2QNzAuu0sVP8uQlk9
sW7eelX27ob+0oROHrqtoKf6vuSJCZxH3fndp9dlGr89ZV1VdIjQEPehSFly
RoA1BOKFsgZDG0BGLtKmbT2q7rzK2f1vfvOb7h78RsVjESMP8Rv+gLL8WUHI
caFq2dT9Hvw3WBpx30ZlwZcDOlw8rgF7nll1WwazOWEfqYj/BfRIy0eSD1nD
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
cuEnQ59++qn6jhjlGvQsn915551W06HL+uWXX3Y/Y76AMQDzTsRO94P1e/bc
4zcefY8fRuohqr2yzk8MYHO+4a+//lL6+Y477nAeeeQR57PPPqts+iGNTGd5
pw35pFzxf4sMEYMkLmnzGpc06QrSqW+88Ybqn9K02SzykJa07+R31InXNyQ+
lTjrgi5kXY2YtH5wzw033KD2N7KmovfihGGj3aaVwTJIY5NTJ/369VMxfN59
991Yv7Hd91CX+DRmLQP/I5w19Pqo+/jjj9VZwO+//z72c7OQplw0tvJTRvu2
iTnu5oqjf8sY13gJG8tl0Qd10p1596EmHTp0UG3ES5VscjMuG+uv+A2vqv/r
tLorj7aHz75x48YpOcK/Or7diNeUp01+3333uc9mvDVlyhSrz7dBUj3SKOPH
pDCPe9JJJylfAIxviJvHfAtnESiPAw88sMn9yPCJJ57otGvXzpWBUaNGBT7/
22+/dU444QRVF8R5OOWUU1S8kE6dOqn4c5tuuqmaOwkC2x0fGCussIL7PsaY
tJsePXqoORezDyQemWkjZ+XJJ590fSV4ue6665S8cO5Gs9Zaa6n7L7nkkszv
9itr5lWZ3zjmmGPUu/XnxE73wviHMl977bVVmROzDTmcZ555VNwNry9G+p7T
TjtNnYdnXwDPZW8V8krf1rZtW7XnRL+TmOz77LNPoL/WotOvSSrTWd5pUz7R
02b5kt7999+/2fXQQw9ZyWtc0qQLvDoV3bfeeus1KY8kbTatPGQh6TtpK/QX
3bt3d/fMLLDAAuo7bGF+Szsy809bQ0fqfuHhhx92Vl999WbltMwyyzjPPvts
szTabLdx65qL+UfGauwVwh8L/66xxhrq3cxlag466CAV14RyJI3IAL/DD03W
2EtJbPI333zT2XnnnZ155523Sdkfe+yxvn1yXn3PCy+8oMqBc06cfWLMxnto
J9QL87nbb7+9qx/5l/HHAQccoMps/fXXV/K44oorqnUskzPOOMNZfvnlVfly
H/0Rf/ft29daudjKj5cy2rdt4trkZY9rIM5YLq3uhzroTiiiDzXB5wCxevyo
ik2u15u8F3WJvVkV0uiuvNoe8xXY4Ph83m677ZTP+vPPP1/FR27VqpWzxBJL
5GKTMwdgzp+wv4Hn0+/SP3Tp0kXJHLZYWaTRI40wfkwD5YAMe/2XMc+40EIL
Kf1mgs6iDMwy8fN9BozL0IXcg57zQux6rXvpG7xtiPMRu+++uzu3otvb9ddf
r8Z+nHVhvoOxypJLLuneg63PXIoNkBGeSVl42XvvvZ1tttmmyWeMTbif9pgV
v7LGpt1hhx2a6CAtt+Z80dixY5Ws4Z/OOy7QeeIZZtw22uxRRx3VpN/DXwTt
mvzQL6J3SAN51/csvvjizvTp00tPvyapTKd9p035ZJ8A49att95a2Uz6PuYq
0EPYNOhd2gtzuFnzGpe06QKtU/ndfvvtp+bf0rbZLPKQljTvZK2F9sK+Gp03
bBX0W/v27VUZkU/mIbGj9biPi/6BsSDrVbwb/cma98Ybb+zeQ3/vTYutdpuk
rjlryJo8Y2hzDMPY1pyjBMYMrJHqWDC0dfbHeO9LQ1ybfNCgQUo3M56kn8Ee
wabVv0UmTfLqe6h3XbbM95qwzqOfw9oeayu6/8SuprzoM/v06ePe523f6FD8
57Bmrfsirs6dO1spF5v5MSmjfedBHJu8CuMaiBrLZdH9ddGdkHcfasIaLnYB
MuBHVWxyYH6DuvezzVlfLJs0uiuvtjdz5kw1ruU+vz2y77zzjupv87DJvTpn
ueWWU/uVJk+erOZLmaelTTEvQKzGokmrR+o+fkwDbc6vX9dQf+g9774f/JZQ
77o86P+90P/i+4zvO3bsGJgGHT+Mizl2P/CtZupf5rK8+xUoZ1N/hK0LJIH9
njyPvsuEtV7aNTElTTjHEZaXpHjLGr1xxRVXqPczr6Pnx8y9qpwJaN26tZqX
ChqnspbF73bZZZdm32lf8vpiX4wXdCB9mb6HfFch/WllOss7bcunLhN0eBhp
85qWuOnSaJ1Knxe0vhunTLLKcxqyvpMzGnrNmov5cj/Ya6Pvoc+gTr0gS5ts
sol7X9CcsM12m6Su2Yepn8d+0SCwzdGZtnQjRNnkjMHIL/Xo9bv5/vvvu2OE
oHzabNvMjWAXcA/7xLwwdtHv0voQG5x5X/bpavDlHWSTmzBm1ff17t3barnY
zE8Z7TsvkuxdL3Nco4kzloMk+qBOurPIPpR5UeYIHnvsscB7qmSTa+hXdOwh
82JvfxnY0F022x6ygZ3PPdi/QTA/nodNbqaRduXnX/rBBx9072E+qyyS6JE6
jx/Twj5ybSf5wX4Oxlt+c3rsx9Bl4fVTAZzR0N8zRx6GjkNH2fs9C5hb5J4w
f32cV9DvpD5twFwrz2O+1gR9xOdTp05t8rm2yW3GKDfL+uqrr27yHXXEWpe5
x4C9X9y77bbbBj5z1113Vfegv7z7Rxk76/fRhoJgXpu+UN8btF+iyPSnlems
ZWZTPllDiqO3srTfNMRNlyaOj444ZZK1btJg4516r9piiy0W+AztQ5LLe3bS
xPQddeGFF/reY7PdJqlrvf7NxT7SIFjPwCa3GR8qyibv2bOn+z1nQ72Ya8l+
PjzBVtvu37+/ew/2hB96XY95/yAfG8D3UTY5az9B4zAb5WIrP2W077xIep68
rHGNSdRYDpLogzrpziL7UNYusSHCqKJNrmEugfrQ6WMPcBnY0F1gq+1pG8Fv
jsDElENbNjm+Ocw94djeQZg2WVnnD5LokTqPH9PSrVs3Nz/IVRLMsZDXlwt7
JvR37KGMOpPG2Wt9P2cg/IhTP/T5Wj7ZI2cD3Y68Pt44D+037tVjEHxN2MIs
a9YZwmDeW+8l5SzfyJEjm13UNWen9DPJoxddjuwtCYO+UD9nt912Kz39aWTa
RpnZlM+4eitL+01DHjZ5VJnYkuck2HpnnPJi37l+xl577RV4Hz5s9H1h52Js
tdskdY2Nrc8Kh43TDjnkEHXOzyZRNrlpb7AX1Qvn/vT3OkawF1ttm325+l1B
cTmoC31P0PlX0PE5w2xy9iwE2SI2ysVGfspo33mS1CYva1xjEjaW08TVB3XT
nUX1ob/88ovaN4peZp8QazZ+l7mmz94S87sqnHdFPsxzh0Hykic2dBfYanta
Vtm7HkYePt44x6Gfie+FsDkIzpTre71nbovCtk1exfFjFvD/Y/YfyHrcdh82
FjrzzDPd7zjjE4W5f52xBnOTXuL6xcefXxK7IQr8QfA81vBN8A/hF7sRvzrc
b/PcRhI/Rg888IB7L/OFjJuiLj//LHpfT9TYHl89+n1BvhSLTH8ambZRZjbl
M67eytJ+05CHTQ5hZWJLnpNg651l2OS22m3Sujb3NnJuycvXX3+txnKcdbZJ
lG5h3YKzMkH7LG3Z5BDVts19dn7rO957wnQl51yT2OToChMb5WIjP2W07zzJ
wyYH2+Makzj9c1x9UDfdWVQfavrFTnvhP6wK4DNEp4nxcdHY0F1go+3puExc
+D0IIw+bXK/Rx7G1ONOu78Wewadd0di2yaFq48csMKfCuXlv22euDh8+YWdo
wvS4eV4R30NREM/CfL/fmC5u/Wifcbb6Lub2dbrYGwr4euRv5li84O+W72zO
uSaxaVkP0ffiZzAt2s9K1NieeUqz7vz2pRaZ/jQybaPMbMpnXL2Vpf2mIS+b
PKxMbMlzEmy9swyb3Fa7TVrX5j5pv731+DkN2gOVhSzxyZlj13OoYeM3W23b
XN8JOlOq/QAxtxIWdyipTR52zt9L3HKxkZ8y2nee5GWT2x7XmNi0yeumO4vq
Q0eMGKH2EEVdps891n3M7/ATXQUmTJjgppH9+FUiru4CG22Ps5hh/Z5JHjb5
Oeec4z7zX//6V+T95j73sHhXeZGHTV618WNW2FPDGRbT34G+8IcXFOcuTI/j
Y09/x5mzKDgTYb7XjKOjiVs/SceSUTA/oNNFzAzA5yRjX8rOi9apYfHhkpJk
3HnyySe79zIvlpa4Y3t8aph15+e3sOj0J5VpG++0KZ9JZDht+01D0rZFbKys
ZWJLnpNg651Vtsmj2m3SukaH6z1izEua4DuHc4j4brIN++GT2uT4r6COOUNq
tpusNnlUmZljMj+/Vfhk1t9HzV/kYZMnLRcb+SmjfecJca3NdhV1DrmscY2J
TZu8jrqzyD40iiqfJ9ew10mnkbmGKpBUd4GNtodPN/0uv9hSJnnY5PgJCdPB
Xsw5n9tuu81KGpKQRI/VdfxoC/z+IF/e2Bjs0feTa2LeBelx/Nbr7+KcHzTt
Xi6/uFp67qvovou1cd3G9dl/fAXgZ9EL5aTzwJjXFkls2oEDB7r30helJe7Y
3juf4rcfpoz0Q1yZtvFOm/KZRoaTtt80JE0XsZSzlolNeYiLrXfquE9VtMmj
2m0aGTT9r5v2N/tDo87apcXsa6J0C74siKnE+hN+6VgjQ5dHjd9stW3OZG22
2WbqHnxde8ucvYd8RxsO8xUENm3ytOViIz9ltO88Mcuci3YWRlnjGpOwsVzS
99dZdxbRh0ZRB5vcnGvLY541CWl1F9hoe+Y53TL2rpvr9HFscjNGujd+YREk
0WN1HT/ahjlDzmqYMSL9zm0Q3yxIj5v+WFnHiMI8k4E/YL92xHxlWX0X/vF5
Jv6J8RlAGvzalJ4/JE5wlF+7JCSxaYcMGeLemyXmUJr1NuIfViX9JlEybeOd
NuVT3+ONvxeHuO03DUnTpcdVWcokD3mIwtY7dZyoKtrkUe02jQwSZ0g/87jj
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
qqu6aX/uuefKTpIghDJp0iRXXpdbbrmykxOLRu7D2bOu83Xuuedmfl4d67cM
bPQ7jSyXWahzn15VRNaERqJnz55Kjuebbz7nww8/LDs5giAYrLbaam5f8/ff
f5ednER07NjRTfurr75adnIEIZS//vrLldfVV1+97OTEplH78CFDhrj1ceml
l2Z+Xl3rtwxs9DuNKpdZqXOfXlVE1oRGAZ3wzDPPiK8JQaggeq8bZ7PrxiGH
HOKOPd56662ykyMIkWgfCLS7utCoffgtt9zi6o8rr7zSyjPrWL9lYKPfaVS5
zEqd+/SqIrImCIIg5M2GG26o+u/ZZ5+97KQkpmvXru6Y+u233y47OYIQCecR
kdf11luv7KS0eG677TZXf1x11VVWnin1G4869ztVR8pWEARBEOLzwQcfVOL5
G220UW37b/w0iU0u1Im5557bqs2Wtx5pZG6//XbrNrnt+i2DImSqzv1OmcSp
GylbQRAEQYjHsGHDct1XluT5de6/xSYX6oZNmy1vPdLoiE3enKJkqs79TlnE
rRspW0EQBEGIhhiXc845pxq7VeH5de6/xSYX6oYtmy1vPdISEJu8KUXKVJ37
nTJIUjdStkIVID4fMWrPPvts5/jjj3cuvvhi5/HHH1d+7PPiq6++UrFyDzvs
MPczfG/iC+COO+5wHnnkEeezzz6L/bzXXntNnZF8+eWX3c/w8XfrrbeqObJf
f/3V93dZ8v7ll186jz76qOqThg4d6owePVrF9Pj555+t3G/mizTF4ffff1f3
3nTTTeo999xzj/PJJ5/E+i2MHz/e2WOPPZw//vjD/eybb75x7r33XuXL5f77
73d+++23WM9Kk9+kpK13SFP3LVFus77ThkxRrvjtpL9ceOGFI/OYlDTPD+q/
33jjDTVmTdpeoChdnMYmR2b69evnXHDBBc67774b6zc29QlQPsRuu+aaa5wB
Awaoc61eH3Uff/yx8+KLLzrff/997OdmIU25aGzlJ63cFKGjNVn7Jq/N9s47
7yj/38ccc4xz3HHHOf/5z3+cV155JfQZWfVImrqO24fn0Vay6pI///zTGTdu
nKov/Kvj2+2jjz4qxCZPU79lULRM2bIby5TLonR40rqpc59uG5v1Xmc7pmiQ
+3XWWcdZe+21nfPOO88ZPny4kpt55pnHWWWVVZyXXnqpyf3nnHOO+nyttdZy
1l9/fXXx/5VXXtm5++671T349CWmQLt27ZwNNthAfc+/P/74o3Paaaep/88y
yyxK9ldaaSUlm9dee63Ttm1b1/cm16yzzurss88+gf76KPcTTzxRvceM60N9
osdpV/rzLbbYInPeNcQtPOmkk5z5559fjW2Jz7nvvvu6PkoOPPDATPf75WvU
qFGh9fjtt986J5xwgtI/5OmUU05ReerUqZOKubjpppuq+UI/kPdevXo5K6yw
gvs+7ExkuEePHmqOUX/Otcgiizh33XVXYFqS5jcpWesdktQ949OWKLdZ3mlT
ptDJZvmS3v3337/Z9dBDDwWmP4y0z/f23/QhjCfNfMVpL2nLOAtJbPI333zT
2XnnnZ15553X/Q3t4Nhjj/UdV9jWJ5oXXnhBtUHinZ5++unKPuA9lD/t7c47
73S23357t/3wL/3vAQccoOKx01dRtiuuuKKz0047NXn2GWec4Sy//PLOmmuu
6fZp/N23b19r5WIrP17SyE3eOtokS99kom026uiss85S9cSYnvaLzda6dWv1
/dZbb63sOS9Z9EjSuo7bh+fVVrLqEnwlY4MvuuiiznbbbafK+/zzz3cOPvhg
p1WrVs4SSyyRm02epn7pnxmD8lt8Z+Ori3/XWGMN1VebtvxBBx2kxqeUD+0P
nc3v0BFJYzUVKVOaILvxvffeU3kllpwee1MG/I0+Q67KlktbOi8Oaeqmbn26
7b7NZr3X3Y4pg7FjxyrZ2HHHHZvNiyOnpBt9wRyHBl1N22cOwswf5aH1CLbF
iBEj1OcLLLCAmg+jrLmOOuooZcPo3y211FJKhtDBrC/yfOyTvffe271n8cUX
d6ZPn94s/YwlKFczHfx2hx12aKLndBsz50XS5F1DO0Z3Mvdl8vzzzzsLLbRQ
s/iaSe/3y5f3tyb0N8sss4y6j7GVl9dff91Zeuml1fe0EVPfM0+y++67u3OJ
ul+4/vrrVX929NFHq/k92v6SSy7p3kP7YO7Qj6T5TUqWeoekdd9S5TbtO23K
FPsE6KMZhzHXoe9jroK+krHVsssuq+SbOdCkZHm+7r/53X777af6izTtJU0Z
ZyWuTT5o0CA1hmKtDL1BP0u/r39LXk3y0CdAP6zr58knn2zyHWtM+jlPPfWU
WsfT+pCxx4wZM5QO7NOnj3ufV9ZpY/gAYv2G/Or7OnfubKVcbObHJK3c5K2j
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
69q27ZOnLsGnm/69n99jkzJt8jiywj16/zC+iE3w+bTYYos18duelSJlSp+n
5TJ9SO+1116x59OKlEuwqcOTkqRu6tynl2GTxynbutoxRYLvNZ2fRx99NPPz
6N/NmHD4z4uKK5FW/xJrzksS28Zm3vHlRT/m9ffP+QQ/fZr0/i5duoTmi1gN
+vs456KYTzLf643Tpedobcly0vwmJalNbqPuW5Lc2ninTZmqmk1OXNCsebOt
i+Ni6o4o2cPXQfv27ZWOZw8Uc7D4rokaO9qqe/ambbbZZuoefLh62xL73fgO
eQ7zSwU2xy1py8VGfmzJTV462nbfBHF1L3kyn8X5OpM0eiRtXUf14RobbSWr
TJh7SKu8dz2qfjWm/3XT/mbPbtR5+aQUKVNaVjgPi59l/W4u5tniUKRcgk0d
npQkdVPnPt1m32Zz3FZ3O6YIhgwZ4ubHRhwI5rWI/abbVRzdkGa9sVWrVr73
JLFtbOcdmJPgjJAZXzPovFCS+4kJEJYv05cl615RmOfF8Avu1fmsj+Qhy0nL
Jy5JbXIbdd+S5NbGO23KlL6HfjsPkj5fx9LMkrc86jUOOt5RmOyxlxK/nfhz
xX+xqS/inHu0WffffvutO8bmuRdffLEzYsQIFTeHzxhjh/kq0uhxC88IImrc
krVcbOTHttzY1tG2+yaIq3vffPNN91mcGfaeN0zSzrPWdVQfrrHRVrLKxB13
3OH+nnFyGGXa5FH1q7nrrrvc+4477jj1GXui2dNpY/xhUqRMeddyKQ+t17iu
ueaayDQUKZcaWzo8KUnqps59uo2+TWOz3hvFjskT9tHqPC2wwALOF198Efmb
oHs4l8P4jnMt2CF67w3lERaLPa7+nTBhgptW9uz4kcS2sZl3L2Y/RbvMer+O
lRCUL84P6e9XXnnlyPeZvn38fIHj8zBPWU5aPlEktclt1H1Lklsb77QpU/oe
9HAeJH2+jreaJW951msY5tjPT/bYA7n33nu7Y6Ww3weNHW3WPXG5SA8+l5FR
xtiMZ4mrk+QcZZx3hY1bbJSLjfzkJTe2dLTtvgm07sWmCgN/SfpZ+D32Ered
26jrqD5cY6OtZJUJfG/p37dt2zb0d3na5FnrV4Ptq/0Pkx9s9zvvvFPFSrJN
kTKlYz2ZsvL444+7sbD4fMyYMaHpKFIuNbZ0eFKS9Ot17tOz9m0mNuu90eyY
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
jGmxR8g364F+MhxEXD2StK7j9uF560nIokt4/siRI53BgwercfDzzz/vjvU4
18C4mjW4uPUXhe361XB+knZka+9HGHnJFHUWp9/RcqfHFnzOPeh35gXKksu8
dF4Sguqmzn26H2n7Npv1Xnc7piUS13+1IFQJkVtBKB78FRF3FZ9O2AHmRV/9
2GOPqTUA5sVpnyeddFLZSQ6l0fIjCFUFG4R1Nxs+bIT0iM4ThOoito1QR0Ru
BaFYmPfnzFScM1/sQ6R9du7cuYCUpaPR8iMIVYa1NmJgC+UhOk8Qqo3YNkId
EbkVhOJg/xm+EOOumXz00UeVXmNptPwIQtXh3CznSIVyEJ0nCNVHbBuhjojc
CkJxEGuT9sbZ5zgQE4T7q+SrxaTR8iMIVQafcfgzF8pDdJ4gVB+xbYQ6InIr
CMXRp08f1d6IKxMH9qniGzov/zlZabT8CEKVIM4jPqHwp/XZZ5+puLzEihbK
Q3SeIFQfHXeA+BeCUBdEbgWhOIiFRHsj3pI3Fq8XfDkRF8gbj7dKNFp+BKFK
6PjF+iL2Y0v2pVwFROcJQrUhxoHWmcTKJU6AIFQdkVtBKBbiAplj7P3331/F
YBo9erSKkcz+RuKXEsuUc6Nvvvlm2UkOpdHyIwhVgRhHZtsiVrHteFpCckTn
CUI1IWbeYostpmK/t27dWs2HtWnTxmnVqpXTtm1bp1u3bmUnURCaIXIrCOUx
cOBANQfmF8d2ueWWU3GHJ02aVHYyY9No+RGEqtCxY0c3vvVll11WdnKE/4fo
PEEQBEEQhPrz888/OxMmTFB+gsaOHetMmTLF+eabb8pOVmoaLT+CUAX+/vtv
Fef6tddeKzspggfReYIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgNCr//e9/nUceecQ599xz
nR49eqh/P/jgg0Le/fnnnzs33HCDioXK/+vGjBkznBEjRjgdOnRwxo8fX3Zy
BEEogD/++EO19969ezvnn39+2ckRakrd+z+hGGSMJghCVfnzzz+dMWPGONOn
Ty87KbXmr7/+cq666ipnzTXXbBajdP3118/tvf/884/Tv39/p127dk3e+dFH
H+X2TttcffXVzhZbbOHMNttsbvpHjRpVdrIEQciRJ554wmnfvr0z//zzu+3+
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
9dZbO7POOqubRnQFsk98wGWXXVaVA3P+JmPHjlXp2XHHHZvNS9K2eBb1zlxh
nmWWNM9p8u0n28y1BZG1PeVVVmnIkhf6Tto/Y0v9DK7FF1/c2XjjjVVe+Bwd
iXwnJYv8an3P7/bbbz/Vb6Ut16RtwQZxbfKk7SMv2WNMoOvoySefbPId6w/6
OewHQrdpecGunjFjhpKzPn36uPcxR2lCf4LvGNasya++r3PnztbKxlZ+TLLI
DuMY6sari55//nlnoYUWalZGtkEeSF/UGWPqhjEQ4zLmTKp2trgqbYSY3+hL
7mM+x8s777yjdGfRNnmj1HNcsvbfRY2FW2r/l0TvZSmjNP1D0XZQVlmVMVp+
Y7S0MF5o06aNSlPHjh0D73v66afd/LMm4Af7rc34F9TnFVdcofQ4cxCUPZ8f
dthhmdONnGsZZx7ZD+Z2dFpOPvlk93NbeWZNW8/NcTE/7m1j1D/yqO8JWrfJ
kh/GCOgp+sKvvvqqyW/ef/99ty3QzoLQdRN2j4b9MMwL8L4ge2CllVZSz9tl
l12afG6rzGzkOUm+vbLN2N8Pm+3JpnylwWZezHvyOKuURH5B63v69meffbbZ
93HLNUtbyEKUTZ61fdiUvc8++0yt+3GPX9xT+m39Lt03MJbYZpttmux7/e67
7wJtchPGUvq+3r17Wy8bW/nJIjsPP/xwaDkMHjxYpYG9enlAuekypi2xJ1Nf
lCFrEpwpZj1pqaWWcjbbbDO1v5+15KpQpTZCPWHncw97PoJg3bxIm7wR6jkJ
tvq8IsfC0FL6vyx6L24ZZdULRdW9zfGZ9z4Zo5UH56B0nqJiXOh4cZQRNqQf
7LHSz+N8ggl6evr06Vb27jPPwjuYkwqau+Xchp6P4jyIxmae2QvB92G+BDlL
YfZrtvPTs2dP9/mcp/FirhuZZ95MWL+J2166d++u7t12220D79l1113VPegv
+m8TG2VmI8+QJN+mbAfJv+32ZEu+0mAzL3yWp75PUo8Qx39InHLN2hbSEmWT
22gftmSvf//+7j34x/CDOXm+Z7477Jwd30fZ5KxX6veddtppzb7PWja28pNF
dtifqMd7ftDXdujQQY0v82DEiBFuGdB3IY/6OuSQQ1T+WZdAdtjzVUWq1Ebw
GaOf47UDTPQYoCibvBHqOQk2+7yixsLQUvq/LHovbhnZ0AtF1L3tsaaM0eyO
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
VO/cv40ys5FnSJJv4rboe4PWwGy3JxtllRabeclb3yepR2Dtx0a5Zm0LaTH9
3PjJoo32YUv20FfEOmLdISs67jdxRIPKOsomz1o2tvKTVnbYO895Qnxd+4EN
q5/LmWCb3HPPPe6z/c7Se+ncubN7P3tAvYTFGcnbJq9KG6E+tW3PxZpzEKY/
uDxt8iLrWcP+2nnnnVed1w06E4xvfuwl3pH1nJ8fNvu8Im3yltD/ZdV7ccvI
hl4oou5tjzVljGZ3jJYWzkvo2Gz4TQgCvzU6Ngl+woM49NBD3fzn6edu8ODB
7nvYX8J6hZ9/2yeffFKdPRw2bJj7mc08826djrCxA+cOuWexxRaznh/6TP3b
Hj16NLmf9Rw9tgnTIWbM3bvuuiswH0BfqO/lYnzqjcGI/hw0aJDqY/Gna2Kj
zGzkOWm+TX+bzzzzjO89ttuTLflKg828mGtBjN9sk6QeQce0zFquWdtCWrT/
kyBZtNE+bMneeeedp743dVZaGCvoNLFf0Y/u3bu793B+1UvWsrGVnyyyw75i
1hT90GMrbJtPP/00Uxq9mOUfpANNiAmr76deTIj9G7RmA3nb5FVqI+Yeyw03
3DDwfZ06dXLv46xkXhRZz6D9abMmRvyiIFZZZRX3PczL2fKJq7HZ5xU1FoaW
0v9l0Xtxy8iGXiii7m2PNWWMZneMloUnnnhCxXijDG677bZm33/++efuXMMe
e+yhzm/4Qb6IARc2HrJJz549m5Q18yS0obPPPtv517/+pdJCn0lMeC828mzu
i+AK8oNCO9ZtB31BG7GZH+Kn6d8glzyfdyL37L0x+zHmv9FpEyZMaPIMc/6d
cqFMkE36vFNPPbXZXiDOvZtp5aK8OGNJ/6v9blxzzTW5lJmNPCfJN3v5zL0M
119/vW+6wVZ7si1fabCVl5tuusnNx5prrmnd91QS+UUf2yzXtG0hLawTRMli
1vZhU/b22msv9T3vxCfP5Zdf3uwiD5wBDJIfDbFodZoYv59zzjlqzEOdMseN
DBKLSd9DfOUBAwY08U2btWxs5iet7NAv8Pl//vOfJp9j2+j04XPWBjNmzFBj
3AcffFDFttXpZD2J9s8+ryCYW9b3m+sPzDdT1mG+w/K2yavURsAcx/N+c62Y
s9WXXnqpG2OPa9lll1XzUn7+mtJQVj3/888/Trdu3dSeg3HjxgXex55ifLab
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
rMePb7/9dtnJEWrG8OHDXfk555xzYv1Gr6tzTZ06NecUCkKxiE4VBEEQBEEQ
knD44YfL+FFIzVFHHeXKz1NPPRXrN0svvbT7m2HDhuWcQqEufPDBB2UnwQqi
UwVBEARBEIQkyPhRyMLqq6+uZGfuued2fv/998j7v/nmmyZ+qR977LECUilU
HeZmiCHWCIhOFQRBEARBEJIg40chLV9++aUrO9tvv32s39x3333ubxZddFHn
t99+yzmVQtUh3vicc86p5nUaAdGpgiAIgiAIQhKSjh/xnd2vXz/nggsucN59
993Y7xk/fryzxx57OH/88Yf7GWum9957r3PllVc6999/fyL77L///a+KM3TN
Ndc4AwYMUDGwvf6UPv74Y+fFF190vv/++9jPzULasgEb+eEZxEM+++yzneOP
P965+OKLnccff1z5PM+Du+66y5Ud3hmH7bbbzv3NzTffnEu6bPDaa6+pc8H4
pNPg5/vWW29Va7q//vpr4G/T1gNzHMjQVVdd5QwdOtQZPXq0M2nSJOfnn3/2
vf+rr75SMbGJPaf566+/lA+0O+64w3nkkUeczz77LFG+bcjQDz/84IwcOdK5
7rrrVPo404AvQD9IIz7UkYeFF1441vN13ZCuvElTHmKTC4IgCIIgCEmIO358
8803nZ133tmZd9553fvxn33ssccGjk/vuecep1evXs4KK6zg/gabAVu8R48e
am3M3Me8yCKLKDsvihdeeMHZYIMNVKzi008/3bnlllvUe2affXZnn332ce68
8061bsvfPJd/sfsPOOAAFTt4/fXXd9Zee21nxRVXdHbaaacmzz7jjDOc5Zdf
3llzzTXVfcTb5u++fftaLRsb+THBVl9nnXVUvs477zzlew0bYp555nFWWWUV
56WXXopMR1KOPvpoN78TJkyIvH/IkCHu/eeee6719GSFeaMTTzzRadeuXZNY
VuzJP+aYY9zy17Hc/EhTDz/99JNz0kknOfPPP79qj5TNvvvuq2LL8a4DDzzQ
vRf7nNjwyIv2X7/SSispObv22mudtm3bqj3gOp2zzjqrkqE4fsqzytC0adNU
PHrKifTxW+aX9PmGvfbaq8k8E3MPZlrJ7/7779/seuihh3zrZtSoUe6zrr76
apVG2ivtlveTF95N+egzEtOnT3dWXnllZ4011nDWW289t42jF+6++24r5RGk
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
7Wc+z5SzrGk3z6rjQz4NSWzyLl26xK6bQw89tFn7ZX6CWAfe+GYaG3UZV6eC
6X/dtL8508B8hyAIgiAIgtD4EEM8bPzIPmx8Q+P3G//Apm0Q9zw5a302bHLA
xtPjWJ578cUXKx/gxKbiM8axQb6fTLRNzjOCiLLJbZRNlvwMGTLEfUeRsZLw
ScU78Qcd5beNOM86jWZM9TjUxSa3XQ+s6eKrQNvcXH5+C9KskxND3Gbae/Xq
5f7+3HPPTfx70O2euYgoOnbsGLtuxo8f797L2XBgP0KYXwMbdRmlU03uuusu
997jjjtOfca5Dc55hMVxEwRBEARBEBoH03b0jh85b7n33nu7tmHYb8PsTuJT
27LJiQlFmi677DI1fmYciz2Mf6kwP+tp3hVmk9sqmyz5YQ+yfgd+1L744ouI
XDux7gmDNdZZZplFvTNOvHPmGHQaOSOdhLrY5HnVg3m2AdnwEtcmx8eZfg6+
zWym/Y477nB/zz6RsPPvQei2GGcfhY5BFqdu8PW+8soru/fjswG7/9NPPw38
jY26DNOpXpjX0z7c27Ztq/bO3HnnnSp+pCAIgiAIgtAyMP1Leddj77vvPvc7
v7WluHanXpMOi08OUXbyzJkznXbt2qm16azouN/EFw7axxpmk9soGxv50bHf
uVifC8oLYOezrzYL99xzj/s+vzPwXjp37uzez/5+vzQFkdQmx2878xu8J+0+
akjj9zBNPWB/bb/99oGxp8m3fiZn+L1om3zdddcNTVu/fv3c51x00UVW0q75
6aefnNatW7u/98Yn8ILMe8/Hm3Yz++zD2GqrrQL1lR/IqL4fe5z97FFkbVNh
OtUPcz8+csscy9ChQ33vJS3kAV1JfIIk8QUFQRAEQRCEasJ4Xo8Hn3nmmSbf
mePZHj16NPmO9V1tM0XZ5Ozt1veF2VecqeYefBv5gR9ivh82bFiCHPpz1FFH
uWlin7AfxFvW9xBPysRG2djID2N4/R4ubHxvTG1sv0GDBqm4Svg2z4JZbl55
8YMYz/p+b/xq/IF742WbJLXJ8aWt38VcS1qfY+Y55Li+t9PWA+cAiPXux6uv
vqqehe83v7VdbZMz5xUUYwDfBrpdLbvssr5lmVWGBg8e7P6Wts6eD7/0PPnk
k8p/g1feiSemf89e7jDMeAZx5O/zzz9347hzxfGZlrU8wnSqH2PGjGmy1wC5
D7K18alopi1t/DlBEARBEAShGrA+Z65xEZvHhNhG+jvsZPyAY28ybma/tmkD
sX6KbeGNBWzuBeUK8gnGc/UeTmwQ3uVlr732Ut/zXnxhXX755c0u8sA5TNPP
sh/EgNZpYk/9Oeeco+yv/9ve/btU9cYBHMfmUAhTcmkImtqcWmwQl9aU2sJF
CGnRBglJ3AStKRqCWlwiCG0KtIYcgiAKa2zIlKb+BeF8eT9w5PF2z7nn3K6e
0/m+X3BRr/fHc35yPud5ns+Ha2+uc69fvx7mdKavoR734uJicv/+/Z6tm14t
D/N443XMg74+5qkT86Y5w548eZK7TrKQw5qY8PXr18nAwMDRdzBWgJiHvtIs
xGfp6+P+RGI21lNejrgyMTljppkrHa8D5uSXRazF3OOsezF5utkO3M/huadP
nx77LGLpdP8gF3g78Xzzu3fv/lEnnnWSzvfmu/PuL/ztPjQzM3PsvYx1YdmW
l5eT+fn5sE6J1589e/bHe+O6ZdRPX19fD3Eu91QWFhaOxu0zbyLvfJUlzblG
7F9Ut+uj0zm1HbZTOr+Hx+rqauZrmdsSt4n1K0mSpH8PfTeM3aaPJ76+Iza9
fPnysbHYcQ3ttP+RMZOMQY3nuxIPkXM8xbUi9X14ffx+5ozyfHpt/uXLlxD7
xn1ZPPibfj3mVqbiMZ6dHsT3na6Hl5aW/mgfc6WnpqbCmFPiAZ6jXtHVq1eT
ubm5EJf+7bo5ieWhXdw3aPfekZGRcF+gG4x1Zluwr9Afy/2HCxcuhJiE+bas
G2It8oi1Q02n8fHxo3bs7+8ne3t7oa51Vj2qVNl+8ta4kHHORb19+zaMGW7N
ec7+QD8zx0uR2lhltwOxePo9jClg/j37HX2zrFvGnWf1gacxOduH93McUYt7
bW0tHH/01/K/mzdvhjp9vW57K/ZP9o127x8bGwv9/u3QJ5zmZogf7Fe3b98O
98jYNmndsNbzVafjnPs+vJ755GWUWR9lzqntpLE25wrOH1m+fft2NBeI+edF
tqskSZLqh34Zrvvoe6U/jmt+8iHxO/MV+RnjevPx48ehD/jHjx/H/vfixYvk
+fPnIX94jPHa9J+Sw4jP4zt5pM+nfXp8L/3LvI7n+Juf/E0b+Tt1cHAQ8oQV
jWOJUzqNVeUzNzc3Q580Y0jjOlHMJSbPWt64/G7WzUkuD/cSmItKXEa7yHve
2n962tiGxDd37txJJiYmwr0M2tVJ2Zic7/n+/XvYZryPucBFcQyk+yExIp/F
/sq+y3HC/8oouh34bMZ0M+aAnAXE5MylePXqVce51XGON2rlsR8T46+srIT7
HazzTp/xN21vh9ft7OyE/mOWhT7vrPs1rT58+BC+j+Wn7dSGA9uD9d/ufBWf
S/J0O48BRdZH2XNqq42NjbAts8ZExNimnHfyYndJkiTppJDHizmp1A5mnHn8
oB+OvjD6GemP5xr33r17VTc5V9OWp5e6zbvOPIKi8c2/rGjeddUf95EYF5CX
E16SJEmqGv3K1PBuN9e8FeNdiVfI+11XTVueXus2JqePlvd9/PjxhFpWD8bk
zUHegm7yH0iSJEmnhbGh5Ikq2k/88+fPWvcrN215eo3cccxXZ5nJTRbPYcjD
OOFLly6FXFxNZ0zeHOSrILeGJEmSVFcvX74M8QfzbosgFxKvj3PE1UnTlqcX
WEbyYQ0ODob87vw8f/58+J183OSnZ551Fu5zkDePXGdZc/ibxJi8GchBRw0C
SZIkqc5mZ2dD/EGNoiIYC0qt36rzm2Vp2vJUjX70W7duhVzrv379qro5p8KY
/N9EvTTy35E3jn11dHQ01ESXJEmS6iyts0yfKXWr8pAviZpMnz9/PqXWlde0
5akDalr/n1Bni33oypUrVTdFJVDnPK6nQA21onMzJEmSpKpQVyy+jp2cnAx1
id+8eZO8e/cujOl++PBhcu3atTA3s+7xWdOWR6eLmnjpvkNNbOp1qf6o6RYf
92fOnOlY31CSJEmqiwcPHoT4o13t7osXL4baV58+faq6mYU1bXl08qhBPjw8
nJw9ezY5d+5cGD/BnPv+/v5kaGgomZ6errqJ6uDGjRvhGO/r60sePXpUdXMk
SZKkUsir/f79+5AbbWtrK/n69Wvy+/fvqpvVtaYtj6R8h4eHyfb2drK7u1t1
UyRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJklRT/wEl
J08m
    "], {{0, 636}, {997, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{598., Automatic},
  ImageSizeRaw->{997, 636},
  PlotRange->{{0, 997}, {0, 636}}]], "Input",ExpressionUUID->"d9c9753d-4f6f-\
4bb6-a6cf-7afd81860e07"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQW0NMXxt3F3DRLc3d1dgru7u0Nwdwga3CVIcAgEt2ABgrsEdw0QQpL5
8vT/1H59+x3pnp3da7/nnOHlzszOtFZXdVfXTLnlbmtuO8xQQw2110j/+8+a
W+y35J57bnHAWmP97491dt1rh+123WbrFXfde5vtttlzgS2H/d/JPf9378L/
+5/h/vf/mRBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEGJA8/7772e//e1vs2WWWSZb
cskls3vuuacj73nzzTezM888073nyiuv7Mg7RN/hH//4R3bbbbdlO+64Y7b8
8sv3dnLa5j//+U/25JNPZocffng266yzZm+//XbX3p1alr2Z1sGK5JvoLV54
4YXsxBNPzBZYYIHs4Ycf7u3kiF5EckgMdC677DLXviebbLJszDHHzMYZZ5xs
9NFHz2acccZs2WWXzR555JEhfvP73/8+23bbbbPjjjsuG2+88bKhhhoq22ef
fRpP20cffZQtuuii7vkcf/jDHxp/h6jmpJNOyuadd97slVde6fi7jjrqqGzs
scd29T3//PN3/H1NkldO9913XzbDDDO02vAHH3zQtfSklmVvpnUwIvnWv+im
HOw02DlzzTVXq+099thjvZ2kSjpR/gOpTusiOSQGE9999102xhhjuLY+zzzz
ZP/9739z77vjjjucXfTvf//b/f31119nN998s5tD7hQzzTSTSxfvEd3H9F/m
fbrBeeed5963+OKLd+V9TVFUTl988UVrHPnyyy+7mqbUsuzNtA5WJN/6B92W
g52GddzRRhvN5enZZ5/t7eRU0onyH2h12g6SQ2KwMPPMM7u2vtlmmxXes8QS
S7j1nm6C/w3puuuuu7r6XvF/MOfHGsG3337blff96U9/cvW93HLLdeV9TVFW
TiONNJLL0w8//NDVNNUpy95K62BF8q1/0G052A2mn3561/Zefvnl3k5KJZ0o
/4FYp3WRHBKDhTnmmMO19W222Sb3+scff+yub7XVVl1N13rrrefe26k9QaJv
wfhDfa+wwgq9nZTGmHDCCV2e/vnPf3b1vXXKsrfSOliRfBO9Bb6ttL1XX321
t5MiehnJITFYmHvuuV1b33777XOvP/DAA+76zjvv3NV0rb/++uqDg4jHH398
wNk6v/rVr3rFfqhTlr2V1sGK5JvoJNddd132+eef514jLsFAsXXK8imqkRwS
g4X55pvPtfWddtop97r5/vdnW6doH5Kopltl15dtnZgyyLtHtk536U/9vGkd
oz/lvYy+mo8m09XpPLIPZeihh87eeOON3OvdsnU6XWZV+azzzCboq204D+lZ
YrBgci/Plvnxxx+z3/zmN+46a51/+9vf3EHs6Srwfdthhx3cevkee+yRffbZ
Z0npquqDVc9/5513stNPPz1bcMEF3R5M9iFcccUVbl/Suuuum914442l7yf2
7m677ZZtsskm2TrrrJP97ne/c8+45ZZbsj333DM744wzsttvvz279dZb3Tni
mFjshrfeeiu7/vrr3fWbbrrJ/dtOGcWk5V//+leP37z33nsuPvjWW2/t6u7A
Aw+MrgPSdf7557v9HsTsC3nppZdcejfaaKNsgw02cGl78cUXo54NyMSrr746
23XXXd0zNt100+yQQw4p1c9j8hObru+//z4799xzXVxm3k0ZUo9FZUBbwQY4
9dRTs7XXXju78MILo8rJ7IfXXnvN1fPqq6+eLbbYYu69tM8iUuquTlnmEZvW
v//97648iGvNviDKjTZubf/OO+905+waf1fRjqyIqScjpVw73f/blW+peS+i
qkz++te/un3LxKehznkPsoa+Rr45z7+0C/KPnW3xy5lvJ/YXsTs33HBD9x7i
3LaTj9g6jJEFVfdU9e+ff/45u/zyy7Pdd9/dPeOAAw4o3OPd7ngUy9FHH92K
M0IftDHbt2t8W4fyPOWUU1z+q9IRU/ZN5rOs/GPymfpMqDu2DVY51IQMEqIb
FNk6zzzzjPuGjsWvJc40MamJx0bbL4O2j+7F2Ej/5PfE+wj18TLK+mDV8596
6qlWfDmO448/PltqqaWyjTfeuJVfjjxZB4xXI488sotNCV999ZXz9RtxxBGd
rCFOA79nbKP/2/O++eYbdz/jOTG6F154YXd+iimmqF1GsWlhLd+49957s6mn
ntrpHcCYjOyZZJJJKu1U5LDt3ciLRYlM5brJ/+effz6bZpppnLyOgZjGxLpA
h8aWBuJfLrTQQoX6eUx+YtNFjOXJJ58823LLLV1ZwhFHHOHejZ1QVAaM3SOM
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
DSfEYEZySAghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEKIwcN//vOf7PXXX89effXV7LvvvnPn7N++zAsv
vJCdeOKJ2QILLJA9/PDDvZ2cPovKaWDx5ptvZmeeeWa2zDLLZFdeeWVvJ0eI
ZP7xj39kt912W7bjjjtmyy+/fG8npxEYR5988sns8MMPz2adddbs7bff7u0k
iUQkW4UYeNCvV1pppWz99dfPTjrppGzvvffOpp566uxXv/pVNtZYY2X//e9/
ezuJhaC/zzXXXNlQQw3ljscee6y3k9QnUTkNLD766KNs0UUXbdXnH/7wh95O
kigBuTrvvPNmr7zySm8npZK77rrL2R95x5///Ofstddey/75z3828q6jjjoq
G3vssV0bnn/++Rt5ZjfJq9f77rsvm2GGGVp984MPPmjreaK7SLYKMfB4+umn
s1FGGSW78MILe5z//vvvs2WXXdb19a+//rqXUhcH82ijjTaaS+uzzz7b28np
s6icBh4zzTSTq8+bb765t5MiSjDdl7nivgw2zO9+97vswAMPzIYbbjiX5m23
3dbp4ByHHnpotvbaa2fjjDNOtuuuu2afffZZ2+8877zz3HsWX3zx9jPQZYrq
9Ysvvmjpyl9++WXbzxPdR7JViIHD3HPPnc0222y51z7++ONszDHHdOs+fZ3p
p5/eyaWXX365t5PSp1E5DSzw+6E+mYsXfRfWUVnD+Pbbb3s7KVF89dVX2TDD
DJNNMMEEuev6L730klvzx0er3bmwP/3pT64NL7fccm09pzcoq9eRRhrJ5euH
H35o5Hmiu0i2iibo7335X//6V/bTTz/1djLa4u9//7vry8zTFbHnnntm9957
bxdTVQ/8H8gLe41EMSqngcV6663n6vOee+7p7aSIAQRz2bQr2lcRG264obvn
97//fVvvQr/nOSussEJbz+lrTDjhhC5fTfn7ie4y2GUra7a//e1v3Z6GooP1
X9YgH3rooSF+j41f9ftDDjnEyY+//vWv0elCXpxxxhnZLrvskm200UbuGZdf
frlbS02lzrNIa1me/GP33XfPpptuuuj0MK9EmdrvmffwwR92n332KXzfvvvu
m5111llOZ2cvZBGsz8ekf6+99sqWXHLJ0j7w4osv9vjNFVdcEZ3fbnH33Xe7
vsxcf9GeHNpryrxUJ7nuuuuyzz//PPca++07rcOXvb+/0I1yEt2DPXaDeTwW
nWGPPfaotGNs3pvxtR0ef/zxAWnrsN9Vtk7/RbI1y6699tqWL2bVwRove518
TjvttOjfo5uU2Ri33357ttBCCxX+ftRRR3W2xYcffliZr3afZf6NMQe+wCmc
fvrprd9eddVVQ1xnb33MeyeZZJJCuwOZHZv+qj7A3gjW+O1e9nX2Ndj/aOnD
fiPNfRXmDoYeeujsjTfeyL3eaR2+6v39Bdk61fTlWBwhTY7H/SnfVfTVvDSd
rk7lc84553TtqmiPPH4N4447rruHObN26Ou2TkwZ593Tjq1T9M6+2q6boK/l
TbI1c3qr6YjEzNh44417HPgETTbZZK172OPtc84557Surbvuutlhhx3WOg46
6KBs66237vH7lVdeOTcdO++8cw/de/bZZ88233xzp7euttpqrfgmHOONN172
xBNPFOapiWfNMccc7jp73f08hQd55Pkp+GV2/fXXD3F99dVXb13n+fYu1mrI
2yqrrJKNMMIIrXsOOOCAIZ7B7+w6+zGL0s8zeV5ZH7jxxht7lCf9pq+BbcNe
HUsj8RXxw46BvTw77LCD84liDtDfo4pvHPmnn+CLfeutt2Y33XRT9u9//9td
v/POO905u8bfZRx99NGtNPKbv/3tb+7w9XVfh3/vvfeyU045Jdtggw1c/yIt
dfKR8v6QH3/8MbvhhhtcGdxxxx0un6SDMkB/uOWWW1rn+X/45ZdfnO8Iv2He
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
EEIIIYQQQgghhBBCDE5Sv31bB2Iuxpwvuq8v8sILL2QnnnhitsACCzjf9f7M
QMqLEEII0Wm6oTtBrP7U23zxxRfZ888/7/b0EfeVb6T2B958883szDPPzJZZ
Zpnsyiuv7O3kiA5w4IEHZptttllH38H+1RVWWCGbaaaZXMzSccYZx/0777zz
ZquuumqPe7fffvts/vnnd7GRuW/MMcd08ZEXX3zx7K677mrdxz4/4pcQw3Gs
scZyx6STTpqtvPLKXYlngm0w11xzteISPfbYYx1/Z6cYSHkRAxf6/2233ZZ7
sOeX75G30/dPOukkJ5NeeeWVBlM9eHjmmWeyF198Mek3xN9lf/ZPP/3UOvfV
V1+5c0VHEeedd17ttItqmugfA6mPdUN3gs8//zxbeOGF3betTH9CL0IvX3rp
pbMZZ5wxm3baaZ3u1BvzlF9//XV26KGHunRMP/302b777pudccYZ7tupq6++
utP7dt111+y0007rocP1FT766KNs0UUXbek/xIwQA4vXX389G2GEEVx/6QbM
QfBdYNoT7y2LV7rtttu22t7NN99c+lz61yKLLJJ9//33TSe5FGw4bDLS+Oyz
z3b13U0zkPIiBh7YMMQuQr/g+1C0U2QEuhMHYy1zH+gBjKufffZZ8jtmmGEG
91zm90Q699xzTzbRRBNlb7zxRvRvNt54Y1fmvo10ySWXtGR/3pEH+uBII43k
4uqLztBE/xgofazbuhMgAyeccEJXfnyLx0CvOuWUU1r945hjjulamm666aZs
7LHHzkYZZZTswgsvzF1nwq61udRDDjmka2lLBZssRt8U/Y8VV1zR1S32eLc4
/fTTW32S72cVwRqo3YcuUwQ6OvoN66a9AXYWaXz55Zd75f1NMpDyIgYmzPkP
M8ww2QQTTJA7rr700ktujXfWWWd1840psJ7Jdy6+/fbbppI7qMDWQX5MNtlk
ud9LzKPM1llppZVcfYRHHnxvnt9stNFGjeRFDEkT/WOg9LHe0J0Anxfeu+mm
mw5xbcstt3TX+GZpbP9rh3PPPTcbeuih3RwD8ejL4Lvlk08+ebbNNtt0PF11
WX755V359cW1J1GfG264Idttt91c3aIbdIu33noryoZBjyFd3Md8bRF872HZ
ZZftRFKjMNnz6quv9loammIg5UUMTJhzo42ut956hffwnUt9L7f7mK3DMc00
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
QgghhBBCCCGEEEIIIYQQQgghhBBCCPF/vPnmm9mZZ56ZLbPMMtmVV17Z28kR
kbz//vvue2DU25JLLpndc889vZ0kIfot//rXvxp93gsvvJCdeOKJ2QILLJA9
/PDDjT67L9B0eQ0mNOYKIUT3+Oijj7JFF120FVOPWBz9Db6Ldf7552ePPPJI
Y8+87777slVXXdWNSUXvvPbaa7Ntt90223zzzbPjjjsu+/rrrxt7/0knnZTN
O++82SuvvJJ7ndiHvJv3jjfeeK7u9tlnn8be3wTPPPNM9uKLLyb9hlj/xIL5
6aefWue++uord67oKOK8886rnXZRTFXb7I8ceOCB2WabbdbY87Bz5pprrpZc
feyxxxp7dl+gbnkNxLaTykAYc4UQoj8y00wzObl7880393ZSovnHP/6R3XHH
Hdliiy3m0n7NNdc08lxsJr4dxTOJrR7y888/u+9sMWYzbhGHnrF/wgknzF56
6aVG0jDDDDO49zP3F0KeJ5tsMhczErCxqDfKoy/BOtNEE02UvfHGG9G/2Xjj
jV2+fRvpkksuaekFeUcen3/+eTbSSCPl1p9oj7K22R95/fXXsxFGGCFbeuml
G33uf/7zn5YcefbZZxt9dm/STnkNtLbTDv1xzBVCiP7M8ssv7+TuXXfd1dtJ
ieL777/PFl988Wz88cdv6bw33XRT28997bXXslVWWSVbcMEF3TNZmwhh/YRr
Tz31VOsc6zzTTDONO5r4BhfzwHzP69tvvx3i2hJLLJEtu+yybb+j02DrUE7Y
ZXnfZs6jzNZZaaWVXJmERx5HHHGE+81GG23USF7E/6esbfZHVlxxRddWZpxx
xsafPf3007tnv/zyy40/u7dop7wGWttph/425gohRH9nvfXWc3K3v+35YG1j
ggkmcGm/884723oW4y/jOGsC2BM8M/SR+vLLL7Phhx8+m2222Yb4Pf5k/Oac
c85pKx1lfPzxx+4dW221Vcfe0RRm63BgA7IGVkWZrcP3zmJg3e1Xv/qV+w11
FfNeMTi54YYbst122821lbHGGqvx588///zu2a+++mrjz+4NOl1eg4n+OuYK
IUR/Zf311++3ctfmTh944IHaz8DfZIMNNsief/5593eRrXPZZZe584cddtgQ
z8C3g2srrLBC7XRUQR55x84779yxdzSF2ToTTzyx+3fmmWd2dmQZTdg6l156
qbvffOIPPfTQdrIhBig//vij66s//PBDNvTQQ7u2wrlUrrvuusJ2TVyCgWLr
NFVe4v/oz2OuEEL0R5qUu/hzdRPzAW8nNgF+Fbfcckvr7yJbZ80113Tn82Ln
/PLLL9mwww7rfNmb8tEIy5L99t2yddqtR7N19tprr2z//fd3/89+7W+++abw
N03YOnPOOWc2yiijZJ999pnbL8Q+KtZ62qHbbbrb1Mlffy+Tgw8+OLv77rvd
/1t8j7fffjvpGew7Qe8v2pPWTVun0/XRRHkZnUprf2qT/XnMFUKI/kiV3MV3
aocddnA+GXvssYfTI8PrxEJbbrnlshtvvNHtWTn11FOztdde28Vd5dxtt92W
/elPf8puvfVWt7fG9tbje8Y5u5bqi9aurfP444+7cdynyNaZaqqp3Hl+k8eU
U05Zej0GvyxZRzKYQyUmAs/H/8HikBF7Ova5ZXUI77zzTnb66ae7/Ursp2YO
94orrnAxl9Zdd11Xj7GYrbP33nu7v3fZZRf3N88uiqPQrq1z//33u3u32247
9zdrOvx9+eWXR6fbKGvTF154YY9733vvPRf/e+utt3Z1Q6yKvPIF9pqde+65
2Y477phtuumm2Z577unafQj2Genefffd3b6jAw44oHIfM7onPkabbLJJts46
67gyow6x43nPGWec0YoVXKeui9omXHXVVc6Pk/iEt99+u0srax4886KLLhqi
T8SWGfE+aK+UAWuv5C81vl8I8RVpa8ass87q2smjjz4a/Yyjjz665aOJ7LL+
6Ns1vq1Dfk855RSXh5i+FFM+TfbXMpoor7K2A3XruVP9NKYvMabRdzlHPDUb
0956663s+uuvd/2AsY5/Qzo55ob5FkIIUS53kae77rqrk+vIfO4jhozpTIwf
zJ37MTQZe1nf4O9hhhnGPQMfJv7GXvjjH//Yej7PPeaYY9z8KHI7b1woox1b
B72TcTX8VkSRrWNxlYrmceeZZ562YuvklSUQI4Fv6Iw99tjuPPOq7A1m3z/j
YRVVdQjEWhhjjDFa7z7++OOzpZZayuk4prNx5OkpeYS2DnOP7DPiHM/140ob
ZbYO6cXW8w/sBZ/VVlutx+8//PDDbLjhhnP1kkJMm7b033vvvdnUU0/d0uWx
UdA3JplkkiHsUGKZTz755NmWW27pYmmDxVHA7jGo71lmmSVbY401XFuj7P76
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
ysYYY4xsnHHGcf9ON9102TLLLJPdc889XU/T3/72t2yEEUbIhh566OzKK6/s
+vtFfe666y6nH+Qdf/7zn7PXXnst++c//9nWO0466aRs3nnnzV555ZWGUj04
eeaZZ7IXX3wx6TfMP9A/f/rpp9a5r776yp0rOso477zzaqW9jH//+9/ZnXfe
2Wp3t99+u0tjHu+++65rlw899FD26KOPZvfdd1929913N56mkP/85z/ZCius
kM0000zZ6KOP7uQu/9KuV1111R73br/99tn888+fjTbaaO6+McccM/v1r3+d
Lb744q6/GeR77bXXzmafffZsrLHGcsekk06arbzyym33uYFAqtw46qijsrHH
HjsbaqihXPn3ZdAn55prLpdWjscee6y3k1SJ5Hhn6Evl2h/bpRjYoLtMMMEE
rj0y/jJu9haXXXZZq2/MM888vZYOkQb61O9+97vswAMPzIYbbjhXf9tuu62T
vRyHHnqo08XQ13bdddfss88+q/WeGWaYwT37zDPPbDgHgwvmMSaaaKLsjTfe
iP7Nxhtv7Mret5EuueSSVn/NO4r4/PPPs5FGGil74okn2spHyHfffddqh8yZ
kIatttoq997HH38823rrrZ2dwb3k74wzzmg0PWWwZrPgggu6NPL+MrlLX7Iy
vfnmm0ufO/3002eLLLJI9v333zed5H5LHbmBLc5vsCv7OtjP2MOk99lnn+3t
5FQiOd4Z+lq59rd2KQY+zF3RHtdaa61eTccPP/yQHXPMMW7ekzlK0b9gDn2Y
YYZxtnOe/81LL73k5pxnnXXW7Ouvv05+PnNDzLl+++23TSR30IKtQ3+fbLLJ
ov1Fy2ydlVZaydVLeBRxxBFHuN9ttNFGbecljw8//DD7zW9+kw0//PDZyCOP
nH355ZeF9+KndPXVV3ckHVWcfvrpLRvmr3/9a+F9zz33XOs+5g6KQLdgPuH5
55/vRHL7LXXkxp/+9CdX3sstt1wHU9Yc2Lik9+WXX+7tpFQiOd4Z+mK59qd2
KTpLX2iXzAPSHjfYYIPeToqD/rrFFlv0djJEIsw5047WW2+9wns23HBDd8/v
f//7LqZM+JitwzHNNNNkH330UeVvymwd1lJi+fnnn7Nf/epX7nfYIjHvTgX/
1z/84Q/Z+uuv795zwgknFN6LzOuttey33noryoZh3oA5Au5jfbSIp59+2vkl
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
yKqXXnqpXXPIal1n/fXXt2lmrr8S91UzDaXeZ1nnRXmoj+1LCCGEqBbatWtn
dtttt7yTURGwN0OmGD16dMnPGjlypH3W7rvvXvKzHnjgAbtO9Oeff5b8rChe
f/11uyb1888/V+S+aqah1Pss67woD/WxfQkhhBDVwKxZs6wcdNxxx+WdlIpw
6KGH2u/NwicD+YRn7bnnniU/q2XLlmabbbYp+TkiHg2p3mdZ54UQQggh6hIv
vviilYNOPfXUvJNSEQ477LDM5L433ngjE11n6tSp9jkdOnQoOU2l8PDDD5vv
vvsu1zRUioZU77Os80IIIYQQdQnnc5K1zPfvv/9mel1WVKOuM2jQIPuck046
KfSa+fPnB55Pm3/++/ATWHDBBc2nn36a6L5SqXT5O0qp93mlOS1Z1vm69u1h
VOt3ZJmuav1GIYQQolLg744/PHIQdi4TJ060BzF4HX/99Ze5//77zZlnnmk6
depk4x+H+ThjF0T8MPxXHn/8cet70q9fP3PwwQebu+++u3AdcXA537p1a/t/
rsP35YILLrByGXKok+0/+ugjc84555i9997b2hu99tproe9GVyAm2llnnWW+
/fbbwOvSyn3IDQ899JA5/fTTbT507tzZXHbZZZG6zvTp021cgS5dutj8vfji
i2ulK6wMON566y1z22232W+/6aabCvd88cUX5sYbbzTbbrutmTBhgo3fhr8P
MdwOOeQQm/dheeTK57777iuc7927dyFWF+Xg3k/eR93nJUk9SZv+KJK8P069
9xO3bjvilL2Ddb0zzjjDHHXUUaZjx47mhhtusHny1FNPmbPPPtuW/fDhw20s
Ps4RT83FU/j888/NI488Yn9/4okn7L9+oup8nHaT9NvDiMqTt99+25YX8SKI
5c575s2bZz788EP7zZzn3y+//NJ+O/MM3bt3N5tssoldi5w0aZKNpXfEEUfY
d9CvlPIdccuP9JFv1LnDDz/cluMHH3yQ6Jos21cpbSvOtwghhBB1hXfffdfu
JeLiJhNvd4MNNrBxqdz6AtdsvPHG5sADD7Tz/cj7yCTIF7vuuquVOxzIBi1a
tKgR35bxdtFFF7V/L7TQQuaPP/4wL7/8slliiSUK1xFfGR0Gee6KK64wq666
qj2PjHH55ZdbnYLfGKtZd+B5+Ml4QU5AB0FGQlbkfmJPISv5SaPrzJw50/qx
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
jp2zx2fHHcicbt0zKBYb+YKtIeXEOqh7l9/Oq1idT9Jukn570jzhHTzTm0ZX
N1x/4C8np+tga8aaA/twsk4c1B7TfEex8ps2bZpdi+J3bAj9PlRxrsmyfZXS
tuJ8C3CPPy6GEEIIIYQQfpA7u3TpErh3EzZErH8yly+CiYpNIIQQQgghhMiP
bt26mb59+4b+PmjQIBuLTAQjXUcIIYQQQojqAxsj/Of98fW89O7duxCTTNRG
uo4QQgghhBDVB74ixCAgtkCQLwg+8/iZz507N4fU1Q3QFdF1lEdCCCGEEEJU
F+z/iKxOXCvi/PH3QQcdZA4++GAbJ03rFcG88847dg9UF1OMuOHED4sTU1EI
IYQQQghRfpDNiYOGzw7xy4mxTLxxEc306dNtzDB0nvfee8/GpCMGctrYcEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQggh8mfGjBmmW7dupn379mbnnXc2Y8aMyTtJ
QtTi8ccfNz/99FOqe9977z3z0Ucf2f9PmjTJ9OnTx2yzzTZm3LhxWSaxTvH9
99+b/v37Z/7cp59+2rzzzjuZP7eSzJkzx1x33XWmQ4cO5pRTTjG//vprSc/7
+uuvzbnnnmsOO+wwc+edd5rff/89o5Tmy2+//WaeeeYZc/LJJ5s99tgjs+dW
UxvNYnz87LPPzIABA+wzBg8eXPS8EKLuwxh7yCGHlGWcDWL06NG2Pw46nn32
WfPxxx+bP//8syJpqTZuvfVW07VrV3P11VebZs2amQUWWMCcd955eSdLVBHo
CGHtJ+r48ccfM0vD7NmzzYILLmgWXnhhs8oqq5hddtnF7LnnnvbYZJNNbN3l
4DdkLs7zb+vWrc3yyy9v6/VRRx1lZagtttjC/s3x+uuvZ5bGSvDPP/+YkSNH
Wnnr5ZdfNq+99pr99/nnnzcjRoww3333XaznfPvtt2brrbc2M2fODL0mbb/5
77//moMOOsimqy5CfV911VXN0UcfbebOnZvps3/55Rdz4IEHmpYtW5pp06Zl
+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
sWPN/Pnz8/60Bs+8efPM4MGDzR577GEaNWpk1llnHdOlSxczaNAgW4Y//PCD
+emnn0IP1u+4juu5j/t5zp577mkefPBB+3whhBBCCCGqjbfeesvO4y+00EJm
0003NVdddZV57733ImXfqOPrr782w4YNMx07djRNmjQxrVq1Mrfeeqv5888/
8/7UBsfvv/9ubrzxRqu3rrDCCuaUU04xr7zySuqy9R48h+fxXJ5/00032fcJ
IYQQQgiRN/jc7LXXXnZ+Hr0kKxnYe7i1olVWWcXaP919993y76kQTz31lFlj
jTVMy5YtbRmwFpd1+XJ8++235rbbbjNrrbWWLWfWfoQQQgghhMgD1lcuueQS
62ez//77mwkTJpRFBvYexDTo06ePWWaZZayd2/vvv593NtRb0D32228/u6Z2
6aWX2r/LXb6ujC+++GLTuHFj+37eK4QQQgghRKX49NNPzRZbbGHn+x999NGK
yMDe47PPPrM+QIsvvri1axPZ8uKLL5qVV17Z7LDDDlafrHT5cmD/SEwD1nhe
eumlvLNECCGEEEI0AJ5++mmz1FJLmYMOOsjMmDEjFznYHffee69p2rSp1Xvk
x5MNd955p12rO++884rGGij3wftJB+nBblEIIYQQQohywR4pxEcj7kCeMrD3
ePfdd208r5133tn8/PPPeWdRnYZY36yV3XfffSWVCTow60HEXJs0aVLJOjG+
O8SrZs8eIYQQQgghsuaWW26x8uY999yTu37jP7Bp23zzzU3r1q2l76SEuAOs
17FulyTv2Rv08ccft7HCt9lmG7PssssG7p/EeX7nOq7nviTvceuJ6NlCCCGE
EEJkBfviYEfEv3nrNWEHsdrwIdpll11kz5YQ1nHQYx977LHY+T1lyhRz2mmn
mRYtWpgll1zS7pHTs2dP88gjj9j441OnTjVffvml+eKLL8zbb79t/brYY4nr
uL558+b2fvZaivvOZ555xqaTPUiFEEIIIYQoFWJII1+yrpO3PlPsIGYCMYvx
3xHxePXVV60ei+9TnDxGfznhhBPsPazToHd88803icqJ6/G/2Xbbbe1zeB7P
jXMv6eSe1157Le+sE0IIIYQQdZjvvvvOrLrqquass87KXY+Je7CGwLrB7bff
nnf2VT1z5syxsfTOOOOMWHnLuh7rMewVO3z48EzKi+fwPJ770EMPxbqH9SDq
JXZwQgghhBBCpGGfffaxc+9JfSvyPlhrwMf+gw8+yDsLq5pDDz3UbL311lan
jcpPdKLTTz/drqf06NEj8/hsPA/7N57Pe3hf1PWkd6uttrLpF0IIIYQQIikP
P/ywWWKJJay+kLfukuY45JBDTNu2bc2///6bd1Za/6Fq8yF69tlnrW4xfvz4
onpFx44d7brLc889V9YyGzNmjPX/6dChQ9G9S1m/w7Zy5MiReWelEEIIIYSo
Q/z66692D8fu3bvnrrOkPT755BOz9NJL23jFeYGeuP/++5tTTjnFnH/++eaG
G26w+9egR+bJvHnzzLrrrmvOPvvsyDxkfQWdcbXVVrOxvStRbsSpxq7u4IMP
Lrq+Q/rXW2898/fff+ean0IIIYQQou7APibsWVPMtqnaD+Iot2zZ0vz1118V
z0PWKIiz/NJLLxXOXXHFFXYtAjutPGGfpBVWWMHMmjUrMv/w02I9p1J6jjsm
TJhg30t86qjrvv76a9OsWbNc9VkhhBBCCFF3mDt3rpUzb7vtttx1lVIP4n2t
tNJKdi2lkkyfPt3qOazleMFujL1miL+cF/Pnzzcbbrih1bui8m7YsGHWxm30
6NG5lJ2zsRs6dGjkdZdeeqlZf/317XcJIYQQQggRxYABA6wNUV2LRxB2sKfL
2muvXVG/neOOO87qNNjRecH/fqGFFso1ftiIESNM06ZNrT4WlmczZswwK664
orn88stzLTv0MdJBeqLSyvcQz00IIYQQQogo2I8zbxk3ywOZvnHjxubll1+u
SP4Rg2CppZYyG2+8ca3fdt11V7PZZptVJB1h4H/TuXPnyDzDv4i1n7z1Xd6/
0UYb2fREXXfkkUcqJpsQQgghhIjkww8/tOsO/Ju3jpLlccABB5guXbpUJA8n
TZpk13ROPPHEGufxGWrSpIndyyYvfv75ZxuLO2pvnI8//the89hjj+VebhyP
P/64TQ/pCrvmmWeesfos3yeEEEIIIUQQ2AwRpzlv+TbrY/DgwWb55ZeviE/H
e++9Z3Wd/v371zj/4osv2vPI7nDJJZeUPS1+eDcxCX788cfQvDr33HPt2l7e
ZeY9WrduHRkzjnhtxChweSuEEEIIIYQf9Bx8vfOWbbM+Zs6caRZeeGEbT6zc
/PHHHzbW2t133104h4619957W13nq6++srrGCSecUPa0+DnttNPMQQcdFKkz
EGv8lltuyb3MvAfpIcZE1B6mBx54YO7x7YQQQgghRHVC/DVkdOJf5S3bluNo
06aNue666yqSl8RDaN++vd33hbjOXbt2tes86DqzZ8+2sbDfeOONiqTFy6ab
bmquv/760DwaNWqUtRdDN8y7vLwH+iHpYt/QsGv4rk022aTieSqEEEIIIaqf
8ePHm0UWWaTO76kTdpx00knm8MMPr1h+sl8odlfEXmMfGMAHBj/7IUOGVCwd
jn/++cfqss8991xoHl144YWmXbt2uZdV0LHzzjvb9IX9zncRo1r7igohhBBC
NAyQt7/88stY195///12/9C8ZdpyHcz744dSn0A/HTduXKx42p999pldV/ri
iy8i9Ylu3brlXlZBB/5NO+20U+jv1HO+j+8UQgghhBD1n3feecfOdW+//fbm
9ttvN7/++mvotfjp7LXXXrnLtOU6iNW15JJLVjD3yw/xrYnJvNpqq5kLLrjA
fP7556HXsifocsstF5lHK6+8stV58y6roIP4EvjsRF1D/Ans8IQQQgghRMMA
GZj5bg7i8nbs2NHa+/jXAvCVP+aYY3KXact1sAZCHhA7oD6B30+jRo3stxEv
PEyvHTZsmGnVqlVo/mC7uOCCC5pXXnkl97IKOl5//XWbPvydwq7h+4YOHZpT
SQghhBBCiGIwV088rKwOfOPZF9LpO+5o2bJljbWATp06mVNPPTV3mbZcx5Qp
U+x3T5061e5RWZ8O4qv5y7dp06bmqKOOKui1xIXDdz8sf8gX7mN/oLzLKuhg
zyfSR30Nu4Z9Wu+6666cW7AQQgghhAijX79+teTWUo/VV1899DfWAvDR2H//
/a3uk7dMW65j+vTp9nu32267zPO3Gg7iDoT9hp/LVVddZWPRFdMFP/nkk9zL
KuiIo4ttvfXW5qabbsq7CQshhBBCiBCQ2Zi7zupAdmU+3y//4vvAfiQTJ060
7z344IMj92us64fzzZ8wYYKZNm1avTooxyDdZ5999rG2a8Qmu/fee61vT1j+
ELOA+95///3cyyro+OCDDwrrcmHXUM/vueeenFuwEEIIIYSoFJdddlmo/Ovl
2GOPtfvA5C3TlutApyMP+H99At2NWOGujLfccktzww03WP8bL8TkW2ONNULz
h+tZ43vppZdyL6ugAz8i0vftt9+GXsP3PfLIIzmVhBBCCCGEqCTI98jBYfKv
F9YGDjvssNxl2nIdL7/8spWV2WemvjBv3jwbR9u/RhfE2LFjzVJLLWV+/PHH
0DzCh2vgwIG5l1XQMWjQIJu+qGvwUXr++ecrWAJCCCGEECIvHnzwQTN58uRY
17L/zDbbbJO7TFtOWZnYzPUJYrCNHDkylv42Y8YMu+7z0UcfhebRbrvtZs4/
//zcyyroYB/RXXfdNfR3vovv4zuFEEIIIYTwMnz4cLs/Sd4ybbkO9qJElm+o
EIuN/YXYZygsj9hjidgNeZdV0EEsbdIX9jvftcQSS8TaV1UIIYQQQjQsnG/6
xx9/nLtcW46jQ4cO1s6rIYMe06NHj9A8ws6NvWepC3mXl/cg/gK+ZtinhV3T
s2dPs+222+adxUIIIYQQokrBxot9WPKWbbM+8FFp0aJFg/dbv/jii+3aVlRe
rb322qZv3765l5n3wL6Suhnla9S+fXv7fUIIIYQQQgTB3pPHHHNM7rJt1gd+
LcQliIrN0BAYM2aMtfOaPXt2aF5h67fBBhtE6hWVPEgHe+Gix4Rdw/fwXYpL
IIQQQgghwhg8eLCN6fXDDz/kLuNmeeDnsdVWW+Wdvbnz119/mWbNmpn7778/
NK+wFyNe2wMPPJB7uXGQDvyMouzq7rvvPrPsssuaP//8M+8sFkIIIYQQVcrc
uXOtXPnoo4/mLuNmebBOceONN+advVXBySefbPbee+/I/CLm2Zprrmm++eab
XMuN97dq1cqmJ+o6vueUU07JO2uFEEIIIUSV07lzZ3PQQQflrp9kdTz33HN2
jyH2oBTGvPnmmzY/Pvzww0gdA13nrLPOyrXseD/7g0bpXHwH8RT4LiGEEEII
IaJ49913zcILL2zeeeed3PWULI599tnHdOrUKe9srSratm1rTjjhhMh8GzVq
lNUhiOeQR7mxtsj72T8o6rquXbuaHXfcMe8sFUIIIYQQdQRidR177LG56yml
HsQkaNSokZk0aVLeWVpVjB492iy++OKR+4pydO/e3TRt2tS88sorFS23V199
1b73iiuuiLyO9Ddu3Ng8++yzeWepEEIIIYSoI4wbN87aOaEr5K2vlHIQh/iQ
Qw7JOzurkp122sl07NixaB6ybtK8eXNbJypRZuhVxAfv0qVL0WtJf7t27fLO
SiGEEEIIUcc44ogj7N6M1RJ7OOlBbC7m/InfJWrzwQcfWBuxp59+OjIf58yZ
Y+3dWGcZNmxYWcvs4Ycftu85/vjj7Xujrn3qqacKfkdCCCGEEEIkYdasWWbp
pZc2/fr1y11vSXpMnTrVrLzyyubqq6/OOxurmosuusju0Umc6WJ52rNnT6sb
nXbaaZnHZ+N5Z5xxhn1+jx49il6P/kq6u3XrlncWCiGEEEKIOsrQoUOtX0el
7JeyOFiH2muvvczWW29t5s2bl3cWVjXkD2t3e+65Z6z1O+IVrLXWWmb11Vc3
9957b9G1l2IH9/McnsdzeX6c8iXGNPslsV+QEEIIIYQQacFvYp111oncy7Ga
josvvtgst9xyZvr06XlnXZ2ANR3y69xzz42Vv7Nnz7Z5zJrfuuuua9fOPv30
00Rl9Nlnn9n71ltvPfscnsdz49x73nnn2fSSbiGEEEIIIUrh999/NzvssIOd
R8euLW9dJuq4+eabzWKLLWaef/75vLOtTkEMiiWWWMLqH3HzGl2SOG3oK8Qo
b926tbVDu+2222xctLfeestMnDjR/svft99+uznzzDPtdVzPfcRZ4zlx34k9
JT5YrDMKIYQQQgiRBdgabbzxxjauWbXqOwMHDrT+HtjdieQ8+eSTNv+uvfba
xHlP7LTevXvbvYxYAyRmwAILLFA4+Jvz/N6rV69UMaxJF+kjnUIIIYQQQmTJ
V199ZfUd1neqzZ6tT58+Vg6+55578s6mOg0x2Vg3Oeecc0qOv4dOjJ1Zqbox
6TjrrLNMkyZNbPqEEEIIIYQoB6zvbL/99naOnv0e89Zx8PEgHjLyOTGIRelQ
rssvv7zZY489zOeff55r+fJ+9rVdYYUVzGuvvZZ31gghhBBCiHrOH3/8UdAv
8J/Ia/+dd955x2y++eamVatW5u233847W+oVM2bMsD5aq6yyirUJzKN8hwwZ
YuOGt23b1sycOTPvLBFCCCGEEA2Ihx56yCyzzDJmu+22M6+//nrFZGD2Yrnw
wgttDIJDDjnEnhPZ8/fff9vYA8QcJ8bze++9V5HyJZ4B7+O97LVDOoQQQggh
hKg06B1HHXWU9T3n33fffbdsMjD2aqwjsYckaznPPPNM3p/fICA+NPsVUcad
OnWya2jlKF+ey/N5D7oO7xVCCCGEECJv8PFgP0piCR900EFm2LBh5vvvv89s
nv+iiy6y9lQrrbSSuf76620cbFFZ8JdBB1looYWsXRnxvb/88suSypb7BwwY
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
w1pPqVRK18m6zyt3na4LckWp7y4nebV3URm22267wv+JuYK9otN3oso8TNeh
L7v//vvNmWeeaW10iY0aFuOtd+/ehXdh5+7iufjb0PTp060vLrEUDj30UHPx
xRfb/jMNcd7pbcu8+/rrrzeHH3641f8ef/zx0GezBopswhrvWWedFZjGuN+c
x3eQfmI94Wtw33331fr9ww8/tN9FufKcM844I3F8n88++8z069fPtG7d2v6f
8Yr0X3DBBeawww6z/Y2T4Ug34/Pee+9t15Vfe+210OfGyXv49ddfze23325j
EXbu3NmcffbZgfGsssy7L774wtx4441m2223tf6c2Jnji0F8rWJ1Ksu6jy87
vu58F8/yxlB66623zG233Wbz+qabbqpxX5y6lkXdKGfbzDIfHcguDz30kDn9
9NPtd1OfLrvsskhdJ0460pZTmnoWVW+LlUex/gKSjAeltJM4JElLWBkQizYp
cfqmcn6703WwVYfTTjvN/s27wnyuS9V1XnjhBXvtCSecYP9mTYe/yf9ScbrO
xx9/bPP1gAMOsHO29Onko5fRo0fb/v2pp54yQ4YMKficf/755+aRRx4xw4cP
N0888YT910tW43Qp5VoOWaoYecpHWX2DI6/2LqoTf2xUfEy9cQUZu4P4z3/+
U+scsS033nhjc+CBB1q9HFng7bfftnGq8Qvy+kVi177llltaHZ73YBOHr9Dq
q69uzzuef/55s9Zaa9n5UqD+HnzwwWaVVVZJXA/jvtO15eOPP97G2aZfcuc4
gsZ1xnxkHvbX6NixY+H58+bNS/z+PL6DPsvZQXMwLnhhvOB3N/a9//771vYb
WS0uL7/8slliiSUK78BvFR0Gme2KK64wq666qj2PHMjYiOzIb6Sbb1100UUD
41zGyXsgZil59L///c/GTwXnO8u7vGSVd8imxGZ3v11zzTVml112sbJEsTqV
Zd2nbWKv6mIi81ye5Q7arUsLsrQjTl3Lom6Us21mmY8O4t0yL4R85eKh4Y/A
3FGYrhMnHWnLKU09i6q3xcqjWH/hviXueFBKO4lDkrT4y4C4sxtssIH17Y9a
ZwsiTt9U7m/36zp8O/0u53iPN660I0rXIf3Ihd6DduDF2Yi4+7/66iuz8MIL
2zmuUnG6zkEHHVTwLSY+Gz7lxC148MEHC9eiwyBXuzx0a1nMsxHfcPvtt7fn
11hjjcI9WY3TpZRrOWSpYuQpH2X1DWnyL8v2LqqXoL4HfXvdddct1N2geRzW
p71gX0kcN+qIv+9ELmAtmzr7999/1/gN22HeERQrn35phRVWMD179qxxnn31
uIcY6GmIeie4dku79EK8dc5vtdVWNc4zd0W78uL6UNKa9P15fQeyF+XHb8yD
eVlzzTXtuosX7Fv954pBDEcXR2fw4ME1fmPei/P87t+vgXUffvPHuY+b9+QR
4w6/eaGuL7TQQraP9cbkyDLvmDtdeuml7W99+/aN9bxy1f177rnH3h+0Zsvc
Y9hYFVXXsqobxd4DSculHPnIuMk8MoffjszFYfPrOknTkaac0tSzqHoLUeUR
dW+a8SBN+uOQdmyKKoM4JBkXyvXt4Nd1gHrLXDzniavmnxeK0nXQWeijvQfz
ow70CPpUZEovTsYtdV8Wp+v444B98803dt8/9v/zru8wF+FkaL/d3qOPPmrP
B83dZjFOpynXcshSSchTPsriG/Jq76K6Qc8NYtq0aXa+kbKnn8B+3MEY548P
5GIbMHcRBOubQXqTm6cMqtusOfIbvmqsY7rjlltuseeXWWaZpJ9b9J0QZo/K
mlejRo1M48aNC2vhnCN/kKO9nHLKKaHzncXen8d3OFi/5Z5nn322cI51d84R
F8ofZ5z53aSE9WeMSZxnLPPjbCKYQ/R+R9y8P+KIIwL7Z7j33ntrnc8q7xxh
sWvCnleuuo/9RFh/zpjEb8OGDav1W1hdy7puZF2ny5GPrKdwb5A9Tpi/TtJ0
pC2npPUMouptsfIIuzfteJAm/cVIm5aoMihGmnGhHN8OQboOIOth/8VvrBl6
n12KDZuzkfPbC7k+HB2rFJyuE7UexZpD0D1+Xcf5owfth5XVOJ20XMshSyUh
T/koi2/Io72L6gcbiTCwwWeexM3luL4LmcbfN7gYL9gpBUG94nfszL1E1W3i
wS222GLW3jLoYG06yj83jLRtGVx+eO2cX331VWs77IX2Uq26Tth3AHPxnGd8
9OJi6lNf7r777pL8QsPSzTPDdB03/+3VdSBu3ju9Pa78nWXepXleuep+VH9+
4okn2t+wY/cTVdcqUTcc1ZCPzk7NX+8gTNdJmo605ZR1vS1WHmH3ph0P0qS/
GGnTUqrsk3RcKMe3Q5iuA8xbYofE70cddVTBfz6troMuwV6TyLb4yvBudzz3
3HN2bZP409i0pSUqNgE2z/zGnL4XbNSidJ1999231rOyGqeTlms5ZKkk5Ckf
ZfENebV3Ud0QHyUKxm7nY8FaNXMzrBHSPzq8exmH+ZHhw8vv+GR4iarb2E/6
r8+CYu2JNdiwb3Eyc9iYQ//LfK+zAcxT10nzHWGyCz4Y2Du6cmaNGHucLHXN
NLqO//6gvMduzunrcedFs8w7iBofgp5XrrpfDl2nEnXDkbRcypGPrMHwnqD9
QsJ0naTpKIeuk6beptF1ShkP0qQ/ilLSkqXsE2dcyPrbHVG6DrCeztwl11C3
IK2u06dPn0J+Rx2XXnpp4u9wROk6riyRub0U03VY3/JTCV3HX67lkqWSkKd8
VOo3VEt7F9UHtqTFYH4Gv3DqAbawxC3Zb7/9Cr9Tf5Ej+X3SpEmBz8C2nN/9
dpuubgf5CCMzYVuZRmaKIuqdsNlmm4W2Fec/72/LrKfj544OSP44O5MoXafU
GB/l+A5nUx0k9zDnhw2ON3ZFEv9zh7Pxz0rXKZb3rEPyN+vrcXWdrPOuTZs2
iZ5Xrrof1Z9j91FM1wmra1nVjazrdDny0c39TJkypdZvYbpO0nSkLaek9Qyi
6m2x8gi6t5TxIE36oyglLVnIPknGhay/3VFM1wH6SGdrRWxK4lYl1XXoW/Hn
pp5jm4mtp/8gHgBrPrSHtOu/cXQdb6wBKEXXKXWcTlKu5ZKlkpCnfFTqN+Td
3kV1gj8i43Ychg4dav0NqQvYY2Lz6MX5YOCbG8SVV15pf/fb6rq6zd55frD7
4LcRI0bE/KJ4RL0TnE1O3LaMzNOqVStri+KIY8MW9v68vgNY1w2Te7wwplAf
0uyz5MadLHSduHnPGMy5sHVtP1nnnSuruM8rV92P6s+dfBOl68Sps6XUjazr
dDnyET9mnhkUXzXKhi1JOkotp6zrbVh5hN1b6niQpbyfNi2lyj5px4U8dB0g
NqWTY138sCS6Dv5j/O7iTIfh8sDrA5wEp+vgK+jH2bD5bdKIC8l5/x6VcXSd
rMbpuOVaDlkqTXrzkI+y+Ia82ruoXqiP2JDHhTkZN2eLba+Xm2++2Z7H7jwI
t0bOGpEX5CHOjx8/vtY9+JbxG+udxGb3c/755wfazBcj6p1AnMOwedugtuzm
bbxxYaLGtGLvz+s7wJUTttUO4qONGjWq1jMYF/3zZ3HAZjto7sbpOsSy9ROm
68TNe+cLSczPoPlA9lvwxmXJKu8cxCpL8rxy1f2o/tzFiWV9xk9YXcu6bmRd
p8uRj9zDM/1xyoG40vzmtfFNk4605ZS0nkFUvS1WHmH3ph0P0qS/GGnTUqrs
k3RcKMe3Q1xdB4hL6dbdk+o6Lj5g2Hy6Az9grksTSxicrkOf7cf5nYfFmqG/
8uLiJQTpOlmN00nLtRyyVBLylI+y+Ia82ruoXuiTKFtiNcalV69e9h5/nBNs
WNq3b2/ng/xtgJgGxOIgpr8fF8eH2OsOp9Mjkzq7TuxA6WPffPNNq69zX5qY
tsXeCU4WHzduXK17l19+efubdx8sd72LRUTMTdcfEFeZ/PDarhR7f17fAcQS
5zxz8w6+hz7Mey19GT4I3nfHBRuHoHGHmM+cx3fVb+tDv8Rv7GniJW7e47Pj
xkj6Ovwl2VeU/EIOZa8Gr66TVd6lfV656n7//v3tM4lL54c9BviNOQ0/YXUt
67qRdZ0uRz5Sl9iDAVsJf/wx9hnhXcx9YjueNh1pyynrelusPMLuTTsepEl/
MdKmJaoM4pB0XCjHt0MSXQeIG0CckSS6jlvPpG7Gwe1ZTj+cFOzfuJcYx17w
G2RsCYojz7dzD+3M9fP0Uy5mF/6GtFe3VxZkNU4nLddyyFJJyFM+yuIb8mrv
ovoYMGCAjanvYmbgs8N8N36JLg5LFKxFBum+9CH4JDPOU2+w8WBPSOLRMi4H
PRtdH7mBdGBnxPoj9dzVffof+icXH5+D/9OfEUMmDWHvxE7PxeDkwH6Z9AN7
krEu7n5jr6vu3bvb35z+hyzdtm1bG1/WxaWlTffr1y/RN+fxHdgfePOZZ11y
ySWFd9GHMd/Ht2DvSiwqbPWJKRkX+hkX84cDux7Wk4HY9uSd+409wNz+O8x5
kx7GMewnebdbS0iS9+wfxn5z7h0cPI/nu7Ue8iHLvCMtbj/mJHUKsqz71C32
RXO+o9iusqcq+xixFyi+yPgz8ds666xjbfa9RNXZLOpGsfekbZtZ56ODOWV8
dHkO6brwwgttfroYP+hBzGd643DHSUfackpTz4q1+WLlUezeJONBKe0kDknS
ElQGyMTEpk9C3L6p3N+eVNcB9pwgb+LqOi5GxWOPPRbr+c7eDdk2KS4vWQPg
m7DlxHaNsr3qqqsC2zT6m1uvoj6z7oxtCtdzDluCDh061FiTKnWcLqVcyyFL
xSVP+Sirb8ijvYvqg74AXzHqA2WOTyGyXlC8+iC4B908DJ7HOjVzllxXrJ6S
HuZ3sP+YPXt24DXMwTMPSpvy7nmblqB34r/kzRf+djIw5/iNb+N7OO/tU/le
5i286Wff5DB5L843V/I7/Pfwr9fWi7Hvtddes/nvYvElJSpdpIH/kyZXH/37
24WRNO+5DpubsWPH1toTJuu841+ONHXKkVXd512836WROUzeG5T+oL4grM5m
UTeKvaeUtunIug8BZCjWHBmjXb3F3tI7P5w0HWnKKU09K9bmHXHKI+xeiDMe
ZNFO4hB3bPKWAffwd5p3xumbKvXtSfnkk09K9nMvB94yowzxgaM9BfnveCHv
sI2iHrt9o2mLQbZwjlLG6SzKtRyyVBzylI+y+gaodHsXQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBCiXMyfP9+MHz/edO/e3WyyySZm6tSp
eSdJxGDSpEmmT58+ZptttjHjxo3LOzlC5I7ahBDxmTFjhunWrZtp37692Xnn
nc2YMWPyTlIuqN8IJ618+Nlnn5kBAwbYujV48OAyp1JUkjlz5piJEycWjk8+
+cR89913qe71H2HccccdJad77NixZv311zcLLLCAPWbOnFnyM8X/cd1115k2
bdqYKVOmZPZM+uYtttiiUGavv/56Zs8WIm/StBm1idJI20+Vo38T5efWW281
Xbt2NVdffbVp1qyZbTPnnXde3smqOOo3auJvz2nkw6+//tq0bdu2cM+QIUPK
nWxRQQYOHFgoW+/RvHlz07lzZ/Pmm28mvtcdQaBHLb744pHPjcv3339feNcP
P/xQ8vPE/+H6CeY4soT5liWXXNI+e8KECZk+W4g8Sdtm1CbSkzbPy9W/ifIx
YsQIs9pqq5l//vnH/v3jjz+aJ5980vz22285pywf1G/8H0HtOa18uOGGG9p7
qFui/uD0lb322sv07NnTnH766ebAAw8s1J0FF1zQnHHGGWbevHmR9/bq1avW
EUSPHj3sPZ06dcok/ehNPG/u3LmZPE/8P5gnogx//vnnzJ+93nrr2TKbPHly
5s8WIi9KaTNqE+lIm+fl7N9EeWjXrp3Zbbfd8k5GVaF+4/8R1p7TyId77LGH
vWf06NFZJ1PkiNNXbrjhhlq/vfLKKwUd97DDDrPzCHHvDeKvv/4yK664or1n
kUUWsWuGpdKiRQv7vD///LPkZ4nKsPXWW9sy++ijj/JOihBVgdqEEOHMmjXL
to/jjjsu76RUFeo3okkjHx566KH2nobqB1ZfKaavsD6MHSTX9O/fP9G9fgYN
GmSvdzaRl19+eanJL+hO0nUqx8MPPxzbpysIfCnVP9ddSi3/rJ9TV4j6XrWJ
7Glo9as+8+KLL9r2ceqpp+adlKpC/UY0aeRD5vWl69Q/4ugr06dPN40bNzbL
LbdcjbXApLrO5ptvbpo0aWK+/fZb8/+1dxbQktxGo/7NzMzMjImZ1o6Z7ZiZ
2V4z05rXvI6ZmZmZmSHmNTPETuzE/uN+79M7NU9XV90tqbtn5t6t75w5u7dR
LSiVpKrSZJNNZsbcrPVUQcc6zfLHH3/0+Bt7WOwa33333eRnqnzuna99hTrK
v87ndCO+si373qbbRF+tb6GkyqmifOmLeRaS5r74XcQzamKs0xfzwkb70p64
5aljnf4B67o77rijWcfcc889zRgiltDxyg477NDLXytmrPPQQw+Za7fffnvz
N2s6/H3ZZZdFp9lG6vLbb79t8mLNNdfMllxyyWynnXbKPvzww9z7GL8Rt3Kb
bbYxa5YHHXRQbv79/PPP2TnnnGOeSbyGvfbaK7vtttt6XVdWHth/ct+tt95q
YnyIj+X777+fXX/99dkdd9yR3XzzzeZflzfeeMM8Ez+nDTfc0PhQvf7665W+
Kw++47zzzstWWGGF7NJLL20dHzRoUMvX76677mrF24uVs7Z8Jr0nn3yy+ab1
118/u+mmmwrTFVLfQ/OqiNBnMFanDu+xxx7m2gMOOCDXp5F4lqecckq24IIL
mv8jf8nH/fbbz8hX+nOxEyVvBg4cmK2yyirGbuPJJ5/MTWsdZR7yzaHlX1ZO
MfUo5NtSy/uXX37Jbrzxxuz22283fs+0Teof7ZJ4PrRTOc7/4ffffzflyz20
07vvvrv1zb42E/q9qW2iCOTf6aefni2yyCLGd5l5qssvvzzbfPPNS58bU69D
KSvL559/3ryDPCd/SR9+opSvlAX/fvTRR+b6VDlVVFZV8oy4ttS9TTfdNFtv
vfVMv8j9pJk+44wzzvD6vRYRIvPs7yF9yBXkzLrrrptdcMEFwdcIIWVfZ9sp
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
vM8++9SeZkWxSWknxMoab7zxzPV/+tOfSq+nX55//vlb73jqqafqSLoyjBBb
35TetEv/aUe/2wTff/+9iY8hv3feeSf75ptvku51f3mce+65SWlVeaoUIfo1
8w1KZ2ENRNrpd9991+i7Zp99dvOeW265pdbn3nzzzab/3W233cy8o8vQoUOz
+eabLxt++OGzQw45pDAuy5133plNPfXUrTiVjKFIr++5itIEse2Efprrl1pq
qaDrqf9jjjmmueell16qkFJlWCS2vik9abf+01S/2xQXX3xxSyexfxNPPHG2
2WabZc8880z0vfLzwThq1FFHLXxuESpPlTwY+zI/9I9//KPTSVH+L7Tzduy9
hc0D77nnnntqe+Y555yTDTfccNk222xTeN2PP/6YTTfddOb9W221Ve51rAst
v/zytaVPUWKJbSd33XWXuX6FFVYIfscss8xi7nnzzTdTk6kMo6TUN+X/0279
p4l+t0lkvLLyyitnRx11lJnDXGuttVpjRPr73XffPfvtt98K7yWP3Z+PI488
0tyz8cYbJ6dZ5amidD+TTDKJaadN7xuHPRnvqcv35dFHH81GHHFEs6bD+ksZ
t956a2t+55JLLul1/osvvjDntt5661rSpygpxLYTdCeuX3HFFYPfgf0R94Ta
dSqKkFLflM5Rd7/bNDJeYb8nl8cff7y1TrXBBhv0stEoutfHf/7zn2zSSSc1
94w00kjG7i8FladKf+O6664Lth3tK0hbb3qsg2yqS+b+8ccfxi6N52266aZB
92CXNsUUU5h7pp122l7zQg8//LA5t8suu1ROn6KkEttOnn766WjdEz9a7Zv7
J033USn1Tekcdfa7KcTWx7LxCvbk+DtxzWmnnRZ1rwtznlwvfk34/Kag8lQp
An015VynwL6W9dN3332300kx1JVHfXGsc99997XWaGLiyxx00EGt+9x0iB16
fxnrdGMbUsrRsU576fZ2EpO+dvRR7RrrdHu5VKVd31f3WKfp+hgyXvn444+z
0UYbLRt//PF72N7HjnWYLx199NFNvNbJJpvM2Liw1hNLO+Vpf28X/QXshM47
7zxj63vppZf2OPfhhx9mp59+erbIIosYHy/q8OWXX55tvvnm2frrr5/ddNNN
Pa5nnh65KzGTmTsgLgbxszbaaCMTM5iYizbYrN52223Gnom4JOKD/v7772fX
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
TDPNVLjfoFKNIp23yMeLNQbOufs6FsVMljkZd+5WdKo8GbXaaqv1elZKu5W4
68xLY1eZ5/8vviLY5NogK1lfCUkHz84b68jYvmis40sbNnCcY05BmHzyyc0x
Yj77QM5wHj8hmzrHOqKn8ouJaf/KK6+07sPuzyZ2rCMx3Wx9Jo/UPEupp2X5
HFInsZlg/I1fiu/HPGMVGSntUmylgbVD1hA5jtwWmLty+/460teXyk/shrD1
c6k7NoFPzjL2dN9NO8nTV5FbnLNjuxNPxI1zVFc9S+kDytpJTNqaaFMpfWFR
HxXz/jrrW2zdSfluHzHfKzbRPv85+V50fZe65XNou4nJ07z3dbo+5hE6XpG1
CfzHYu6lrNj7k7Eiflfki/zIa+bhiD+NTVsoKXkTm/91yitARvn2KFLqI3Ws
I7qJW2eKdHV8jn36f5mMwj/fJaXdYrfNfJDo19jBMIfk9t+iZ9vxk7FJs9dT
ytLRxFgHW2HO0V7BthfJ8zGUe/AfspG57zrGOqznSzpifAklbfxcG4KYsQ62
hFzLHFzZHGOVPEupp2UyMaRO4rvkpqVOxF6N90i9w56aNRzmLFm7BGwOffsd
VU1fN5efr50wJ8cx3/4PKWMdbCpi5axAedHmZp555lx9lfOcs/flxR+Q8rSp
q56l9AFl7SQmbU20qZS+sKiPinl/3fVNCKk7Kd/tI+Z7RR91+wSQ78VHwqVu
+RzabmzK8jSv3+10fcwjdKyDXQbXPfLII1H32rpD0e+QQw4JTnOKPI3N/zrl
ldIexCbSV2YSN91XZ8T3Pmasg48f51irs6ky1on1y8b2mXVF7EWlHbl2adhh
YVNO7AH5PtZRffkgdpvtHOuIjyXXoB9yjHhHPtBXOe/aE6+++uq1jXWIS8Ic
Bs/DTzKULbbYwtyD/HHnNGLGOtiqcC3r02W6cpU8a2KsA2V1El2N+tjk+rb0
nfjv0JeL/xQ6Bcex6cDe2Rc/sGr6urn8fO1EYpIQr84lRffEzzpWzmIfhr8/
vrfYUbAml6evYm+Dfb/Em+U9xExxqauepfQBZe0kNm11t6mUvrCoj4p5f931
LabupHy3j5jvJd4wz8V21UW+l3lzl5T2XaT/hLYbCM3TvH630/Uxj5DxCmVC
HrGeasvvsnu5Fr8svhvbLmw13R+xJVjzIX9C9+FIkaex+V+3vFKaBzuPvDKT
tlHXWEfm9FZaaaUex8W33d3jKmSsg19YKowd8MuZe+65e50Te0z0JmJXMp/j
Q+Rr3WMdO069IDZs9lq8+Au5fsACseM479q8MldV11gHsL/necg8X1xZF/zG
pU/zrQXF2rAhM7k+z67JJjXPUupprK2gr06KTYdrU1kn559/vnkHfTE2axJj
7aSTTjLH8Y0h5pmPOtLXreXnayf4OHPMF780RfcUm6tQOYvOS5xIbCGEIjsk
IIYh54l7z5qdL/5yXfUspQ8IsQlJTVsdbSqlLyzqo2LeX2d9i607Kd/tI+Z7
+RauxefFRb7X53uT0r6L9B8IaTcxeZrX73a6PuZRNl6hr8emmH7flcdl98q8
h2077UPy0rYlLCJWnkJs/jcpr5RmEJtUbCNdiGeTN59UNtbx+aXKPD79nY3M
KWMnZiO+aT4ZRb/FuWeffTboO3m2ux8IMAfgizUre78QhwV599hjj3mfK37d
7lyJjHWwXXcJGeswvnKR9W/bT3vIkCHmGPafPqR8sYW1kTgxdrkzF0ocTWzq
JeZvKKzLEEdF9JiyPbbQnbk2b54sdqwjvqCsK/l0LPJT4nKl5llKPS2SiaF1
UvIKuwjW0FyI7Sv24pQbNtP0LzFzSqxlYjeNbbQ9Z4rfDu9mTZ65Nx8x6cuj
W8vP1074Ho65cbCBOKOcY343FGK/xshZmdO1fePKxjovvPCCOY99UN68TR3l
CCl9QJnuEJq2JtoUpPSFRX1UzPvrrG+xdSflu33EfK/MVbDe78YPlbGOG7cT
Utp3kf4DIe0mJk998gQ6XR/zyBuv0F+wN6nEv/bFSy4b64jNQN76vCA21mXx
sYVYeQqx+V+XvILUPluJg9iNlAlzXy6ix/v0fIk/7+6LJP2cbbcJrAHj60zM
LtdOZe+99zb3UH9EtlEXJd4SttfY6dsxg2TdhZj2QtF8BfMP1HM7vbwDHc5+
hkBcQb6R+UD2NciDdUqffMV/m+Pojm79RQfjnO+5rH1yDnshG2zQeZcb95Ux
BeMxZI7bthmvMd/i87HwlTtz6hzjx95YsVA+Ui7EtM/b85i1aeLRM1eWNyZi
LwWeQ9yDEPD5kLpH/4W/KPKYOoHcoZ+SupWaZyn1lPdwjjksl9A6ie4v9t/0
/8jEZ555xsyjkd92LF3smlPLkG/2zZ9hB4QdjRuXMCV9eXRr+fnaCWll3yds
6dz4Tcz9cj1zi7L3Rhmxclaul3dTj6R/J/Y9eeLrM+VbfDE3oY5yhJQ+oKid
xKStiTYFKX1hUR8V8/4661ts3Un5bh8x34ucEZ2UPsJGxjq+WNB1tW+XsnYT
k6d57+t0fcxDxivMFeCTQxxwxlnoNRzHlyyvzRaNdYrGrD7QlbjejRXqIyVv
YvO/LnkFVfpspRzKiPyWmPTYhUgcUHRRiUXGj5gnEnuE2CjYUMk5YohKTHGQ
fg7ZzFgVm2n0dtZ4iUfo05eIsSF+L9xHuyIuAGsMHGNthHZmj/+ZQ+FazmP/
Qvppw0XjYuo576E+YZtGfBvsdfN0OOlH7D1FBXQq5tIkH5gLZz4K2BtmiSWW
aJ3D9kf232E8T1oZtxD7kDTY85Dchw0RczDIbvwnsF2jLyM/fOMH5Dq+t1zD
GAFbB8qLuKvYu9rjCeQxsavtcmdPcXQP1v6RE6Qrbx0rBL5n5ZVXNmVOOq65
5hqzByp7NzP3xvoUe6L5oPxYRxMfQnRs+iqf7bYLMazFRkB+fAt57q4VxOSZ
EFNPyQO+U/yYkHvUJ/a7tAmtk/TRdnvlx/8Z+9p1gj3t5HzePGQe7GNAH+36
TlGvy/ZWCU1fEd1UfkXtBFhnwgeW88wX77///ka+SQw49FLme924xzbIYO6N
lbPsr8gxZK3IC4lLTPnl9ZfUL3dfEpc6yjGmDwhtJzFpq7NNVekLy/qomLyu
o75BaN2p8t15xHwv4wPZl5b5fNJJe0emccy3jhXTvov0H5eydhOSp2XyJDR/
mqyPPmS8Ij/iyWN7zn7qrOUU2X8UjXVkXeTGG2/Mvd9G7N0YJxRdkyJPhZD8
b0JeVemzlXLQZ7AxQGdAL+Bf0Sf4l5+c41o5xzHuo43SRjhul5v0c6zbsU5A
LBXWPOy5FB88h7VV1uQlpi3zuj5bLoH3Ms7nnqLYKMLQoUONbzX1nnVt167X
hbaDDbBPFrj5Z+cR6eL/3Cf7LYfGE7TfxfwQ9p7MB/j8d1x4F+u9zB1wry/d
Un52udu2JqTd9e1MhX6XuPt8A7IeW2efXYsL15BfpI9v4u9QPQuoC9gIPPjg
g6V9f0ie2YTWU7udSP2gDbjPj62TvIv6wPV5+44RF33jjTf2rleW4cZUB+ZG
fcdT01dGN5VfXjsR0K9Yp0WPkLaOjWqZvIMiGVImZ/lm2pQt95g/yJu3Ad4R
Gru1SjnG9AGh7SQmbXW2qSp9IYT0UTF5XaW+CSF1p+p3FxH6vbyXsuR7KU/W
t8r8k0Lbd5H+40tHWbspy9NQeSLp7WR97KtUkac2RfnfhLyCKn220hmK/FL7
GieccEKuj4KidDPYGsTE/1aUuuhPfYDSXVSJsa0o3Yz22X2L/tTPsd4dsp6i
KN0Ec6Cs37t+vYrSDvpTH6B0FzrWUfoj2mf3Pfp6P4fNDGvfrIPn2e8qSrdC
nE18okLiZSlKE/T1PkDpXnSso/Q3tM/umxBnB1nUF9dDsA0m7i5+nvg4h/oo
KEq38MorrxT6bChK0/TlPkDpbpj/pm4RA0BR+gPaZ/ctiEPPXloST4JYwcQf
KdsHvZvAf0zSTywnRVEUJYz+0Aco3Qkxrc4999xW3GTG08RXY35SURSlXXz8
8cdmzoX+jnEqNmDELe5reyMRz8m3P7WiKIqST3/pA5Tug9igxPt9+OGHzY84
jcT3VNsLRVEURVEURVEURVEURVEURVEURVEURVEURVEURVEURVEURVEURVEU
RWkP+IviO3rEEUdkc801V/bBBx90OklKP+G9997LzjzzzGzAgAHZFVdcUXpc
qYd//vOf2e23357ttNNO2V/+8pfk53zyySfZgQceaMppmWWWye6///4aU6m0
k7rqhKL46G/1S/UiRelfPPjgg9mss87aig/66aefdjpJXcOLL76Yvf7661H3
fPTRR9nLL7+c/frrr61j33//vTmW98uD2JpVOOmkk7KFFlooe+uttyo9J4XP
P//c7H0g9erqq68uPK7Ux9FHH52NN954Jn/ZgzkFYq1vt9122XHHHZdNOOGE
5ln77LNPzSlV2kVqnahbhnRSJjVBf/ueVOqQOZ3CV4aqFylK/4OY9dKmv/vu
u04np2tgHnuyySbL3n333eB7NtlkE5OP9hjp4osvbuWv7+fjm2++yUYddVSz
108qIqtZQ+kUs88+u0nDLbfcEnRcqQfGyeTvUkstFX0vMVynnnrq1n4oP/zw
gykn5m6VvktKnahbhnSDTKqT/vY9VagiczpJXhmqXqQo/Q/0at3juieMdcgT
9D7Wa0IoGuusvPLKZv7L/fk48sgjzT0bb7xxcvqfeuop8/xO7sWLPQPfcc89
9wQdV+qB/aHI3xVWWCH63qWXXjpbfvnlG0iV0klS6kTdMqQbZFKd9LfvqUIV
mdNJispQ9SJF6V9MMskkpk3/+9//7nRSugYZ6/CbccYZjf1VGUVjnVNPPTXo
vf/5z3+ySSed1Nwz0kgjBb23W5H9rV1fj7zjSj3Qf5O/K664YtR9X3zxhblv
6623bihlSqdIrROKEkJ/rF+qFylK/0J063a06euuu87YaHU7MtaZfPLJzb9z
zDFHabrrGOtccskl5nrxaznssMOqfEZH2WCDDbxjmrzjSj08/fTTSXoHe5Fz
3y677NJQypROkVon8ugrcnxYodPlUXf96gbaqRcpitI87WrT2MQON9xwUT4w
Kfzxxx+VnyFjnYEDB2b777+/+f/888+f/fjjj7n31DHWmW+++bLRRx89+/rr
r42/EHNLrPWkUkdepNKfxzqdzNcyUvUOsbmve6xTJa+6OZ/bQV3fX0UXddNQ
VY73tzKt63tSn9OufrWIbh7rhOSr7xod6yhK/0La9Ntvv53tuOOO2Zprrpkt
ueSSJobkhx9+2ONafCxuu+227NZbbzVxtMSH+f3338+uv/767I477shuvvlm
86/NoEGDWjZh2PZKHLK///3vQWnEvoa0Eedlzz33NGMBG9J5+umnZ4ssskj2
0ksvGRvbyy+/PNt8882z9ddfP7vpppui8kTGOnvvvbf5e9dddzV/8/w8P+2q
Y52HHnrIXLv99tubv1nT4e/LLrssKu3k1XnnnWdspy+99NJe59944w2Th/gD
bbjhhtnuu+8eFXOurCyEqmOdX375JbvxxhtNPFN85ql3lCN1jrg51EE5zv/h
999/N7703EMdvPvuu3s88+OPPzaxlLfZZhtjS3fQQQflpt+lah0LfXdMGumj
r7rqqmy33XYz5bnZZptlhx56aLTeQV6vuuqq5j7eKe2T2NMCY27q4h577GHe
dcABB+TGl7DrIPmCvnDKKadk6667bnbBBRcUpqVKPoeksYl6FUPTsqyOOpEn
Q1LleNMyKabNhMivsvSUfU9omqq0Ewgtj5i2W0Zs/Qotm9A68PPPP2fnnHOO
0U9491577WXaqk1IvpaVYYxelPK9iqK0F2nTa6+9divmCHFI8FHGP+/KK69s
XUs/jzwS+SrrHOybQqzaxRZbzByfdtppW/dgy7vAAguYuSfOEYdrlllmyaaZ
ZhpzvAzkEXIVPWO99dZrPeO3334z55977rls7LHHbqXp+OOPz5Zddlkz9vjz
n//cOp7XJ/lwxzrId/wYOMaz7bjSQtFYh/SiS9o/ZKbNGmus0eP+zz77LBtx
xBGzBRdcMDjdyFmxM/bFdaZP4Ly849VXXzX+SMjjEMrKwqbqWAcdj/55hhlm
MNdTZ6699lqz/wH9jzyH9GPDAZwjjaONNlq2zjrr9OgDH3jgAfMs5iCB/p++
b4oppuih0/uoWsdC3x2TRmKhEkuAeoT+Dvh3LbroolF6LfHV2UNH4sYSZ3q2
2WYzcTno4+WaOeecM1trrbXM/DHt4fnnnzf7Tyy33HI94nf46iB6+8gjj2z+
Hn744b3tp2o+h6ax7noVQ9OyrI46kSdDUuV40zIpps2EyK+y9JR9T2iaqrQT
CC2PmLZbRmz9Ci2b0DpAPGi+b6uttjL7OYDE8mHcE5qv5ENZGcboRbHfqyhK
+5E2/eabb/Y4/uWXX2bjjz9+NtZYY/WYx0DGiXx1bbpuuOEGc3zeeeft9R58
XjgXE6+eNQ7ktI2Mpx5//PHWMdZaxhlnHHN88ODBPa5nnxCOL7zwwsHvdcc6
gL7DfBPHiavm6vdFYx3GLMhH+4dNnMBYERlM32Mj/TH9WijIV3RV7pN5aWG6
6aYzupwNfhruMR+hZSHUZcPGeiHX04fYMA/I8QkmmKC1vgjUSa6VvliOTTTR
RNlRRx3V4xmkm2ewn0wZqXUs9N0xaURfYY6RH/XSRmIixdqTXHjhhV4bNvwA
Jp54YlOnXN2LtozNJboVax+CXQeJQ8t+fPT19Pvs0VdESj6npLGOehVD07Ks
zjpRJENS5HhTMimmzYTmf0h6ir4nJk1V2olQVB4p7SKP2PoVkw8heU56mQeg
zGxYM6HvRCeRMUlIvhaVIcTqRXX0MYqiNIe06aK1im233dZ7jzvWEf9mX5x9
+pmYPpI4kMgv5JvNzjvv7J2LwSaB4+76Pc8ZYYQRzJysrbsU4RvrAH0Ca9mc
Q27az6tiwyY2cq5dgdi1McaKQWKd3Xvvva1jzGdzbKqppsp++umnHtczF1ZE
bFlAXWMdxpT0IdzzxBNP9DjH+qF7nDlvV0fEZoPrmKenfsjvrLPOMsfHHXfc
oLSk1LHQd8ek8eyzzzbHfPaNqbbz2En5xjpbbrlla43BB3ZVvjoudRCb1lhi
8zkljXXUq1DaIcvqrhM+GQKxcrzoeVVkEoS2mdD8j0lPXv7Eypoq7QSKyiO1
7fqIrV+h+RCa5xtttJG5jjU5l4suuqjX8ZB8zStDiNWL6upjFEVphiIfvDPO
OMOcY/7DRnSBvLHOaqut1utZKX0kugZ2JTboYj79QGw8fLbjzMNwLnRPxLyx
DjAfJHvEbLrppi2/xtSxDnk45phjmn4YfyjeLb/77rvP6GPEn8amLZS88QQ2
DjKXjd1yjN9lTFkUpSElNgE22dwjvkzAnBpzaxynnxEYg7r7vy2++OLZKKOM
YuzVfT/sMt25Sh8pdSz03TFpFJsRtzyg7rGOxCJ89NFHvfdRtzm/yiqr9Dhe
JQZFbD6nprFqvYqhaVlWd53IK7/UsU4TMimmzYTmf2h68r4nVtZUjdVSVB6p
7cJHbP2KyYeQPMcOjGtCxsAQkq9F18TqRXX1MYqiNENRm8YHkXP0rzZlYx3W
PlxS+0iB9DGnNPPMM0frByIn6xjrAHYsrF1xzQ477GCOpY51TjzxRHNN2e+Q
Qw4JSjvkyXDsoPH/kWdi38Cae6wMLisLkDlDNw15x4sQuyJ8SqSeYjPOXDvz
tdhxwFdffeXdH4b7ppxyyphP9JJSx0LfHZNG5gh5l2//pTrHOvb+4Xn+5yIj
3LQ3NdZx87lKGqvWq1SakGV114l2jXWqyKTUdl2U/6Hpyfue2DQ1Ndap0i58
xNavmHwoy/MffvjBHMcWPNQ2o8mxjk8vqquPURSlGULatB1rAKqMdWJ99FhD
xv+QtRTWo5mD9ekHCy20UK5cRwbVOdYB1tvF1oT5YeLHxI51kNv4gGM3zVo3
dgLuj5gPrPkg/0PnPMXPxyfDWYdinR1/IelbQv2AQ8sCVl99dW8a8o6XIfof
fhbonvjTA36nHMffFH+GJ598ste95B15XHVeLaWOhb47Jo1jjDGGeRdxw1zq
HOtQ39AvOP7aa69572NcwHnXF6KKDheTz1XSCFXqVSxNyrK660SeDEmV403I
pNh2HZr/IenJ+57YNNU11nHLo2q7cImtX7H5UJTn9LX8jf1mnWOdojoZqxfV
1ccoitIM0qaxm3WRtVrXJo0YKRx39y8LGevgJxgKcnX66ac3a8BCnt2HPL9d
Yx0gFsw888xjrpX4STFjHeI/cd62ofEh38xeoyFgkxDSfyKz8euce+65S58Z
UxZAvBpfGvKOl3H++eeb+xgrYVsksbBOOukkcxybdGIN+cC+gGuIJVyFlDoW
+u6YNBL7g2t98YfrtmET32f8j30cc8wx5rzrU1ZFh4vN59Q0QpV6FUPTsqzu
OpEnQ1LkeNHzXGJkUkybiZVfZenJ+55YWVPXWMdXHlXahUts/aoic315zpwg
z8uzx3MJydeiOhmrF9XVxyiK0gzSptkjx0XsjVy/P5kLZf8HG/Gl9411kFuc
e/bZZ4PTJvObdiyUvP6JWC55805NjXWAODASzyV2rCNzx3nzboLY2oTE6Aax
r8PfR6CsfPuCMFZz1+18xJQFSIwjOw1Fx8tgXwX8mvBdol8R8K/gedgQsDbm
A32Va7BZYV8Fl3333ddrh+6SUsdC3x2TRv7PtRJn1Ya4p5xj7jqGvLHOkCFD
zHHszX1IXcPXzKaKDhebz6lphJR6xRwHe4rQrkPncZuWZXXXCZ8MgRQ5nve8
qjIpps2E5H9MevLyJ1bWVB3rFJVHlXbhS3dM/QrNh9A8lzgSxGD3rbWgv9jx
5ELyNa8MIVYviil31rCOPfZYYw8isbMVRWkW1l5po9hp2GBDy5qsL1YiYwDu
QZ6IfKHvlbgv2N5iL2zHZ5WYJ+xvIJTNDUqcJImTQmxm4utz7IorrjC6gOga
cu1jjz3W6znEj+Vc6J5eMWMdIG6A7NcROtaRuTCxmSmDfQ243o0Z5WO++eYz
1zI/JpB36El2HlBm6HJ2meQRUxZ5aSg6HoLsceSub2H3gI0F8ZZ80DeKbT7+
DpTHM888Y+Y7qZch8W0hpY6Fvjsmjdivsw8ONipuDCH8TXgG/r60wVBOO+00
cx/xjmzolwcMGGDWLV3dm7iB+LX4fFm4h+exdhlLbD6nplGIrVf4zsncBnsU
xnxTU7Ks7jqR105T5Hje86rKpJg2E5L/77zzTnB68vInVtZUaSdQVB5V24VN
bP0KzYfQOsD7ZfzBGIV+kHkKvpVxBvvg2GOdkHwt6oti9aKYcmdtKlZ+KIpS
jSWWWMLYbjA/hG6P3TprtMgt5h6IO+aCbi9rGcg/5mCIScb1HGOfLvbcs9cr
mE/jWs6zHs36OrKsaF706KOPNtcj4ySdEvuSfgo5wd+y5zs/fGgOO+wwcz97
n7LOLOfYby1k34LYsQ4MHTrUxM0MHevIvBN7uIcg9m7IzaJreK7sf0QeH3zw
wa3z6EmUG/mGrTaxdbBZzhsj2ISUBdAPEqfBTgN7YCPzfcdD7a+BfYZ4l7u3
EbYYZfsX0AfbecOP/3Ofr47bVK1joe+OSSPzjeyzwnnWUffff3+zx57EVkIn
YS7bjePqQvtjz1DxeUe3Z86COK4COgS+wsgExkTYsfD91Hf8ySQWITBHy7wn
MYlknhNdiP0Ly6iSzzFpdImtV+xJKelAxwqhHbKsjjpRJkNi5XiTMglC20yo
/CpLT9n3hKapSjuxKSuPKu3CJbZ+hZZNaB1g31OxgZYf8ddZM5G1npB8DSnD
FL0o9Hux/WfsTdp98xmKotSP3Ucxx4K9KfMRPjtVG2QL6+asX0ssVuZZfGu+
Au2d+RjuwQ84BOy30J/t69lfXOQg6eCHTEduo6+I3OMY/qjo03wnx8v02iow
L9jJ/ZH5dr5X8oJ/7fV+xmP4WKM3YW/o+luVUVYWIHlup0H+9h2Phb3cXJgH
9B33QR2lfpMHoXuG11XHQt8dk0bmHbBBQechDbyf/eti9rwk/XwT38Yz+Nv3
DZyjDjBuRVb49Fs7PySvSEuIrVcd+RySRh+x9YrjxCMJWX8Q2iXLqtSJMhkC
MXK8aZkkhLSZEPlVlp6Q/AlJU5V24hJSHqntwkds/Sorm9g6wDdid/bggw/2
GreH5GtIGabqRSHfC5SZG9tJURRFURSlm2APed/eioqiKIqiKIqiKH0V5qGx
MbN9BBRFURRFURRFUfoyxIImFmVI7D5FURRFURRFUZS+wiuvvBLsO68oiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoijKswJ6vIfvKKorSGdir
spP7lSmKoiiKovRF3nrrrWyeeeZJ3rdQUZTmYV9q2il7VyqKoiiKoijlsF/1
vPPOa/bcVhSlu7n++uuzxRZbzOxvryiKoij9jf/+97+dTkKjvPfee9mZZ56Z
DRgwILviiitKjyvVwS5mm222Cbr2+++/z0466aRsnXXWyXbeeefs559/bjh1
neXzzz/P9t5772yDDTbIzjvvvOyXX37pdJKUBml3/U6tX2uuuWZ2wQUXNJq2
WF577bXsxBNPNPssPfbYY51OTr/ln//8Z3b77bdnO+20U/aXv/yl08mpDDrN
s88+a+yn55prruyDDz7odJKC6KvpVpRO8Mwzz2TLL798Nv3002djjTVWNv74
42fjjTeesVNYcsklzblVV101W3DBBbP/+Z//Mb+tt96608luBPr9JZZYovWd
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
1jvvvNM6hkwu0rkhRhetus5QlZT308+j24X6yaa8I6Z+QGgdaXpdRwhNf0od
i6lflBPvLtpbq4q88/kFUz98x4v6DbvfQS5zPE//YzzJ3Dz5ZMdbCOm7Yp4X
S0xeNJEGYs9gN4FNkvS9yO8iPbDsvcS0IaYC57Ehcve0sKHfxmaJOOpuXMgU
vYJ/Xbs4+3p0GPxwSL/PDyb2W4uIlXkuqeku01XyCC23EJ0rJk1FZci//GLb
P9cNHDjQ2CbhsyM/xnJiW6Sx2BSlN+z/lWdLLhDH17c/27AGMok5nhNPPDHo
+lj7GsD2gXm+PIhnFLJPJnISm5xYfO9HPyFmJ+uh2GUzB0e94dvK9p8PzYPU
9NZFO95fxzvK6geE1JE60lJn/U6tYzFpIKY1c7plqLxTlO4jRFdpN+1OE3Ib
HwGfXxVjUGyMynwhFWVYBNv1ovkU5kNYX216b8a+AroYNhAhsEZPfIhQmMvB
rsGN7cCcH3M1lBX7DmB/hH01MaXyYL4pxF8/5P0SR9a3bp63Xiig14booinp
rZN2vL/qO/LKB2LrSB3fW1f9htQ6Flq/ZJ4iz7dLUHmnKN1Jma7SCdqdpgMP
PDAbPHhw7nl85JjrUhTl/8UsxP/32Wef7WUDbMMaNTpIaAyeYQF0SnyRQuKK
Yo872WSTlepNnCevxb4H/4Yq9iOs0W+xxRbB19f9foF5JtbV8XMqIja9ddOO
91d5R6frRx6dqt9CaP0C9tYgLm5RWlXeKUp3EaqrtJNOpYn5mrHGGsvIsjwG
DRrUK86oogyLYLtK7AB8NInHUGQ/je1Ika3qsAoxF7DFKYM9Hchr7GuL4s1x
HbGL8Cvcddddzfw8f6fGBMYunfi5odT9fmCuC78H4lUQP7jO9NZNO95f5R2d
rh9F6epE/YaY+oWNOzEUiYtVhMo7RekeYnSVYSFNzLOyzo0s880VEduC+adu
W/tSlE6AD6DYhxB3TkkD+6CQfVDxwWavNeLVEHOmv+tS7NuAHovdML7vtp+n
0v9od/1OqV+ky7cHoqIo3Us36iqdThP73EtsP+IN8jeyl5guxJLz7eukKMMq
xJ7z7S2thMMcC3vGhe6RrShK+yH2ErpAX9rHS1GU/0c36iqdTBNyjFhx+OwQ
R519TtmHRVEUpSmIA+nuS6koSvdAPDUd5yiKoiiKoiiKoiiKoiiKoiiKopSD
fTv7FiqKoihKf+W1114zey8Sy/Oxxx7rdHJq5dtvv81OO+20Ticjmdtuuy17
4YUXOp2MaIghRVwAYtsTb7YduhQ+2Pg4b7DBBtl5551XuP92N0LMK+LHEQsL
v+466K9tu5vadV9so9h2it0Y+3l/8MEHyc/65JNPzJ4SAwYMyJZZZpns/vvv
ryuZXY3a3XUHWg6KopSBLjT//PO34lY89dRTnU5SLsRFXWuttczeKezFvfrq
qxs9I4+vv/7a7Dn36aeftjGV9UK8dvx2+5J/PXtgEGd2880370hsRWLrU0+I
N0n8yb4CMVrGG2880w6pt1Xpr227ne0avf3cc881ZXPFFVd4r+lLbfS5554z
cwHsOcFvzTXXNHvapEKco+222y477rjjsgknnNDUs3322afGFHcn//3vf01c
2b7ctzRBSHupEy0HRVFCQV4Qj5x+6qWXXup0crygT2yzzTZmDoe95oYMGWL2
2M7rV7mO/VXuvvvuNqe0ftgTa8EFFzTzp30BYj1PMskkHY2tyLrSqKOOmu24
444dS0MK6Am0w5C9gULob2273e2a8pAYosRPzqMvtFHGOXPOOadJq3DKKadk
E000kdm7NJY777wzm3rqqVvz6j/88EN2yy23VNqTp6+AHr/GGmt0OhldR2h7
qQstB0VRYphlllmMfHrzzTc7nRQv2KxgD2WDjpQH+lIn93mvG2IVud/frTAv
v+SSS3Y6Gdl0001Xmy1YuyBWJu1whRVWqO2Z/altd6JdX3755Sb/HnjggcLr
ur2NzjvvvOZbbKhnK664opmfiGXppZfOll9++bqS12dgbEeb0jiyfkLbS1W0
HBRFiQWbEOQT9kfdCjZJb7/9dul1P/74o7GnePHFF9uQqvbAfDff/+CDD3Y6
KaUw1kEP6jTdko4YsDOjHaJ/1kV/adudatc77LBDNvLII5f6f3VzG8VGkDqA
fafA+sv4449vxsDDDTdc1P7i7BfK89gzdFjjwgsvzNZff/1OJ6NrCW0vVdFy
UBTFx3XXXZdrq4DvctP6UNH7Q2BtHL3tt99+K7zujDPOyBZffPHk93QrgwYN
Mn4B3U63jDG6JR0xiE4aO9YZFtp2p9o19WixxRYLurZb2+hhhx1m7Eptbr75
ZuMXhZ0j9p4XXXRR8PMefvhhU6d22WWXmlPa3VA/Z5hhhq5dI+0GYtpLKloO
iqL4OPPMM83c3bvvvus937Q+VPb+EIiNShqJtVUE/tjEAOtvoAePNNJIlXTK
dtAtY4x2p6PIpjKUlLHOsNK2O9GuZf2COGMhdGsbJQbBQgst1OMYPlLnnHOO
+f/kk0+e7bXXXsHPE7+yusc6dbShJjnrrLOyzTbbrNPJaAspZRHbXlIZlspB
UZQwmGuUWEz4A2Dfys/WfWx96OOPP85OPvlkM9fKGvFNN92U+2xkG/7fzMnu
ueeeJkZSyvtDwMaC+F7oVXnxc9ExeE9ITCTsfW+99dbsiCOOMD61yHbmONtl
g8L7iTV15JFHGj9f3s0vD+ayRh99dDOH3s3EjjGaKoeqY52Quv3hhx9mp59+
erbIIosY33/izmGvTgy6srbDd1511VXZbrvtlm288cam78afN2asM6y07ZB2
fe2115r4T++//775m/aC7zJrGqlxkK+++mrz3nvuuceU7wknnJBdcskluTHU
u7WN4j9HPGiBusf4RmIp4Nu25ZZbBj0L26RVV13V5At+PlLmdlwGYlrjv7TH
HnuYun3AAQeYtu2DekaMeHyHqI/ENCFmwrrrrptdcMEFpelpotx9/Prrr9m0
006bvffee7U8r139TzvLIra9pFBnOcT2wYqidCfY/y+wwAJGh0AGzT777Maf
jzhHHBdEH9p2222NPze6mhzjd+mll/Z6NjIRPY09QdZbb73W8207lND3F4H+
uP3225t9WujDeA5xUn1x9ZHhI4wwQmmsY2Q6OhyxUvED4Bvoc3gH+5s0De9n
nhVd8R//+IfRE3n/3HPPbf7NY4klljB9VjdD2YSOMZosB8Y65FcKIXWbuFZj
jz12q40cf/zx2bLLLpttsskmpW2HGKnkEd8odu3sD7TooosGj3WGpbZd1q65
l3HjDTfckE0wwQTG94dnPvHEE9lDDz1kjqXEhCZtfB/rTeeff76J73fxxRdn
c8wxR494Zjbd2EaJS2DHEWA/IGSNQFsJiWeFrxRjJomNjv8U+/MQj01iHnIN
8d6IIc5aHzr8888/n80111zZcsstl3300Uet5zH2xrZO6iK6MvMG+Hvw9/DD
D2902zyaKncf6Py0oTpoV//TzrKAlPYSS13lkNoHK4rSvSBrkFd5cehF90Hm
2iCLOb7wwgv3OI5MQ4baYKPLtY8//nj0+/NABmGjz7yLQF/Ls+69995e12PT
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
    "], {{0, 626}, {827, 0}}, {0,
     255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{827, 626},
  PlotRange->{{0, 827}, {0, 626}}]], "Input",ExpressionUUID->"49422f9c-537e-\
49a1-a377-5451577c926e"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3QXYLGXd+HG6u7uRkO5GSjqkRBAEDiGdEgICesgDAiIlJSBIl3RICrwC
CoKIINJxaFA67v/7nf91P++cYWZ3Zmv2Oef7ua5Rzu4+u7Oz98x9/+74zezb
77XxTmOMNtpo+433v/+z8XYHrrLvvtsdvMlk//uPzfbcb5ed99xxh7X33H/H
nXfcd5ntx/zfB3/7v69d9n//Y6z//e8g/a8XX3wxDBs2rO7daNlVV10V7rrr
rrp3o7LXXnstHHLIIWHjjTcO+++/f/jggw+6/pmvv/56GDJkSFhzzTXDz372
szB8+PCuf6bq0U/n9WA9R/VNH374Yfj666/r3o1Rnr+DJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJHXPNddcE95/
//2W/vbxxx8PTz/99MC/n3jiiTBs2LCwzDLLhPvuu69TuziovP322+GUU07p
+Pv+4Q9/CI8++mjH37fb3n333XDCCSeETTbZJOy2227hP//5T8vv9dprr4X9
998/bLHFFuHss88OH3/8cQf3tF7//e9/ww033BB23XXXsOaaa3bkPfvlfHz5
5ZfDT3/607D66quHVVZZJdxxxx2V3+Nf//pX+PWvf528x8UXX9z0cUkjv27V
txisda66gzr63HPPDbvssktYb731wr777hseeOCBnnz2rbfemrQP8rbbbrst
/POf/wyffvppT/ZlMBk+fHgYffTRw1hjjRVmnHHGsOqqq4a11lor2RZccMEw
1VRTJRvP0e7icf5/iSWWCFNOOWUYbbTRwtZbb528F+2pxRZbLHmM7cEHH6z5
25X35Zdfhptvvjlpe917771JueX/77zzznDTTTeFt956q9T7vPnmm2HppZcO
r7zySuFrWi2rX3/9ddh4442T/RosiH9nmmmm8KMf/Sh89NFHHXvfDz/8MHzv
e98LM888c3jhhRc69r51Gjp0aJh88smTc4cy1K5+OR/POOOMsNNOO4Vjjz02
uZawLz/5yU8qvQex7YorrjjwXS699NKGj9eNmH7JJZcM//jHP+relRH85S9/
CU8++WSlv3nxxRfDY489Fj755JOBx+i34LGirchvfvOblvddxfq1vDXSiTq3
m/UtBmOdq+649tprk3ZwrGvS25577tnVz6Z8nnzyyeGQQw5J2up8JnUq5z3b
4YcfHjbddNMwxRRTJPvCeaH/71e/+lVyvA477LAR6jDQ3078w/P0nWc9++yz
SZ/spJNOGj777LPksa+++ipMNNFEyd/89a9/7cl36ATazCeddFI48MADB8rt
d77znSRO5/FXX3216XtwzV555ZXDLbfcUviadsvqO++8k8SX9IsPBt///vfD
tNNO25X+BdpZ4403XtKnMrKgDUiZoBx1Qt3nI22VWWaZJTk38N5774Xrrrsu
6Q9rxfzzz598F96jzON1mXfeeZP9YXypn9CenH766ZNrd1k//OEPk++Sjo1+
+9vf5tb1cctDm5Xz9X/+53/a/h4aUb+Wt0barXN7Ud9isNW56jyud7RzmWNx
6qmnJmVlggkmGOGad8kll3R9P2jzjDHGGGGaaaZJ4u+sv//972GyySZLxieo
axWSPhDimyJTTz118vsdf/zxuc8TFy211FJJWyaaZ555kr956qmnOr6/3UZ/
EPtOf/oXX3xR6W9PO+20sO2225Z6bTtl9aKLLkrmfQ0G1L0rrbRS195/9tln
79i8rn5Avybl77vf/W7H3rPO85E2yxprrNGx9+O35rvQN1vm8bowZsa43Acf
fFD3royAGIfjRNzJ+EwZjWKcddZZJ/me2S3Pz3/+8+Rvttpqq458F/2ffi1v
ZbRa5/aqvsVgqnPVeaeffvo3xgoZE49xMxuxcrfRh8dn0XdcZMstt0xew/yJ
UR3XQ9ZH5J3z0XTTTZccL/o8inB9SPcfETfxN+l1OoMF8/nZ94022qjS37Ge
iXk4lPsy2imr1APM0frjH/9YaR/rQIxDO3ewvn+v0VbhN2dOaKfUdT6+/vrr
yecOGTKkY+/J+cJ7ZtfzFD2uEcUYh22uueZK5vo10yjGoY+8DMb5Y10y9thj
l/pcjRpaqXN7Wd9iMNW56h3i3ng9XXTRRbv+efvss0/T+CX29x1wwAFd35+R
QZkYJ4v1zYM1xtlxxx0r1d0R45crrLBC6de3W1aPOuqoZJ5wvzPGqeahhx5q
Kca54oorCuev13U+3n333cnn7r777h17T3JN5MUyRY9rRDHGmWGGGZL///a3
v9103UMnYpwLLrggeX1cO8UcIQmt1Lm9rm8xWOpc9c5BBx00EOPEdendRBzF
ZxWtu/v8888H1snffvvtXd+fkUE/xziNxp9aNffccyf73mjdbB7Wdlc5Ru2W
VdrC9IeWzYVQl1EpxulEeWwlxmEMlXVzRWss6opx4tqiUTnGaVQmunH9aibG
OPvtt99A/cy1q1FezU7EOFzvmL/OegfWA7FGL67hbEUdx66XWv1+g/G4tFLn
9rq+xWCpc9U7P/jBDwZinCuvvLKrn8UcSuZbcu0swvxN9oUcT/14LWCeCrEg
+VGYGzrhhBMmec6YC1rX/rYb47z00kvhl7/8ZVIWNt988yRPdRFeS37ZHXbY
IRlTZp1gdg3g888/n+RJWHbZZZM11OTq+t3vfpf8ps3evxnWOMZ5wazVLotr
Hn9XNvdKJ8oq12TaDPTf97MqMUgr5b+bMQ5zrchnwFwv+gHz1qO2Ux75Tr//
/e+T9YusUdhmm23Cz372s0oxDn2L8RrLWp6Y1yodz3TzfCxCTm9ya8b5IXG/
sut2aefy++69997JMTj44IMb5g1oNcYp8zns89VXX53kW2J9IXljOT6sbaZt
dP311w88zn+DOSy8D39z4403JuufKTfkNWdN1YUXXjjCZ7RTXv7973+Hvfba
KzlHNttssyS+4O/ZF9Zp07fNdaGRGOPEHDJ77LFH8m/2pygPRLsxzl133ZW8
duedd07+zRgO/+b3qCJ9XDlOrCdnbTrz4Mnnmlal7JJb56yzzkrWE3MOciz5
jfNULa8o+7u1WjaKyhtroMllePnllydlk/2kvuA9zzvvvKTNnlX2uDE/nWsi
x4BrCd+var4+tFLn1lHfYrDUueoNzk/Wd3V6bnkRrhdF8y05d7iOTDLJJEnf
VdW15N3G/sT55PQTMI+APEExzyrbOeecU8u+tRPjMAbN+C/XjfgYW7beB/ki
55xzzoHrLnUJdRe5+mK76OGHH05+w/g+xx13XNIGpg5u9v5lUCe0shaHumPM
MccsnRu5U2WVeR/Utf2MPrpmMUg75Z8Yh+PQabQZiD1ou9IuYR/Yp3Qbsp3y
yPpFjgvtqniPH9YoLLfccqWvmcSEiy+++EDuQ/aP/AKzzjpr8njUrfOxCHPk
ybcY82DzO84333zJOvd0Djxet8ACCyQ5wBmDom3xyCOPJOt+V1tttdw18a3E
OGU/h/OX9ivfm/fiWNI+5Jwkv2z8DNaxxHYOz1FWxh9//GRu9vnnn5+0peKx
Teeybqe8cI3hM+J1mDXU/Mbjjjtu0mYmrwN/26z9lY1xOBasl+Ix9iWbWxON
YhzKHLFseqNMp2244YYj/D3tWtbqkquqLNre2eNKLDDOOOMk/6YNG/e9Stll
fQXny/bbb58cU8TcCMQ7aa2U17K/G7FIK2Uj77hExFScg1zH+HziOGIqXkdb
/ZlnnhnhvcoeN+I/PjP+nn/729+Sc4J4qKpW6ty66lsMhjpXvcE5RbliXLps
/pZ2xHOX6ylzN9jIBcb5zb3h6G+pki8T9A3RDmll49pVNncbcznID0U/Tfqe
hvQfXnbZZcn1t668he3EOLQP07iO8zh52NKYJ0H+tl/84hcjPH7//fcnryfX
Y0RfIzn8ePzEE08s9f5l8TlV5wWDayTt8rI6VVZpe1fJ9dKr8hzRBuC3og+y
kXbKP/tG+7mT6G+mLZO2/PLLJ78ZZTKtlfLIcSHXHFu27zLmVavSL8SaCv6m
6B4R3TwfG6GvuGiuGn2x9IHx22Xb1XwP2mC0BbNtjqoxTiufw5wD3ov2Xhp9
1zzOnJaYCxscL14byy5tQz6P18bxnqiV8kI/On9DWzxdXmL7kHsN8d1oFzcb
Z8vGOOA945wL8qRlx4IaxTjEKuSDTm/MI4q4PyvxBzFAWuw3qHLPpvRxJWcw
4yNcF2iHH3nkkclrqpRdfn/atpzbaRxD9pm+A/IGo5VyVPV3a7VuKypvzM/i
HlkR+8Bx43XkiUqrcty4VnO+pbH2LvtYGa3UuXXVt6ha52rkRD8N9QDXj6rr
GlrF9SW2QbjmsD3++OPJuUM7nTHgqri+0U/TykbfRhnUJ9y/gvqzH3VyPQ55
3Oh/oV8r3UbgGhP7IPmbuHEd5nHmLaUV5Ykqev+yYo7dqmWW3NtV2tmdKqu0
xavkZe5FeU5jHgntBO6zVqTd8h9z8jS6R0IVlCH2mWtXGvkHs/2kUdXyeOaZ
ZxbO1WllPQ7xWJkYp1vnYxHmxBTFONttt91Af3Ue4uK8tk/VGKeVz6FMxpz5
f/rTn0Z4/WyzzfaNx+lbz7ZJ47hkXtmvWl74HXh9tm3FeRnHUsrKi3FA25y+
dJ4jZkh/fjtz1eJcuOx8rjh/jdiqinhcuR9fniplN+bRysb+YDwu/Xgr5aiV
363Vui2vvDHvMo0yymvy8tKXPW6MnfBvcoxxf5s0xpSqaqXOrau+RdU6VyMf
+goYY2Ustld59uiDoN+FMaM8RxxxRFLG0/dw6Rf0wXCsyDvDPFiuP5xDjJO/
/fbbde9ex3MOcK8tnkvP/SY/CseAMeC8jXm/6X6wqu9fBvOE+Ltm84KpX7L9
nFz32KcyOllWKS/M1eon9GUzl4H5UMxFafY9OlH++VvaC5QV5p03W5PQDO1X
5ial0U4vinGqlsc4Hy37GehljFO0f1XPxyKNYpyY16toTj3tD55fd911R3i8
aozT6ufEvt+4hgSsl5h44omTx2kTRsQEsb+/2f6g6u/BPE0e45xKoz3L41Vy
lhbFOOBcjLmlmOcU1yW0GuNwraP/gv4C7lvEZ8eNdd3EkcxNLXN/5ajZuqsq
ZTfes7xM27yVctTK79Zq3dbsuNCHxBgbsUredaLKcYtxCWOXzA1o9f7Orda5
ddW36Mc6V711zDHHJOcKbY1eoU1FOaVfJk/MW8m6uH7D+RtzftA3wvg180Lp
r+mH+0HHub7Dhg0r/TeMpxddp2O9kr5Oc42baaaZSr9/o3og7/3LYO03f9ds
XjC5J7O/C+PtzA0vo5Nl9dBDDw3f+ta3Sn1urzCfjT5Q2n3Um83WhXai/FM/
ETfQl8rYSDv5mrKov3lPjnMrMU5eeaSdwWN59wjpRozT7fOxSFGMQ+zK40X7
hHg+Zvcj9pdn23J5j7fzOXFeGscituFYZ8KYDeN8zA/E8OHDc+//02qMk/d7
0MfNY9n5Xsy5ycZhzTSKcUAfRZzP9OMf/zh5rNUYhzojHv9GW6N7UGc1a8uX
Lbtcp3gf5to1G/NvtRy18ru1Wrc1Oi7EB8wf5Hl+tzxVznnG9Om/iseEOXzM
cauSpwet1rl11bfoxzpXvUP/BLmQ8sZ+u4nrNeWUXKV5Ym50/r8K5sq+8MIL
LW1l+6boL2ROKK/nfGNeMWPK99xzT6V97ZbYd8R84LIWXnjhwus019HsdZpr
JPOZy14jybtV5f3LoD5vVmcjLz8+173Y5mmmk2WVtmOV9fa9KM9pp5xyStJP
m5e/J2q3/DMfgzZn0fFsFceKtcf0azMvhvZIUYxTtTxyjeSxvDym7cQ4RWuW
un0+FimKcYgZ4v2h0+sF0ogleD67LmqDDTbIbcvlPd7O5yC2N1mfQyxDHgXQ
vuJx5vBzXXzggQe+8bdxvUlem7NqeYnrKPgu8Z6HfDf2mXwOb7zxRu53y9Ms
xgFzkOKcKc5PcmdVjXGIG8gxQTlivhPzM7MbbVfGeChvZccCmsU4Zcsu35H3
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
nry14fRd5z2ePebxuolWywuvY80qYwis7Ygb7UzWWtAerJJbrRWsZ6iz3kwf
n3jsOEca/YZVyi7nDPO8mBvbrF+hbDmq8ru1UzaKylsR/oZ6vCi2b3bciHnJ
s8HzzMOjjd9rva5v0ajO7WZ7TJLqxnWe9fOtzLesinqM+QJ5awj6TdkYpBfv
z9hk3n03pX5G25a5nHlroIi1mAPB2IL6i79b9/SyvsVgqnMlqRuOP/743PXV
nUbOzuw9C/sV6+FZD94tzHsoE+PQ78j8jzi/XhosmGNDPvUijH2WvV+Iesff
rbt6Vd9iMNW5ktQNzAFgDUU3723E/dTJL9psnUq/YI45eW26EVvQF8qcj2b5
MMjDyr1OyuQCk/oJ84nor6aNVeSoo47KzWmv+vi7dV8v6lsMtjpXkrqFdYtc
d8vmxKqCepM15MyDHizIscQaUualN7vXXhXMJ2d9DfMHmtU93Hur2XpYqR+x
5oR1zqyhzlsbwZp7+hEarZNU7/m79UY361sMxjpXkrqJOo38x5121VVXdeQe
Gb1GHj7ugU1OM/I5tRNvcF8FcrQyl51c0/2eV05qF/eVjPm+yMXHvzmXyB/F
Ouhma8xVD3+33uhWfYvBWudKkiT1O8Y/yfHH2g7y5XIf2kb3hld/8HeTJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJElqzxdffBEeeuih
MGzYsDBkyJCw/PLLhxlnnDFMNtlkYbTRRku2CSecMEwzzTRhoYUWCptsskn4
6U9/Gq655prw7rvv1r37kiRJkhQ+/fTTcNVVV4Xvfe97YeKJJw5jjz12WGaZ
ZcJ2220XjjrqqHDJJZeE6667Ltx9993JdssttySv//Wvfx322muvsM4664Sp
p546jDHGGGGxxRYLxx57bHj55Zfr/lqSJEmSRjFvvPFGOOCAA8Lkk08epphi
irDTTjsl4zGvv/56eP/99ytt7733XnjwwQfD0KFDk/Ed4p211lor3HvvvXV/
TUmSJEkjOeIRxl/GH3/8sPjii4cLL7wwvPnmm5XjmkYb8c6PfvSjMM4444QV
Vlghmf8mSZIkSZ12wQUXJGtpFl544WTMppNxTd721FNPhe233z6MNdZYyTjR
O++8U/chkCRJkjQSYOxm4403DpNMMkk47rjjklij2/FNervrrrvCoosuGmaa
aaZw//331304JEmSJA1ijz32WJh99tmTfACPP/54T2Ob9Pb222+HffbZJ5m/
duKJJ9Z9WCRJkiQNQuRBY+yGPNCdXnPT6nbFFVck+dtYE/TVV1/VfYgkSZIk
DRI33XRTGG+88cIhhxzSUizC+M95550XDjrooLDtttsmuaU32mijsNVWW4Xd
dtstnHzyyeHWW28Nb731VuX3Jt8a64K22WYb4xxJkiRJTT3wwANJ3rSjjz66
UuzBWplddtklzDzzzMn9Pmedddaw+uqrJzHO3nvvnWw777xzcu9P8hYQQ00w
wQTJPXLIZzB8+PDSn/Xoo4+GaaedNuy55551Hy5JkiRJfezZZ59N7nez7777
lo43/vCHP4QVV1wxjDnmmElMc+aZZ4ann3666d9xjx3+lrhnyimnDNNNN11y
jxweLzuew1y6448/vu7DJkmSJKkPffrpp0luAXKokUutWYxBHLPhhhuGcccd
N+y4447hiSeeaHmdDet9TjnllGTsh+3yyy8v9XdXXnllkofA+4VKkiRJytp9
993DHHPMEV5++eWmsQUxCGMvK6+8cnjkkUfaziWQHts5+OCDk7iJe+KUmb+2
3377hRlnnDHJvSZJkiRJYA0O99rkXjTNYopjjz02GTs58sgjS433tLKR042c
1cstt1x48cUXG76W2GaJJZZIxpIkSZIk6csvv0zuscm4SbPY49BDD03yEZSd
S9bO9u9//zssueSSYcEFF2wa59xzzz1JjEasJkmSJGnUdv7554epp546vPTS
Sw3jiJNOOinJhXbDDTd0Pb6J22uvvRaWWmqpsMwyyzTNRcB9fFZYYYW6D6ck
SZKkGnF/mfnmmy8cccQRDeOH2267LZmfdtFFF/Usvonb888/H+aaa66w3Xbb
NXzdU089lazjYUxHkiRJ0qiJvGSTTz55wzwDr776anLPG+5F0+v4Jm7ce4cx
pIsvvrjh67gXz5prrln3YZUkSZJUk7XXXjvstttuDeOGPfbYI8w777xJfue6
Yhw2xprIn0bMVfSahx56KIwxxhhJzCZJkiRp1ML6Ftbp33fffYUxw5NPPhnG
Hnvs5F6ddcY3bMRYc889dzjkkEMavm6hhRZKcr9JkiRJGrWcdtppyVqcRvHC
zjvvnKzjrzu+idtZZ52V3JeHXARFrxk6dGhyL1NJkiRJo5aNN9447LrrroWx
wuuvvx4mnnjicNlll9Ue28SNe+HMMMMM4Ywzzih8Dfmjma/mPUElSZKkUcfX
X38dpppqqnDppZcWxgrnnHNOmHbaaZNYoe7YJr3tvffeYeWVVy58nvuSTjPN
NOHqq6+u+zBLkiRJ6pHnnnsujDbaaMn/F8UKW2yxRdN8zXVsd955Z7JGqNF8
tXXXXTccfPDBdR9mSZIkSW0g3xjzy8q48cYbk/t+NoolyGF23nnn1R7TZLd3
3nknTDLJJOGqq64qfM0+++yTzMWTJEmSNHh98cUXYckllwyrr756uOCCC8JH
H31U+NqTTjopLLvssoUxwgsvvJCM8/z1r3+tPabJ25Zffvnwi1/8ovD5008/
Pcw///w9PPqSJEmSuuGxxx5L5nERn0w22WRhp512SnJDZx100EHJOEdRjHD7
7beHcccdNxkzqTueyduYQ7fNNtsUPs9aHNYbSZIkSRr8DjvssCTGSW/kiOae
MXEu2+677x5++MMfFsYI5CKYfvrpa49lirYDDzwwrLPOOoXP33bbbWG88car
+ZeQJEmSRg3M/5pjjjm6ts0+++xJfJKNc9i45+d6660XNtxww+TeN0Uxwrnn
nhvmmmuu2mOZoo15aiuttFLh8w8++GDyfT///PO6f25JkiRppEcu5ssvv7xr
2/HHH5/EMtn4Jj13bYcddghDhgwpjBHOP//8JFaqO5Yp2o444oiwyiqrFD5/
7733htFHHz189dVXdf/ckiRJktrAuMViiy02ENeMOeaYAzkIPv7444HXcY8Z
ckMXxQhXXHFF07xrdW77779/WH/99Qufv+mmm8JEE01U4y8hSZIkqRPiWpzs
+pu81zVaz8JYzxhjjBHeeOON2uOZvI34rNFcu7ieSJIkSdLg9fzzzyf3hXn4
4Yebvvacc84J3/72twtjBGIbYpz777+/9ngmb2OsatiwYYXPE9+RG1uSJEnS
qIFxGvKONcoNPe+884Zf/vKXtccz2Y2xKfJa33HHHYWvYa0R+aUlSZIkjRrI
e8Ca/EceeaQwTmAu2AYbbFB7TJPdrrzyyjDJJJMk36HoNcstt1w47rjj6j7M
kiRJknqINTunnHJKYZxw3XXXJWM9L730Uu1xTXr7wQ9+EDbffPOm4zwPPPBA
3YdYkiRJUg/ttttuYdNNNy2MFd59990w00wzhZNOOqn2uCZuxFvkS2Msp+g1
11xzTZh44om9N44kSZI0irn++uvD5JNPHoYPH14YL3Cvzdlmm63hvLBebocc
ckiYZ555kvir6DXcA2ijjTaq+/BKkiRJ6jHGOaaaaqpw4YUXFsYLr776aphy
yin7Yizn2WefTe5j+pvf/KbwNW+99Vbynbi/jyRJkqRRD/PV1lxzzYaxxamn
npqM9zzzzDO1xjisw1l66aXDe++9V/iaiy++OImDPvnkk7oPrSRJkqQaPPnk
k2HMMccMDz74YGHcQEyx4oorhlVXXbXhHLFubueee26S/4A8Ao1et9RSS4X9
9tuv7sMqSZIkqUasXdlss80axg5PP/10mHrqqcPee+/d8/jm3nvvTfIMNJsv
Rx448qkxv06SJEnSqOvRRx8NY401VrjrrrsaxhC33357mGCCCcLQoUN7Ft88
/PDDYdppp03u1dPoddzLdNFFFw2777573YdTkiRJUh8gFxkxArFCo1jiqquu
CuOPP34yH6zRuphObHfccUeSP4B1OM3myJ1wwglhiimmSHIOSJIkSRKxDXPR
jjrqqKaxx6233prkWiNXwXPPPdeV+Ob4449P5p3ttddeTWOpJ554Ikw66aTh
vPPOq/swSpIkSeojN9xwQxhnnHHCbbfd1jQG+fvf/x6WWWaZJC4644wzOjam
89BDDyX5DSaZZJKGOa3jxn17yLW27rrrhq+//rruQyhJkiSpz+yzzz5hlllm
KZUnmrGfYcOGJWMo8803X3LfmjfeeKOl2Ia8AptvvnmyLmjTTTdNchyU+Tvm
2HGPUuaySZIkSVIW9wVdY401wkILLRRefvnlUnHGCy+8EA4++OBk7QzxzlZb
bRXOPvvsZA5Z0fjOSy+9lIwbHXDAAUl8RP7q9ddfP9x9992l46IjjjgiGe/5
y1/+UvdhkyRJktTHPvzww7DEEkuE5ZdfPrzyyiulYw7W+//+978PW265ZZhp
ppnCaKONluRhm2eeecJiiy2WzG1bcMEFkzxp8bnVVlstHHPMMeGf//xnpXEf
xo9Yr3PnnXfWfbgkSZIkDQLEK8QlCy+8cKl5a3kbf3fjjTcmYzrc2+a4444L
p512Wrj00kvDI488knxGK+/7k5/8JLkfKPfDkSRJkqSyGM9hnGXWWWdteu+c
Xmzc25N7lU4++eThvvvuq/vwSJIkSRqEPvvssyR/M/PCmFPW7D413drISTD3
3HMn64SY1yZJkiRJ7bj66quTe2yyTueee+7pWWxD3oNddtkljD322GHnnXcO
H3/8cd2HQpIkSdJIgnvRDBkyJMnvvMUWWyT3sulWbPPaa6+FoUOHJvkJyFPA
OI4kSZIkdcPDDz8cNtxwwzDGGGMk9968+OKLw5tvvtmR2ObBBx9M5sZNOeWU
YY455kjyFXzxxRd1f2VJkiRJo4C//e1v4cc//nGSA4B5bN///veTvGmPPfZY
pbloV1xxRdhzzz3DAgsskMRNq6++erjkkkuMbSRJkiTV4tNPPw3XXHNNEu+Q
F4B730w44YRhkUUWSe7ruc022yRrahif2XbbbZPcaCuttFKYfvrpk9dONtlk
YYMNNginnHJKcj8eSZIkSeonw4cPT3JNn3nmmeHggw8Ou+66axLnMM6z0047
hf333z+5V861114bnn766fDll1/WvcuSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJElqw5NPPhmO
PPLIundD6pqDDjoovPzyy3XvhiRJknrgH//4R1h44YXDW2+9VfeuSF3z3HPP
JeX81VdfrXtXJEmS1EWfffZZWGSRRcIf//jHundF6rorr7wyLL/88uHrr7+u
e1eknvmf//mf8J///Kfu3ZCkXF999VXdu9BV//rXv8Kvf/3rsPrqq4eLL764
6ePqDObv7LDDDqVe++6774YTTjghbLLJJmG33Xbrep352muvhf333z9sscUW
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
xZyodLxB/2acw1aUeyeWPdbQpPU6xsn+PW1r8nkVna+xDyi7f0WPI16LGQOL
mFfH/LJOiPNs89Am5rP5TvQ9s5/9vhYHjN+w3+m5x1mMs5NnlLYY7Z5mc4nj
vGHyJ6VxfSUHUd795+lTrNrepg7iOs2xpjw1y4NWFvMvaSOk7y2Rh7nSVXFs
su0NUM9wzPLmTJd5z6rHG60c8zy9KB+t7G+V8hHbY526H0ucl8ZaBq53YM47
vy/9s4yRg/Zn0X1HiOmKru2sh8m2Wfis7HW+kWZ1QNX3K1K1zDMHjnUaZTAu
lpfvpSpiNvq6s+ujKQ/sY6Mcioceemhy3e8njJsxTwysicjOm+Z3LXtfg7wY
p9ttjzKatSMatfnzzp+oU+2ITpVNlGkzVf2+jMPyWHbuParGOO2cPxq1xPvj
kN+iGcr9WGONlbz+iSeeyH0N9QfPZ+d1lrnOxHmznYpxmLPLOC5rjBinpr+u
6Hwlj3/e/hU9Ds4v+k3IlxDPZa7tncq9mrcWJyKuifclZ/58lVzMaRyjF154
oaWNcaaq6Hdhn6kHy2B+Ce3QuAY5D+s1GRfP9vEyVlT0e1dtvxKb0VYkv18n
MdeA9lXR7xzRXk7nEC+LNdZ599WJv0Oj41qkleONTsU4ad0qH1X3t2r5IAcS
n51eI92u2OZgfQ6xTJw7RPnicdZoM95blIdy4YUXLmyzxLwv6TYLayO4/pW9
v0CzOqDq+xWpWuaJGWIM2AjjYvx9dr1QK2jL5Y3FMN+Yz2h0X2Da/lXyW/Ti
Gk88HdeD0fdAuz2iruIczZsfmScvxul226ORsu0IcmdXOX+iTrQjOlU2q7SZ
qn7fmFeKnI9ZVWOcds4fjVrimrJma3ajuGaGNWJ5yAXC89l+nDLXmTh3vBMx
DucRbZt0/plG467M18/bv6LHozjXl+sreRs7eX+2RmNTYJ4an81xa/XeDqwL
oE5oZWO+e9WcA7G/Oc6xa4a+WNY2pvu4ss8zNs28yqyYj4J8WllV29v0BWTX
dLeLtaSMQ3BMmiHfGnkFq2LNFnOvspi3RVuw6r0NWj3e6EaM063yUXV/q5aP
+NmdyAcexflv9MswNy3mTIv1PusYyEdVJPaZlG2zUHbz5tgUKTNXrcr7Fala
5rkWlRk/imvhO7GGiv68vLqCeJQxqEZ5oSjrVXIO9OIaT1xNHMNcIcbj0nPc
iZM4btm1YkWK5qp1s+1RpEo7Is5DqRrjoN12RCfKZtU2U9XvG+/tl5dXumqM
0875o1FLXDfGWHMZp512WvJ65kbnieNCzKVKK3OdietmszlCY4yTvY8yimKc
2MeQzq/c6HyNsV52fmfR4xF5R3meMWLmvGRz/5IbhdzvzE2p0j9J/36zsWrW
9lGf8/mDYS0OWG8S59yXRc6e9HrWrJlnnvkbbTfmJHMNLpqXW7W9TZ9Rs/ug
079Iro4y7VbGZbies0agGY4Z5SudI6rs53EeZM9VyiF1BG2fVr5DK8cbzY55
leOX1o3yUWZ/08qUjzSuh4xb5Gn1mkF/MNcD2prpfYl9vLQ9WcdcZNZZZy3s
Z81rsxAzxfmyeXEicUZ67n2zOqDq+xWpWuZpcxEHNyt33LOA/vZmc1TLlGPm
iGfzWdDOYyyQteONMIZDft9+Qn8Nx4ZcZdl5f7Tb6Z8sO7e3KMbpZtujSJV2
BGvdq5w/ac3aEc2ULZuNVG0zVf2+nL88xr5msS6R5xg/KqPs+UN/xjHHHJOs
V+S6qlELvz/tA8pW2fo53pud/BvZss15ShnLm+8dcxsU5WgF5yivYS5qWrxv
JHV3ts6P61KyOVtivBTzLZE7NtbhrHNh39PvRX8Vz2XXvxQ9HnFNod+AOjIv
bww5e/h7NnJAlcF7sj6qTL89cwToxx4Ma3Ei5sRUmTfc7P6KXDtZ6x1RRplj
zzEvytnQSozTLC9QnGtJ+7QR9o+5oZdddlnu85RL+k7pz6NvnnnuefP7ynwe
5Zb+z3RZJ1cueV7z1qaWec9WjjeaHfOyxy+rG+WjzP5W2YcsvmtRX3wr14yI
ay9/R/6DNMaxmCuSzd2UFq+Zee0rrnE8l74fIH1Pcb4+8++JyVjzRD87/dLZ
+bPN6oCq71ekapln3XaZPnDqj/Q9YIqUKce017mnSMT5znj8Xnvt1TCu5TrP
71h07agTx5j7OzAPM+K7EPNUud9mzH+XXb/TzbZHkSrtiKrnT1qzdkQzZctm
I1XbTFW/L2Wcex4x5zCbB5N2DK+nz4m1V82UPX/ivSpauZZq8GKNM+dDzFMS
N8oz+dSbrUOmX5l5n5RHrkf0g5Grhv5SYuj0XADmvDMPjr772EdHeU6PO3B9
In6P+0G8xbgzGIOl3yo+R39svH8ObRfqMmIj5tuz3jfm64rz3ek/4u+ZuxFz
F/I9Y3nnXOPeVVwfeY734zzhffIez4sl4vmZt46edeJx35uNP3PcyD1DHwh9
rvTJMnacvV9FGtedsvMM+wX9L3nzDos0az/Sf00uHfr3KBv0g/H7NopNuxHj
UMZomzVbW0tbIH3eld2yObjKfh7945QR5i4xb4lyWNSfWOY9WzneaHbMy36f
rG6UjzL7W2Uf0pjzznrZbI7bqMo1I4t7ZHB9y7bluZ4W3V+Gth/j+PEzGduP
ucfIDxdzOLIRK6bvK0J7hNgjXifZ+G8+K/Ypl6kDqrxfGVXKPLi+F/0e4G/Z
l0avicqUY34fvif3uL7kkkuSskO7rRlyOVN2WG/Vb6i/pp9++mT+AW1b5mOQ
64s8cGXQNuXcjOvVieXIF01+kajTbY9myrQj+HfMjVb1/Elr1I5opErZbPe7
op3vS78duU04p7nmcB+b7bfffiAHC/EP40nN8u+UPX/iPRloH3br/trqP1xL
uA8OdUZss/P//JvHy+av5W9YS0A/GzF/Xv8T70Wdzmu5/lA2mbObfi2P8Rpe
G18TcwOxT/w3r+c9+O+yuRHZN2KYdH3APXrTfZlx/+Jnp/+d93ge2giMhxX1
v9FPSL99v80vqEucX8h9fsoo237k+hn797jm8hlFa/m7EeNEVcch2lXm86gH
af+WXcda5j2rHG+UPeadHseJurW/VfYB8V59je490s41Iy/fLL9/UR7aRtff
9PWb6xuP58UaxJGMudDGyeZRKFMHVHm/sqqUeeKgZuv4+b2qjJeXKcfMI+Qe
htS7ZdAObSX3SC+wjpa+dM4x2pvMi3zyyScrvQflhPJBOeFY8++88taptkcZ
zdoRnBNs7Zw/aNaOaKRq2SxSps3Uie/LGi3m4DAvLrbraBdk78fYTJnzh8/v
xP3YpVEV95RrNM8d5AbOu/fVqIjrIv1CZXOfVJ0HBOZmN8qvyvyJKvfbLLsP
XK+Za9Qr3fi8Vt6z2fFGmWPeymd3o3ygShmpsg/k5I/3EmnEa0bv0N/LvYTS
axHa0Y3zkvYjY/zZ9Sb9gnx9rH1Qa8q0IySp15hX36gfgWs/47mdvr/jYMZ8
A8aky1hooYWS3A9l0Y/E/IRszgb6iFh/we/FPcqYE8E8f3JcNUN7uEwblr64
MnkEOqUbn1f1PYuON6oe81a+T6fKRyv7G5UtHzG+b7aewmtG79HGzK5zb1U3
zkvuS5u9v6VGHs3aEZLUK8wXJRcC46TcX6EI8yS4b0WZfECjEtqSrDVqdv9G
MPeXed7N2ns8z/GO85BYf9GJ+48w54U1X9k8Lln0BTP/vFe68XlV3rPTx7vV
7zNYygdop5K/uNG+es2oB3Nu6HdpNzbpxnlJXUMeQO5xpJFH2XaEJPUK90Yj
HwDr41jrWDTPHY8//njDXEajMnIpMGeoGXJCcrz322+/hnOOeR15dVi7ucce
eyT98fy7nXuQ0K/GugjmiDRrXzCfuJf5KbvxeVXes9PHu9XvM1jKB21ocgo2
u0+I14z6kLOfOKdMbqcinT4vGftjfTZrkzTyqNKOkKReYS1szBvS7F4Gaox5
QGXuX8racO7hR36k/fffv+ttQO7PQfuXfH+sHe7HPEb6P4OhfLBfefemVH9h
bK+f7pNOnq277rqr7t1Qh9mOkNSvyOeSd79eVcOcNfLcl5mzJg1W9METfw2m
+1hJ6i7bEZI0ciO3Y/b+ltLIhPxoxjeSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmS+g33u/rPf/5T925IbbMsS5Ikjbq470m8J8R8880X/v3vf3f1
87iX1vvvv9/S3z7++OPh6aefHvj3E088kdzreplllgn33Xdfp3ZxUHn77bfD
Kaec0vH3/cMf/hAeffTRjr9vN/W6LHfLf//733DDDTeEXXfdNay55podec9+
Oldefvnl8NOf/jSsvvrqYZVVVgl33HFHpb//17/+FX79618nf3/xxReXfk7S
yK1b9SEGY52owY3yfPLJJ4ett946bLDBBmH//fdP2sG9cOuttybtkLzttttu
C//85z/Dp59+2pN9acXDDz8ctthii3DooYcm20YbbRTmnnvurn7m8OHDw+ij
jx7GGmusMOOMM4ZVV101rLXWWsm24IILhqmmmirZeI62HY/z/0sssUSYcsop
w2ijjZb81qDNtthiiyWPsT344INd3fdOoh3OvZNp2917773hgQceSP7/zjvv
DDfddFN46623Sr3Pm2++GZZeeunwyiuvFL6m1XL69ddfJ/d8Z7/6XR1luZuG
Dh0aJp988qRc8/u2q5/OlTPOOCPstNNO4dhjj03OdfbnJz/5Sem/f+2118KK
K6448F0uvfTSUs/V6YQTTghLLrlk+Mc//lH3rozgL3/5S3jyyScr/c2LL74Y
HnvssfDJJ58k/3733XeTfxdtjfzmN79ped9VrF/LWyOdqBO7WR9iMNWJGty+
+OKLcPjhh4fxxhtvoD6L2xhjjBHOPffcrn4+5wCx1SGHHJK01/lc6m2uLWzs
26abbhqmmGKKsOeeeybnXj+hTbjAAguEd955Z+Cxk046KUw99dSl29et+NWv
fpUcq8MOO2ygjoyYV0T8w/PEqlnPPvts0uc76aSTJv31+Oqrr8JEE02U/M1f
//rXru13p3344YfJ8T7wwAMHyu13vvOdsO+++yaPv/rqq03fgzph5ZVXDrfc
ckvha9otp5QP4kv63ftVXWW522j/8XvxG3dCP5wrtFVmmWWWgbG29957L1x3
3XXJuFVV888/f/Jd+Psqz9Vh3nnnTfaH8aV+Qnty+umnT66tZf3whz9MvkuM
jX77299+ow5Ob0U4N6m/mVOqzurX8tZIu3ViL+pDDIY6UYPfmWeeGTbffPMk
1qcc3nPPPWHhhRceODeoy4mDuo0+LGKqaaaZJonxs/7+97+HySabLBmjoD7v
F4ssskj43e9+N8Jj3/3ud5Nxk+9///td+1z6WIhvitAu5fc7/vjjc58nLlpq
qaWStlI0zzzzJH/z1FNPdXx/u43+JvadPvuq5fW0004L2267banXtlNOL7ro
orDJJptU2rdeqqssdxt9mpQNvkun1H2u0GZZY401OvJejO/yXeiXrfJcHRg3
Y2zugw8+qHtXRkCMw3Ei7mR8poyiGGedddZJvmN2K/Lzn/88+butttqqI99F
/6dfy1sZrdaJvaoP0e91okZOzMdI9x8xb6Hb6Cfksxq1pbbccsvkNczR6AcP
PfRQsj/0m0T0o9J3QduHsZQ33nij45/L9Xa33XbLvaZE0003XbJv9KkU4fqT
7p8ibuJv0ut0BgvWC7DvzK2qgvVMzPNhrkkZ7ZRT6pmZZ545/PGPf6y0j71Q
V1nuBdopfDditU6p81x5/fXXk88eMmRIR96Pssz75a3lafSc/k+Mcdjmmmuu
UnVmUYxD/3hZjMPHa/3YY4/dk7pag0MrdWIv60P0c52okRd9/HGu07TTTtuT
z9xnn32axi+xT/GAAw7oyT41w3hs9vhce+21yXom5rMwf+D888+vZd/KxDhZ
rKEerDHOjjvuWLl9gFNPPTWssMIKpV/fbjk96qijknnI/aafy3K7YvxWNca5
4oorCufo1Xmu3H333cln77777h15P9ZfFcUxjZ7T/4kxzgwzzJD8/7e//e2m
8zs7EeNccMEFyd/EtVOcxxJaqRN7XR+iX+tEjbzi9Zp5ltTzvbDooosmn1m0
tu/zzz8fWCt/++2392SfmqF/hPWIaTvssEM466yzkv+mvmMObB36OcZpNP7U
KtbFs+/N1uZmsX68yjFqt5zS3qa/td/Wt/RrWe5EWWklxmF8k36eovUVdcY4
cX3RqBzjNCoX3bi+NBPrzP322y8cdNBByX9zbWmU97ITMQ7XowkmmCCZZ856
IPop4hrLVtRx7Hqp1e83GI9LK3Vir+tD9GudqJET5Yxzg7V2rEHuBeZpMqez
0ZgRc0Q5T370ox/1zfVmpZVWStbuR+wXbcG4hm722WcP2223XS371m6M89JL
L4Vf/vKX4Qc/+EGyXos81UV4LflraRMzZs06xOwaw+effz7Jk7Dssssm67Q/
+uijZO0Hv2ez92+GNZRx3jFjDmVR1vm7srldOlFOuebTJulV30FZvSzLzLXa
ZZddkvle9AN2sqyw37///e+Tda6sT9hmm23Cz372s0oxDv2Kcd4Ra3liXqt0
PNPquYIy50uRjz/+OKy33noD80PivqXX7dLGZZ773nvvnRyDgw8+uGHOgHZi
nGafxf5effXVSa4l1v6RM5bjw7pm2kXXX3/9wOP8N5i/wnvwNzfeeOPA2mfK
zdlnn52sq7rwwgtH2I92ygx50ffaa68kz+Rmm22WxBj8PftDXE/fNudtIzHG
iTle9thjj+Tf7E9RHoh2Y5y77roref3OO++c/JsxHP7N71FF+rhynFhPztp0
1oxncw5VKbvkvqGPhLztnIccS37nPFXLLMr+bq2WjaLydskllyS5DC+//PKk
fLKfXM95z/POOy9ps2eVPW7MH+eayDHgesL3q5qvD63UiXXUh+jXOlEjF+oi
rrGxbczY95VXXtmTz+aaVDSnk/OTa9Ukk0yS9I/1Iv9BWazRTq/7Jd/7Qgst
NPBv4sQNN9ywjl1rK8ZhjJvxZa5L8TG2bLsC5KOcc845B67r1FXUjeSsju0u
YmV+v/g+xx13XJLrmjq+2fuXQZ3Tyloc6qYxxxwzqfPK6FQ55dyiLu8nvSrL
tBmIP2i/0i7heJK7K7Yh2ykrrLFlLT5tKq5nYH3CcsstVzrGYe3O4osvPjBX
l30jv8Css86aPB61cq6gzPlShDnyxKExFzbz5rl3EevciRnja8iN973vfS8Z
g6Jd8cgjjyRrfldbbbXc9fCtxjhlPotzi7Yr35n34VjSNuR8IbdsfH/WsMQ2
Ds9RTsYff/xkPTLtYtqItKXi8U3nsm6nzHAN4HPidZI11PzO4447btJm5pzg
b5u1v7IxDseC9VI8xr5kc1+iKMahzBHHpjfKdBbnY/rvadcy94JcVWXlHVdi
gXHGGSf5N23YuO9Vyi7rKzhntt9+++SYIuZGIN5Ja6XMlv3diEVaKRuNyhsx
Fecg1zE+nziOmIrX0VZ/5plnRnivsseNcs5nxt/zb3/7W3JeEA9V1UqdWFd9
iH6sEzVyoe8y1uvprRfjJvH6wDWbOSJs5APjGsL95+jTqZKTE/Q/0d5pZeP6
WCZ3G9efdK4mruHsa0QbkXO3Du3EOLQ/06gneJw8bGnMwyB/2y9+8YsRHr//
/vuT15NLMqIvk1zVPH7iiSeWev+y+JxW1+IwVlFWp8opbfsquWRGlrJMfzNt
mbTll18+OaaUmaiVssI1irEotmy/ZcyrVmWuGusp+Jui+0NUPVdQ5XxphL7i
vLlq9MOS34i4J9um5nvQ/qIdmG1vtBLjVP0s+st4H9p6afRb8zjzWWIebHCs
eG2MVUHbkM/j9XHMJ2qlzNCPzt/QFk+Xmdg+5F5DfDfaxc3G2bIxDnhP+uJ5
nFxp2bGgohiHOIX1b+mNOURp3J+V+IMYIC32G1S5b1P6uJIzmPER2t60w488
8sjkNVXKLr8/bVvO7TSOIftMOyPmp2+lzFb93Vqte4rKG/OzyMsUsQ8cN153
+umnj/AeVY4bY+Wcb2msvcs+VkYrdWJd9SGq1olSK+gLoZzH+8nFjWtvN3EN
i+0crmts3H+U85O2OuPMVXENpS+olY3+kzLoZ0rP72HuTbqtRnuOdmYdOrke
hzxu9O/Qb5Zuh3ANi32c/E3cuM7zODkj04pyURW9f1kxj2/VtTjk3qYOK6tT
5ZS2Pm3xskaGssxvTNuGtk8a+QGz/aTx86uUFXLgF83TaWU9Dt+3TIxTpSxX
PV+KMCcmL8ZhLmHsq87DvJy8dk8rMU7Vz6J9H/PZ/+lPfxrhtbPNNts3Hqdf
PdseRczzxj0Gs6qWGX4HXp9tW3HexPGUsvJiHNA2py+d54gZ0p/fzly1OBcu
O58rzl8jtqoiHlfyjOSpUnZjHq1s/A/ylqQfb6XMtvK7tVr35JU35l6mUU55
TV5u+rLHjbET/k2OsXRuSzCmVFUrdWJd9SGq1olSO7jm0n8SY5y11167a59F
Pwd9O6yXzHPEEUck+5C+j0u/4JxkHgyGDx/+jb5I5vfQf1eHTuccIIcwz6Xn
lpN/hbkBjDHnbcwrTvezVX3/MpiLxN81m3fM75LtR+W6yj6V0clyyrxsykY/
6UVZpg3L/KQ02ul5MU7VshLno2XfH72McYr2D1XPlyJFMU7M6VU0n562B8+v
u+66IzzeSozTymfFft+4fgSslZh44omTx9PjhsQD6XvRltnXqr/JOeecMzBX
IY32LI/TX19WUYwDxgNibinmOcV5Ea3GOFyLuG8d/QXct4jPjhvruoklWcNd
5v7HUbN1V1XKLnOweK8ybfNWylErv1urdU+z48I4JONsxCp514oqxy3GJYxf
MnbPuqhWtFon1lUfoh/rRI3cGG+MMQ7zNrqFOah8Bn0/eWJuTNbe9Rv65+Ic
feqnbN/ZTDPNVPi9ui3OJR42bFjpv2G8vqgeiPVWuh7gGsp3LKtRPZP3/mWw
vpy/azbvmNyW2fuAM57P3PMyOllODz300PCtb32r1Of2Sq/LMvU3Yy4ch6ox
Tl5ZoY3BY3n3B+lGjFP1XEHV86VIXozz9ttvD1yvi3K9xXMluw+xrzyvHZf3
XKufFeelcRxi+411JozZMMYX6xli7KJ7/7Qa4+T9JvRx81h2vhdzbrKxWDON
Yhww5y7OZ/rxj3+cPNZqjMM1PR7/Rluje0RnNWvLly27zIvlfZhv12xMvtVy
1Mrv1mrd0+i4EB8wh5Dni+a6VDnnGXNnLVU8JszhY45blTw6aLVOrKs+RD/W
iRq5xTLKtv7663ftc6gT+AzyoeaJ+df5/yqYj/vCCy+0tJXt/6J+jvPL6XdM
3yOevjr60vLmW/RC7JtivnFZCy+8cGE9wHU6Ww9wDWa8r+w1mNzEVd6/DNoL
ZdoFefn3ua6Wjd87WU5pm1ZZ2zIylWW+C2t96NdmXgztkbwYp2pZmXDCCZPH
8nKYthPjFOUBqHquoOr5UiQvxiFmoF3J4+m1AmnEEjyfXRPFPZCK2nF5z7Xz
WbGtyfocYpk4P5K2FY8zf59r1gMPPJD7vnG9Sd6+Vi0zcR0F3yXe85Dvxj4z
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
6xb3txPnChqdL43w/nwmn83n8O+8z+A5jjX9xfQR512j4/7G7xL/3ey5Vj4r
K29dOP3WRev8s8c9XtfQapnhdawnZQyBtR1xo50Z751QJbdaK6h766zT0scn
HjvOk0a/YZWyy3nDPK8//vGPTfsWypajKr9bO2WjqLwV4W+oZ4ti+2bHjZiX
XBs8zzy89JrIXul1fYhGdWI320uSmuOaVDUfgvoH9Qj5GVqZa1kV9STzEbJr
FPpFq2WZscO8e29K/Yy27Q477JC7Bop4i/kJjC2ov/i7dU8v60P0e50oSYPd
8ccf/431291ATtDs/RcHO+Ii5n/E+fXSYMEcm0b50JnPU/Z+Ieodf7fu6lV9
iJGxTpSkfsIcA9Zp3HPPPV37DOaAkr+UnDYjC/Kwcr+TMrnApH7CfCL6q2lj
FTnqqKNyc86rPv5u3deL+hAjY50oSf2IdZFc18vm3aqCepl16syzHplwX6xm
62GlfsSaE9Y5s4Y6b20Ea+5Zq95oHaN6z9+tN7pZH2JkrRMlqV9RZw4bNqzj
73vVVVd15B4ckjqH+0rGfF/k4+Pf5AckfxTroJutMVc9/N16o1v1IawTJUmS
uiPmyGZtB/lyuQ9to3vDqz/4u0mSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEkaWX3++efh/vvvD6eddlrYY489whprrBEWX3zxMNdcc4Xpppsu
zDLLLGHeeedNHttkk03CwQcfHC644ILw9NNP173rkiRJkpR49913wxlnnBHW
WmutMNFEE4XxxhsviWE233zzcMghh4STTz45nH/++eGyyy4LF198cTjrrLPC
iSeeGPbee++w3nrrhbnnnjuMPvroYYYZZgjbbLNNuOGGG8IXX3xR99eSJEmS
NIp54IEHwqabbhrGGWecMOecc4b99tsvXH/99eGNN94I77//fqXt2WefTeKg
rbfeOkwyySRhmmmmCfvvv3945ZVX6v6akiRJkkZy99xzT/jOd74Txh577LDl
lluGW265Jbz33nuV45qijRjpvPPOC8suu2wYd9xxw0477RRefvnlur+2JEmS
pJHM66+/nsQ0xDZDhgwJTzzxRMfimqLtxhtvDCuttFIyB27YsGHJeh9JkiRJ
atfll18eJptssrD88suHhx56qOuxTXZjHhvrdRZZZBHzE0iSJElq2aeffhp2
2WWXZM7YCSec0NE5aVU35quRx4Axnd/97nd1HxpJkiRJgwxxxcorr5zkE7jv
vvtqi22y26mnnhrGH3/8cPjhh9d9iCRJkiQNEqz7Z17YEkssEZ577rna45rs
dvPNNydz53beeefw1Vdf1X24JEmSJPUxYoiFF144Wev/6quv1h7PFG3krp52
2mmTe41KkiRJUp5PPvkkiW24h2c/xzdxYw7dpJNOGoYOHVr3oZMkSZLUh3bY
YYcw11xz9eX8tKLthhtuSHIicP9RSZIkSYouu+yyMN544/VVfoGy29FHHx0m
n3zy8Pzzz9d9GCVJkiT1AfIyTzzxxOGUU06pPV5pZSOn9TrrrJPMs/v666/r
PpySJEmSarbJJpuEVVZZpfZYpZ3tmWeeSdbmXHjhhXUfTkmSJEk1uu2225L1
LI888kjtcUq723HHHRemmWaa8MEHH9R9WCVJkiTVZJlllknyL9cdn3Rie+ed
d8K3vvWtcNRRR9V9WCVJkiTV4I477kjyDDz99NO1xyed2s4888wwxRRThP/8
5z91H15JkiRJPbb22muHIUOG1B6XdHJ7++23w2yzzRZOO+20ug+vJEmSpB7i
Hp9jjjlmuP/++2uPSzq9HXLIIWGppZaq+xBLkiRJ6qHjjz8+zD///LXHI93Y
nnjiiTDGGGOEf/zjH3UfZkmSJEk9suyyy4bDDz+89nikW9vSSy8djj322LoP
syRJkqQeYD3+2GOPHe66667aY5FubQceeGD47ne/W/ehliRJktQDN998c3K/
THIt1x2LdGu74YYbwvjjjx8+++yzug+3JEmSpC7j/jGrrrpq7XFIN7fXX389
WZPz+OOP1324JUmSJLXgq6++Kv3abbbZJuy88861xyHd3maaaaZwxRVXdPGo
S5IkSeqW008/PWy99dbh9ttvD19//XXD17Ien7xqdccg3d5WW221MHTo0B79
ApIkSZI66csvv0zuCTPaaKOFeeedN8mZ9sILL+S+dtZZZw0XXXRR7TFIt7et
ttoq7Lnnnj3+JSRJkiR1CveDGW+88ZI4h431KKuvvnq44IILwkcffTTwuimn
nDJcc801tccg3d6Yj7ftttvW+ItIkiRJIz/WzRx22GFd29Zaa62BGCe9kUct
zmUjDrrttttqj0G6ve2///5h4403rvsnlyRJkkZqzCnbcMMNu7atsMIKuTHO
6KOPHpZffvlw9tlnJzHOrbfeWnsM0u1t3333DZtttlndP7kkSZKkFr355pth
mmmmGSG2mXHGGZP7YT7zzDMDr5tqqqnCVVddVXsM0u1txx13DNtvv32Nv4gk
SZKkdmyyySZJXMM4DeMX119/ffjiiy++8bo555wzWaNTdwzS7W2LLbYw54Ak
SZI0SF188cVh8cUXDyeffHJ45513Gr6W+WxHH3107TFItze+53HHHdejX0CS
JElSJ7311lulXztkyJCw3Xbb1R6DdHubdtppw7XXXtvFoy5JkiSpH3D/T/IP
1B2DdHN76aWXknl75NOWJEmSNHK76667wgQTTBCGDx9eeyzSre3yyy8Pk002
WZLHTpIkSdLI7bPPPktinJtvvrn2WKRb2x577BE22mijug+1JEmSpB5ZbbXV
kntk1h2LdGtbYIEFwq9+9au6D7MkSfp/7L0F2FXF+r9vYCfY3S1iopigWMdW
FOvosVtUbDy2Yrei2AqiYgcKWMfEFlEQWxBBVDBBMeb3v+d7zf6vd7HW3jNr
rR3vy+e+rn3Bu2o6npnneUYIIWrEjTfeaJZaaikzceLEussjRf+GDBliZphh
BjN69Oh6Z7MQQgghhBCiRiALcI5OS9RX69atm+ncuXO9s1gIIYQQQghRYzgj
k3ND6y2TFPkbO3asWWCBBUyfPn3qnb1CCCGEEEKIGvPuu++aVq1ambfeeqvu
sklRP842XXLJJa1fBSGEEEIIIcS0x7bbbmv23nvvussmRe3hLLrooqZXr171
zlYhhBBCCCFEnWAPZ6aZZjKDBw+uu4yS99e9e3ezwgormN9//73e2SqEEEII
IYSoI0cddZRp166d+eGHH+oup2T9vfnmm2aWWWYxAwcOrHd2CiGEEEIIIeoM
/qPR8Tr55JPrLqtk+Y0fP96ss846pmvXrvXOSiGEEEIIIUSD8MILL5iZZ57Z
PPzww3WXWUJ/Rx55pFliiSXsPpQQQgghhBBCOM455xzrd/mdd96pu9zi+7vp
ppusjtrrr79e7+wTQgghhBBCNBj//POP2W+//cwyyyxjPvroo7rLL5V+jz76
qJVv7rjjjnpnnRBCCCGEEKJBmTJlitl6663Nqquu2tByzkMPPWRmn312c/nl
l9c7y4QQQgghhBANzm+//Wa22247e5Ym/srqLc/Ef71797b7N5deemm9s0oI
IYQQQgjRTGA/B721Nm3amH79+tVdruH3/fffm+OOO86e53PXXXfVO4uEEEII
IYQQzQzsc6644gorU3CGzrhx4+om3wwdOtRssMEGZvHFFzcvv/xyvbNGCCGE
EEII0YwZMmSIWX755c3SSy9t7rvvvprKNt9++63573//a21vdtxxR7uXI4QQ
QgghhBB5mTx5sjn77LPNrLPOajp16mQGDBhQVdmGcz2vvfZaK1cttdRS5pFH
Hql3FgghhBBCCCFaIF988YU55JBDrP5ahw4dTK9evcyYMWMKk22GDRtmzjjj
DKuTttBCC5nLLrvM+kAQQgghhBBCiGoyevRoc8opp1hZZI455jC77LKLueqq
q8zbb78d7Edg0KBBVq7ZcMMNzXTTTWfat29vZSf2joQQQgghhBCilvz9999m
8ODB5phjjjGrrbaalVFat25t1ltvPbP33ntbP2jY01x88cXmggsuMKeddpp9
dqeddrLP4wOa36abbmrOPfdcM2LEiHonSQghhBBCCCFKjB071jz99NPm6quv
tr7YunTpYrbaaiu7R9OxY0ez/fbbm7322svuAd16663mlVdekS6aEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghRDPngw8+MOecc069oyEaiFNPPdWMHj263tEQQgghhBAimBEjRph27dqZ
7777rt5REXXi9ddfN7/88kuTa5999pmtF2PGjKlTrISoPUltQQghRPX4+++/
6x2FqvLpp5+a6667znTu3Nn07du34nVRDH/88YdZc801zXPPPVfx2QkTJpjL
LrvM7Lbbbuaoo47KPA/45ptvzIknnmj23HNPc/PNN5tJkyZl+o7IB2X/119/
2f+vssoq5vPPP5/qmQceeMBstNFG5p9//ql19MoybNgwc+mll5oNNtjAvPTS
S/WOTt35/vvvzdVXX13vaFgef/xx8/bbb9c7GkH4tAUf2Pc8/fTT7XjVqVMn
88wzzxQZTdEA/Prrr+aJJ54wRx55pNl6663rHR0hGhLWirbcckuz7LLLmrnm
msu0adPGtG7d2q6bbrrppvbe9ttvb9Zdd10z3XTT2d9BBx1U72hXBea8m2yy
SSmd9957b9nrtYRx7+mnn7Z9Gr8nn3zSzvWT+PLLL82gQYPMiy++aF555RUr
NwwePLjGMQ4DfaSDDz644nMfffSRWXzxxc3+++9vfvvtt0LC/vnnn80uu+xi
llhiCZt3RUA8XVmF/CZOnFhI+EOGDLFpol2vvPLKZscdd7RzvkbizTfftPLl
GWecYX8777yzWWGFFVKf5/6tt95awxiWB/lm7bXXLvULr732Wr2jVCihdWj8
+PFm/fXXN19//XVV48V8vXfv3ub8888vu96EPLzrrrvafrDRCW0L5ejVq5c5
9NBDzUUXXWTmn39+WzdPOumkgmMs6g31n7ka5Uu788W3/QjRkpg8ebJZcMEF
S+0lab2UebKTg9xaU0tk1VVXtfnw6KOPel2vBczDr7rqKtOjRw8z88wzl5U1
mZsgL1BWPLvvvvuaa6+9tsYx9mfkyJGmVatW1hanEl27djULLbSQ+f333wuN
A/LirLPOao444ohCvnfJJZeU5r7dunWzZRf9XX755ea///2vDW+NNdYoPVuE
HELbpfxpo3/++ae5/vrrzVJLLdVQ8xzmdKuvvrr54YcfSteuvPJKs8ACC6Tq
KrImz/3oO/WGfe0555zTlt27775b7+gURmgd4rnNNtvMrsNUG+Zne+21l83z
M888s+yz1BXW5xrZnitLW0hjwIABZskllyyNz6yZMF6x5i9aHrQF2gFtL+Qd
3/YjREsC2YZ6v/fee6c+w74PawfPP/987SJWY9j3JR8GDhzodb2WYJPAvtpM
M81kZptttrLzPfaw+/XrV8PYZePoo482W221ldezrCezv1gNlllmmcL2/Jlj
uPZEfCvpeDI3RB5FHzIv6Auhxxel0XS80Evs06dPk2vUgW222cbKsWm0b9/e
7vk1EiuttJIt5+HDh9c7KoURWoeQgf7zn/9UO1olqDvk+bPPPlvx2bvvvnuq
tDQSWdtCEh07drS6F2La4KmnnrLtwHf8dIS0HyFaChtvvLGt95XGKtbbH3nk
kRrFqvYwrpAPcR3mtOu1hL1ldOXQayAu7BekwVpNo++3/fTTT3Yd3Ff/DxmH
cbwaFP1t9qeQQyknbDYq0bNnz8L2WtC7I/xGhH1G8oS9SQfrzOwPIydMP/30
Zty4cYnvko+krZFkNifLop/YkvCtQz/++KPViXrnnXdqEKv/4/DDD7drAj42
dOxDkRYfW79ak6ctxBk7dmyL1iUXU4N+LGWOPBxCSPsRoqXAfqePjNPScfJD
XJZJu15LDjnkEDuWvfzyyzYuSy+9dOIeAbJNuf24RuGOO+6w6fDV4W9OMg6g
I0j6ZpllFvP++++XfZY9ut13372QcJFvmXtPmTKlkO8VyVlnnWX1DaOwZoK9
B3UZncHbb7898d1PPvnE5mcj2Vjgb6Alyji+dYg6zvpYLaGt4oPClwsuuMDa
5jQaedpCnBdeeMHWQ/bFxbSBk5FDZZzQ9iNES2DzzTdPlXGwXyzap5rPWmw9
1msbWcbZYYcdSv9HxyHNPuiNN96wvscaHdYc0fP3pbnJONRffBtRTtjd4Dep
HKG6KWmgU0qY+I1rNLCnXm+99Zpcw/bjpptusv9fdNFFzQknnJD4LvnJvt8x
xxxT9Xj6UisZp9Z9oW8dwu9CLfsat1+B3zBfmAui39tofunztIU4zjajaBmn
VvWukfZmq01Rac0i42RpP0K0BNxcLEnGwcdLmt4T8zZ0no877jizzz77mNNO
Oy3VLp/2hZ9e9EcffvhhazuOfWWXLl1KPpPw08w1bEX5P8+gd3rKKadYOYO+
3MlbzCu6d+9utttuOztffvXVV1PTR9jYeLM2efzxx1s/QEn4yjhfffWVTQP+
sIgf9uKswbl8wsaCa+5eXntc1vnZY3bccsstNj6UWxx02N56661c4dWCFVdc
0earLyFyCOXw2GOP2TNFqY+MK9SbNJ2VaslP2DvPM888tqyow+UoyjYY/Rb8
z6HrUoRP49C8LAf2SfizdfAt5nLOLhy7qAMOOCD1fdpv3jVIdDQeeugh23ax
06Z90pZJJ+c0kVZ3nf8DOk+k3fk1dO05KuOMGjXKXHHFFXYPZI899rDfTINn
mWcwp0W2xZ9IvE/y6S9Dv+mLTx1CZqi0r3b//fdbH06ccwTsC6Fzyx5GlvUi
9FqdXSR+Hujr7rzzzrI+5Alz9tlnN/379w8Or5rkbQsO6jN2muQL5f7ee+/Z
X9TXQtHjtA+VxtwvvvjCXHPNNaZDhw62LPGVia0IfjPj7aca422RdbPItCZB
3cC+9thjj7Xlt99++1mfAaEyTpb2I0RLIE3GYYznepKMgw42PmHwMYoeCe2Q
uXXbtm3NFltsYfslB+Mv+/JRH8y0d+cnbIYZZrD9yhxzzFF65txzz7WyC/oQ
Z599th1zuc4YTj9EO+ce/QRjMd9K8uFKf03fQP+IPhDfwE9akh6Gr4zD+IGu
1WqrrWav42P1wQcfLD1PWBdeeKGNF2MF86I8OFscB+MaettJ9s7EtdFtcfCX
QNzxL+YLsraPHMJ4w1jD/iP2ApQF83PO08EXQxLIOPgIrwbMLVwdr+Y5Koyb
hx12mE0n9YUwy61P+JAlL8vB/mPULhp/aexxOSiHnXbaKfX9Aw880MqMeSCf
KJPlllvO5hF+A5jvILdhg+La+vLLL1+aF3OPfgQbK2zYnQ88J+OgR4rPCvoi
d43fXXfdNVX42PoSNuuwwPyT+eNiiy1Wmpf69Jf4wwz5pm/e+NYh5sgzzjhj
qh933mdeRr8433zz2bzlu/i0x28N10L1DokbfSr7S6zz4BPR9cPlfLDQtpnf
NxJ52wIwBiMnOT/C2EZxtg7+1ZyfyKLH6Wi9S6PSmIs/ubnnnrsUzsUXX2x1
SfADmtR+ih5vi6ybRac1DrrcjHv0t86GhjMtNtxww2AZJ2v7EaK542Qc+kb2
0Bmvnb/kJBmHNTz8TdOfxvs82iTrZuuss45d/3Qw7vK883fIGWf0XYzFzJsA
f5foIfNM3H876w5c5z7rVFFYI086C4A2Tf8ehXVgnsWuJU6orppbF2G8iEP/
sfDCC9u5YV6YQ9GvRSGthE3f7CC/WUcOhfU5+tEsP8bp0LNd8F1B3Fn39oFx
mbkta17lYO+POowOfhTGe8JjLpsE6aBuVgvmxYTP2my0TRQF/huwi2BdwMHc
hzA5LykLWfOyHMgNUT9AxJc1ZQdzvHKyJnsThF2EP2DOFuVbyAZRPvzwQ3ud
eU6036Md82zUVtfNUZjfREEm5Dq+4KLwDfwCn3feeU2uOxs7zjZx+PSXod8s
R2gdYn2JfYc03HqZs41Gr831E9tuu629FrrfjDzK2II+bhT62XI+95h7hvhX
q0V/mLctRLntttsSddWqNU6Xw3fMZd/a7XHjTz9KWvsparwtqm5WM63AuMd+
X5J/TudXLUTGydp+hGjuOBnn3//+t92bZm0OfQXmoFyP++BgD92tSSTBXJT7
nAcSxfknK+ebza3VxG3RiQPXaY9xWHvhHnv2DsZs1ixYQ4mCTODWqOKEyjj4
xMGmnPUtwotyww032DlZEUTT5WDsIVxsFFzYrONm0Y9nDYc+Pcuvkj19EqyR
kZ+MzT6gK0FZVpqvM79Ajojv0bm5cZqfIrdmXa0zPphrMA/10T3JAusSa621
VpO5CmfOk6Zy/vfKkTUvy8HcJKqfwx5RdC7AfKHcXp2bDwwdOjQ47DikizLh
e6zfRsGfR/w666zx+UmaPQ7tkT0O9n2ichJzWJ5nf4h33I++guvzzjtvk+/4
9Jeh30wjtA6xB5u2LsB+gJOVOJeSbzi9PyB+SWtM5WCNh+8k2ahQT5PmiA7m
oiF+52vRH+ZtC1GcP+C4jFPNcTqJ0DE3zS9hWvspYrwtqm5WO61w44032nfY
d44Tao+Tp/0I0dwpZ4/DGkfcXpP1u3K62PSZ3MdWJoqP7T59e5KMg+yVJuO4
Ncu4LMAcJe4DlXGgKBkHnC40OvxRWAPLMg+Mgy0OY3QS+CEgbHR9gTlgc7DF
Qf+YeGMXkQYyLTpB6P9gnxXP37RvJo1z7OtX2qdBL5m9S3Ra0HUo0i8Z+s+0
hWrs4Tj5Pl43//e//9nr6HWGkjcv02Ceyfvw7bffTrVXgn7Ov/71r9T3OUMo
bQ82C4z3fC/avtCd5wxdrkfX1VnHjutzlPM54HRJo3ZW7JMwR6OOJf3Q5Y+u
1/r0l6HfTCJLHSLPSH8S9HvOJoExhbXjvO0J3SLiwnnUUegnmPOyRp0GdkrU
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
6NChgznggAPqHQ0hhBBCCCGEyMykSZPMYYcdZnbbbTfrq26xxRYzXbt2Naec
ckq9oyaEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQYhrg77//rncUKjJs2DBz6aWX
mg022MC89NJLNQv3008/Ndddd53p3Lmz6du3b83CLZJ65Z0QjYbaghDCF/UX
xTB69Ghz+umn23lUp06dzDPPPFO1sJprmTXXeNeD119/3Wy55ZZm2WWXNXPN
NZdp06aNad26tWnXrp3ZdNNN7b3tt9/erLvuuma66aazv4MOOqje0U6Fsl97
7bVLcX3ttddqEu4333xjNtlkk1K49957b03CLZJ65Z0QjYbawrTLZZddZtZb
bz0zYsSIekelJjT39DZC/NVfFEOvXr3MoYceai666CIz//zz27w86aSTqhJW
cy2z5hrvejN58mSz4IIL2jxbf/31zT///DPVM4MHDy7JQX/99VcdYukHe01z
zjmnTcu7775b07BXXXVVG+6jjz5a03CLop55J0QjobYwbbLyyivbMmdPflqg
uae3UeKv/iIfAwYMMEsuuWRpbjlx4kQ7j/r111+rFmZzLbPmGu96g2xDnu29
996pz7Dvwz7P888/X7uIZWCllVayaRk+fHhNw916661tuAMHDqxpuEVSr7wT
otFQW5j2YF30/PPPNz/99FO9o1ITmnt6Gyn+6i+y07FjR6s3VGuaa5k113jX
k4033tjm2X/+85+yz33wwQfmkUceqVGssuHktY8++qim4Xbt2tWGW00d0mpT
r7wTotFQWxBC+KL+Ihtjx46tmx1Ecy2z5hrverLZZpt5yTiNQv/+/c13332X
eA9brHqU/5577lkzGadc+vO8W6+8E6IeqC0US55+qVY0hziKxkT9RfG88MIL
Nt+OPvroqny/3mWWtb+pd7xbGptvvnmqjIMNWDV8qiXZ/fiA7u30009vPvnk
k8T7LV3GqZT+PO/mybus5SlEPWjUfqRWFN1effulevYT9Yhjc+gXax3HosMr
972iwmqJ/UUj1M3evXtXTcapd5llnavVO94tEXz1pck4K6ywQlk/A3/88Ye5
++67zXHHHWf22Wcfc9ppp6Xa3bMvefPNN5utttrKPPzww+b33383V155penS
pYu59dZbK8bzggsuKPmUeOqpp8x7771nf9Gyjpb/qFGjzBVXXGH22msvs8ce
e9gw0+BZ/BYefPDBVu+sR48eZvz48RXj5Kgk45D2I444wu4zHn/88anf/vDD
D+198pJ4d+vWzeoI+qY/jWrkXUh5huRv3rJw/PLLL+amm24yRx55pNlvv/3M
CSecYB5//PHEdOQtmyzx9/1eJSZNmmQeeugh88QTT1j7TdJIedBu8Tn02GOP
la7zf/jzzz9tO+WdJ5980jz99NOZ0pAENmkuLPwMuv7js88+Mw888IAND51X
/s2SH3nrRyP3I+BbbyGk//3iiy/MNddcYzp06GDtVX/77TfTp08fs//++5dN
V6VyqZSflfqJrPUlJL9C4njXXXflyuus+eyT15X4/PPP7Tv//ve/ze67726u
uuoqGz55S75ce+21ZsqUKYnp5ZrLZ9df0K/wPGVGvN090k1dd1Sq93nyJIly
5VV0WI3YX9BGhgwZYs455xzTtm1bu+aP3y3WpLGr5pucaREndA4W0r+EvsO4
he9e8o20u3zFh7Qja3uoZpn5zBeyztUasa61BNJkHPpFrqfJOO+8845ZffXV
zS677GJlTtYF3nrrLdvmtthiC/PVV1+VniV/F1pooSY+lumDZp55Zvv3DDPM
YH28pYF94TrrrGPlW57Hjxm2V0sttZS97nDlf8ghh1g/APRr7hq/pPHr2Wef
Ncstt5ztM4A2SptfbLHFmrS3cpSTcehTjj32WDufZNxx8WfsiMKYQh65Nvz+
+++b5Zdf3tZF3/TXKu9CyjMkf4soC3juueds+g488EAzYcIEe+3cc8+1cWMe
VGTZZIm/7/d8YAxnTCFc4k/Z3n///Xb/deTIkaW6yffZAwfukfbZZpvN7Lbb
bk3mhHnLgHkQfb+rGz/++KO9zpiLj9CNNtrIXl966aWrlr9pNHo/4ltvIaT/
ffPNN83cc89div/FF19s9+/33XffsumqVC6V8tOnn2BcDq0vIfmVJY5xfPM6
az775HUlmEfSnvGpDOQH6ZtlllmsrINdN2HfeOONiekdN26cue2228x8881n
rxNf+hHGf+bC/fr1s7a78847r+nZs6f5/vvv7XuV6n2ePEmiXHkVHVaj9he8
6/zK8Tv55JNtmbBWRf2nHpAPPFcu38rNwUL6l9B3eI4zcPBjRdj4i15llVWs
fzXkB8jaHqpZZj7zhaxztUatay0BJ+NQv3beeWebb84XcpqMw7oBPqepl3HZ
5Ouvvzazzz67LRfWix3kK8/zTWyAWHMif8lr1iN8WG211ez7hJGEK2vqYBTW
N7jevn37JtcZTxdYYAFz3nnnNbn+8ssv2+fx2e5Dmoxz2GGH2TYfxY3ZhBFl
mWWWsd+Jgr5q9Fql9Jej6LzzKc+Q/C2qLEgf/Tv5HIU1C/px+pAffvih8LIJ
ib/P90JhzZtw6MuisBbGdeYu0bZMfHmW9bQsaSgH33R9tZuzOh588EF7fc01
1yxdKzp/K9GI/YhvvYUs/S++WOeZZx4bn8svv9wrXb71tFx++vQTofUlNL9C
4uj2Oh2heZ0lnyFPn0CaCZP5UFS3/J577rHhcdYIcWfOz7Pl0su6O9eZF8RB
FuUMQodvvc+aJ2mUi3/RYUEj9hfImG6Oxpp/FKcDRt2M2nX4zsGy9C9Z3kGm
Ji5Jump5x8iiyyxkvuATfq3iXeS42VxxMg7726zXsC7Mmg57YFyPzoEcBxxw
QGmdJAn2zbjP+lEU538sq3826phP+cf3BPEvOeOMM9r1jeg8z/XnrG/zjvvd
cMMN9jprVj4kyTiEyTjLOBzlqKOOmmr9iTzn2hJLLGF+/vnnJs9HdQIqpb8c
RecdVCrPkPwtqizYq0/qA+D222+316tRNr7x9/1eKKwl0Zfx7VdeeaXJPdbA
49dZ74nPAYoqA1h44YUT56zOzpQxForOXx8asR/xqbeOrP1vmk+epHSF1NNK
+enT7/vWF0dIfoXEcdCgQU2uZ8nrkHyGvH0C9Y732ZONwhq6WxP2TS/r7/SN
rVq1aiIjwoYbbthkPhBS70PzpBJp8a9GWI3YX8Css85qn0/SgXHr1GeccUaT
6z5tMUudz/IOOoRJMk4RY2SRZRYyX/ANvxbxhiLHzeZKOXsczlVN8u+w6KKL
2ndefPHFxG9Sj7m/3XbbNbme1zY/a/kDZ5hyL3q2FHvv7OWjO5r0Y93Kx+dC
WrqYU6IvFIX2nNQunN9z1tbRjUXeDE1/OYrOO6hUniH5W1RZsP9KnCr1hUWX
TUj8fb6XBXTu+S5rTg700znDl+v0dw7W7uJzmKLKAJxclTZn3WGHHUrXis7f
SjRiP+JbbyFr/xuaLt96Wik/ffr9kPoCIfmVJ45Z8jpLX5qnT7jlllvsu+it
RGH+z/W11lprqnfKlYnztXrnnXeWrnEW+FlnndXkuZB6nyVPylEu/kWH1Yj9
BTjds6S64saC+D6nT1vMUuezvJMm40DeMbLoMguZL/iEX6t4FzluNlfQk0zq
H4E97nheR/dI02yo0N3l/uKLL97kerVlHPbp0uLlxsRo+aMPGo9jFtwaRbl0
0Uaxm1hxxRUT2wX6puuuu24pb9n3ZX8xWv+qKeOE5h1UKs+Q/C2iLDgjmfiw
BhmyTldE2YTE3+d7WXB6acTFjQnYYrNnwzoU++Dw7bffJp5JUFR7gEpzVvRi
HUXnbyUarR8Jqbd5+t9y42NSunzraS1knGh9ydLOs8Qxa16H5jPk6ROwS+Yd
xvIo+GiKr3mUS6+DvpB70bMZd911V9tvRAmp91nypBxZZZwsYTVaf+Fwe59J
83/8cHCPZ6JUaotZ6nzWdlJOxsk7RlZjvuOoNF/wCb9W8S5y3GyuuDUbfFf4
QPkytvAOvjySYE7F/bj+YlEyTpqdVLt27VLLn3KOlz/tBj3RvHPLHXfcMTVd
7CNjB4idE/vDjDdp7QIbPfYU2T9zbTtqY1cp/eUoOu+gUnmG5G8RZcG+NvFh
z9Zn7lNk2YTGv9L3suLGd+xzmJNg2wnYl3IdXRR0d1999dWp3i2qPUDInBWK
zt9yNFo/ElJv8/S/6623XnAb96mnlfKzaBkntJ37xNHZEEfjmDWvs+QzZO0T
qHeM48QVe24Xd+KEPTe65z7pdaCPhk2L82FLOvDHFCek3mfNkzTKxb/osBqt
v3CUk3HwF8E9fONGqdQWs9T5rO2knIwDecbIasx3QuYLWedqjVrXmjPOboq9
CF+cXVTc1s1x4YUX2vv4tItSlIyDrVwSbn/Tt/zZx+Ma/jDz4HzWxNOF795l
l13W7gk6yu1vRmHdA9vZNdZYo3StUvrLUXTegY+umm/+FlUW+M7gO2l75o6i
yyZP/JO+lxWnt4LcjW6a85mGvyWuoy+N35skiioDwAcO34rruqbJOFGKzt84
jdiP+NZbyNr/unRnnful1dNK+enT74fWl5D88okjOjRJccyS13nzGUL7BOQ+
/DKwl4PNRceOHe0cDF+3SaSl14F/K+53797d7gUn+ewNqfdF5Ilv/IsOqxH7
C/DZx9l2222bXPdpi1nqfJZ3Ksk4UULbQ9FlFjpfyDpXa9S61pxx9nnl5hxx
rr/+evsOunxJuL0hzj6IklfGoX7z/htvvJF4H78y3Kc+xkkqf+Z7XGPPMWks
wCdjXAczCScnorMcxa0nDR8+vHQtqV3gxz9+Rgkgs0d9plZKfzmKzjuoVJ4h
+VtUWTg7QHyGJvX9nLuBb5eiy8Y3/r7fw/frmWeeafWYQ9ZgOC9kzjnnNDPN
NJPt3xzY5RA/9q6xN0yiqDIAt59EeqM8//zzTfqbovPXh0bsR3zrLWTtf/FV
5Jsu33KBSvnp0+/71hdHSH75xNHlWbwPz5LXIfkMIXmdBOnkzBPyype09Dre
fvttex8df/TUkgip96F5kif+RYfViP0FOBknyecA9tXcQ9aJ4tMWs9T5LO+k
yTh52wMUXWa+8wXf8GsV7yLHzeYIe4Fu/Sw6H/J5D18F+JmI5zV++tnjTtL3
d/4N2EfNgvMJgo9yR1TedX6lXnrppanedX7/o+ceMTY6nUp0GZlPvv7663Yt
grB8/RRi08k3WGuI4uLjfL9w5oOro3379rV5x/yV69TPaNyop8xHo2mtlP5y
FJ13UKk8Q/K3qLJAV9/1/fSr2Aoy7yettHfGa+YERZeNb/x9v/ff//7Xfosf
57SFQNvjvajNMLDnP8ccc1gfLEkUVQZw4okn2u/wTtSvrvO/g641etysDxeZ
vz40Yj/iW28ha/8bki7fegqV8tOn3/etL86vV0h++cQxrQ/Pkteh9Sckr5Pg
rE6+yfkwvqSlN+mZJN9lEFLvs4wvWeNfdFiN2F+Aq///+9//mlxHvxA/M5xL
E9fl9GmLWep8lneuvvpqGxd8JEbJ2x6g6DLznS/4hl+reBc5bjYnsFFEv8r5
wnA/yoy9TZ8zshg/sAFj74y6yllu+F3B3x9nt1HnHcjk6MLh38HJlOx/49sy
BGRo9Iv5BroK7I9SF+677z67zufSwd6U8wHDmYT45HH38KkY9QXPuEk5u/MZ
+PF//IbjT74c1HfOF3PvEh/O4nX9yvnnn2+v0xdtsskmVneIM9hcXkfnrtRP
fMtzjfzHTyc6x9H5aFr6fdb5i8y7kPIMyd88ZRGFs8ac/qD74VORNQu35lt0
2YTE3+d7nDfmvpG2jpoG54mRhvhZpugLVPKHX1QZjBkzpnQWA/WONTj803NW
HdfwCYSvW/S3i87fSjRaP+LwqbeOkP6Xeu3OFA9Jl2+5pOUn46hvPxFSX7Lk
V7kyj5Yb1+P+dn3zOms+h+R1Es72Iv7DXomzIslzJxvybKX0OohHkk+2KJXq
fZ48SUtrWvyLDsvRqP2Fk3GIG3v+2K5ga4lOFefiRutO6BwspH8JfYf5CrqQ
zkaedTfWMvD57sjTHqDoMguZL5QLv9JcrVHrWnODfMYHOelz83H+5W+uR9e/
KsF7+HNiPEO2TSpDvsd+Ks9Sz5l70edmsYMijqzZcXar8/PC9/g+4bjvuzEu
GjbhcT2pXFkDRL6lviSd4ZuE+7YL1/0dhbxBFor6pGG9Ld5Wv/zyS2sHTvjo
HCT57E5Lvy9F5V2W8gzJ3yxlkQRpRJeB89Djfvah6LLxjb/v97AVxheI79pV
/N04rIUlXU+iiDKgvrDnTn1zfqr5LnpEUYrOXx8aqR+JU6neRvHpf4krv9B0
hZRLUn6G9hO+9SVrfvmUOf+m+amtlNdZ8xlC20AUwsFuhjV0bHLcjzki9sbM
aZxvtZD0ch/Z04e0ep8nT9LSmhb/osOK0oj9hZNx0EHCLo3zUNHzSjrTMOsc
zKd/yfIOcSEOxIXn+buo9uAousx85wvlwq9HvB1FzauEEKIoNt10U+unUggh
kmBug9+zJL161jXwA8XaumhZlPM5IIQQQjQyrGOxJx2yryqEmLY4/fTTzeWX
X556H7s8fMeLloVkHCGEEM0RfEPia6ol+zwRQuQDvRXsy7HFSOOCCy6w53qI
loVkHCGEEM2RoUOHettXCiGmTbCpwLcAPhqSdOyxKccOHztb0bJAtkXGUdkK
IYQQQoiWBucqOp9y7du3t3/ji7FLly7WH5TW+VsWnF3EWZTORxa+l/HrFfcT
LYQQQgghRHOFuS3+nrDJ4fwLziTkfAjRMhk1apS11UTWYb8fX4Scl5LFT60Q
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQojmzaeffmquu+4607lz
Z9O3b996R6cqjB492p5tRho7depknnnmmXpHqRDqXXb1Dl80Ns2xfnCW+xNP
PGGOPPJIe6Z7c6DR4zxs2DBz6aWX2jOasGcW6TTHNiNELVF/UhyNPnbk5Ztv
vjGbbLJJyW8gPlRaGr169TKHHnqoueiii8z8889v03nSSSfVO1q5qXfZ1Tt8
4cdll11m1ltvPTNixIiahttc6wf+cVu3bm3jvP7669c7Ol40cpyZj6y99tql
evDaa6/VO0oNS3NtMy2RevWb1eSuu+6ysvOSSy5p5plnHtOmTRt7Ls4qq6xi
ttxyS/Pyyy/XO4oVUX9SLI08dhTJqquuatP46KOP1jsqhTJgwADbnp2v94kT
J9o0Iru2FOpddvUOX5Rn5ZVXtuXD2nA9aI71o3fv3jbOm222Wb2j4k0jxxk/
tHPOOaeN37vvvlvv6DQ8zbHNtDTq3W9Wk59//tnMPffcNn3rrruu+eeff+od
pSDUnxRLI48dRcEeFWkcOHBgvaNSKB07drTrEy2ZepddvcMX5WGdi7Wan376
qS7hN8f68dRTT9k4b7XVVvWOijeNHueVVlrJxm/48OH1jkrD0xzbTEuj3v1m
tVlttdVsHdt///3rHZVMqD8pjkYfO4qga9euNo0txU4Fxo4da9N00EEH1Tsq
VaXeZVfv8EVj0xzrB/Mb4rzNNtvUOyreNHqc0YMgfh999FG9o9LwNMc2I5oX
a665pq1jhxxySL2jkgn1J8XR6GNHEey5554trk994YUXbJqOPvroekelqtS7
7OodvmhsmmP9GDJkSLPr8xshzv379zffffdd4j3sgzUn8aM5tpnmSLn62tJZ
Z511bB07/PDD6x2VVNSf1IZGGDuqTUvsU52OYRYZpznppxZZdlnSXXTdaU55
35yoV742x76lln1+UeVSZJyzxAm7hemnn9588skniffrPSdpTv2K+tR0ikpL
pfpadHjV+l5W2rdvb+vYUUcdVfa5esW3UfqTRikvX7LEtznLOL/88ou56aab
rF+4/fbbz5xwwgnm8ccfn+q5cn0qOl9HHHGE3Rs8/vjjzfjx4xPD+vDDD+39
ffbZx+y1116mW7du5oMPPgh+Jo0//vjD3H333ea4446z75922mmpNpmTJk0y
22+/vU0T+/7vvfee/eFDOg3SefPNN1udxIcfftj8/vvv5sorrzRdunQxt956
a5NnR40aZX1RH3zwwfb7PXr0SM2Xzz//3Kbz3//+t9l9993NVVddZX777Tfz
2GOP2fK49tprzZNPPmnLhWv40nE+Ej777DPzwAMP2PuPPPKI/TdOpfGwUvmF
pDuJvOHDF198Ya655hrToUMHa0NI/vTp08fqCu+xxx42XmlUO3990xASnylT
ppSe961LWdpOtGzxqVPENx1F9C0Q0q594xvSPhkT+vXrZ4499lj7XdJy5pln
evX52EtkqVd56nuWOPvkR55+4IILLij5OUK32/W30flHdE5CfK644gpbhj7p
DSnPrGlqSX16aNrT8GmbpIs50jnnnGPatm1r193xfYUf07333tvmKf6w06hG
3ayUP5Xqa6V+0zdvHFnbe57+uRKuPSatAeftn5IIya9q9ifV6guZcz700EPW
DzO+rmj7vEv7wDcf/YC7zv/hzz//tHnAO/QDTz/9dKb8Colv6NhRzTqYl+ee
e84stdRS5sADDzQTJkyw184991ybFtIVJa1PJd/IC8qAvpxn8PkSnaMB5bbQ
QguV0v7++++b5Zdf3tafkGfSeOedd8zqq69udtllFyvXU05vvfWW7VO32GIL
89VXXzV5ljNwnD88/EXjGxH/avR7SVDviVvUZyfte+aZZ7Z/zzDDDGby5Mn2
2WeffdYst9xytl8H6iJ1abHFFptKhqJOzjbbbNYPJVAO7BHPMsssdlzEHwLf
p/5Sj1z4P/74o32esQHf1xtttJG9vvTSS08V93LjYaXyC0l3GnnChzfffLPk
44XfxRdfbDbffHOz7777lvoxfkljTS3y17cNhMSHPXjwrUtZ2k5S2UbJ0x6L
6FsgpF37xjekfX799dfWLwlyGmMU4L93ww039JJxGJdC61We+p4lzj75kacf
QJebOs6aq2sb2ANTP7jucGlD/x+beuZLPukNKc8o02qfHpr2NHzbJnnnfJDx
O/nkk03Pnj3tfI0+gbyivvNcnGrUzUr5U6m+Vuo3Q/IGsrb3PP2zD2kyTt7+
KYmQ/Kpmf1LNvhA5EJmE7/Mccb7//vutD7iRI0eW2jRl6MZ/7lFfaSO77bZb
aY0wJL9C4hs6dlS7DuaBtFBP6UejIK+SZurPDz/8ULqe1KcedthhNp+juH45
7kd9mWWWsd+Igj1M9JrPM0mwLrTgggtaOSVet0jn7LPPbus+MnGU2267LUhX
jfpOGLyDDz3W6qj3tAHWqIBxaoEFFjDnnXdek3fJD97jHB4HeY0Petomddlx
zz332Gc5o4f00IfwLHXOtWs3HjoefPBBex07wThp46Fv+fmkuxx5wwd8eZNX
3Lv88sub3GM9kOvsrUepRf6GpCE0PiF1KWvbiZatWzvK+80i+hYIbdc+8Q3J
U8aNTTfd1P6i5QXOz4zP3n2WepWlvmeJc0h+5O0HnJ8myi4JN/9g7umb3pD4
JzGt9um+aU8jtG1+//33pTkW9TCK0xnnnahtRTXqZkj+lKuv5frNLPORLO09
a//sS7l9nKz9UxJZ529F9ye16gvZo+U9ZJ0o7Idwfb755ivt6bp48ayTObLk
l098s4x31a6DeWCPOKn84fbbb5/qerxPxV8ifTNzmSjobsbXNpBfubbEEktY
v+tRkDF9n0njgAMOKK0nJMHeJPdZQ4vC3mqIjAPOnw06BEmwNsd95HD2SN3v
hhtusNfnnXfe0rM8wzXk8yjI4259Is7CCy+cOB46/wlJ/suTxsOQ8vNJdzmK
CB/S/KTwrRlnnNGudUT7hmrnb2gaQuPjW5fytB1wZTto0KDStTzfzNu3OELa
tW98Q9rnjTfeaK+x9hYnVD85S7sNre9Z4hySH5CnH2Bu6TMnCUlvaPyTmFb7
dJ+0p5FlzJ111lnttaQ1bnfezxlnnFG6VnTdDM2fSvU1qd+ErPORkPaet8/3
oZyMExrfcmTNr6L7k1r1hewXIkvx7iuvvNLkHnu28evsN0XlyKz5VSm+oWNH
LepgHth7I36+cUnqUykH9tii0B6S+gvnqxx5FP0/9AHj+DyTxKKLLmrfe/HF
FxPvU9bc32677ZpczyLjVNKD3njjja1OAjqSST90E5yMfMstt9hvxf3P02dy
fa211prq+64NpI2HO+ywg3ecQ8ovj41rEeFDORtCzmPmXvTs1lrkb0gaQuMT
Upeyth1IK5+s3yyib4HQdu0T35A8dfvz8fKFUBknS7sNre9Z4hySH5CnH8g6
JymX3tD4JzGt9uk+aU8jy5jr9GWS2iU2StyL7v1Wo26G5E+l+lpUv+UIrf95
+nwfKsk4WdprElnzq+j+pJZ9oavv7Cs6sHGaa6657HXkLQd7LVG9h6z5VSm+
Wca7atfBrEycONHGq1WrVl5yNjjZMC1/SBvy34orrpjYX6Cnx3m53OPHXht7
gtE64/NMnOgeeJr/DOynuL/44os3uV4NGQcbn3g4aWAjx7fQn4yCv5B4/XdU
Gg933nnnqd6pVHZQqfzytOciwodyfZabV0f7rFrlr28aQuMTUpeytB1HWtlm
+WZRfUuWdu0T35A8Zd2O76CPHKdoGSepXoXW9yxxDskPqKaM4/w4haQ3NP5J
TKt9OmQpz6xjrtuvSpoH4ZuEezzjqHbdrJQ/WWScPPOR0Paep8/3we3TpPlV
y9I/xcmTX0X3J7XsC51eGmG69oANDHs27DWihwfffvttk/Mb8+RXpfhmGe+q
XQezwr4S8WG/zncesuOOOybmD/vO2A1i08UeGH14Wn+Kvh/7gGuvvXYpT+K2
ST7PRKF+MJ/iOXy1JEG94X5cD7caMg5ljD6kTxnzDHoIxB8bMpce4okfhHHj
xk31TpbxMK3swLf88rTnIsKH9dZbL7Vt057jfVat8tc3DaHxCalLENp2HM7u
Nql8Qr9ZVN+StV1Xim9Ins4xxxz2fXzexKmFjBNa37PEObSOFSHjpPkBaNeu
XXB6Q+OfxLTap/ukPYmsbbOcjIPtNfdWWGGF0rVq1U3f/KlUX5P6zTzzkSzt
PWuf74M7HydJLs8a3zh58qvo/qSWfSE4GRH7HGQZ/GAB/gC4ji8BbIdeffXV
0jt58qtSfLOOd9Wsg3nAhxhxSdvviuN8wUTzh7xYdtll7T6eo9y+eBRkTeyP
11hjjVzPgLM9i9syOi688EJ7H792Uaqlq8Z9fAD6wJwQm1LW/dCXxKcFfQq+
/pLAZwXfj597VW48TCo7CCm/PO25iPDB9WkhfWq18zc0DSHxCa1LUXzbDrCn
7VO2vt8som+BrO26XHxD8tSd853kZzRUxsnSbrPU99A4h9axImQc7F2TcHoP
IenN00Yc02qfDlnLM0vb9NnH2XbbbUvXqlE3Q/KnUn1N6zez9ltZ2nuUkD7f
Bycj4BszibzxdeTNr6L6k1r2heD0WlmvQDfN+UzDHyPXsbfBb1qcrPlVKb5F
jHdF18E8ODs7fP4l9Tn46I/6ZXC+RwYPHly65uT44cOHl64l9Rf4T4/69XbQ
hpxfTJ9n0rj++uttmOhLJsG6Gvc5qyJKNWQc6iX32f9OGtPwm+n0Hclf/JU/
//zz3uE72Z/8isI30sbDpLID3/KDPO25iPABHx5p6wxJfVYt8jckDaHx8a1L
edoOuPYRLZ883yyib4GQdu0b35D2yf95Nu7rGvAxyj3Wgn3I0m5D63uWOIfk
B+TpBxj3ePeNN95IvI8vstD0hsY/iWm1T4es5ZllzHUyTpLPgf/85z/2HrKO
oxp1MyR/KtXXpH4Tss5HQtq7b3/HGjt+urH/cD78fXFzaXxCJ5Glf0oia34V
3Z/Usi8Ezo+bc845zUwzzWTlKwd2OXwXPTb8HcTJml+V4hs6dvjWQeod5+tg
J1RLHTb05l2fQ55gi0eeIxNT1rvuumuTeQi2kjyLnOZwviGcXxH8+rt61bdv
X1u3SBPXqVPRc5SoW5Qhfurdu5WeSYN23LlzZ+svJV6fOasA/caoTqPj6quv
tnHFD5QvhMM77K0nwZzO6fei80m5vv7661bmZk0v6lOP86B4Dn/zvpx44on2
Hb7jyod8cr420I1EZ9P5GYSksgPf8vNJdzmKCD/6/EsvvTRVGPhb5F60/tQi
f0PSEBof37qUp+1AUvnk+WYRfQuEtGvf+Ia0T9KBfhG6AXHfSehO8w3WCqkP
lcjSbkPre5Y4h+QH5OkHnF+faHlE12CzpDc0/klMq326T9rTyDLmuj7hf//7
X5Pr6ORga83ZHlH91mrUzZD8qVRfi+i3kuLmU/99+zv20nmPH2c++kI5LLLI
Iva9tLX7LO01iaz5VXR/Usu+0EG6+Madd97Z5Dp6X+iO4QMuTtb8qhTf0LHD
tw7+97//zVQHi4Bzgtyet/vhTw95zq2/klbkeOfDH9mec0xpA+eff769Rt+1
ySab2P0253+OfiOaHuoU/rm5hr4gPhzQZ42Woc8zaTA2YOtEGSC7sN921lln
Wb92nKdGvXDQh3HWp7M7oy4xnuDXNg3kVew88bvhZH3KHZ+gcagDtAeXZ/z4
P/7V8VPucDrI8R+2DJyZFj2HyTFmzJiSn3PqIzIzZ2mzVsM1fNfgtxRdzXJl
Bz7lF5LuOEWED1zbfvvtS/mDLSRlC5yxiN8hdw8fpM7fe7XzNyQNWePjW5ey
tB3iE/025RP13ZqnPebtWxwh7do3vr55Cuw5YbvKfdbTTz31VKu74XzXMB6w
Nhz3nRknpF5lre9Z4+yTH3n6AQdr56Sd99FnpLwZC++77z4bz6zpDSnPKNNq
n15UeYa0TXAyDmlkXRcdfuwN0B2jfib1K0XXzZD+ulx9LddvhuZN1vbu09+h
/8hcn743aa4fh/qLjqUrK/ejjNDNw6dG3v4pidC6VKl8svYnteoLHZxnSr2L
nxeOvlm5s71C8iskvqFjh08d5AxTl5esb9YD7J3Yb+Vs8vhYTV6yt8y/5Jv7
24F/CPpdvuFgDSveX3355ZfWdoo6xh58XPfY95lK0NcTJ2Rv5My0vTHSQL0i
TbzD3+XGQ5dunuUd3mWsKrf3xto16wCkJ3rurINvdO/e3crj6EK6H3UG2zfq
RJK9H3NE9mfZP3Q+BQmL+pkU57Syg0rllyXdRYbv0svPfYc4uHlyNH7Eieuu
HKudvyFpyBMfF365upSl7RCfePlEdcuKaI95+pYoPu06NL6V8jQK81D2/hlX
iQv5xNlw8flqOXzrVdb6njfO5fIjTz8Qhbiyr0ceuPYSr4dZ0xtSnlnT1BL6
9KxpT8N3zHXzZvSA2F/g7Ez0XXzaUJF107e/Bp/6Gu83Q/Mma3v37e94Pu7P
Ig2Xd7zj5GbXd3AeiotDEf1T1vyKp60a/Ukt+kJHkh8S9kOSrsfxya8s8fUd
O3zrIGnZZ599vPRKRMuBunPwwQcn6otTx9F9RE4X2Wi0/G20+AghikVtPJ1y
PgeEEC2bTTfdNPF8UdFyOf3005ucXxsHHU38CIpsNFr+Nlp8hBDFojaejmQc
IaZN2OtBZzBqhytaNuwZYmeJTnIaF1xwgfXjL8JptPxttPgIIYpFbbw8knGE
mPbAdze+Iyv5txQtC/QasUPFvjRJrxt7MOz60IEV4TRa/jZafIQQxaI2Xh7k
P2ScaTX9QkyLDB061MtPkWh5cEaT8zeFLwv+xu9Ely5drP8XrXflo9Hyt9Hi
I4QoFrXxqXn77bftmZvOtxJnNeCHKeo/UQghRMuCPh7/Luhv45uPM8jwzSiK
odHyt9HiI4QoFrXxqRk1apTVx0fWYU0X/3H4Ma7leYBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgjRKAwbNsxceuml1icgutUiH6NHj7Zna3Tu3Nl06tTJ
PPPMM/WOUk2Y1tKtdlN7prU61qhwBuoTTzxhjjzySHsWakuCtFHPhBD/Bz6j
hWiOME9be+21S35yXnvttZqG/84775gPPvgg6B18uWL7O3ny5NK1CRMm2Gtp
v3L07t07U9yT6NWrlzn00EPNRRddZOaff36bpyeddFJh38/CwIED7Xwk6YdN
Nb7u8/qIasR0V5N6txsoou00SrvxoVHrWC3aV6OBX7nWrVvbMuA8wKw0Wt6N
GzfO/Otf/zIff/xxzcJM4rLLLjPrrbeeGTFiRF3jEUojlGdzzbtGYuLEieaS
Sy4xPXv2tH+fcsop5vrrr69zrITIBj5x5pxzTjtevfvuuzUNm3XYRRZZxHzy
ySfe7+y77742rtH53R133FGabyb90vjuu+/MrLPOal5//fVc6YABAwaYJZdc
suRHlX7i0UcfteuC9YLxBJ9QPXr0MK1atbJ5wTyRcYDfWWedZX3htmnTxhx7
7LFm/PjxwWE0YrprQT3bDRTRdhqh3fjQqHWsFu2rUUHGJb2bbbZZpvcbLe++
/vprs+KKK5oXXnihquH4sPLKK9v8uO666+odFW8apTybY941CpQh++QLLrig
9Qn/xx9/2Oucibztttua8847r84xFCIbK620ku0Xhg8fXtNwmacRLvOXpLP2
kign47AGxxpj/JcG55Tz3j777JM7LR07djRbbrll7u9UA9brZ5hhBtt30V/F
+fDDD828885r2rZta+ePITRyuqtNvdoNFNF2GqHd+NDodaya7atReeqpp2wd
2GqrrXJ9pxHybsqUKXbt/+KLL67K90NhX5j21xzPW6x3eTbnvKsnlMsaa6xh
lltuOfP+++9Pdf+HH34wSy21lHnwwQfrEDsh8oG+AeNVrfUu3TyN3/LLL2++
+eabiu+Uk3FYR/KFNYqFF17YvjfTTDN5hZ3G2LFj7XcOOuigzN+oJqx5E7+u
XbumPsN5fjyDTpAvjZ7ualOvdgNFtJ16txsfmkMdq1b7amSYS5KebbbZJtd3
GiHvTjjhBLPaaqvpLNMCaITyFGG8+OKLZp555jGLL764+fLLL1Of69+/v5VP
yz0jGhfKDx2MRiZPHMu9i910PWWcRRdd1P7LOFMpfUXJOHfeead9Z5NNNrH/
speeFfQb+MbRRx+d+RvV5Pjjj684pmA7zDMnn3yy93cbPd1F0IjtBopoO/Vu
Nz40hzpWrfbVyAwZMqQQGafeeYeuJ/sOtPNpmaLmP/UuTxEG5/jONttsZq65
5vLSR2Cvh3FEVJekPdA8oLs5/fTTV9RtLzrcEHzjmOXdess43bt3N6eeeqr9
P7bcP/74Y+o7Rck4a621lpl99tmtXjB2DQsttFBJ/zQUp5te9DysqPpGWolf
mh0muhrzzTeffWbw4MHe3/VJd7XaTC3aYqO2Gyii7dS73fjQ6G0LqtW+qkUR
aS9Kxql33h1yyCFWr4pwiqSIPK7VfCPP3CJOvcvTkZZ39ZzDNRrff/+9WWyx
xWxZXHPNNV7vXHvttdbe6osvvqhu5P4/Jk2aZB566CHrswKbzMcff9w8/PDD
dr+V+vXYY4+VrvN/+PPPP+1eIu88+eST5umnn27yzVGjRlmbo4MPPtjuNWI/
lsU27JdffjE33XST9S2533772b1g4hGHsfHuu+82xx13nNXtPu2002z8kiBP
KYcOHTpYG9/ffvvN9OnTx+y///5mjz32sGlPA11D1hcIY6+99jLdunUrjfMX
XHBBSecDHWPnU8jNW9CVuPnmm63eMWFgl4U9FvZzt956q30GfyIun++9997S
nvdnn31mHnjgAZvXjzzyiP03S35VimM5fN6NztWoA1dccYXNp0r5mre+uHna
iSeeaP8+5phj7N+UcZo9cREyzvPPP2+fP+yww+zfrEXzN3UxFNrh9ttvX9qf
d/kb9T8aUs996lsI6DyzTslcNA18phB/2pLvGFAu3SFpCMmbTz/91H5n3XXX
tf/nu9Rp/L7sueeedj6MLwCgLjP/32677aye06uvvuqZY/9HI7cbKKLt1KLd
lOt7K9HobQuq1b5CIF1HHHGE1Z0kr5PqUp7xkzj369fP2oqTx4xRZ555Zm4Z
p955h57lLLPMYuWcNGpdv6LfuOuuu+y1PPOLSu0vz9wiTr3LMynvIE/dL4fv
PNfFrVIbBZ/+sqh5Ou9TFtii8U3WLSrZMTndYdJcbSgn2h42QoSJ/ev9999v
x3h89DHmO11ttw/LPeoAe1O77bZbk/J49tln7bdIJ9C2aZvIeSH+4p977jlr
m3TggQda+zNwNqrUAwe+T1dffXWzyy672PUD6vtbb71lbdG22GKLJna0b775
ppl77rlLbRHbwM0339yO2W6ewS9arx2kkTbn6gn2VOQJ9QKd4nXWWceuYfD+
qquuavOR+HOdcudd9336F9rJzDPPbP+mPeOHlb7F7dHyc2upzMPYs91oo43s
9aWXXjo4vyrFsRy+77o8pK9nH5m2Xylfi6gv8XkadYD5KNco36h/aEc5GYf0
MSeK/pLa4k477dTkG2PGjLFrE8ydQ6AOc06H86OKT9tVVlnF2oHTn7lnfOu5
b30LgXExTT+a/oB1GdoWewGsgeRNN3num4aQvEFneI455ih9lzZCXSH+Z599
ttUl5jr9NnNv2g73qMvUf8L39fHc6O0Gimg71W435freSjSHtgXVaF8hMJ4j
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
K7YSqhvxvQOg1eWrXjEOZKl/tfgWoj3UBdD6wKTuivqOSfL6bZCnjlZ6X/Vs
PzROWS6u1foX1t0l0d425fYJbhQXX3xx+N3evXuHuWnaM2348OFBzrxS9gdJ
gzGwcjFbHmgLuU+58V2hOfVp+oMhQ4aE48k53qqLtZRT+l8YU+VbRsn7skYw
jax2iz0wOC/5La1yNiirvrLksZZrNUaaVa/1Ki9Z/DRg3xL5k+pfyBvjsOcg
58Tnc6ahceRye+2kUc7XL1rO6+WHqU/opZdeSj1Oe8Jx+kWLUMtctaK6UTvf
zBinvdUbqEfdaXa9SbO91WivdQvqVb+K+nXEHuxxxDwVUWmuWt72U+tV0vbW
rTXGqUV37GOYXCejNjaP3WaNNtek7ZfRyvJV7h55/Ysk5epfLb6FaHVdEMwd
TNNdPXxHkcdvy1tH4yTfVz3bD/aO4V7jxo2b6hixGzEcx99///2pjlPnK8VH
jYK9upkzzbxodCFYl0N+GOeiHy4N7AXn0D+Stv6Osam0OblJtJaKvfnS+sHZ
z501sdojvVxMrzkWzP2Oo7HltH6ltHLKXktp/Tq0+fF9FilDXMs3X9PIarc0
lsbvxtG63KQNyqqvLHmsRLVr2QMxj17rVV6y+mnAniXqwy8S42g8s1y/nNC8
zzx7Z5bzw4qW83q0k1pLWW5+NGhf3vi3G7QnZRZqiXGK6kb9S8k+R8U4ad9m
KBrjtNd6A/WoO42sN1ltbzXaY92Cetavon6d+qbj3yev5D/lbT81JyW5Fy6w
hy3H6JvOSyNsE9/rYa1Cnv0s0BG/wTdskrSyfFWbb5XFv8hT/2rxLaA91AWh
95L8vmjesl+JPH5b1jqa5X3Vs/1gX1LulbanBvNAOZbcQxMYZ2L9EnloBRpD
SvZlMO7FuHO57/vwnjRHkLmJtHljx44NfRjsU5F1r0/mKmrvD8oa662Ivegf
QJesJ+Pdoyf2EqRfMVnmGHNmDVHauiH5N2PGjJnqmL6dG/8WEvudUn7jMsox
9Y39DIX24ojL4n0a5JXj9GlWQuO16EtlnN/THi30dTDXV3OGs+orSx4rUe3a
vHqtV3nJ46cBa0r1Pag8MY76HDV/sxrqc0ruU1gO7cOYnItctJxnLW+VYE9+
7kEZKofaHea3Ans0xstINco9N1R7hqK6Yaw+rZ1nHxXk9PEkx/LxQzjGe81D
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
sh/cySefXOrbt2/4ffYbrvUa5eWiiy4Ka5147u+++650xhlnlLbZZpvSJZdc
0ubc77//vnT55ZeXDjrooPBujjzyyNQ18o3MS/ycyy67LLduIUv5gHq866++
+qp0wQUXhL3PKcuHHHJI6aabbprqvEoxTla9iwkTJoRn51zK9MCBA0vPP/98
OMZ6H37/xhtvDHu48a7g1VdfLV177bWlW265pXT99deHf+PkKSfN1Fte/RS1
TZV0CtXKVDX9FX0vefSVJ49pdasZejbGGGNaAe0fsQffq9l2221DW8l+UD/8
8EN0zhNPPFGaa665orb0lFNOKW2wwQalfv36RXEFf2lt6Ntvv11af/31Qzv9
zTffBBl766699tqZYxzW7qy++uqhr1L5Y3+B3/3ud0EulJe99torrPem7a2W
v3vuuae0zDLLBP8daPPxURZddNHSW2+9VTcd8jva34i/ww47rDR06NDS7bff
XjrhhBNKs802W9Ax59VyDb7oQgst1GbfYnySWWaZJaRnnHHG0rfffhvOfeqp
p0qrrLJKaauttgp9wMSiTz75ZIhhNtxww9Kbb77Z8Lzwu8lz8uo2a/mox7u+
9957w31333330qeffhpkPD+/ix8ap1yMk0fvgF+LjuR/P/vss6Vll102xBmA
j4yvLh1+/vnnQU7Mef7555fWWWedIF9yySVzvRuVk2brLY9+itqmajqtVqay
6A+fP+97yaOvInlstp6NMcaYVrDPPvuENi6O2t2HHnqojZzvds4999zh2Gmn
ndbmGH35yNdYY402ctrMddddN/yxt3Mc7auWZ67ayiuvHK4hbkpDbS3+cJb8
4XMssMACpRNPPLGNnGfn/L333rtqnvLo8OOPP27T5xpHe2nPPvvsbebVF7kG
H3TFFVeM9uZ+7bXXgi+KX8o4DHD+ggsuGM6TLyvQL/fET/rxxx8bnpf4OfR5
F9EtVCof9XjX3Bc/jzzEYTwDnxZf85NPPonkaTFOEb0vtdRS4V5x7r///jYy
+g/k68qXFqNHjw7y1VZbrY08y7tptt6K6KeIbcqiU6hUprLor8h7yVvOsuYx
XreapWdjjDGm2bCPKG0lbWmcAQMGlP1uYbl9y7jXTDPNFPryNR8DRowYEc5n
LkSSIutx8HezxDhZ88e8DM5nvS7X6O+8884L8nnmmadiforocNZZZw3Hkn4F
6HsqgwYNqvka7enFXJg0dtttt6g/Ng3mnnD8zDPPbHhe4ufceeedIV1Et5XK
R63vGpiTlxZDw6WXXjqVPC3Gyat35gORXnzxxUtffvllm3Ppp4+z8MILp/rS
+O7yw5NUezfN1lvRcpnHNuXRaTWbk6Vs530vectZ1jyqbkEz9GyMMca0iocf
frj04osvtpEdcMABZX3ISmv6f/Ob34Rj9PUJzUdL/gY0M8Ypl79u3bqVfvWr
X4W56Gl/zDNJjj8lyatDzR1h7n4S5ttzLNl/W+SaauvdF1lkkXD8wQcfTD2O
b8PxzTffvOF5KXdOXt1WKh/1eNfMzeL+ST84zzMV0bu++8R8MdZ5pOkemPNU
yZfu1atXpjzGabbeipbLvHU/q06r2ZwsZTvve8lbzorksVl6NsYYY1oNbTzj
LR06dCgU46hdjrdv9PEiY/1NkkbEOMyTyJO/eeedt7TYYotl/v1qZNGh+nTT
fCrWF3OMc2q9ppLvFZ9zVm4POvaI4HhSP/XOS9Zzsui2Uvmo9V1/9tln4d4z
zzxz5n5q9YXrmYrqnbUiv//976NrmWPE3LFkbFHNl95yyy2n+r1qem+m3mop
l3ltU1adNiPGib+XIuUsbx6bqWdjjDGmVTDniLWsrNFnvgVrIMr5kF27di3b
vtEWJtu3OeaYI8gmTZo01fm1xDjl1jl36tQpV/7wa5h3Xq0fuhp5dFgpRrj6
6qvDseWWW67mayr5XtwHH4rj7I2WBmuHOZ5cD1PvvAjtJ5A8J49uK5WPWt81
c5q4N/NxsvqevXv3bvNMteidtW3MF+vSpUvkn2p9vGhEjNNMvdWin7y2CbLo
tJrNqXeMU6ScVctjsm41W8/GGGNMsyH2WHrppcOcE5FlLlDW9o21tMjS9hSt
JcZhbW8amn+SNX/Mw0F26623Zs5Dkrw6zDIOsummm9Z8TTXfS+uUk3sHiCFD
hoTj7Knb6LwAc2KS5xQtn2nlox7veokllgj3KDe/J0nPnj2neqaieo9DHztr
z1ddddU2cvYF49rktyBriXGarbei+slrm5KU02k1m5OlbOd9L3nLWbU8ptWt
VunZGGOMaQbqk5s4cWIkq+RDshdRuXGZtPaN/YWRJfeGBfaj5Rj981nB/+Ca
xx9/PPU4e6bmyR/rbZEx/4nvSCQh/2lrieLk1aFihLQ1+7vuums4RqxQ6zXV
fK9zzz03HGc9RRqsg+Y43/hodF7iv3fXXXdFsry6rVQ+6vGutd8Be+amxXh8
9yS+D5X2gIs/U1698x0S9udOwphlcs9hzSPimjj33Xdf4Rin2XorWi7z2KY8
Oq1mc7KU7bzvJW85q5bHtLrVDD0DY2XsMc9aPe2BbYwxxjQa9oSlTdJ+O3y3
QXHCyJEjQzsWn6Oi88eMGTPVveabb75wLP5dQOaWzz///GFeRHxPH+B7OZzP
2Avzw7Og/YH4XoqI913mzR/+g9Z3MJecdbZjx44NfZv8VnIf2TTy6lAxwgMP
PNDmPnyf4te//nX4NkVyjkqRa3r06BGuYf5YGvgenMO+ZUl/hW8AsqfZHnvs
MdV1jcgLdO7cOZxDf7rIq9tK5aMe75ryrOfHB2RPBL7TyG8QC/Tp06eN75n2
THn1zjPjO8bLLT4k62TizwmHHnpo+D2eRfngXO2hxfoT6pq+UwXV3k2z9Va0
XOap+3l0Ws3mZCnbed9L3nJWLY/1KIcir41lLAoZf3wf1RhjjGkGgwcPDm0P
7Wn37t3DPrHa7xlfUm0Ssi222CJqq9g/9LjjjgvH+P4g+wLpGPsH69sQQJ8j
ewHQZtJfecQRR4Tv2mnfHuIf+uuTe7imQX8+MRPXMZ+D+Ra066NGjQr3LpI/
fAt8D33Dgj/+z3c/+LZEvXQo5LvwHMcee2xYD8C3JZiThV7YgzVJnmvon2at
O3thqf+deJJv+yXBT2KdNXHmWWedFeYUojf21OUbhfhBjc4LvmFc/7xT7T2d
V7flyofioFrfNfBdRM1B0x/75TKeoT53YjK+jRh/poEDB0axX1694zvyHROe
l3US7FfIGotkWXnnnXeib6GgB8Yl+vfvH/rRkbEn3tZbbx3WYOQpJ83Sm8ij
n6K2KatOy5UpYrys+svzXoroq5JdLFe3mqVn5ucRF5H3tLjIGGOMaRQTJkwI
PtkHH3wQyfimdbytp03ljzaRdo9vzKudRca8Jfw3fEnkaX4P7TzzHmiPOZfz
+I5gvE85C9ybfk3muinP5Ic81JI/+knpn6a9Tn5nvhpZdCgUIzDvhz5OvsvH
HJZKeshzTfx5pQvOq7RmnHN5Bvw2+rgrnVvvvCTfHf/Gfbg8uoW08pGklnct
uDdzf/gefTI+13PHnyltbl9Wvb/xxhulRx55JOSX+U3JdR1x0B1zlnh+fSeS
56WvIS2PecpJo/WWJIt+itqmPDpNK1N59Zf1vRTVVxa7mKxbopF6Vt6S+y0Y
Y4wxZtqi0pr9el7TKNpTXowxxhhjjDGtxzGOMcYYY4wxZlrCMY4xxhhjjDFm
WoK9x4gRpkyZ0tBrGkV7yosxxhhjjDGmdYwbNy58y1J7D/Xt2zfs6VTpW+ZF
rmkU7SkvxhhjjDHGmNYzefLksI8TscL48ePDHkvspVppH6si1zSK9pQXY4wx
xhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wx
xhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wx
xhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMdX55ptvSssuu2z4O+WUU4LsH//4
RyR78803g2zw4MGR7IcffgiyVVZZJaQPP/zwkP7000+jc84888wgmzBhQiS7
+uqrg+yYY44J6eWXXz7Kxx577BFkf/zjHyPZZpttFmR9+/YN6XHjxkX3uvHG
G4PspptuimRPPPFEkF100UWR7O233w6yDTbYIKR333336P4rrrhikB199NEh
/eGHH0bXnXvuuUF29tlnR7JPPvkkyI488siQXmmllaJ77brrrkHWo0ePkJ48
eXJ03cUXXxxkY8eOjWS33nprkF1//fWR7Omnnw6y7bffPqR79eoV3X/dddcN
sr333juS6brjjjsupK+88spINmnSpCA744wzItnnn38eZH/9619DulOnTiH9
3XffRecMHTo0yF577bVI9q9//SvIhgwZEsm+//77IPvzn/8c0mussUaUr222
2SbIttxyy5CeOHFidN1VV10VZPfcc08ke/DBB4PsiiuuiGQvv/xykG2xxRYh
vcMOO0T379KlS5AdfPDBIf31119H1w0bNmyqMvDWW28F2YknnhjJfvrppyDb
b7/9QnqdddYJ6Y8//jg65+9//3uQPfvss5Fs9OjRQXbHHXdEsocffjjIdttt
t5CmrIlNNtkkyPr16xfJVl111SA77LDDQvqGG26I7vXUU08F2YgRIyLZe++9
F2THHntsSC+33HLRvTp06BBk1Cl4//33o+vOP//8IKNcSUZ5A+os6Y4dO0b3
6t+/f5BtvPHGIf3GG29E11166aVB9sgjj0Sy22+/PcjQiWTjx48Psm233Tak
e/fuHd2/W7duQbbvvvuG9M8//xxdd/zxxwfZyJEjI9lLL70UZMOHD49kX331
VZAdcsghId25c+eQnjJlylR27JVXXolkl112WZCNGTMmkt19991BNmDAgJBe
a621orxutdVWQbb11ltHsj/84Q9BdsABB4T0XXfdFd3roYceCjLqimSvvvpq
kJ188smR7Ntvvw2y1VZbLaQPPfTQkP7yyy+jc0477bQge+GFFyIZdRv+9re/
RTKBTSDdvXv3SIbekW233XYh/cwzz0TX/ec//wmy2267LZI99thjQbbLLruE
dM+ePaN78X9kHBNJ23/ddddF9+K3ABsq2QcffBBkgwYNCukVVlghupfO4dng
3XffjWQXXHBBkD355JORDJsP6I40uhS0Fcg23XTTSJa0/bwr3evOO+8Msmuu
uSaSPf/880GWZvspI6QpM/Djjz9G52BfIG77L7nkkiCjTEpGWQXsF+nVV189
ymvS9lMHdB11A+6///5Idu+99wZZmu1XGaAuCuw0sgMPPDCkqcO6jroN1HXJ
sAGQZvuxHfEy8Nlnn0Xn0O5A3PaPGjUqyNT+Y7vEXnvtFWTrrbdeJNt8882D
bMcddwxpbKPuhc2Em2++OZI9/vjjQZZm+zfccMOQpp0WtN/IjjrqqJD+6KOP
ouvOOeecIKMNkIy2ATifdFr7z+8Av6vryA+QP8luueWWIEuz/TwvaZ5foBdk
6EkkbT9tq+6F3iHe/vN+YM0112xjx3ifOof3DGm2H99AMnwGoByRTmv///Sn
P4U05TFpxyi3kj3wwANBlmb7qQekqReC+oJM7X+a7cfnkoz6CPH2n3oL+++/
f0ivvfbaIU091znUf8AeSIadAOxG0vZjX0intf877bRTJEva/rgPi50D7J5k
2EPAz0vafnzoeBnAzuoc+bBx24+dBrX/2HGx8847B9lGG20U0vj+uo6YAGgn
JKP9ANqTpO2n3SGd1v7vs88+kSxp+xsB/uEvfvGL8Ced08ZKJl9z4MCBkUw2
btZZZw1p2Q1shM6RzolLJFNdp00mPeOMM0b5oCwgW3LJJSPZyiuvHGRquylL
uhf+MPz73/+OZPKVKeeSvf7660G21FJLhbT8N5h55pmDbM899wxpypKuO+GE
E4KMciWZ2mnKMulZZpkluhexDTKVP/wbXSe/+7777otksvf4XpKpjaG+kcYX
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
Y4wxxhhjjDHGGGOMMcbUh/8BSXYJ2Q==
    "], {{0, 672}, {825, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{825, 672},
  PlotRange->{{0, 825}, {0, 672}}]], "Input",ExpressionUUID->"836fc5f4-0f1d-\
4c4b-af24-2f7f574b1c68"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvQWYHDfyuH1hJoeZmZ047KCTCzrkMIPD7IDD6DBcmDlOLnBhBofBQYcc
hnOY6cL3u/7u1X01f61W3S01zMzu1vs8Y++oe7rVUqmkkkrVs26/9wY7jf6X
v/xl0Lj//WeD7Q5aab/9tjt4w0n/+2WjvQbtuvNeA3dcY6/9B+48cL+lth/j
v4mv/fefFf77GfO/fyeKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiK
oiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiK
oiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiK
oiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiK
oiiKoiiKoiiKUhFvvvlmMuaYY6Z+Pv/889L3mHTSSTPvwWfIkCG513nvvfeS
Xr16dfjdhBNOmDz77LOl86goiqIoiqIoSvcG2+cvf/lL6qes7TNq1KjM68vn
uOOOy7zOr7/+miy66KKdfnfttdeWyp+iKIqiKIqiKD2Dum2fe++9txLbZ+DA
gZ1+c+SRR5bKm6IoiqIoiqIoPYe33norGXfccc1njDHGqNz2OeOMMzpcb+yx
x27cz/6ccMIJqde48sorO+Vrk002Sf7zn/+UypuiKIqiKIrSs/jjjz+MP5HS
OtqlDvbYY4/KbR93veb111+P+v2rr76ajD/++B2uscQSSyS//PJLqXwpiqIo
iqIo3QN8gfbff//cz6BBg5KVVlopefDBB83vDj300A7HDzzwwE5jX+bn7XPO
Oeec1Hy89tprHc695pprcvN+4okndvjNHXfckXru3//+9w7nXnjhhR2Of/nl
l8khhxySWQY8M8/w2GOPdbr+008/3eHc2267LTf/QtE6aCV12D7LLbdc41qs
K/3444/JV199Zf7P49///neyyCKLdMjPjDPOmNx///3JddddlwwdOjR56aWX
SuVPURRFURRF6dpgs4TssZCPjLt/+OGHZIUVVmikL7zwwp2uffDBBzeOn3XW
WZn5+L//+z8T40vOv/POO3Pz7vpIMcZN45hjjulw7i233NLpnBtuuCG4HBZc
cMHk008/7fD7pZde2hwba6yxzFg8lKJ10ErqsH0mn3zy1Geec845k9NOO82s
e/lAvtzf4B/nprEO9MEHH5TKp6IoiqIoitI1Oeywwxrjwp122ik56qijvB/W
JtZZZ50O4+5vv/02mX322Ru/v/jiixvHHnnkERNXmPRddtklNx/YIvYYddNN
N839DWsw9m8WWmghY0O5sG4w1VRTdTjXZ1uRJsf79OmTbLnllh0+AwYMSGaa
aabGOauuumqH36+44oqNMXcMZeqgVVRt+3zxxRdBdl/fvn2Tn3/+ucNvue8k
k0wSbDtONtlkGutaURRFURSlB2KPu59//vnMc9kv7toWL7/8cmOPxTjjjJM8
88wzyUcffdSwNfBjSpurt1lyySXN+byDhf9HH3104weXhWv78Ln88ss7nWev
P4XaPmn+eTw/awfyvPazVWH7FKmDVlC17YOtHGq7sE5mg20ds27Gp3fv3k2J
f0BbuO+++8znp59+Mmlvv/12I03WB1955RXzfdiwYeY76XIO58O//vWvRhrx
wOHrr79upOG3CSNGjDDfKVOBdkka/wscJ43zgfKQaxHTD/75z3820sTmJOaF
pIksogf4/vDDD5vvf/75Z+Ocd955x6Tx/JJGuQA+jZLG34BvIt8fffTRRl6f
euopk2bbrJQVaZQdIH9yLeZl4MMPP2ykyb4vnk3SRAaYT+C76BzatZzz7rvv
mjTmUCTt448/NmnsSeP7Aw880MjXCy+8YNIef/zxRtqTTz5p0p577rlG2kMP
PWTS2KcGn332WeP63333nUljjVLSZJ/fG2+80UgTuD/fZY/cb7/91jjn/fff
N2nff/99I03WrHlevtvzKegg0p544olGGn+TJvqJ8pVrSbvnmpLGvYB7Sxp5
AuqV77YPqpzDswHPKmmyToscSRryBZQd3ylLgTImjTIXqAvSqBv45ptvGtdi
3gWoU0kTP1vqXtJ+//13kxbSbpA1SUMGIaTdAzJOGjIPoe3Gp2vwxeb78OHD
G9enjZJGmwXasPyOtg2h7T5E1/jaDbpK0tBhgE6TNHQdhLR7n670tXtfu3F1
DXUs5/COOMDHRdI++eQTk4bMSBqyBEXbfWi7GTlypPmOH7fw4osvmjTxww9t
9z5d6Wv3brsBV9dQJnItygooO7fd+HSl2+597QZdKGnoSAhpN0C5kEY5CZQf
aZQn5LV7GeO5utLX7mkrkkYbAp+ucftLoI2SRpsVXF0Z2u59ujKk3fjGGL7+
sugYw9duWkXeuJt2IfoqDfbmyDWmm266ZPHFFzd/s99C6joLdIHYEvw92mij
me+ss2Rh2z5yz+mnn77D3nbkT3yf5Jwytg+QLzlP2jrUZfuE1EGzqdr2QR+e
euqppo3TptHR99xzT7Laaqt1ug/rifYYlXUc95ytttrK6D3a4V577dWQKftz
/fXXV1UcqZx77rmN+0lfd9BBB3WSn80339x8n3jiic13dJicc8ABB5g0+g5J
O/vss02aHRf81ltvNWnrrbee+T7NNNM08rHYYos11jOFKaec0qRtuOGG5jv9
plxrn332MWl/+9vfGmmi39l3JmkyLtpoo43Md/wWAZmVc9hHB+h7STv//PNN
Gnv0JO2uu+4yaWuvvbb5PsMMMzTyypouacsss0wjTeqdOH5g+6xKn4hMSZrY
MMiDpEm/hu7h+3bbbWe+MzaTc4444giTRtuUtEsuucSkSXwO9qcJf/3rX03a
rLPO2kibb775TNryyy/fSJN5HtaUgT1pcn0ZP7GnUdJkLLDbbrs10qQvkriL
5AcYj8g5xx57rEmjLUjaFVdcYdK23XbbTjprlVVWMWn4mQr8TRrHgPKVa1Hu
YMdYlP6be0uajBupV75Tz8AzyDk8G6C3JU3iOiJHkibjNcqO75SlQBmTRpkL
1AVp1A0w/pFr3XzzzSaNOnX1MGvtkiZ92dRTT22+r7/++uY7MiTnIFuArEka
Mgi0Y0mTMQr+DXzH31tAxklD5gG9Ib9DnwBtRdJkn+sFF1zQSJOxhuyBXGqp
pRrXF99i2izQhuV3tG04/fTTG2kyLtp3330baWKHozv4ji4R0DGkoXOAcaf8
7qKLLjJp7IeVNPQ8oNMkTcbVCyywgPnOHKqAjiQNnQnoUPkduhVOPvnkRprY
AHafJbbnuuuua75PO+205jtjaznn6KOPNmmMqSXtsssuM2k33XRTI03GwviB
8B1fGGGeeeYxaYwNBJkr3nrrrc33q6++unEtsdd5f7ekib1rz/EJa665pvmO
Pwpwrpwj7wDnmpLGvYD9z5Im41f2EvN97rnnblxf/HpsHxd8+knbYYcdzHfK
RK4lNiplJ2lir3A+3/k9UAdyDnUD1JWkUYfA+F/SZF+D21+C7BdGZoSZZ57Z
pK2xxhqNNBkL7LzzzuY7MinXFxvJHpOJbb7NNtuY7+ONN5757usvaSuSRhsC
5EPSkBtw+0ugjZJGmxUYT5PWv39/893XX/rGGIMHD26kiT3t9pehYwxff4nu
4zu6UPCNMWQNZIMNNjDf0bVyLduGbwV2HdOPuHvr2dMjY6os7PIR+chbwxCk
r5V+g3rmOzKatT/dtn3EfuJjv/9F2gj97VVXXdU4J8/2Qc/w3f4gt5SL+PLZ
Og6qsH3K1EEzqWO/jw/GRaIn7I+MJ7Bv3GPoKBfK0j1v7733rjy/Lmr7qO0D
avuo7aO2j9o+oLaP2j5q+7SX7ZP2CRl3Uyaip+x+IQ/RK/S9sh5rj2elzn3Y
tg/tCPnm74kmmsj0U6whipzjC2frqzzbJ+/DWENkT6jC9ilTB82kWbYPMA50
7yXjRd/7fOw1Y4E1dfc8GcfVCbqcvWx8ZD0d/SJpsh7NWIvvIpfIs5wja1z8
XtKkP0fOJU36GOSe7zKmAPo30uw16rvvvtukSX+FH4tcS3QovguSJuM18iNp
MobgGnznmoA+kHPEt4AxiqSJHxMyI2kiP4zR+W77pjDWJs2OsUj7I038SRhb
y7XEH4AxqKSJncaav6SJ7XD77beb79L34ach54g/Bn2IpIk/A3MzfLfjOuJz
QZqt25mbIc32h6GuSRN/EsYtcn3xB6AvlTRZz8aGlDSB+/Nd5ooYm8o54seE
vSBp4s/A8/Kd5xcYK5Fm+6bwN2kyNqN85Vpi03BNSRPbhHtLmoyXqVe+274R
co74YfGskiZjb+RI0qQPpuzsdgOUMWm2Hxx1QZr4w2DbyrWk36FOJU3GC9S9
pInvDu2K7+JHhgzJOeJPgqxJmtjcvnaD7PLd7kuQcdLEfve1e1+7oU1Jmsyp
4FPDd9t/1G33Pl1jtxvxP0MnSJr4vLntHlxdY7cbsd/RVZImNqVPV0q797Ub
sU/RofI7sZnw+clq94LoGuaQgPGsnCNzPfhcue0emXF1ja/dMO4lzfYjY/ya
1+597QZ7lu/2WIC+ztaVvnbPNSVN7Cj8SCRNxvbkke+2/6vb7sHVNXa7EV9d
yk7SxGfPpyuz2o34SpM/SRP/F7e/BGn3th+c6Bp7TED5kSbzA8hkVrt3dY3M
Nfj6S9qK2+5tXSm6xtduaKOk2X5wyKWtK33tPnSM4faXoWMMX38ZOsZwdaXd
bsRHv1XY4+7tt9/efJcPMZ2ZCwgZd6OvZT3EnWPIQuao3Tl42VNjzyW4uLYP
siy2zq677posu+yy5m9isiGnMbYP83DMT9of5kC4JteWPtqmCtunTB00kyK2
D23QjVMgZP2Wdunei5gHcN5553U6ZvsmC/Z8knzsuThFURRFURSl+5O314Q5
A5kjTANbDv8arsEeclkTZW3QZyMI2KZiq7B2NsssszQ+dtyu1Vdf3ft71/aB
LbbYotMYV2zTGNsna79PGnXt9wmpg2YTa/vgi0C5sF7Gfin7nT3Y/9ial156
qfe32MXuvWTd1vb5ko8bCwFsHwj5yJq9oiiKoiiK0jOIiTHmg/VAWV/Bt5L1
vTPPPLNxTdZKZB3Uhf3o4qPmrrHwEb9YPvaaq+CzfZjfH3vssRvpK6+8cuP8
rmr7tCMxto/PL0384sH2acNnlD0OrItTX+IP735kvwJ+KL169epwDPuKPQL4
3WBj4QePHe5ew/VZVBRFURRFUbo39ribvbb4jaV9iIt14403dvj9nnvu2Vjj
seMI2vvT11prrU7xhPFNFh85OyahDffy2TCCz/ax88Saku3/1CzbB9srqxzx
e8WXTXw/y9ZBK4ixfdjT6Z47//zzN47zXiiffZP2Yd+yHcvPfcet/SFWui8d
n7lmxLhWFEVRFEVR2oeQffb2hzl0wY5LZL/XFJhvt98Dyrs5bdgzQ3q/fv1S
88bYlL06cg17Dxik2T7snSTuD/5vNs2yfUI/su+zTB20ihjbBzvPPdeOu2LH
Dcv7UK+urUzdE0ck9BrErJL92YqiKIqiKErPQeKBxo67eV+oxIVlfcXnk8Y+
HXv+fffddzfp+BrJmg9rQllIvE8+xNGU2BkgcRL4EL/a5vjjj2/EkhLs9/JI
TEIBXz37eqwzSfyTEIgjIvH8Ym2fonXQSmJsH8pRYmXyYS+X7dtHPBrid9o+
jr4Pe8nSfALxvcSGlHc5+T7IHHt80nwwFUVRFEVRFEVgrtyOS6oUh/irRcbg
XbUOiI+MfYrdlvaeVmI6cA5rhMTSJ046/ounnHKKN261D2JUsh7JO1mIg01M
hMMPP9y8f1d8DBVFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFyec///lPUHraeUr35NVXX01OOeWU
ZKmllkoef/zxVmen7Xn33XeTc845J+nXr18ydOjQVmdH6UZ8/fXXyZlnntnq
bLQdd9xxR/LCCy+0OhuKoigd+Oijj5JDDjnEjAdWWmml5MEHH2x1lhSL//u/
/0tWX331ZL755ksmmmiipFevXub/Pn36JP379+9w7i677JIsueSSyYQTTmjO
m2SSSZIZZ5wxWWGFFZL77ruvcd6///3vZMCAAcnCCy+cTDrppOYzwwwzJGut
tVby22+/NfsRlQJg9/Tu3Tv5y1/+Yj5PP/10q7PU1nz66adJ3759G+X197//
vdVZUnI49dRTjZ574403Wp2VTL788kujdz/++ONWZ6XtYD5ugw02SB577LGg
888///zk2WefrTlXXZ8XX3wxee2116J+889//jMZMWJE8uuvvzbSvv32W5OW
9snioosuKpR3m67SxpXuBXpmp512Sk488cRkiimmMGOCAw44oNXZUjzQhyy9
9NKmjsYee2xjv6RBncoY77bbbsu87txzz50st9xyyU8//VR1lpWawS7GzqWe
X3rppVZnp0vAHEJIu1BazzzzzGPqirW6dgU9zNzSvffe2+qstC3ffPNNsvji
i5t5Vh/fffedOQf22muv5JZbbjF/jxo1KrOf68kwRz3ttNMm77zzTvBvttxy
S9OebJvpiiuuaIwVfJ80vvrqq2TcccdNhg8fXuo5ukIbV7oXd999dzLTTDM1
dAv6h/HAv/71rxbnTEnjrLPOauik559/PvW8l19+uXEe8yppMHZmfeiVV16p
I7tKE8B2pZ5HjhzZ6qx0Cf7617+a8rLXQZX2hLXM4447Lvnhhx9anZVUzj33
3GTbbbctfZ1hw4Yle+65Z7LHHnskl156aenrffbZZ1F2A2sB+O3VxdVXX51s
uOGG3mM33nij8U+44YYbzDzsE088kRx77LEm7b333qstT10ZbB/0GGM41nNC
yLJ91lxzTdPW3E8axxxzjPndFltsUeo5ukIbV7oXK664YrLqqqu2OhtKBPQD
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
RLP0U08iSxcrnenJ7a8ZaBuvHm3j1VDluLUn8d577wXZNKwR4cfGefi2pcG7
QKoeN0899dTmvq18/5K8Fyx0zwvyyPn4FnYlPvvsM5PvHXbYodVZaRn4KVIG
b775Zquz0lZktYHY9tGdaAf9pPRsenL7awbaxpWuiOqFbGSee+211049B9uH
/TucN/nkk6e+33C//fZLbrzxxkrzN80007Rc72y66aZRMvTMM890SduHd5+R
7z322KPVWakVZPSrr77yHiPOgdo+nclqA7HtowxZddcK2kE/Ke1HM+W0me2v
J6JtXGklRXWJ6oVs9t13X1M+xDFI2/Pz0EMPJdNPP31jjeiJJ57odM7vv/+e
zD///Mkff/xRaf6arXd8se16iu0j+5TybJ+64v81I64gfrGjjTZa8s4773iP
dxXbp9kxGNvB9smru1bQHcZFrYznmUXV+WrWczZbTqtsf+0gC+2QBxtt4/XR
Vdt4GWLyGKpLqhi39jQeeOCB3D0/jOEZC0488cTmvMGDB3c65/rrr/emjxo1
ysRK3nHHHc0a3KGHHpp8+eWXwfkTvfPWW28lu+66a7Leeuslyy+/vIkh/cEH
H3Q4F7/GO+64I7n99ttNbAux5fDtu+mmm5K77rorufXWW83/Nvh6XXzxxWZ/
zlVXXdUpD1kyhMxdd911yV577ZVsscUWydZbb50cccQRUbZPkXxzDjaWxN9k
XoBYZcRm23zzzU2ZE+cwlF9++cWs/ZFv6mnEiBHmQ6xrt4xuueUW0w+cccYZ
xgfy0ksv7XAt7OCrr7462WeffUyZHHzwwan77cgj11l88cXN31yX/VIHHXSQ
KXfsMVlnRAYHDRpk4gfil/fUU08FPx8MGTKkIevcQ57RtnNs2wfZPf3005PN
Ntss2Xjjjc1zp1FWzuH11183cxGUGffce++9k9dee632sqJuaVv4+3F/X76L
2j6h5ZL37CF1l0XW9YvqDYjRTzHlgi6mzRB7hJj5yB7zSjwH+SSd/4m7W0QP
xLTnkPzmlXHoOXm6GGL0C3XAvlbi+hC/hD0b11xzTbLNNttktumQZ/ERKqcx
z5BHVvsLadsxsoC8URZbbbVVstFGGyV/+9vfTJkii/h9nH322Z3mP0NkJ1Ye
fWgb70hMmValp0PO6cptvKgcFcljni4pM261Yex38803GxlE5ng+8sOzET9O
ZFGeG/78809TH/yGZ7333ns7XLOK8VDdIGMS28q354c4j/vvv7/5GxnhPNZ3
XCh/t/2xXjT77LObdiv3ot2xhiRj6jxE72ywwQaNOCvEXmFfEXsQr7322sa5
1IGsY/H5/vvvTTr5Im7zsssua9JnmWWWxm+oI/HnTYsHmCZDxLwkNgA6EPkB
4gsus8wyUbZPkXxTtnb8zQMPPDA54YQTjAwec8wxyXjjjWdsVc7L48UXXzTv
8JHY3MS1nnfeeU28N3S9r4xow8QH5Pvoo4+e/Prrr41rLbDAAsn6669v5iqw
DdHx6OxVVlkl+ec//9m472OPPZZMMMEEjeuSb8bp9J9HHXVUw8+S9nPkkUca
u5Jj6AvmQrh/aCxqzltsscXM77gmMVDw95x55plNuiC2z8CBA81eQe4laXx8
OqYKOUevUMaie4kXMscccxidUWdZoTux29FhjGWkbNzxSxHbJ7Rc8p49tO6K
lm2R9ifE6KeYcsFWpX4lT/TLMi5aZ511knHGGcf0LTfccEO0Hohpz6H5zSvj
kHNCdHGMfnnuueca83V8TjrppGTllVdOttxyy8w2HfIsPkLlNOYZQkhrfyFt
O0YWGOsgTzJO+Pbbb81zIYvYQMg8v7H93kNkJ1YefWgbL97Gq9LTIed09TZe
RI6K5DFPl5QZt7pgh2FnIgOcz32QOeZRsfflOpSPtG2OoV+QvQ033NCUp1DF
eKhZMI/Bs/n2/KyxxhoNX0NsQSlr+z1f2LRujANkYsopp0yOPfbYDun4y/F7
4maHIHrHjbv1+eefN95NZM+9YIOIvIhcCv/4xz9M+iKLLNIhnbphrM8xsWtt
fDJEe2Tuh4+7/0nivMX4vBXJtx1/k3vaiP/a+OOPH+wretlll5nf+Hze7DIi
djf1jxwj08xHAfeZaqqpzHluX4WdSF5ot8wZCMTQljg67ju4mB8hnePMd9iw
1sGx2PcOYbfzu7R3NYguYrxgwxwb6UsssUSH9KrkfNZZZzVyZsP+Kzut6rLa
eeedTR9jI7rb9WuNtX1iyiXk2SGv7tIIuX6R9gex+ilWXli3I33bbbdtpDEu
Ys5QKKIHQtpzTH5DyjjknCxdXES/EJsff26ud9ppp3X4TVqbDpXHNLLktMgz
5OFrfzFtO0QWmLOlHBl72f0d437RLTwP4zqZ342R9VB5TEPbeLE2XrWe7glt
vIgcFckjZOmSIuPWLFi34nzsFhtscdLZ62/vi+HZOVfm/SWtivFQs5C2g21q
P9v999+fHHbYYY3vyKKsEbF+J3AOdqINa5QyB8QanXzOO+88k07cuBBE7/jm
fbCbOcYcve83rlzKXn7fe3ckJgbP7OKToQsuuMCkYS+7FN3vUyTfMhb2lY/E
d7frMAt0bZrtA1JGrOn62G677RrzGj5Y2+U4c4Q2ae2bNkU65eLy8MMPp9rr
WTAeCLF9XB8VYkiOMcYYZp7DbiNVyDnzLpzLe4N//PHHDseY37Gpqqx4HvQ3
bd5m9913984jxdo+oeUS8+x5decj5vpF2l+sfoqVF3wpmP9lnhY/F9bhWctz
KaIH8tpzaH5DyjimHtJ0cVH9kha70demY/KZRpacFn2GLNz2F9u2IU8WqH+O
M8drw3w86ciYS6ysh8ijD23jxdt4lXq6J7XxInIUk0chr8+LHbdmwZojdgu/
efLJJzscYx3LTWedyrXjqhr3NwvKVeYU7H0BrPkw12wj5SnrPNTVoosu2slH
hveb0p7x1/R9WDdMixdnk7XPEJ8ejmH72kg9pcklcyousWM78WtjTdClqO1T
JN9Z8Tfxv+YY830h5Nk+eW1puummM8fxz/KBvuI481w2ae2bZ0obz8s8QrNs
H2COj2P2e16rknOJt8g8Cr7Yaftqqywr9Jgrv9R9FbZPTLmUffY8Qq9fpP3F
6qci8oIfBtfBL5U+1ffe6CJ6IKRvDM1vSBmH1kNavorql9g2HZrPNLLktOgz
ZOErr5i2nXYNm0suucQcd8fkjLlIZwzgEivrZfZmaxsv1sar1tM9pY0XkaPY
PEJen1d1DCKRI9aNBdY0WdskHdtGYP3Qfd9vVeOhZrLwwgt3eDbWVd11K5B1
MfxGsZnxDcKnxoW9I+xBKEuW3iHGAMeQG5s8ucTHzyVLTmSuwT4m7ztif49L
XbaPL99Z5XPhhRemjod9lLF97DX5tP3nUl+uXLST7cO6c9ozSKxDWz9VJef4
GxPDQMqQdX/an6sn6iorfs8a5lxzzeUdH/naQNaxmHIp++xVXb/q9ufTT0Xk
hXlK2c918skne88pogdC+sbQ/IaUcWg9+PJVRr9kjTl8bTo0n2mkyWmZZ8gi
q21CXtuGPFnAj5bj7LewIQ6VO1YSYmW9jO2jbbxYG69aT/eUNl5EjmLzCGVs
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
O65YE4i9N89FWfCcPAPfRU7luUnnOOdx/awxJ+cSMwR7n3rzneuWPd+l7Lk3
f/M7KVO3HRaFaxMDljJmL19eXuznJz+k+9pwGTn/8MMPzRwgv2Xd3PUjrqus
qCN0pZQDMLcrfUBWGwhtH3nlkvfsNr66yyPm+rHtr6h+kuumlQvlyLXtMpU6
l3q222iMHijSnvPyG1LGsTJu62KXEP3Cb/nEtukYeUkjRE5DniGLvPaX17bt
a+TJAumDBg0y8/Hs+ZEP4z9Zi/bFehOyZKeoPNpoG+9IkTKtQk/3pDYeKkdF
8yiEjFeKjFvz8MUvYW3Ll+6jzHhIUfLI2v+oKErPQPWAUieMzXbccUevrz7j
IdakmadX6kPbuKIoyv9QfagoiuoBpU7wb3ff4W7DvgBilCn1oW1cURTlf6g+
VBRF9YBSF/jNsJee/SVpDBkypBGrTKkHbeOKoij/gz4JfRi690pRlO6H6gGl
LtgnQkwD9nP7/PbZP89ebpW9etE2rihKT+eFF14w762TOBrEpSZmSUwsD0VR
ujaqB5RmwLskkS9iRRLblO8bbLBBMmDAABNTTtci6kPbuKIoyv8YNWqUiVOC
Xnz55ZdNvBHixsfGClIUpeuiekBpBhLTnj0/vMOBWMwjRoxodbZ6BNrGFUVR
FEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRlO7Iq6++mpxy
yinJUkstZfbNKUoMH330kXnfXb9+/ZKVVlopefDBB1udpUxU3tufd999Nznn
nHOMTA0dOrTV2VGUaFTPtC/tXDdl+9Ms3al6tVr+9a9/JXfeeWey2267JX/9
619bnR0lAnRA7969GzETn3766VZnqVvy4osvJq+99lrUb3h/AvFzfv3110ba
t99+a9LSPmlcdNFFhfOexfnnn5/stNNOyYknnphMMcUURoYOOOCAWu5VBT1F
3k899dSkT58+yRtvvNFW1wrh008/Tfr27duoI+JIKfXQ7LrtKfQUPRNKO8lZ
O9dN2f40S3e2q15tJ9mIhZjuk002mSnPJZdcstPxrvxsPQHiI0444YSm/l56
6aVWZ6dbwtzNtNNOm7zzzjvBv9lyyy1Nndg20xVXXNHQXb6Pj6+++ioZd9xx
k+HDh5d+Dpu77747mWmmmRrvFvjuu++S2267zcyFtDM9Qd7nmWce83zM8bXT
tWKYb775zH2RKaUeWlW3PYGeoGdCaTc5a8e6qbI/zdKd7aZX2002YmFemfyv
sMIKnY519WfrCcw999ymjkaOHNnqrHRLsH0oX3Sb733YPrJsnzXXXNPMObgf
H8ccc4z5zRZbbFHJswgrrrhisuqqq1Z6zWbR3eWduUzk4Ycffmira8WADwF1
dN999zX1vj2JVtVtT6G765lQ2lHO2q1uquxPs3Rnu+nVdpSNGO655x5Tnqut
tlqnY1392XoCrNdRf2+++Wars9ItEduHzxxzzGHWn/PIsn14p1wIv//+ezLN
NNOY34w11lhB9w3hs88+M9fcYYcdKrles1F5b3822WQTU0ftvn9MUdJQPdO+
tFPdVN2fZulO1avVgn1Dea6++uqtzopSAPb8tYse6I6I7TPddNOZ/+eff37j
i5ZFFbbPlVdeac4XP98jjzyyzGM0eOSRR8z19thjj0quVwc33nhjahmrvLc/
m266qfbRSpdG9Uxr6Sp9QNX9aZbuVL1aLc8884zaPl2YdtID7cB//vOfSq8n
ts+gQYOSwYMHm7/Zb/n999+n/qYK22fRRRdNxh9//OTLL780+42mnnpqsxZU
FvFxrcP2qaLs8a8dbbTRUvdXdQd5DymnKuU47VpVtxWhO/bRdZVVWarOV7s+
Z7Ppinqmzrprpg7pSn1A1f1pV7R9mt2/VEWI7dOKZ1CdHoatB0aNGpWcfvrp
yWabbZZsvPHGyS233JL6O9Zqd911V7N+vO+++5oxtn3s1ltvTe666y6zj++O
O+5Ibr755uSPP/5IfvvtN3NdOca+O+4L/E+Mxx133NGszx566KEdrluErHwK
H3zwQXLWWWclSy+9tNn/+PPPPyfXXHNNss022+SWQx5i++y///7m+5577mm+
c6+0vYxlbZ+HH37YnLvzzjub76z58P3qq68u/Bzwyy+/JGuvvba5FvUjMeaI
zWmDjcW99tlnH7PX6OCDD07dX0n9XHzxxcZnlnJGPs4444xkwIAByaWXXhqV
vyFDhjT8C/HFlfzZfVxRea9DNqsuJ/ucq666qtM13n///WTvvfdOttpqq2Sj
jTYysoSs33777cl+++2XnH322aaNZl2rbFsJaY9V9dF5dfb888+b8kYPEa+U
vPP8r7/+uikT0vmfcqOfO/roo5MFF1zQzCcTM4qYTJtvvrm5BzFkfc8aKtuh
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
JeOPP34y1lhjJbfddlvmb7799lvTzy644ILmXRe9evVKJp54YtOGDjjggCbl
vB7QB717927EsX366adbnaVgyuT91FNPTfr06ZO88cYbNeawZ0EMStoVdcF7
65Wux6effpr07du30aaIsxNyrFl0RxkjjtHYY4+djDbaaC2xJ6Gr6MN26K9e
fPHF5LXXXov6DXYt9fzrr7820hhXkJb2yeKiiy4qlPeqKSI3rajDdpAb4fzz
z0922mmn5MQTT0ymmGIKk5+uPo5Uuga///57suOOOzbaATYQ8VtDwFbnN+2i
e6qAmLUTTjihea6XXnqp1dmJomje55lnHvMb5rCV6qBdUK4rrLBCq7OilGC+
+eYz9eibF8o61gy6m4xdddVVjb5o8cUXb0keupI+bHV/xRz9tNNOm7zzzjvB
v9lyyy1Nfm2b6YorrmjUu++TxldffZWMO+64yfDhw0s9RxUUlZtW1GGr5Qbu
vvvuZKaZZmq8I+27774zepT1bEVpBsjebLPN1tAzU001VfL+++/n/u7LL780
83M//vhjE3LZPOaee25TDiNHjmx1VqIpknfmfZhD1nesV8s999xj6mK11VZr
dVaUErDOTT3ed999UceaQXeTMd5Tfvzxxyerr766ead5K+hq+rCV/RW2D/dm
DBvqp5hl+6y55pqm7N1PGsccc4z53RZbbFH6WcpSRm5aUYetHuesuOKKyaqr
rtqSeyuKsMoqqyT7779/w/6hXXzzzTe5v8PnoruB/whl8Oabb7Y6K9F05bx3
N+gLqQvGcUrXZZNNNjH16PNDzzrWDLqrjDGG3G677VqdjS5BK3W+2D585phj
DuMLmkeW7cM7HEPBZ2WaaaYxv8NfP+Te7Uor6rCVcvPZZ5+Ze++www5Nv7ei
2LDHDOhvRJctt9xyyW+//Zb5O3w+quLGG280a9jNIOte7F2qWyeUedZW510J
45lnnumW49Kexqabbppq32QdawbdUcbwx2HfxLBhwzqkN7N/aDfaVeeL7TPd
dNOZ/9k/nFdHVdk+V155pfmN7Ls78sgjiz5G7eTJbh112Ip7hvLII4+Ye++x
xx5Nv3czaIauquoePVmvwvLLL2/+x/9t3XXXbdg/G2+8cWb8toUWWqiS++Mj
i/9cjN9wXfeqWyeUedY6895ucfraLT+x1DUu7erlIjTjOaq4h9o+5YmpB/yY
9tlnnw5pzewfhHZpZ63ur7IQ22fQoEHJ4MGDzd/so//+++9Tf1OV7bPoooua
/cn43rPnaOqppzZrQa3GlZsQ2a26Dltxzxhkn2J3tH2aoauqukcr9Gq7scwy
yzT+Jv4Kvphi/2TJZ5rtgw66+uqrTR+GL+7BBx+cuh94yJAhjXvhvy6xXdw2
OWrUKBNfgdgM+JoceuihRu/FEHIvWydwz9NPPz3ZbLPNjB14yy23pF6bddxd
d93VrCXvu+++3ryFPmuz8k6eL774YrNfgH3GLq+//rp5FuqQ6+y9995BcX2w
oRmXHX300SYmIPMKxJchnsvmm29u6pEYwVn5Ib+sO55xxhnJgAEDkksvvbTD
uTEyJvz000/JhRdeaGIcbr311sl+++2X3HHHHd5zY+SN/u66665L9tprL5MX
rn3EEUd0GpeyL4T73X777SY2mOzzfO+995Kbbropueuuu5Jbb73V/F+0XKpo
J8CeP+p7q622SjbaaCMzLmE/Bnmn3M4+++zkjz/+iLrvBx98kJx11lnJ0ksv
bfbYcr1rrrkm2WabbXLbV+g9YsoqpM3G2D7seeCexJ6mjVLX1KfU87333mvS
5BjfQwmVMZsibSRUfvJ0Q5G6RmcgZ/b4sYzOFEJl2acPSZM2yf5s6u3mm282
5yNbPIcco2wpv9iyTKPO/qqK/Intg7887LnnnuY7dZ62Z70K2+fhhx825++8
887mO2s+fEfWQ/nll19MPdJWpV4pL9oqsdqQDUnnb/jzzz9NHfMb6lzab1o/
Giq7ZerQpe57lpUZyn3ttdc29+b3kj9iXYfep8q6i3mmPJ1Xha6q6h55fVvV
4+6iY8VW48ZIZb+eHQeRPtbHIoss0imNuJcLLLBAsv766xt7kn7s+eefN2Ng
9hXZeyLxV19sscWM7cl98KFjr9HMM89s0oWHHnoomX322U3fCPTpjGWmn376
Tm0mjdB7iU4YOHCg2ctMXy1pfHw2AnqPMQntir5Vrm+PDUPv36y8I9PMlckx
N04veoPjIr+vvPKK8elG9vOgviTuDZ8DDzwwOeGEE4y+YV53vPHGM7HROS8r
P/ShxLzl++ijj96IixojYwI+NJTX9ttvb2KqguyVZRzp5j9U3j7++GMzV4A9
hU4GfM+ZT3DHpehc9IM8o8yPYgcS73PZZZc16bPMMkuhcqminQB9BHVE3Fag
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
SFviPWC+ZwWOs9ZMPUrcTe7HONemSLmUaSdcn70MrBmwT0I+6Db2PlKfaT73
WfflefkUaV+h94gpq7w2K9ey24foxqxjLow12N9VxR7hWBmDIm0kT37ydENV
dW1TRGfGyHKePrTheGgc5Sr6rKr7q6rzF8vbb79deC943fj8X5jHTvOLCZGb
NNmtqg591HnPMjLD9bmnjDn5XpVsxtZdzL1ixkNFx3dV3SNmPFrFuDs039wr
9J3eitKVyYp1oLQn9EfErvL5btOPsLeEtQQljJNPPjlzn4BSHyrLiqIoiqI0
E7V9uh6HHHKI973lAv7U7DtWwsB3kXdfK81HZVlRFEVRlGaitk/XAj8EYlCw
LyuNIUOGmHcHKOngS4kfIz6NaXtGlHpRWVYURVEUpdkw9sD20XnvrgH7RtgH
TuwFn18vMQPYw671mQ6+z8RbJf4Ae7pj4mcq1aGyrCiKoihKs+AdGMQBlNgg
xLIkBogvDpbSXvC+S4mBR2wxvhMDfMCAASaGjK7hZcOeUJF74qkprUNlWVEU
RVGUZjBq1CgT9wMb6OWXXza+P8Q1rCLWlVIvEsOZfRLEnOV9aCNGjGh1troU
xFQjprTSWlSWFUVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRFEVRquXV
V19NTjnllGSppZYy+0SU1sM74c8555ykX79+ydChQ1udnU6ozLQG3hF55513
Jrvttpt5V6SiKNXSnXRbd3qWrgx7b9mHe/TRRycLLrhg8v7777c6S4VQeUon
a8zW7uO5OrnqqqvMc88000zJJJNMkvTq1cvEJJ533nmTVVddNXniiSdaki9k
uXfv3o1YSU8//XTwb0899dSkT58+yRtvvFFjDnsen376adK3b99GnbBnuJ0o
IzNKOYiXNdlkk5lyX3LJJVudnaageiaOF198MXnttdeifkNcauIS/Prrr420
b7/91qSlfdK46KKLCue9amJlp110WxUy3y7PoiTJsGHDknnmmadRFx9//HGr
sxSNylM6WWO2dh/PNQvewzfxxBObMlh88cXNO+FaDXMSvCODPL300kvBv5O2
jD2rVM98881nyve2225rdVY6UVRmlPIwtqTcV1hhhVZnpSmononjwQcfTKad
dtrknXfeCf7NlltuacrYtpmuuOKKRn/t+/j46quvknHHHdfEHm8HishOO+i2
qmS+HZ5F+R9ff/11o+3wLuauiMpTNlljtnYezzWL+eef35TBNtts0+qsNJh7
7rlNnkaOHBn8G+x+5qF/+OGHGnPWc8GniTq57777Wp0VL0VkRikPMZ0p99VW
W63VWWkKqmfiwPZBPvAx8L1n1EeW7bPmmmua8nc/Po455hjzmy222KKSZylL
UdlptW6rUuZb/SzK/4N5ga7+/nGVp3SyxmztPp5rBosssogpg4EDB7Y6Kw3w
nyFPb775Zquzovz/bLLJJqZOGMu0IyozrYFxEeW++uqrtzorShsitg+fOeaY
w/hc5JFl+/CunhB+//33ZJpppjG/GWussYLu2650J93WnZ6lqzP11FObuujK
7/lVeUona8zW7uO5ZrDYYouZMthll12aet8bb7zR+CT4YO+aynN7semmm7a8
rajMtB/PPPOM2j5KKmL7TDfddOZ//AzS2rBQhe1z5ZVXmvPFt/3II48s8xi1
01N0W9FnySqfqqjyHs3Ib1lkbqBu26dsWfSUtlE1WWO2Zo7n2rUtLLHEEqYM
dt9998zzqtwLhN/waKONluoDXkae22HPUl208tlabfvUKTOtpivLbF22T7uX
SbvnryxVPZ/YPoMGDUoGDx5s/maP8vfff5/6mypsn0UXXTQZf/zxky+//NLs
N2KOm7WgdsAt266i26qQiSLPklc+VVDlPZqR3ypohu1Ttiy6StsIodl9RjvY
Pu3cFkR29thjj07HPvjgg+Sss85Kll56abOXDL/Qa665xuwN2njjjZNbbrkl
+n5Dhgxp+ECwV0Di9Niya8vzqFGjktNPPz3ZbLPNUu/52Wef/X/s3QWUHFX+
uH00wd0DBHfXxV0Dwd3d3SG4s7g7iy/uDoEf7u4uG5xlF10gcN/z3PPe+dd0
Wqpapmcmz+ecOklX93RX3bKr3xsuuuiiOOaAGHZZb7zxRthrr71in2++Y489
9igcdwhsx8EHHxy23Xbb2F54yCGHxOdq8vzzz8dxY3fffXeM+8t2/v777/H3
b7/99rief7N93tnunXbaKbbbso3Z70uIR3jaaafFWBT8n/sU6XbAAQfE85ex
5oz5A+lFHmPAgAFhm222CU8++WSn7xo6dGjMq6bYlpTFiZdywgknhI033jju
H79RTrVrpVbaNKoV50yztr3eNM2es2wfx5XjvO6664ZLLrmk02fJs1155ZVh
zz33jOfxQQcdVHOM4o8//hguuOCCGH968803D3vvvXe44447Gtp/7t3XXntt
2H333eN28L2HHXbYMGUf+hDzW5zvxJEhjfDBBx+EG2+8Mdx1113h1ltvjf/W
mybNPOeI8cp9YbPNNgvrrbdezF9zr2P7SbezzjorXsvl7jOsS/vCNc5+33zz
zfHzbD/7kd7jmLHdRfahWfevPPeaVtzvU9ln3333ja932223+JrfIEZ6OY2W
fR5++OH42R122CG+ps2H11xDRfzyyy/xWHI/T8eWNOB8JuZZuq+ncx1//PFH
PM78Dcf93nvvjesrPaNaeW+rJc/5V+3ZmuS9furZlzzpU0utayjvb+S5hvJ+
V977V7Ou/3JS2eedd96J+7XmmmuGJZdcMj4zuBck9d7PGz123fm5n9Q6Ps3M
v2XlORfrLfs069xsxrXbSpXKPs8991xHDDiWE088MSy77LLxuZT+hqXS/bAc
xgbQx45yIH9LrAnGqvXv3z+uL90mxiAxJotnb6Xf5Dilfqss2Zh9XK+8l47H
q6++GvuccyyLeOihh8L0008f87ggL0p+rF+/fuGzzz6L6zhPOV/TdnAepLLP
6quvHvr27RvPp9TvnOcJeUiekTwvUnqkZwQeffTRMOaYY3Z8J2N3+Q2eJUcc
cUSYcsop43rOUZ7v5EV5j/Qijfv06dMp9iP7kY1tuf/++4fjjz8+Pp/57tFH
Hz0ecz5XqtK1kidtGtGKc6aZ215PmpY7Z8kLcrx4PdJII3XE9yVG8BxzzBHW
WmutWHdC+YNyNuWs5ZZbruz4cWKYkj5bb711jA2MNO6bc6Se/ScO6tJLLx2f
i+QJwbm86KKLDlP24RnIPTHtX6rj595/3nnnhcUWWyyun2aaaepKk2aec+RT
OUbE8QXpxXnF9Uoejpj//P75559f9j7z5ZdfhksvvTRMOOGEcT3n3PXXXx/z
BzznKCsuvvjiYbzxxovnBfGV8u5Ds+5fee41rbjfo7Tsw/mb7pN8fzaOdVKt
7MN2r7baap0WzsmsNdZYo9PfDxkyJIwyyigx/1EE+XfKSxwnvo/7DseWvAr5
xXRP5JjQrwO8R3pzTq2zzjrxGFZ6RrXy3lZLnvOv2rM1yXv9pPQpsi9506ea
WtdQ3t/Icw3l/a68969mXf+VpLLP2muv3RHrjfsTx4w4CNdcc01cV8/9vNFj
192f+6h1fJqdf0vynIuop+zTrHOzGdduq1Vr96Fejvl/eP+UU07p9B712qyn
z1xRKbZcpbjyaZs4tnl+k+PD3ES8l+rfMO2008ZjnPXII48Ms64arvOJJ544
HH300Z3WMwcSv7f99tt3Wk+ZnfVbbrllxzrKPtSfJtRHkp/NSveP0rmVvv/+
+454LKXzUFE3y3reL53jgnoF3ttvv/06rc/GtqQsnpXiFdNXpLR/ZrlrpWja
NKLZ50wzt72eNM2es8SHpu6Uewv3GdqQwOcnmWSS+LnSPCLpwHdyH6GuObue
PCznUxb1NpQfuBfxnCuy/+RXqQ9kSXVUSYrzVtrnjfJRuu+V9m+66aab4nri
rGTlSZNmHjfShPsb9+PsfvHMT9cO6U45gM9Wus+AtjjWM29aKfINzMGX5N2H
Zty/itxrWnG/Ly37gLSmnpD1xG0rfWZXK/tQhuF+l13oQ5eQH+M8p14gK+UR
6pkHhLpt/pY8QRb1Wqyn3JvqwsHx5bOpjgDVzp1m39tqKXINVdvuotdPvftS
K32qyXsNVfuNItdQre8qkvbNuP6rSWWf0hhp1OekOR9T+08993M0cuzy/H07
n/t5jk+z829FzsWiZZ9WnJuNHv9Wqlb2QaU4GsS7HHnkkWOdT/a+nwfHLs/5
XOQ3U9yK+++/P76mzo7XU001VZzHKCvb76SWlKeh3ortScu5554b11Ofm0U7
MHVePH/p+0QdfDZ+OPvAPYT8aRbjrSrVrVU6f7gfsZ57WKnU74N60VLpWixX
55rivg8aNKjT+nLXStG0aUSzz5lmb3s9aZrOWfoLlLPVVlvF98k7lEO7Pu9n
+wHRz67cswCXXXZZx/oi+0+bB+vK9RmqNt4nPVtLn5XcI1P5plStNGnmceM7
+Bvq57NoV0t1VZW2L91nEtrkuK7Jm5fOl0HbWDYfnGcfmnH/qude0+z7fbmy
Dyiv08eG9yjbZr+zkT5vqU9daZ/QdD+kzFUUZTPyBPz9E0880ek96rpL11PX
XFp2RKVzpxXPw2qKXkOVtrue66eefamVPpUUuYYq/UY911C17c2b9s3Kv1ST
7s/V2l6z8X/ruZ/Xe+zy/n27nvtFjk+z8m9Fz8WiZZ9WnJuNHv9WqlX2qTaW
jLoB3qvUb7uSes/nar9Z7lim2O/UwTFeoJ4xffRXoSzDWItyC3W6pXXhtPvx
u8sss0y8HzD2IovnJH0mskj/ovdS9qfStZPK6uXKPtViW9I/m/dK2w3KpW89
aVOvZp8zzd72ZqVpVoqNRdt5OeQDeZ+2xoS2adbVej4W2f/Ur630nEW1sk/K
F1Z6VtIeWqpWmjTzuF188cXxt0rnNiOPx3rGyxfZPq513iPGWPLAAw8ME2Ms
7z404/5V9F7T7Pt9pbIPaFNI80wwViSNBa637MN5xlyH5A0Yo8Bvp4XjQPmF
eNf0gSsqXcNpDBGoE6dunPXkGxLKcuXmi6x07rTieVhN0Wuo0nbXc/3Usy+N
5J/yXkPVfqNZz2sUSftmXP/VVIt1QN8r3qPNL6nnft6usg9a/dxv9NyqJ/9W
5FwsWvZpxbnZncs+qZ6vUpy3audWymc1u+yTYs8V+c1yx5I+iPTxZj0L/Ydo
zyuSpx1//PFjv8wiKBenvpwnnXRS1c9yzlCfPtNMM3VZ2afaPY/x8eW+M7Ux
ZNO3nrSpV7PPmWZvez1pWu3elO1HV2lsIGNJeD/tB+3rvKbtoVY9cJH9p76H
7y03R0ojZR/q/UvVKvs087jRz4DfKu0fRWya0nxunu3jOuY9+ssn9KX/6quv
6tqHZty/svLca5p9v69W9gF1n6nMmOZZqLfsQ7/ClFbVlkMPPTT39iepfxvH
Ll3jjDOijYe6WOp2wbGmT3859ZZ96nkeVlP0Gqq03fVcP/XsSyP5p7zXUN7f
aOR5jSJp3+zrv1S1Z1Z6tlB+SOq5n7e67NPO536j51a9+bfs31c7F8vl2aq9
14pzszuXfdL8PuXuU1hwwQUrnlspf19v2afSuLK555678G+m/tylx5m6RNrw
6BOejlORsYIcU8ZVFLnf8Nn0POf6K5c+tDMz9o16T/r3kP6V7qWpv3VXlH0Y
y8t7M844Y6f1AwcOHCZ960mbejX7nGn2tteTptXy0XwPZRjep+9kOeS7eD/1
/6X9mde09dcq+xTZ/zRek9hWpbq67NPM45auU9KZmBIg3UnPiSaaKPZ7L1Xp
PgPy8Yx/SDE9ORcZx9rIPjR6/0KRe02z7/e1yj7gvE11cLSvEDeoaNmH833q
qaeO6UofDfppli6My6ZNiPSvpw49lQsZ/0MZh3Z9EJOD9RxzxhlUis9U6dxp
xfOwmqLXUKXtruf6qWdfaqVPLXmuoVq/UeQaqvZdRdO+Gdd/JXnKPtn4BY2U
feo9dt39uZ/n+DQ7/5b3XCyXZ6v2XivOzUaPfyulc4eYUOWkbW9F2YexzOWk
9rQiv5liDFSLV871zDicueaaK/e20g7I9xLLNC9ifdHnIj0TS88H8pDTTTdd
bEdMqrWhp3tOV7b7rLLKKp3Wp3g9pW2kRdOmXs0+Z5q97fWkaa18fuonXBo/
ITnuuOPi+9kxDOT/WFepn1xSZP8Zw8pny8UMrVb2Ie4L75XGzWik7NPs40a+
m/2j7ppxDcSy41lCDNFyat1niDvK+8QqpV2gXDzaevehnvtX0XtNs+/3eco+
ID5YehaleHNFyj6pfqFSHV6S9j3bLzGv1MeLfAN93FLMeGKcsZ5xecRjrKTS
udOK52E1Rc+/aud80eunnn2plT5FVLqGqv1GvddQue9q5P5Vz/VfTXpm0U+l
VOrzlu3HVs/9vNFj192f+1mVjk8z829FzsVyebZq77Xi3GzmtdtsKX9FP4Ny
iOfA++XqfOst+5A+/N2zzz5b9n3ixhT9zdTOQr9uEEMjza2QxfM1W5dRC88z
vpd2xXL3c8o52f6XPKMpk4N4gfwtfSiJgZCkutVsfJVq99I0zra07JyuHcaa
lMpT9ik3xpH4dLxHfj0rxRJJ6Vs0bcjbMBcMeZd66lyafc4UPa611JOmtfL5
55xzTnyffrblpHOecnaSxj0SP7hcOYzzkHHmRfaf//PZbHzsJJ3j1EGVSvXk
XItZaRxnPWWfZh430oF5S9ievErvM6VeeOGF+D59RejvVu8+UJ/XjPtX0XtN
s+/3ecs+IBZYqiMtWvZJ9UyV2kiT1HetnjirjNtkPBFjhsgnJIz74TvpM0Kb
UyWVzp1WPA+rKXoNVdrueq6fevalVvpUUiQPUO03il5D1b4rb9rn3fZGnqvp
mZXNmySpT1Q2Zk499/N6j13ev2/Xc7/IudXM/FuRc7Fcnq3ae80+N9Ho8W8V
+gkw5zXbVmle9nTcHnvssWHeS3NaFJ0TKsWNIUZ5ki0X1vObjKtkPeVPEOuU
cz/7Oa4Bnk/Z362F8zP1p6T/GveYZ555JtbFsx/ZmH70daBMno3Zmp4b1J2l
e1PavxQ3h21N1zBxELmOs/cx2iHL3XMYT8t6nsWl9z3yw7xHPVypdM/7v//7
v07r6bPB2F3mjintM1WavkXThj72KU/DXF9FNfucKbLtedSTpsRD5m+osy6H
NmU+Qz146b2dOFb0rSodW8CYn7QtnHuMjSTPRlpxbyM/Tp6lyP7znfRhoW9L
aawn2jb4Durf0tw1Cfld3uO7UhxursEUv47+wvxNNgZarTRp5nFj3kq+h7lt
8ip3HVT6TGlaFdmHZt2/it5rmn2/L1L2AXEI0nw6ecs+qe0x9UGrhXsiny+N
2ZZHmpuotN2Ifh/0DSUWUyWVzp1WPA+rKXoNVdrueq6fevalVvpUUuQaqvYb
Ra+hat+VN+3zbnsjz1X6OPF39NPMYiwHeY7SeM/13M/rPXZ5/75dz/0i51Yz
829FzsVqz6pG8nPNuq7agXwFbdQpj5QW8u3k0RnDSP9oypzpPfpjp3hFzHVF
W2h6j1iWaf6NPCizkpfib+mjQ9sTaXPdddd1xD3N+5vsC8ckxZ7nu1IsYc59
6hG5JzA2gnhV9F2u9nwqh+s5+xss/J97A7GKqOvne2nfYeH5yHrK4en+wsL5
xjyIxxxzTHxN+i+xxBKx/0SKI8x5nO5h5G9THCQW6hrp5wS+h79N79HXIsWP
p3xOOnDNEeOR/c6W09Nx5xhQZ0SfTe5/HH/6PmbTh2uMNsFs+jJva8rH10qb
hPm40vuV6sOraeY5k/e4FlEkTTkW1KtxrqR6FsoQxIYtxTOGMYSULc4444zY
74z9I74k4xdSbKws5jtNbdpp4TzgvMi2BRXZf+oGGVfK+6T3gQceGPcrxZqj
XESdVDbmJfnYVI9PulAvRDwv5vhkHfVdxMelrr5ImjTruKV+UqUL46WYrzY7
j2u1+0wp7jXlYlwV3Ydm3L/y3mtadb8vWvbBxx9/HM/vvGWf1FZIXjyPdNx5
LhfF/ECkW+mcRNyXK80NUuvcacW9rZY851+t7S56/dS7L5XSJ087R95rqNpv
5L2G8m5v3vtXnm1v5Lma9oW6ea5PxrHR141nDffo0ntpkft53rSopTs/92sd
n1bk3/Kci9XybM3KzzXjumoH7tvck9iXtM9pHnL6frJd/J+FvBf5K/4m5ZtY
R36fv0mfLZpX5PPUu9FnJsVB4jf43iK/Wfo3qU4bPENpi+FaoF22tJ9qUdSf
Uw7m+8hfZrENbFfazrQ/bAvr2W7Wp3Si7wXnYTYGFPVn2XOnWnrwPdnv5v+l
z+NKUj6ddk3GhTBnHXUS2fqaJO1PNn3L9euqljYJY18Zx1yk3jqrWedMPdte
Sz1pynalbeZz1e4HfJZzhjoY6l3y3DtII9q0mWOqNA5/VpH95/lHnRT3tHTe
0T5fbj/B+7R3c8xS3F9+r7SfRT1p0uhx4zcYl0O7GmMW0sI9PdXVpfEj1e4z
pXg/bxzlavvQrPtXnntNq+/3Rb377rvdcnwsyo3hp96z3HrkOXdadW+rpdr5
V2u7G7l+iu5LufTJo8g1VO038lxDRbe31v0r77bX+1zN3lt5pjDOg+0pN/4n
yXs/z6r32FX7++7w3K91fFqVf6t1LlbLszUrP9es60rqStXG5bfakksuWXaO
zJ6unWmq+vDMIQ5buf7d5GWps6MOVNKwvH66j976XJWkZmlXPp16AtqmU1/h
3sSyT89z8MEHh1NOOaXi+4zpYAy9pGF5/XQPvfm5KknN0o58OjEoiRNTJHZa
T2LZp2ehvZ8YFIzLquTYY4/tiNko6f/x+ukeevtzVZKahWcW+fRq/Xqb7ZVX
XikcY6InaUeaqn6MJWJMNuN1y/VnJsYCY/89ntKwvH66h97+XJWkRjH3CHNi
pfgdG2+8cYzTURp7WfmZpj0Xc8KmGHjEsOM1sZLWXXfdGE/HNjypMq8fSVJ3
9+mnn8a+weTXqS8iXgtx8dsVb7A3ME17rhTzkzELxE4mJj3x/SXV5vUjSZIk
SZIkSZIkSZIkSZIkSZIkSZJUv/fffz+cffbZYfnllw9XX311uzen13vttdfC
3//+9zgfAfEAhkeec2rEt99+G1599dUYV+Pjjz8OP/30U7s3qVd6/PHHw847
7xyWXHLJsPjii4eDDjooxnVuFY7jnXfeGX9zpZVWatnvgLl5WCRJ7XfyySeH
BRdcMLz11lst/63PP/88LLHEEh2xiYlR0xO8+OKL4fXXXy/0N8y/QPydX3/9
tWPdv//977iu0lLJhRdeWNd2U+6Zb775OtL7qaeequt7erKees6pvb7//vtw
+OGHh1lnnTXMPPPMYf/99w9nnXVWOPjgg8Oaa64ZZptttrD77ruHM844I9x3
333t3twejflotthiizgn50UXXRQmmmiijuv1jjvuaNnvEhN6/PHHj7+z8MIL
5/qbep+X99xzT9hll13C4MGDw0svveT8MJLURrPMMku891Mv3lXIN/Cbt912
W5f9ZiMefPDBMPnkk4f33nsv999suummcR+zZaZ//OMfHc/0cks533zzTRht
tNHCM888U9e2E/d5rLHGit/PM3d41dPOObXPrbfeGvPEY4wxRrjkkkvK1teT
9031CocddlgbtrL3YD7O8847r+M19RWHHnpoLGe2st0H1CtxDJdaaqlcn6/3
efnEE090utdzT77pppvq2GJJUqNoC6D+qyvroehfwP2/p9SXUvZhe6eeeuqy
82mXU63ss+qqq8Y0L13KoS6Uv9lkk03q3n7qrfmON998s+7v6Ol62jmn9rjg
ggvCiCOOGOsbmEOqmi+//DL0798/bLfddl20db3PVVddFcuZ7ZqTk/YY7gsr
rrhirs/X+7ykHXHzzTcPq6++emw3GnPMMcM444xj+48kDSc22GCD+LyhTNET
pLIPywwzzBDrJWupVvZhTro8fvvttzDZZJPFvxl11FFz/W459OfgO95+++26
/r436GnnnLreo48+GkYZZZR4npxzzjm5/uaaa66J48hUn6mmmiqORWwXyjIc
75VXXrlLf5e2ROqzzjzzzC79XUlSe2y44YZty4fecMMNsR9ZEansM8UUU8R/
Z5999prf0Yyyz+WXXx4/n8arMP6gHuQthveyT1ecc/WcW91dM/epO6cPedF5
5503niPTTz99GDp0aK6/o0/pCSec0OKt650+/PDDmN7rrLNO27bh6aefbmrZ
p8g5/t1334X111+/Kb8rSSquK2PQNDMfWmS76aNNf5Yi43aQyj777LNPOPDA
A+P/6ev/n//8p+LfNKPsQ16MMQdff/11HG806aSTxragonpr2afIsW912afe
c6s7a+Y+dff0eeCBBzrado8//vgu//3hMQZYqtvZaaedKn6GsmUlzUizess+
5X67nnOc54QkDQ8+/fTTOI5z2223jX1xDjnkkJi/LYexnjwjiDO03nrrhR13
3DHWM95+++3hlFNO6fgc4xiIicN6YlmlessPPvgg3HjjjeGuu+6KY3j5N/ni
iy9iXB36Ol9xxRUd69Ln7r777vidN998c/j9999jn+xbbrml4z3GjbMv2e/j
OUYfq7322qviPlXLh+ZJm48++ij2FVhkkUXi+H3iBNFvnFhB1KOxjaWOPfbY
jrwNfbxTbLU85YFU9tl3333j69122y2+5vcrxbtttOzz8MMPx8/usMMO8TVt
Pry+8sora/5tqWzZh/Q99dRTw0YbbVQxrbLyHNM33ngjvkcfDr53jz32KBQX
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
644x+82QJ13qOZcryXseN3I+FX2+5NneZpZ9yqUZ7YasKzc/WleXfSjLS9Lw
hOc0/ajzPKeJacx99LLLLhvmvXS/pr60VNFnUxpDUu5eTp6evtUpbif3bmIw
lUOf8aOOOiq2gZB3SH0Wyj3vBw4cOMxvFkkbMDd2pecfz+tqZZ/SmBK11Cr7
gD4nqS8G9fvEESpa9qEekDFepAP9VOirUbowrpg2IdIrb503MTGKphXyHlPa
uuivxJillKeq1VeMbU/zSL722mtlP0OZgPdLx0/Uc+zLnXMJY9tJc+ZaT39H
v8IiMcHznlsp30aejjIOY76RxjdwnTFu4cknn+z4m0bSqpI8x6zWPhW55qt9
V9Frv57zrRbGYtD2xHfRr6kIxu5n4yMUSZd6zuVK8p7HjZxPXVX2obxWqexT
NM1ID9YRV7FU0bJPtedlreuFtrc8sfskqTdJ/dhK+ySUw72Yz9JXvFS6X5fr
W53G7Jb226j0bKJPQ6V7OYjTyvvMbUMddblYsjxTiC+UrdOq1s+DdqTS3yyS
NkjPmXrKPsypV0Sesg8YU5zKGSkeUZGyD33beT/bJ6qclLbZvojVpH5CRdKq
6DFNqC9mzMFcc81Vc7vS2GDGG5dDfCreLx3fVM+xL3fOZaV+/OT5iNtL+2YR
ec+tiy++OH6Oshh93FIMt5NPPjmuZ/wFcbdK1ZtWeVQ6ZtX2qej5Ue27il77
eba9HoMGDYrbwfe98MILuf6GMgD1VCmGdb3p0oyyD/Kex/WeT0WfL9VUK/uk
uqNyZZ+iaUb8BdaVK3cULftUe17W+3yRpN6MfA33RvpAUM9Yijl8Up/k9Oyh
Db80dlO6X6c646xUr0xfh6w0Tr702ZT6atEHuRzyALxPH7xKz9FUD/fmm292
rKv2vE9xj7K/WSRtQLynSnV5lfIM5I9YX3T+jrxlH5AHSrGAipZ9Ut1/pbrY
JPWdyhOfG8RaLZpWeY4p51i5eW8o/+WJdXvOOefE72M8Rznp3GTcU1Y9x77c
OZdFXAneJ64h5f3HHnus5vZn5T23qJtnPBdjtrLttvT/5+/p/0WbX6l606pU
kWNWbZ+KXvPVvivvtZ9322kXIv4+7a/UR+RFPApiK7ItfF+5PlJZ/M6WW24Z
j2Ua51c0Xeo5l6vJex7Xez4Vfb5UU63sk2L8p7jvWUXTjPOHdcznU4rY6rxH
G10e1Z6Xte4BxOMgtt3333+f67ckqTegr0Hq+02ZhjzwM888E+veqK/Lxmkl
Zk26j9PmkpXKPuXiT5M/5z2+K5WZeA6kuD70lae/d4rTRpxs1lN/Wkn6TLnY
Nkjxq9L7xGhO+e2rr746PqOy/VnK/WaRtMn+Zrlne5qbqHQ+wVQnytwbSZ46
uiJlHxCHIM3nkrfsU608Ww5xUvl8acywcupJqzzH9N13343naPZvOdfIv2fT
uBLyi5zDtJGV5mPIw9HXMjvupZH9qXWeE7OCv6XOn7Qtqsi5leaGKm23ow8X
/XNK43Sh3rQqxXHMe8yq7VPRa77ad+W99vNuO+P3U93DaaedVjNNsrgvpm1l
Wyq1E/K7aewH+50UTZd6zuVq8p7H9Z5PRZ8v1TBXHX9DnIlS3Ad5jz6+pYqm
GWWNiSaaKPbzK32G0ZeBz9M2nuaqq6bafaTWPYAY27xfri+HJPVm3F95bqR5
Elj4P3NY8NzK4pk0yyyzdNTx00eGcb20v1SqqyLfndoduN9TJ8rYV+pBWcf8
bMyXSPzc7HbQB4I+H+XQf6J0LqEs5l7lO4h/usQSS8TtTHFFee6n/AfPHWIA
ZH+TOdlTvJs8acP3pnhGLIyxSXHniIlHnKH0HnPMHXnkkR3bSV0sacJ7jKvh
93lO1RpnULTsg48//jjG4s1b9kn5qJtvvjnX96f+cdXGJvCZFIO7aFrlPabk
NTjfeM15Qkwl+sSXy7+XQ/6Jc5q8B3kh+qWwjaQd+Z5svOF6jn2tcy4r5YOy
c0PmVeTcYn4m0rB0TijaerNz2TSSVtXkPWbV9inv+ZE3ffLeF/NsO/2xyB8T
67ho+11C+xLzdvXp0ye25dCHjbIq5RfuA7SDs+/E0MjGos+bLo3cx2rJex7X
cz7lfb5Ua7vmmNMmleISUN7feuutw8svvxz7gHK9Equa92acccbYftdomtH/
j5gvnFPcEw888MD4mymeHeUijnNp7PSEe2mt52WtczzVedSKQy9JvRV9X6jb
5J5dbT52nj/ko+l7wPhn6rBq9VGmHpV2d9rzU5xcfo/7f0K+izG5PP/4Df6t
NHae92vFVKYfFvnMbAw45uHO5kn4jdLfLJ1Xr1basI0s6TvYj7Td6fvI1/K8
YX1peZLXtJWQNtXi1TUD7SJF4yo0U+kxLppWeY4p5ybnJceKfi/1xgdmO/g9
6vqpKy9XZqjn2Oc950D+hvEM9cYMK3JulYudTf15npjaedKqmiLHrNo+5Tk/
8n5XUuu+mHfb+a08c9LWQl6YPDljkVjYNtK8Wr+lPOnS6H2smqLncdHzKc/z
pRb2j31O1yTtRPxuuedSul6bkWY8x3iWUk7hs3yOOWdrtVPlfV7WOsdb/cyR
pN6q6PhMSbWddNJJZcfaSD2J57Ekqbex7CM1H311fv7553ZvhtQQz2NJUm9j
2UdqDvo00W+HPjyVxrtJ3Z3nsSSpN6O/O2UfxtJKqg9jR4g3zThnxnfnGWsj
dTeex5Kk3opYSBdeeGFHLM2xxx47xtfh2SepGMatp7hQ5WLpSj2B57Ekqbci
bhGxV5lDm4X51Yg9ZD2fVB9iW5Wb713qSTyPJUmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJHUHH3zwQbjzzjvD
7bffHl588cUwdOjQdm+SJEmSJDXVHnvsEUYYYYROS//+/cO9997b7k2TJEmS
1Ev9/PPP4V//+lf47bffuuw3Z5llltC3b9/w1ltvhc8++yzcfffdYe65547r
3nnnnS7bjjx++eWXuI38K0mSJKln+Ouvv8Lzzz8fBg0aFOadd94w9thjxzaX
Pn36xH8nmmiisNRSS4VTTjkl9klrlSFDhoQ33nij07pXX301bsPJJ5/cst/N
4/XXXw/HHntsWGihhcJ4440Xt4kyGf/ymvXHHHNMeO2119q6nZIkSZLKe+yx
x8Lf/va3MPHEE4ctttgi/POf/wwvvfRS+PLLL8N//vOf2LbxzDPPhPPPPz+s
scYaYcwxxwzrr79+eO+991qyPfwev8VvLL744mGmmWaK5Ys999yzJb9XC2mx
4oorhnHHHTdssMEG4fLLLw8vvPBC+OKLL2L68C+vWc/7448/flhhhRXi30mS
JElqP/pqbbrppmHCCScMxx13XPjqq69iXr7W8uGHH4ZddtkljDXWWLEdhDaj
ZjnkkEPCKKOMEkYbbbTYzrTrrruGgw8+uC1lnz/++CPsvvvuYZxxxgkHHXRQ
bJPKkz587sADD4xtZ/w93yNJkpTXo48+GtZdd90w//zzx/44q666ajjrrLPs
Zy/ViXE8CyywQFh++eXDxx9/nCtPX7o8++yzYcYZZwwbbrhhU65FxvZQxtly
yy3Dd99917H+119/7fKyz7///e+YNgsuuGB4++23K6YBbVTffvtt2fcYs8Q9
a9lll+20P5IkSZX873//i3XA1DHvtNNOsR51wIABYaSRRgrzzTdfzGNIyo9r
ZtZZZw3bb799zJPXU+5JyyeffBLbZ9Zaa63w559/NrRd5557bizj0H8si3aU
riz7ENuBvnbsU+r3lxZibu+///5hzjnnjPcltmvEEUcMk002WayfufLKK2O5
KX2ev1977bXDoosuGu9lkiRJ1dCfhn45jCHOuv/++8PII48c+6JIyofyCXUH
AwcODN9//31D5Z5sH6/ZZ589xkloxLvvvhvLE9Rp0AZEbIFrrrkmLLLIIrGM
wZgb1n/99ddNSo3ytt122/ib/E7ax88//zyWFRnrxP2IMVFvvvlm+Oabb2K7
GWOmDj/88NgONsccc8SY3Olv+Qzlw80337yl2y1Jkno3xmdTnyopn/POOy/m
zUvbMxpdXnnllRjrjFhxjWA+0ymnnLJjbh/aVJZeeulYVkvrtttuuyalRvnf
79evX4xll/aNMg7tPJS9iOFWLR3o/0YsPMb6nHHGGZ3GSPG9t912W8u2XZIk
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
EUfE8s96660Xdt1119gvjr5bv/zyS7s3sa3++9//hhtvvDEcddRRYeedd45t
X/zLa9bzviRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJw5PP
PvssjDHGGGGEEUYIo4wySnjnnXfavUmSJEmS1HRDhw4N11xzTdh2221j+Wfw
4MHt3iRJkiRJaplrr73Wso8kSZKkXi9b9vnjjz/Cm2++GV5//fXw559/tnvT
yvrpp5/Cu+++G4YMGRK3V5IkqVH0h7n66qvDBRdcEC655JLw888/t3uTpF6J
a+2xxx4LBx98cNh0003D0ksvHRZccMEwYMCAsP3224dzzz03/Otf/2rZ76ey
z3bbbRcmmmii+H+WaaaZJjzwwAMt+928Pvzww3DqqaeGpZZaqmN80rjjjhv6
9u0bRhpppDDllFOGbbbZJtxxxx3hf//7X7s3V5Ik9UBffPFFGH/88TvyQffc
c0+7N0nqVb7//vtw4IEHxvLGVFNNFcs5J5xwQrjsssvCDTfcEM4777xw6KGH
hhVXXDGMPvro4W9/+1u48847m74dqewz4ogjhl133TWWw2688cYw88wzhz59
+oSnnnqq6b+Zx6effhq22GKLMNZYY4WBAweG888/P7z66qvhq6++Cv/5z3/i
QrnowQcfDPvuu2+YddZZYzpefvnl3bbNSpIkdW+PPvpozBfddNNN7d4Uqdeg
LWfCCScMq622WuxrlvLylRbafc4444wwxRRThCWXXLKpMdlS2WfnnXfutJ4y
xnjjjRcWX3zxpv1WXrQ3jz322GGrrbYKb7/9ds30SQtt1ZTZFlpooZa2lUmS
pN7Jso/UPL/99lvMz9Of7N57782dp0/Ll19+Gfbbb7/YJnv//fc3ZZtS2adc
2+4uu+wS24O+/fbbpvxWLfT/22233WIZ75FHHhlm/9kOykLcl5555pkYp7vc
ZyjHTT755PEzkiRJeZWWfchrPPfcc+Hf//53m7dM6lkYl0//NdpRPvjgg8Ll
nuxy1VVXxTEvzaiTqBbn7ZRTTonvEfugK+y+++5hrrnmGqat5+677w7rr79+
bIcabbTR4hifiSeeOG4bnx80aFD45JNPOv3NWWedFSaYYILw1ltvdcm2S5Kk
ni+VfU488cSYZ0vjf0YdddSwww47hF9//bXdmyj1CLRFzDvvvLHtppFyT7Y8
MM4448S6iEakss911103zHs77rhjjCfw3XffNfQbeVx00UWxvSdb7nnvvffC
yiuvHMdEHXLIIeHpp5/ulAaMS6Sf2yqrrBLLOWeffXan94844ogw44wzWlcj
SZJySWUflsUWWyyOtX7xxRfDXnvtFfvCrLHGGuGvv/5q92ZK3do///nP2FbB
OJ1mlHvScvLJJ4f+/fuHX375pe5tS2Wf1VdfvdN62ngZc0PcuVYjXjUxDbJj
nyjnELuAeAfl+raVKwvSz406GeJIpPVrrrlmLMNJkiTVkso+xNz9/fffO71H
nSrv3XbbbW3aOqn7Y4zP9NNPH9snmlnuSQuxn2mXrVcq+7DQ54xYamzr1FNP
HePLUdfRattuu23YfPPNO7X3UO7hHlMkLWgzmmmmmcJBBx3UsY4+b5SrmLdI
kiSpmlT2Ib5sKeb8of89/fAllXfmmWfGuGPZtohmLsR45jrk//W466674jW+
5557xnaeVA6abbbZwpNPPtnk1BgW8diYt4cySton+rBly0JFFspqpAexINI6
4ifQfiRJklRNrThvSyyxRJxXQxpe/Pe//42xCvKi3POPf/yjJeWetDD3D/EP
6kGf1RQPmr5z9DV744036vou0D782muv5f48Y3QY05P2hXhzxP9mfp960+OY
Y46JaZJeU4ajPFTadi1JkpSVyj7MdVjOqquuGufTkIYna6+9dph//vnjPDQ/
/PBDxc9RpiAuGf+2suxz9NFHh3XXXbcLU6C6vffeO7YbMVcr8wRVs8IKK8S5
i9K+bLjhhnHO10bSg3gSxMEjxnVaN91004WHHnqoi1JAkiT1RKnsw5jqUoxj
mGSSScJaa63Vhi2T2of4YsQV49qgbLPeeuuF22+/Pc5Pk0VbDLECWlnuYaGt
hraS7oL4j5R9SJ+RRx45LL/88uH6668v2+5CDLdURiEeG3MX0U7TaJpQFsyO
F6JMVe4+JkmSlKSyz+yzzx7nJ8k69thjq7YJSb3ZlVde2TE2Ji3EcjvggAPi
WH0cf/zxdY9bKbJQFuP3G4n31myUXyj3ZNOHcs32228fXnjhhfgZ6k+IF5ni
uBGroE+fPk0ZG0Vb2MYbb9zxmraoffbZp82pIkmSurNsjGvqUcmjvP/++zGO
EvN+DBgwwBjX6jHOPffc2AZRaSGOO33Zai3M00MfqllmmWWY8g8L+fkll1wy
tonut99+LS/7sBCTjW2iD2p3Weabb76y6cNCGjLWp2/fvh378Nhjj8U5fpqR
HhdeeGFYbrnlOl7T/46ykCRJUiXETCKfctxxx4V+/fp1ytttvfXW3aqeWaqF
8R7kgcst9Idi/E6ehfl6yFszpqQ0T5/tA8d8po2OXcm7MJaffSA+dXdYiO8w
7bTTDpM+2T5wX3/9dVzHv+wD7UEpZl2jy2mnnRYGDhzY8Zq5UZn7R5IkqZrX
X389/Pnnn7GcQwymm2++OcZgkoZnxDvI5ulpDzr99NPDd9991/EZ4o1RR9Dq
cg9j+9mGH3/8sY0p0hl9zLLpk2IfsK1ZxLcmrhz78fnnn8f25DxzmdZa6N/G
nKbpNXMIHXnkkW1KDUmSJKlnIoYB+XnaQhnf8+6775b93KWXXhpWWmmllpd9
aJ9lbp7uIo31SeN76MtWCf0GmR857Qv95C6//PKG02SuueaKxym9XmaZZeL3
SpIkScqHfPQee+wR5xSlPbQaYh6MNdZYMc5zK8s+p556apwPtDsgltv+++8f
brnllhjLoJa99tor7LTTTh37Qmy2FVdcsaH0oKxFutOOxGvaqemLSEwISZIk
Sa3B3L/EQmxl2YfxM+eff367d7UujzzySJh66qljfGv2hf5uxL1mvFQ9aUGM
ONp4suOsGJu1yCKLtHtXJUmSpF7t8MMPj3MAt6rcQ3yAMcccs8e2aTAnEv3e
KLulfeL/k002WXjzzTcLp8ehhx4aZpxxxjBkyJD4mvFXjDWi/6EkSZKk1iH/
zbyjd955Z0vKPsQy23fffdu9mw1hvM9UU00V4yCk/dpll13C9NNPH5577rnc
7T2DBg2Kaf388893rCeO9hxzzDHMvLOSJEmSmo94y4y9p22mmeWe6667LsYT
yMaW66lWWGGFTnORUpahDYc44owBypaLShfG9yy99NKxvSdb7nn22Wdj+jA2
S5IkSVLrEROBeYBXX331mKdvRrkn5evvuOOOdu9eU3z77bdxblbiUGf3k3IL
c84Sx465Yo866qg4xxLxHYiTMPfcc8e4Bsy3nPq5sXz44YdhhhlmCMcff3y7
d02SJEkarpAfJ+7BZptt1jGXZ73L448/HvuInXjiie3eraZiLrFJJpkk7Lnn
nh2xD9JCew7zJW2yySaxjWiNNdaI8eGIY13anvbMM8/EchRz+vz111/t3i1J
kiRpuEOs68UXXzwub7/9dl3lnksuuSSMM8444cwzz2z37rTEJ598EttyiF1H
21aRtKHtiPllxxtvvF5XLpQkSZJ6Gua82XnnnWMfrn322SfOPZMnX//AAw/E
vl9TTjllrx+/8tNPP8U5gujLtsUWW4T7779/mHag7EL/tnPPPTfMPPPMYZ55
5gmDBw9u9y5IkiRJ+v/Rv2u11VaLc27Sh+uUU06JY3for/XWW2/FeW+uvfba
OI8q41YY20Nbxq+//truTe8ylAuJ99avX78w6aSTxvE+O+64Y4yBcMABB8T+
g7Sh9enTJyy55JLhiiuuqDnfrCRJkqT2YHz+eeedF2NVE4uZ8S59+/YN/fv3
j/NxMqblvvvui+1FwyvG7FAmpG3nsMMOi+N4KBNSFqR8+M0337R7EyVJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJquitt94Kzz//
fHjxxRfDn3/+2e7NkSRJkqSm+/bbb8OII44YRhhhhLgMHjy43ZskSZIkSS3x
wQcfhLPOOiuWfW655ZZ2b44kSZKkEv/973/DRx99FH799dd2b0qPd88991j2
kSRJ0jA+/vjj8NBDD4UHHnggvP322+Gvv/5q9yYNN7755puw9957h6mmmqqj
n1bfvn3DwIEDw7vvvtvuzeuxsmUf2oGuuuqqcPHFF8eypSRJkoZPu+yyS6fx
ESyzzDJLeOyxx9q9ab3eO++8E6aYYoow6aSTho022ijsueeeYZ999glLLrlk
PA5bb711uzexx0pln8UXXzyMMsooYaSRRoqv+f8RRxzR7s2TJHVT33//ffj3
v/9tHwypRf73v/+Fu+66Kxx55JFhp512ivX9G2+8cdhrr73CGWecEWNWtRLt
DWOMMUZs72G56aabwkwzzRTGGmus8Omnn7b0t+vx3Xffhddffz08+eSTsT7/
l19+afcm1W255ZaLZZ1ysciee+658MMPP7Rhq5qP/eA8fvnll8Pnn3/eJbHX
Utln1FFHDeedd174+eefw5AhQ8KGG24Y119wwQUt34Y8OJ9pkzrssMPCNtts
E9Zee+34L6+vuOKKGLtBktQ1TjjhhI564GmnnbbdmyP1Km+88UbMh4099thh
ttlmC9tuu204+OCDw5lnnhmvPco+a665ZhhnnHHCzDPPHE488cSW5PM//PDD
8Nprr3VaR7mC6548Y7uRZ/3nP/8ZNthggzDuuOPG7aKdZLrppovlM15PP/30
Yd999w1PPPFEuze3kPHGGy+WLzkX7r333tjnsDfkdSnrXH311WG99dbrOGYT
TTRR6NevX+jTp09se1lggQXCscceG8vbrZDKPvvvv3+n9UOHDg1zzDFHbG9r
Z/zrO++8Myy77LKxf+Niiy0Wdthhh3D44YeH008/PbZL8XqJJZaI7y+11FLh
tttua9u2StLwgmfwrbfeGu/P5L8kNY56XvoyUeahfMMcJP/5z38qLl9//XW4
8cYbY9+dKaecMtYRNxt18YyF2HTTTcPSSy8dZp111phvPOigg5r+W3n98ccf
4cILLwyTTz55mH/++WN+8Jlnnon3pWz6sO3cp7bbbrtYJmL7n3322bZtdxEr
r7xymHDCCcOcc84Zy728XnTRRdu9WXX77bffYt6dcs7CCy8cjjrqqHgsvvrq
q07HjHFM//jHP2LZiOuAOgDa8JoplX1oxyx1zDHHxPcoc3a1V199NfZppBx4
6qmnxv2udv1TN3HaaafFa58yEm1nkqTWoj7aso/UOPr9zDjjjLFfC/Xd1fI8
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
JElST0W/lWuuuSbOb0N+kX7+I4wwQlzI8zM+mnrip556argdq09+mnHv4447
bkwj2su22WabGN9uo402Cssss0x8b4YZZojxxBlPofahDxxldtonGbPCOczc
m4z332+//cKmm24all9++diuxzh+5vvs7e2Ylbz//vvh5JNPju1d1G+MNNJI
8dofccQRY2w4xvTQntbTY9hLkiRVwrgA56EZFuO6mQeIOL9HH310LOfQtkDZ
kXp0dT+cy8TtYx6aQw45JMYxoE8cMZ5pE1JnzNNDG6bz9UiSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEmS
JEmSJEmSJEmSJEmSJEmSJEmSJCmPW265JSywwAJh/vnnD1tuuWW7N0eSJEmS
WuK5554LO++8c5huuunCBBNM0O7NkSRJklRi6NCh4Ztvvgmff/55+Ouvv9q9
OT3eeuutZ9lHkiRJnZDP/vDDD8NTTz0VXnjhhfDDDz+0e5OGK48//ngYOHBg
GHvsscMII4wQl379+oXDDz88/P777+3evB6rtOxjeVKSJGn49uOPP4ZFF120
I8/NMsooo4SNN944fPfdd+3evF7vzDPPDCONNFIcm7L11luH/fffP2y//fZh
/PHHj8fisccea/cm9liUfUjHSy65JMw222xh5JFHDpNOOmk4+OCDw//+9792
b54kSdJwj/IG/Z66yosvvhjz2Msuu2xs86EN4uijjw59+vSJ69Q6H3zwQcyb
lyvfUCalHU71o+zDuU2ZZ5tttgnnnHNO2GijjeK6AQMGhD///LPdmyhJkjTc
+OWXX8Jtt90W6/unnXbaMNpoo8V8Ge0Affv2Df379w+bbrppuPHGG8NPP/3U
su247777wmeffdZpHe0PbMuQIUNa9rtFUE9/9913h6OOOirsuuuuYe211w6b
b755OOCAA2KelnJET3PTTTeFFVZYIZ4HlHM4Dk8//XSvyJOzD0888UQ8j9jH
2WefPUw00UTxnF5kkUXChhtuGC6//PLw7bfftmwbUtnn0ksv7bSec4j1V111
Vct+O690XtPWR7qQPtwHaJ+aa665wlprrRUuvPDC8OWXX7Z7UyVJkury22+/
hbPOOitMPPHEYc4554z5d/K9b731VswL0vbz9ttvhwcffDAMGjQozDvvvLF9
4KSTTgq//vprS7aJsgPbtNlmm4VVVlkllsXIH5J/bafXXnstbLDBBnEsDP2W
KCcedNBB4dRTTw3HH3982G233cJqq60WxhxzzDDHHHOEM844I6ZvT0B5c4wx
xojHlnw6x3rqqacOF198cbs3rW6MT6IsOsUUU8QxS9tuu2246KKLYv7+2Wef
DYP/P/buBNzKcX/8vyk65ukkGTPLPCVkSFKGBlOGQsZUZCjTISIhZEyKg46h
QYQSyVBmkhQKRcmUDDkZynCO+/d/3+f/7O9qt4e191prr7X3fr+u67nY87Oe
tfbu/jyf4X7xxTB8+PBwzTXXhKZNm8YYv3379mHWrFlZPxeuKXFE8Z4p4o01
11wz5n7yhXsZxGCrr7562HbbbUOPHj3idZk4cWKYPn16jIGfeOKJ+DvfrFmz
+DiIg/i7IEmSVF289957Yauttor9HU899VT497//ndYxfvz4eF+YtfFbb72V
tfNZuHBhzKEQ5/ztb38LBxxwQMyncK+e91EDlw/U/Z188skx5mFdSG1eWdeH
++LDhg2L+7ow23jUqFF5Oe+K4DpTi0VupGXLlvFgNvP8+fPzfWqVwmtliy22
iLE6e+z8+OOP5b6uiXm6desWVl111dCzZ8/w559/Zu18yprzxu/SNttsk7Wf
VRFjxowJ66+/fqwpJdZJ5/efWSTdu3eP14nfh2xeJ0mSpFwYPXp0vN9MviKd
dWFJx6233hrvFT/88MNZOacuXbrEfoibbrppiZzSAw88kLfY54MPPojxC/kA
7nNX5PpwXYcMGRJzapdccknB1o/xuOrXr19j1rD3339/WGONNWLusDKv7WnT
psW4tXnz5lmbsUHsQ16J2eHFbbrppqFJkyZZ+TkV0a9fvxiPEaeXdB0WLFgQ
Pv744zjnvKSPkwflOh100EHOIpEkSQXrueeei2tDejwqE/OkHs8880xYZ511
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
WaTfUJIkKduo12dm0/LLLx//+8Ybb8T304+d7O/B3IHSsF7Zeeed41omk71s
WPNQL0O/ALmSmob9d5hDnjoXuLLHFVdcEe+Vpzu7TJXDOp3en0xnN1OTyMwL
ZoawD3FNQ5zDdWJ/q9THzZwS5lOfddZZMUdJDRv1cK1btw79+vWLc/dTP58Y
iH2T27Rpk5M9mSVJUv4wl4t7pr169YrrIvp62RudWhH+/SeXQs17rta3ScxT
p06dmGspvv8Pe92zvp4xY0a534vaF2Y0Mf9t3LhxFV4bslco93oPPvjgGjvP
lueb/enJ/1Q2l8Bs5Pbt28f76ek8L8rcU089Fdf1/J5Sj1nR52zixIkx5qXn
qyb0+JSGGZFcJ17jldnjlBiJv31nn322PT6SqrUPPvgg3uNhHzf2KKzsPS9q
2+nrrYjx48dX6mdJucT9TO6T0j9DTTtzuu6+++7w9NNPx30wX3/99fDoo4+G
m2++Oe4Pwyxp+on5WDZ+NutuYivqTeipKS224mMV2Q+V782MBNb2hx12WFwL
Jfu+l3TwO02cdOSRR8Y1E/3l2dqDqJANGzYsPl5iReqq0lkXcq3Yu3T99deP
17amxoeFit8D5l7Tq8P+N+ms7ZkBwl5B1IP179+/Vswg59979hejRnbgwIHl
9gFS40qfD3/fuM9SU/qgJNVu5LBPOOGEWBND/cxnn31Wqe/DvTd6IiuCNVht
+PdG1QdrKHo0uA/M/qDp9MgwT5oaJ9bL/A6QY6koemdYV/BzmadELX15++Ys
XLiwUo+R9czll18eYzvmJRDbUO9/3XXXxfiGPYiobSPuY43Us2fP2AtRm3Dt
zzvvvBjX0gPCtXnppZfi30teE+R3yAlSQ3TqqafGmGfHHXcMzzzzTL5Pvdbi
3xLuSfA8cN+AuiyeN2YwE8NTF3fHHXfE1zq/Z8zfI4dBrqi2efzxx2NtG6/v
Qw89NP79YpYb14/rxd8B5iHwumauNTNTKvN3TZIKGfeDiX3mzJlTqa9/8skn
w3HHHVehr2GNZ82wCgV9vsQv/DtfVj6ktIMZUdzz33777dP+PWJ/dn73qCXh
vip1bHyvqjJt2rSYr2AWGXV1HTt2jLEO58Tavrbfm+B1wFqQHBB9VdQfJvMl
1l577XjP6JJLLok5BP+WFQ763+jX5/V8wAEHxFrPxo0bx3iImJZYqCbN6qgs
+pyo2z3jjDPi3y7yzeyHyt8C4iF6C31dS6qpjH1Um/H6pfaleC9wRQ9yAj16
9Ij3S7/44otSfx6zAohzyLtsvvnm8fdv8eLFVfiIVVnkwJixLEmSCgd5fO57
denSJXTu3Dn06dOnzH6E1NiHmmDqn7nvQy1bOvFJrmIf1hjUb1ObcOaZZ8ZZ
TNQf1/b70coe6tyIQTKdFZV68HolJ1C8d5rfL/p0qDXh49S51YYeGkmSpFxh
LUUNDTNxWV/ttttucT4VsQ192yWttZLYhxqBZZddNsYl1PvzPurdy+vdzVXs
w1wpzqFRo0bxcbCfXXJO9C1ImWBeEfUwffv2zVrck/S+Mz+E+hoU35uHeQaS
JEnKHOs5ejmPOuqoovcR71x77bUxbmBPxOKS2IceUeYcEZOQW2Hf5xVXXDG0
bNmyzJ+Zq9iHOnv2E0n9PPoxV1pppRjHSZmgv3eHHXbIyr6fxQ/iHX6f2Dcj
2ZuHvhBJkiRlV2k1YczAYV5lcUnsU1JcRF8CH2POUWly2e9T0mPhHjpz4qTK
4h4B+dFRo0ZlPe5JjtNOOy1svfXW7vUiSZJUBejLpWfnhhtuiLOcmFnLvnvF
JbFPSWs0vgcf4+tLk+tZB8zXnDBhQtxThZ4f9lnknJy7qQSvBWrN0vX888+H
hg0b5izu4XjnnXfiLN2auFe8JElSoWA+7f777x/jA3oM6JehR4YenrJin9Lm
vNWrVy/ue12aXMU+zOBk/zkeA31InDt7s7FmNfZRKvKDbdu2jbVlzGv7448/
yvx85hEwdyCXsQ8HeR/3fZEkScoN5rnRD0MP92OPPbZEfMD+BmXFPh9//PFS
HyM+4d41e/iV5rnnnou9OeliXcr3LGteG3tzJ/ueMOstdQ+6Xr16GftoKV9+
+WXco4fXBnvyEdu8++67JX4uucORI0fmPPZhPiF7iUqSJCn76DFg/ce+icW1
bt26zNiHOQfFMVOaj919992l/kz2Mtlkk01iD0U66Pneddddy/wc9uDm577/
/vtLfeyyyy4z9lGJeJ0m+08mB3lP9ipPjZ+JqXkd5jr2ufrqq+Me6ZIkSco+
9vRh/xD6dFKxjzVxT1mxT/E9Sfge5I+olSsplkrVrl27OEuuPJwHe23fe++9
ZX4euR7O6bXXXlvqY+SvjH1qjoEDB8bXRLYOXrPF4x8O8qFHH310eOGFF+Ls
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
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSaqVpk+fHm666aZw1llnhU6dOoV+/fqFOXPm5Pu0JEmSJCkrfvrp
p9C+ffuwzDLLLHWstNJKYfz48fk+RUmSJEnK2KGHHhr23HPPMHLkyPDVV1+F
33//PSxcuDAMGzYsfuy9997L9ylKkiRJUkZmzZoV1llnnfDbb7/l+1QkSZIk
KWfI86y55pqxt6dly5Zh3333jcfTTz+d71OTJEmSpKyZMWNGWH/99cNaa60V
WrVqFS644IKw4447httvvz3fpyZJkiRJWbPLLruE0aNHxx6fadOmhUmTJsVc
kCRJkiTVFJ999llYffXVw19//VXix3k/MZEkSZIkVWe//PJLWGGFFcK11167
RK7nhx9+iHv9nHHGGeGee+7J4xlKkiRJUnbceOONYbnllltqX59ll102dO/e
vdSckCRJkiRVNx988EG45pprwumnnx5OPfXUmAci7yNJkiRJkiRJkiRJkiRJ
yq0ff/wxzJ49O0yePDlMmDAhjB07NjzyyCNh8ODB4ZZbbom1XRdffHHo0qVL
OPPMM8OJJ54YjjnmmHDUUUeFgw46KB577bVX2G233ZY4mAW92WabLXVsueWW
S33u7rvvXvS92rZtG7//ySefHH/eueeeG3/+lVdeGfr37x/uvvvueH7jxo0L
r732Wnj//ffj/LWFCxfm+1JKkiRJqiL/+c9/wtdffx2mTp0ann766TBkyJDQ
r1+/cN5554UOHTqEQw45JOy5554x/lh33XWX6tlfbbXVQv369WOMQkyy3377
xa8hFqG3hVjk/PPPj7HIZZddFq6//vp4DBw4MMZKqcdDDz0UY5SSjn/+859L
ff5NN90UvxcxDt+fmIefd9JJJ8Wf37p163DAAQeEXXfdNZ4f57/SSistcf7M
YFtvvfVCo0aNQtOmTWMcRT9Oz5494/d/8MEHwwsvvBB7cxYsWJDvp0uSJElS
Cf74448wZ86c8Morr8S4gpjmnHPOiet74hRiFmaNJXFAvXr1wnbbbRcOPPDA
GPcQs/Tp0yfceeedYejQoTFvwr6cs2bNijOaq6vffvstfPfdd2HmzJnhjTfe
iHmrBx54IOasLr/88tC1a9fQvn37GMdts802cX+e5BrVrVs3bLLJJmHvvfcO
xx57bLjwwgvD7bffHvcuJX6sztdFkiRJKmT//ve/wzvvvBNGjhwZcyDkPagD
a9iwYcxpsF7/29/+FrbeeusY05AT6dWrVxg0aFB46qmnwpQpU+K+M3/++We+
H0pBW7RoUfj000/Dq6++Gh599NEY75AbIkZq0qRJaNCgQVEcueqqq4addtop
HHnkkeGiiy6KOSpyR3Pnzg3//e9/8/1QJEmSpILGunn8+PFxzU0fDXHM+uuv
H9fa1KGRi2jWrFmsM2N+8vDhw8Pbb78d8xuqGr///nv45JNPwosvvhj3K6UO
7+ijjw4777xzjId4rqi523777WNNHrV6I0aMCNOmTYu5KEmSJKk2IY9DjRp1
ZuRwyCkk6+Y111wz9t506tQpXHfddeHxxx8PH330UVxzq/DNmzcvPrfERT16
9AitWrUKm266acwXkaOjp4p5EFdffXWsoSPelSRJkmqCb775JtadXXXVVbEH
hzq1pEaNOWb03N96662xXop1s2qmX375Jc7MY64C/UMtWrQIf//73+NrYe21
1w7NmzcPF1xwQXj44Ydjr5UkSZJUyMjnMCuA+c9HHHFE2GijjeLadp111gkt
W7YMl156aax/mjFjRpy9JtGHxew9ahjpK0piY14z5IyuuOKKGDt/++23+T5V
SZIk1WL0fTA7rHPnzrG/g56cNdZYI/bp0P/O3Gb2yJEqYv78+THeIe4h/iEv
RDzEPDp6vf71r3/5upIkSVJOffDBB+GOO+6I/RrMjmY9uvnmm8d9PZmpxn6a
zvhSLtDzxf5H7O3KPka89jbccMNw/PHHx31djYUkSZKUiY8//jjGNOzxwt6Y
5HWYa8yeoI899pj9OcqbL7/8MgwbNix069Yt5oOIhYiJmJ1BvvH777/P9ylK
kiSpgP30009xrho1bMyTZj3ZqFGjcPbZZ8dYx/WkCtUXX3wR7r///rhfLTlJ
4vQ99tgjzthgxsJff/2V71OUJElSnr333nuhX79+cd+cOnXqhHXXXTeccMIJ
sY+HGW1SdcTr+oYbbgj7779/nK3NPlH0ChHbM3NOkiRJNR/z1SZOnBjOP//8
WCO0/PLLx/10evfuHd588037dVTjLFiwIO6D27FjxxjbM1/9yCOPjPO0Fy5c
mO/TkyRJUhYtXrw43u+mT5zZwaz9WrduHXvHmakl1RbE/hMmTIh9QuSC6tat
G38XmB3HjHZJkiRVP3/88UfcN+Wkk04Kq6++epwTzP/Tt2PNjxRijvOVV14J
5557bpwZxz0B5nqMGTMm/v5IkiSpcLGW4542s67I7xDzMH+avVJ+//33fJ+e
VLCS351TTz017lH197//PXTv3j28/fbb+T41SZIkpWBvkyuvvDJsuumm8d71
McccE/M71LpJqhh+b0aMGBEOP/zwOP9jl112CXfddZe9QZIkSXlC3dqQIUPi
HKtll1027LXXXmHw4MH2LEhZ9PXXX4e+ffuGhg0bhlVWWSWcdtpp4a233sr3
aUmSJNUK7Dd68cUXx/6dBg0axLqcadOm5fu0pBqNmrjnnnsu5lTJBe22225x
PoJ9QZIkSdnFbKrRo0eHgw46KOZ49tlnn7h3/Z9//pnvU5NqHfa9osaUednM
iuP/f/jhh3yfliRJUrX2448/huuvvz5ssMEGYa211goXXHBBmDlzZr5PS9L/
59dffw2DBg0K22yzTVh11VVDz5493Q9YkiSpgphdwNxd1lOsq+jjWbRoUb5P
S1IJ/vrrrzgXmz2CmTVCHeqXX36Z79OSJEkqaPTttG/fPiy//PLhgAMOiOsp
+gwkVQ/PPvts2HfffcNKK60UunbtGmclSJIk6f+8++674YgjjogxD73UkydP
zvcpScoAewU1bdo0zobr1auX87ElSVKt984774Q2bdrEmOe4444LH3zwQb5P
SVIWPfnkk6FRo0Zxr9TbbrvNuXCSJKnW+eSTT8Kxxx4bVlhhhdChQ4cwY8aM
fJ+SpBxhTuM///nPOLNk2223DS+88EK+T0mSJCnnvv/++7g3D70AzKueOnVq
vk9JUinYS4v6U/KxzDPIFHPhmIfN7//hhx8e5s6dm4WzlCRJKiy///57nFW9
+uqrh8aNG4eJEyfm+5QkleGzzz4LyyyzTNGRzR68Dz/8MN77YI7jrbfe6jwT
SZJUYzz//PNxTvVGG20URowYkZX7x5Jyj1pU7lkQ+/B7nG3Dhw+PfUD77bdf
rIOVJEmqrtjfg56eFVdcMVxyySXhl19+yfcpqYb77bffwvjx48Mtt9wSrr32
2jBkyJDw7bff5vu0qrVHHnkkZ7EP5s+fH4466qg4D+6OO+7w3ogkSapWWLvc
fffdsb6NupaPPvoo36dUJf7973/HNXeXLl3CmWeeGa6++uo4x05Vg156cgip
dVoc7LVJfkGVkxr7zJkzJ+ZuH3744TBv3rys/pyhQ4eGddZZJxx66KGxL1CS
JKnQ0SNAvLPGGmuEwYMH5/t0qtRee+0V14jbb7992HHHHeM14O3zzz8/36dW
4w0YMCDG2pdeemnM+7z33nvh/fffD4MGDYpzxYiLVDlJ7HPggQfGuYxJTFm3
bt04szqbvvjii7gn0IYbbhheffXVrH5vSZKkbGKdudpqq8X5TV999VWV/3zy
TVOmTAmjRo0Kt99+e+jbt2/MP40ZMyber861o48+Ou5jwjxfLFq0KOZ/clkv
lKnFixfXiFrEevXqhTfeeCPfp5FT5EKI58aNGxeeeuqpuB/wN998k/Ofm8Q+
zGbj9+mnn34Ks2bNCoccckh8/8iRI7P68/78889w4YUXxlrZ/v37V/jr+V1/
7bXXwmOPPRYeffTRGENVxe+/JEmqHX788cdYr0+e41//+leV//xp06bFOjP2
DllvvfXCPvvsE4455pjQqVOnGIftueeese6JXAzzdauq/4O1Knvbsz684oor
quRnloU1JfuqnHPOOTE3teaaaxbdw1955ZXDVlttFU455ZTwxBNPxFnE1QUx
71prrRVrsS666KLYY3biiSeGxx9/PN+nljHmofHa4bW73HLLhfr164edd945
7L777vH1XqdOnbD55puHnj17hrfffjsn55DEPr17917i/cTNm266aZxjkguj
R4+Of1NOP/30cvdDffPNN0P37t3DxhtvHH/Xt9xyy/h3gIPXNb1EfOzss8+u
8TGyJEnKnUmTJoXNNtssrsW4F1yVPv/883DSSSfFXFO3bt1irdOCBQti303x
g/vjw4YNC+3atYvrqT59+sS8TDYxx5v74vQrsP5K7Tk577zzsvqzKoL5wQ88
8EDYZJNN4lqV9R/xDTOLv/7663htqBF75pln4t5LrLOJJW644Ya4vi10nOMu
u+wS67F23XXXcNlll4VmzZqFtm3b5vvUKo3aL+JQXtvEcfQr8TwVf11/9913
8bk844wz4nPGYyZeyqYk9nn22WeX+hixJh9jrkkusK8Qr9nmzZvHeyzFTZ8+
PbRp0yasvfba8W/A008/HX744YelrhPv42O89ukp4p4I31uSJCld9PVTl9Kj
R4+47q9K5FPWXXfdcOqpp8b9F0uKd0o72FuI+8Gsk1ljZgN5EuI/1oH0O918
881xrfj666/nNfaZPXt2fJxbb7117E9P9xoRR9K/xL3yQr9PTs7jrLPOink2
asEefPDBGMdVh7itJNRsEp+Tt2ROSLrPGb125557boyXBg4cmLXzKWvOGzVp
fIxavFxhpgJ7gm233XZL1NLST0iP1wUXXBDvg6R7nfhcvoavveuuu3J23pIk
qWYgziHmYO1AL01Vo66OtSHziysS8xS/D8w9YGrkpk6dmvE50UvPGpD8Sipy
S/mKfV566aU494zeCeKCylwnZg7zPBd/XIWEXp9s5zry5brrros5DHI5lX1t
87xTD9e1a9es7BmaxD4lzYvo2LFjrLujByiX+D0in0otG7ELMd76668f72MU
f/zkMDlXriWzFulDpOenpHsgXCf+DjhXW5IklYQ19AEHHBB7DPJRM/Liiy/G
uId70JVdG6Ye7AHDnquZ9ow/9NBDcX345JNPLvF+cib5iH2oRSRmue+++zK+
RuSvyLExg7gQURPFGrd4TwjrfnrdyUtWB9RLNmjQINYiZvqckQtl7sY//vGP
jM8riX3Ia6bmd3mNUWdIr19V4GdTs0rNGjFQak6Merj7778/1mtSb7r//vuH
4447LnTo0CEcfPDBMZ6k5pPfd/YTSr1O9CsV72WSJEmin4d1Jr0U+dh/g/u9
rMEzyfeUdJDDYq5uJvfI+T5bbLFFWHXVVWP9Ffecjz/++Pg260Y+xvurYt4b
PTzcz6YmMVvXiNlixJxvvfVWzs+/oqh9SuaQNWzYMPafkc8jH0GdVLb3ocmF
l19+Ocaq1HJm6zljBgh5v0z3NkpiHw76bqgppC+M+RjkXvi9rCrMlKOmj32z
ksfJ36W99947Pu/33HNPiX1R5HmZfUHtHJ9HLWryMeblEU8xF06SJAnUkTBj
ivuo5c1cyhV6vk877bSsxj0c9Itz75eYKhP0InTu3Dnek2bt3aRJk9gPQf3N
fvvtF3baaadw0003ZelqlI4+bmZrZ/s60cPEzCzmxRUa5nxx7Vu0aBHXwcx6
I+f122+/5fvUysVMdHI01Bdm+zljvc/9goULF1b6/MhdMkeB67nbbrvFeXPs
7cM1rsq4h7o38mLMLEkeH31G5G2ZC8H8xnSuCfcliOPHjh1b9D7iQ+K46jTf
UJIk5Qazc1k/sbbMRv9AZXAPm/viM2fOzPr6MFn7kCup7msf8gfcw65I73e6
B3VFzFPLZh+9/lfrRn6qtBmFmR4tW7YMl19+edbOlxgk2cOqKlGvRn42eVzc
a2BWO70/Fb0m3I/g94S/K8n7qOW95pprqvxxSZKkwkGNEzUmzLLNZz8weYzK
rHEqcrCuz7Q+KN+oSWKNmKtrRB6Be+/5WPvWVOQJU3MZ2T7Y55Pf4eo69w68
3qjfo/YyeVzM96P+trIxI/tc0QuUvP3cc8/Fezy+tiVJqp2YZcC9UWKOfCLX
RA1ZNnshSjrYQ5L+6EJBrElOgH7sdNCDRS0Ss45zeZ3o+SK/pKWRiyCnkG6N
GTVb1F9Rd5nL54yaOuZ/FwrmFtx5551p18zxeqO2jdwjj+fTTz+NvXTU41X2
mrAnUfF4inkIzH+TJEm1C2sL7u+ffPLJeZ//yjwpavGTdU+uDnpGWIfm+/Gm
Yq7dsssuG/ssbr311jJnTNx7772xbieX14iDmQ3sj6KSkaMkBj3mmGPC6NGj
y+yPIkfXvn37nD9nzLrjvAoJs+rpHWKvLeZV/PLLL6V+Lnnn1B6222+/PeZ8
Mr0u3Nc5/fTTi97u0qVLtZkLKEmSsoMYg5521mSFUP/BbOVsrHPKO6idYWYv
M3ALCeuxZM5WWWtqPu/SSy/N+XVizte+++6bp6tR+Mj5sCds8pzRR8ZctJLy
d+yPQ+99rp8zZrDTK1NomFmdXCf6+ZhnQu1Z8fsPzO8gT5Q8Hr7u+uuvz/i6
sAcuswGTt9nrlH2EJElSzZS6XweoL2Odseuuu8ae5kLArDRq0XK9PuQg18Xe
kMRBZR3kX8iNVcVBXRR1ZskaMTk41+7du8cZfGjTpk1OZoUVP5jTzZzg8q5R
RQ7q9KrqelbFQaxBvq74c1Y8f3fggQdmZQ+mdJ4z9uRK9/moquuUzJArfp2I
HYkXZ8+eHa8TewuxV1PyePj7lPp2ZQ9mp3C/I+kZop9t5513ztvfOkmSlFvF
9z687LLLYm/NF198kaczWhp9OMyYq4rYhz0Qi6/DCuFgBndpH2NfG+ZP77nn
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
7x69EOQDmdnXpk2buH8svzsTJkyo8bVS1RGva/LY/LtLrEoujxoB7qP9+uuv
+T69gsFrl1l51MFSI8A9Ef6fv8u+riVVBvdXqZ1gT49s4v50JrEP9ycrE/vk
cm3GWpF7rNRaFcdantnA1CFx3sz2ob6EWTP0buv/8G8+fT3URKX2tRNTMFeZ
e6Hcz6Ovl55V9vFr1qxZvBdKXo1/+1L3g6EPmK9h/ZBNfM9c1tRVBPeK6a0h
1qts3JMc1MdxPbn3TP1UccQU5HXoI2LOA/ke5ntLkiRVd9xbJ0bh/lM21cTY
B+QCqH1j7kwqekGohfr4449jfoieFPYYIE7i3qv+D3t2U+dBvJisx6mFpz+f
Hmz2pCupf4G6LXIe1IRQi8ZzkFr3nez/mC3Um3OfsSTcZ6eGrCp8+OGHMe4Z
MWJExnFPcpBH4ToSayaodaN/h/dTQ8VruibsnyhJkpQ4+OCDY81QSfd/U7GO
Z74W+xDSW8zalXry0mYFpcY+I0eOjP0J9C5Tn59OD1CuYh/Wct26dYt9OKy1
ubfNXDb6qdMxa9as+LjKWveS/6nIvpK1CX0j1G2RR0jW4dRqE7cke2mWd9Dr
T19+gwYNlqiDY9YYPe/ZqoUiZuW5Zu4qfT70cRGb8fpn1gIxSVXg59LHka24
JzkmTZoU85TUk3Dt+DvALD3+n14sSZKkmoY1JzUt5aHXm3UgcQLremqRWMNy
f7ikWCaJfaj9oleAtSNfQ582fcrl9RblKvZh1lGy5wiPg/5f1tDU9pQ2y7g4
1of0PpTmoYceykrvVE1EbowZBan9J7wm6Oep6NqdHh9eX0m/ELki3s7WnELu
B5BrofaOXAivE2IfZh4Qf1UF+n2Js+hvyXbsw3H66afH+Id9BbluVb1/kiRJ
UlVZuHBhjANYi5aHufvkbFIxiziZNVxcEvvQo0G/dIKeDvbvYL1V1syhXMU+
7FXJ/Bz6nBL8P/kfZsmk0ztJ/oq1oiqGGjXi5dR1fKtWrWKerDLrdnp+iKWo
MUzeRy8Qz2VNweOjhz0XcQ8HM6uZV00NnCRJUk1G/wTxyXXXXVfp78EsIWbQ
Fo8ZktinpLiKOqXlllsuzmctTVX3+7Bm5nyp7SsPOR/qnmq7559/Ps6mTncP
F15nzKBK1t3st8lMA57rTOu2kho6ajB5PRbiLF/ySMxjoO4vHcR25CNT6wNz
cRB/MsdOkiSpJqO+hb59ZpGlg/lczJhl7nDr1q3D3nvvHXMlxAypeRQksU9p
tV/0DbH/fGlyGfuwBqU3nn0TqX1j5hh7YHC+nHd5qHuqSbmFyiLmYV4yffjU
Dqbm90rCdWYvnmTN3blz5xg7Z7p2px/m5ptvLnqbHrbBgwdX0VWoGOY0UwPK
65+5Gdx/KM3QoUPj70gu4x4O4rF87lkkSZJUVZjZTBxTHmbsJnu+M2eYvhn2
sqHerazYp7Q5b+xPtsUWW5T68yoT+7C2Li/2oa+bfWU4N+Id5jewFxE9T+nE
PuS3mAnOfGb9b3ZBnTp1ivY0Yh9yYuPPPvtsqc+lX4a9c5M1N88/+1JmunZn
L0deT8nb7HHCbIBCxfkl14s4iNiN/FnxvUCZFVjZesCKHMSs7BcqSZJU07Hm
pyenrL3UmGVA7Q17ThefbcU6t6zYh31OS8KcNfJGpfn555/j3KmKIFaif6E0
rPPoT+LzJk6cuMTHRo0alVbsw317Po/Z4NUd+9BSd1bWwexp5jmXdZxyyilF
a/nkoKaRNT3987y2mL3GvrCffvppfB6o56LPJHVOdWUPZmIz3y15m9o69iRl
D8xCPHgNJXnG1GOttdZaIn9Gf91VV12V89iHmjqeG/cKlSRJNR35HNZd3Hcu
Db3WfA7ztIoj91NW7HPyyScv9TWsp8kfMS+rLNQFpbu3JDEPeSnW86UZP358
PCcec3HM80on9unevXtcszNTrLpj1gXr7fIOHm/xdXpJsU5J7+d5ZrYEczF4
O9nTh3kHvE3NV6Zrd54znvvk7bvuuivuS1reOefzID9W2sfoX2KP9zZt2sQ+
nFzHPryWeZ5qwmtakiSpLNzrpWeDo3jNTYK4iDUZ8wBSce+evpeyYh/qoeiJ
T3DfnznE1I0x860sw4cPD7vssku5n0degV4f+hbKwr6jnNM555yzxPt53Mcd
d1y5sQ/nTh89+wPp/7Rv336p9TuxCDPEySmAHqvieR6u5YwZMzJeu9NTRh4x
ebt3795LzSQsJMR9vP6Lx47smUWfEjlPdOrUKe4jlevYh9c1tXfpzDiUJEmq
7qj/Yu1zwQUXlPhxcinEFtwbpu6NfSXpr1hllVVivRxrN9aehx56aMzpgFkC
vJ/eGurljjnmmHgfm3vazDmeMGFCWufGbG3qg+69996Yp0jFGpG9dLbaaqu4
z2o6zjrrrKLzpWeJ82J/GdbhPD56UNjPhbgr1eLFi+PalNkO3h//P9SbJet3
Yhuu5+jRo0tcR7MvEq+1ZM1N7SFfn+nanZkBvLaSt3mOe/XqlYerkZ4jjjii
6JrRb0eMWFKtJjnVbMyCKO+gBq+i9aWSJEnVWVLXdvXVV8d79MWRG2G/d+Yi
MHuK+Wh33nlnjD+4V008RP8//QxYsGBBjC2YOXz//ffHOVLEDsRXX3zxRYXO
jf0v6Usi7mD93Lhx4zhjmnvn5BzefPPNtL8Xj23YsGFxjc68Nh5P3759Y+0V
e5vSW3788ccvsc8peSU+jxgunTlwtQX7e6633npxvyZeA8Vzf8URL/fv379o
zU3+jDgl07X7AQccsERtGM8rM9IKEf1PxNm8/uinKul3LXHffffFPYFzHfuw
ryxzQiRJkmoTesSpvaH+q6w1Wb5wTsx/I75ijlhV9GbTn0KOaLXVVgvPPvts
zn9edfLWW2+FWbNmpf35xEfMBUzW3OSAmI89e/bsSq/byS/y3CQzFKixI0al
HrPQ8PolJ/bLL7+k9fnUeq644orxtZ7L2Ic8FPc+JEmSapsXX3wxzuB15tP/
kKOi7oi1tTJDn0vxnh/msTEnrjJrdmoPyVdQ75i8j/i9Ju1VQ46V2Q25inuY
X0LtKn1XkiRJkrKHOIce/mTtTRxErwlzzSq6bu/SpUuchZHMiqO+krrI1Nka
1R19Z/S7JfPxsn307Nkz9t9RQ0pN66JFi/L9kCVJkqQagTwaNWrUqiXrb+Ze
0LtF/oY+sfLW68Q61GU2bNhwiTlx5CsPOeSQfD/ErKJOjlmKzHPIdtzDtSPu
Yb9Z4h7mLhA7smfX999/n++HLkmSJFV7rLPJZTDbLFmHT5kyJWy33XbxePDB
B0vc92fu3Lnhtttui/Oz2TeVPYOSjzHvj/ipIv1H1QWzPIhRyGdlK+7h+u6x
xx4xXkwwz4RZDMy7pw6OfVaZC1+bMeOS1xmv1ULsIZMkSVLho/atSZMmS/Tx
07/DvDbiH2anJ/MEmV9N7oMZBnwN+9CmruPHjRsX1lhjjbh3bU3FjPf69euH
qVOnZhz3kNNhPiLz8f74448Sf94rr7wSDj/88Dj7nv9WZJZirjA3nfOvKuxn
xkz+1H16mVU5adKkKjuHimIfAHoT052nIUmSpNwjx3DssceGLbfcMrz99ttL
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
/aOPPprvh5R1AwYMiPsAjRo1aonH/O2338b3de3aNeZ29ttvv9CuXbtw7rnn
hrFjx4Yffvhhic9nbyXiqKFDh+b7IUmSJElZ99///jf2x++www5xrVyIbrjh
hjibYODAgbEOqyIxD3VhxE9///vfCza/lQ3Ut3GNLrnkkgrPevvss89ifLTu
uuvGOW+SJElSTfXLL7/E/n/2l5k3b16+T6dEzz33XGjUqFHsY6F2i/Msaz1P
PxPzDMhp0bc/Z86cfD+EnJs+fXpo0aJF7AHisbNXaVnXiFlx5P3IGTFXvDZc
I0mSJIne/4MPPjhstdVWcV5YIWI/1nvuuSfsvPPO4W9/+1vch5N9btgPdNCg
QXEuXJcuXcIee+wR6tatG1q2bBleeumlfJ92lbrsssvCKqusEvbZZ594jXbb
bbdw4oknxj1t2avnwgsvDB06dIgxJJ9HzPP666/n+7QlSZKkKrV48eKYI2H2
10cffZTv0ykTdVp33XVX6NGjRzjhhBNiHNSpU6eYx0jmntUmf/zxR5xhQA6H
vXnw888/x3kWzLbr3r176NixY4wVmXcwZsyYsGjRojyftSRJkpQ/v//+e8wT
MBeAPnkVPur/mGvN3LapU6fm+3QkSZKkamXw4MFhpZVWivmCP//8M9+no1K8
+uqroUGDBmH//fcP33zzTb5PR5IkSaqWWFezx+VBBx1UsD1AtRXz+fr37x/j
U3p56IWSJEmSVHnMS2ZmADVw9Nf89ddf+T6lWo95bk2aNAn16tWLs60lSZIk
Zc8jjzwS939hfhizk1X1qD1kph25nmOOOSZ89913+T4lSZIkqUain4Q1N7OT
maVc22ap5dNTTz0V51JvtNFGYezYsfk+HUmSJKlWYB3OPqjsG8q8ZGZjKzfo
uWratGlYeeWVwyWXXBIWLlyY71OSJEmSahV664cMGRI22WSTmIv45z//Gedj
KzumTJkSWrduHerUqRP37fnqq6/yfUqSJElSrfbbb7+FW265JfbdMxPummuu
sQ+lkpjd9uSTT4ZmzZqF5ZdfPhx33HFh5syZ+T4tSZIkSSmIge69996w4447
xn6gM844I84jU/l+/vnnMGDAgLDlllvGeXrnnXde+PTTT/N9WpIkSZLK8cor
r8SZCOQuGjVqFGeTzZs3L9+nVVDI8XCdzjzzzLDaaquFhg0bxuu0YMGCfJ+a
JEmSpAqaPXt26NOnT9hmm23CCiusEA499NDw0EMPxTxHbcTeSG+99VY499xz
w3rrrRdjnpNOOimMGzfOvUklSZKkGuKDDz4IF198cewJIg5inyDyHJMnT67R
+6US540ePTrmd5gJQS7soIMOCv/6179qbQwoSZIk1QbkN15//fXQq1evsMce
e4TlllsuxgT0B5ETmjVrVr5PMSPsefTcc8+Fq6++OsZ3xDr169cPnTp1CsOH
Dw8//PBDvk9RkiRJUh58++234cEHHwwdO3YMm266aVhmmWXCuuuuG+vjevfu
HZ555pmC7RX69ddfwzvvvBMGDhwYYxt6m4jlqGVjVlvfvn3jrOqanNeSJEmS
VDnz58+PNWKXX355aNGiRVhjjTViPMR/yRMRIzFH+5FHHolxxddffx3+/PPP
nJ0PeZwPP/wwjB8/Ps5i69atWzwv9jVadtllY16H2Xbkrdjj6P3337d3R5Ik
SVKFkTOZO3durCMj9jjnnHPCwQcfHHNE5FiIi4hB2F9ou+22CwceeGA44YQT
Yn/N+eefH3uMrrjiithbdOONN4bBgweH22+/Pb5NXoaPc3Tu3Dmccsop4fDD
Dw+NGzeOdXh169aN359jzTXXjO8/8cQTY+w1cuTIMG3atLB48eJ8XyJJkiRJ
NRz5nq+++iq8++674emnn47zA2644YYY8xD7EKcwa7tdu3ZxvkDz5s3Dbrvt
Fpo2bRrfPuSQQ+LH27dvHz+/a9eusc6OGrbHH388vPrqq7H/6Jdffsn3Q5Uk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSTWQs6klSZIk1UTvvfdenGud7NXDseuu
u4ZBgwa5H6kkSZKkGuG+++4LderUiXFPmzZtYgzUtm3bsNpqq8X9fN588818
n6IkSZIkZWTOnDlhrbXWCqNHj17qY/Pnzw9jxowx7yNJkiSp2hs6dGg47LDD
wn//+9/wySefhMmTJ4fZs2fn+7QkSZIkKauId1ZfffWw8cYbhyOOOCJ07949
bLjhhmH48OH5PjVJkiRJypouXbqEo48+OnTq1Ck0bdo07LXXXuHYY48NX3zx
Rb5PTZIkSZKy4qOPPgr169cPv//+e75PRZIkSZJy5qmnngq77LJLqR+fOnVq
rImTJEmSpOps3rx5YdVVVw377rtvuO6668LgwYPjfj59+/YNnTt3Do0aNYqf
I0mSJEnV3fjx48O2224b9/FJjuWXXz60a9fOeW+SJEmSahTmWzPb4JVXXgmT
Jk0KP/30U75PSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZKk/9feeUDdUVRx
nJpAJJQAKooUMZQAgkGUIFWK0iWGoiDRUAxKr1IMQROKIfQmESlKMxEI0hQU
JAokEgklQCKghCItdAh9PL/x3Hfmmze7b3ffe19J/r9z9iTf2zJld2bunbn3
jhBCCCGEEEIIIYQQQgghRFt47LHH3EILLZR5PP/8802nseSSS+amwTF69Oi6
+yZOnNjwvtTRq1cvd//99zedbyGEEEIIIcTcA7rPfPPNl3k0q/vMmjUr9/l2
jBo1qu7e66+/vtC98bH33ns3lWchhBBCCCHE3Ee7dZ9bb721U3Wfvn37tmSt
SgghhBBCCDF3MWPGDLfIIov4Y8EFF2y57nPGGWd0eB72aJZeeJx88sl1995w
ww3Ja+2Yf/756/J76qmnNpVfIYQQQgghqvL66693dRZ6BO+//76bM2dOl+bh
gAMOaLnus++++3Z43vTp01uS18cff9z17t27w7NXWWUV995777Xk+UIIIYQQ
Qtx3333uiCOOKHQccsghbtVVV/X3ffzxx+64446rnUvZOIXce++9bty4ce6o
o45yu+22m/fhOPbYY91VV13lnnjiicz7pk6d2iEPd911V/K6l19+2R1zzDG1
68aPH1879/bbb/u08so2YsQId8EFF/j6yOKEE04oVE+HH36423zzzd3tt9+e
Wyftph26z0YbbVR7FutKb7zxhnvppZf8v82w44471uUVGzkhhBBCCCFayYAB
Awr7XxB3yzj77LNrv1955ZXJZ995551uzTXXbPjclVZayQ0dOjT5jEGDBvlr
Fl54Yffhhx9mloPYYva85557rsO5s846q3AZN9hgA69LxaC3lfFVmRt1n6WX
XjqzvP3793djx471a15lSPkQbbHFFk3lUwghhBBCiBTrrruulzf79OnjRo4c
mXkcf/zxbp111qndd+GFF9Zk1QkTJtQ994orrnALLLBA7RrWQlg7ueiii9yJ
J57odZ2BAwfWzt94443J/G222Wb+PD4heZx22mm1Z8W6S5jXXXfdta5c++yz
j1thhRVq12y33XZ1z+c6O7/ffvtl1hNl3GGHHeY63eeFF14opPNtvPHGfq2t
COhJq6++eof7WU968MEHK+dTCCGEEEKILEz3WWaZZRpeG6675Ok+Tz75pNdV
OLf44ov79Z8smPdfY401vB1dilbrPik9Dd59993aGtWiiy7qPvjggw7nQ90n
zzYOKMtHH32Ue027abXuwzssuubFGlkRWCeK791///0r51EIIYQQQog8Guk+
Wf7mefoEvkF27rrrrmuYhzyfn87SfQBfJLvutdde63Cuke7zyiuvuGeeeSY3
j51Jq3Wf2267zdcx+4zi44Nd4S233OK23nrrunSwjXz44Ydzn8c6EnpxeB/7
pvJsIYQQQggh2oHpPqx1xH77hx56qF+TSfnZ5OkTa621lv99qaWWajp/naH7
oLdccskltbUqyhwT6j577rlnXXyDTTfdtFv557fD3ycFa1y77LJLXVq8jzyG
DRtWd8+ZZ57Z8vwJIYQQQghhmO6Td5TVffr165fps44f0KWXXuptqOLjoYce
qru+1boPMRPCfWVYo4jXHiZNmlT3/FD3yTrmRd0HqK84LfTDLKZMmVK3nw9+
P2XjJAghhBBCCFGGcN0H+T48jj76aL/PSlndx+IGrL322rn3hQey8OTJk+uu
b7Xug162/PLL+2PZZZet/U4Ms1NOOaUuRpwR6j6sWYT1RLxvYjn0dN0HH6es
OAV592LfFqdFzIMUrBMRSy++/uabby5eOCGEEEIIISrQyN+HmFupOAR5us/2
22/vfydmV7wfKvcdfPDB7txzz/UH9mLmI5Jim222qZ3Pi3HNHkOmQ7311luF
8oovk5WfmHR33HFH5vMb+fvMnj3bzZo1K/P+zqas7oOei37JOxsyZEiHPXte
fPFFvx528cUXJ+/lfcZp4TuV4rLLLqu7lncshBBCCCFEuykT5y0kT/e55ppr
MmVg1mTCGGjse5qn+5huxMFep1nstNNO/hr2CiqT1+nTp9f8fFivimMcGGXi
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
t1geYczmd/z5i/D3v/+9rhyMS1myV9l8ZpGl+wDzr7YXCv4XZnfRjO7D94Bd
O3ImPhukb8dtt93m55jxjcUGriiNdJ9Gvu0W4y7Lfp8ycZ45+JAsnQS/iSzd
x+bLO0P3gdS3QHwq5GnsUFIHtmR5sozRqF7LpFO1HbWqnynb/qrGS6hS99iD
kRb2nehyb775ZvLZZiuWihOMrxTnWMsqU44y+bV9prCPw18olY8i12Tlq2o7
bVVfaSDL88wi8K6w82OtiPeIbR7pxf0begtr5qn6QN/lHmwy8+iMWAdFyxOC
bSY2mUII0VNgzilL9wGTjekDQxrJJPTTMXnjsM3pheeYc+S3lK1wO3Qf7Nvj
cRKbJn6L7beIzcXv5stfBsY/5v9WXXXVSrpPKp9Z5Ok+wBqGxTkfPny4/60Z
3WfMmDH+ukYHc6tFaUb3CW2FsuKkEUeD8/jxhHQX3QebnTLfAvYrcVmq0Ehu
LpNO1XZUpZ9J9SUhRdpfVd2nSt2zXmI+ZL/4xS8yr7M1sJT8zNxU6pts5TvE
dwfbaGtP2EhhKxfqckWuSeWrmXbaqr7SwM4P36g8/vOf/9T8sng+PjLki7md
VFvOi/OGfS33sF6eRzt1n7LlCWGtkbYkhBA9hbz9fcDsQpizCsevKjKJ+Xuk
+u8dd9yx7pz5m6fW4vN0n7x01l9//cxx0uSPcJykzNQR5bd97pA9kFfxvWdt
rCjYqmDXjT6JDQryXpbsVTafWTTSfQD7FLMbYf6Y2EpVdB/sSohDgF0+NjPY
LMYHfuqsCSETFd3nrhndhzR4d5zHpigFvtCcj/1BzCehs3SfrBgE66yzTqlv
gbrlHRRZ28mjkdxcJp2q7ahKP5PqS6BM+6uq+1Spe6sb0kNWz2rXeboPe09z
rn///qXKUTa/rA1jH4ePn+kqYayDotfEfXQz7bRVfaWBLI+9axb4+6EzYhMx
atQor9fbmrntI5DSfdArUjEN0Du4J7ZXjMFOsEzcOuYViD/ZiCrlCaFfJt6B
EEL0FMzfN0v3QbfgPDbcIcTu4fc4rn+eTGJ+valx2GI8hefwY+a3VH+fp/vk
pWNyZplxEt2AvDBnzfhD3DnkpjgGXh7ob5///Oc7xMPJs7mpks8URXQfIOaW
ydgWO6ms7mPyV6O1MCs3e58WoVmbN/PbydpX76STTvLnYz8kk7s7S/fBFz2F
2REV/RawY+I3YtY2QxF7qTLpVGlHVfqZVF9Stv01Y/NWtu7xKcc+lLWGlJ5g
FFn32WabbUqVo5lvhXUY/JSIi1P2mlQfXbWdtqqvNIiZnbcWRnw+/MdY44qx
WCcp3SfuUw2L5UL8jjz4LorERAjzSRyMIteVLU8I9tKKdSCE6EnYfH/KvxZZ
jHV6zsfzR2ZnwJxRiPl6p2QSm9vE7yPGdLDwnMWZIYZwDHFZOcccbpl0iEOU
tZaUGieJCcA+FJSrGWxu8pFHHqn9lid7lc1nFkV1HyC+ha11VNF9THbLmrc1
iOPLdWEc5zya1X3OO+88fx7fhRT2vSB/hpi9R7weY7oP/hcxVXQf5ELumTJl
SvI8sdHKfAv4ivMbdigpvYJ2lfKhi2lUr2XSqdqOqvQzqb6kbPurqvuUrXva
lcmz1qexPkAMhBjTfVKxDpi74lzsl9mqd0j9E1M7hvkSizNe5Boj1UdXbaet
6isN5trQ17LuIR45z4z3ImatBN0zT/dhvStc+yEGBO+V9bpGsdN5D5SnyJwb
3znPZU6rEVXKE8KaT6NYcEII0V2gb7OxIbbDnzx5cs3PEduFeBxAluYcY6vF
HOUai9WDzTc23OHeAPgzc465wJjUOeygsYfBFiKO2caeMlzPnHi8P1xeOibP
Tpo0qe7c0ksv7c+FsaqvvfZa/xt7FDSDpWvlIA60ybTEUGbcDu1OyuYzizK6
D+DTip9yWd3H1uHw1y4Cc/5cjw96I4gJy7Xs45jC4nWw7pSC75xrWM+K5SNi
0THnydxnDLZAKbl79uzZ/ndiNsS2QshlnKN8RbGYV6H8EK4Blf0W0M3MlwUb
Kt4Z7Zn5dNKKYxBn0ahey6RTtR21qp8p2/4alT2LMnXCHj+sRYUx5k2+Z10k
/rZM9/nrX//a4Xdk1r59+/r+Oo5n1qp3SH0xVoTfGe8BWyn7botcY6TeUdV2
2qq+0sD+knvi2OcG6yPEZaOsxNGmbtkzFh3A5o2YS8T30fQU033s3RIHgr3B
iMWAbXcq7ymwG0aPJN59yk6R94/uxjXELChClfKE6ZH/a665plBaQgjRVWA/
whq12fRwMK5gO8A6CmMhcQaIs8a8YLifgoGMbGsE6CfM7bH2zZ57NidOGqwB
0JcyhtpeHdg2mG0zsgi+9eE55qHCfdzx9eY84wf2x8OGDavF/EEvYk4Xe5q8
dBgzmIu38rLexdgD7KOIn6edI16s7X9hdlzxQexUYtuEe67mgR019yG/MKYQ
W9ZieCODMdY0k88syuo+gP05No5ldB+bX0bGLYLVK/JVFozt7AVo/sqMsci8
l1xyiT/PHDN+7eafy3fL+yBucgzfMD7X6MroUsgH1CvlxAcpnItFzrIYHxzY
BWFvA9inhDIBezDa/j/MkfPNoTMhS9B+UvPgMczR0oZ4Hv5SPANZEXkilJnK
fAvoA2FbsDaOHzfx/fIoU69F06najsr0M3l9SdH2V6bsWTSqE+b3mf8nDQ7k
eX5n/Qn/G7sH/YDvzTDdh3oYMWKE96lBVkV/ok8kpnM73yF6BO+CusL3hu+b
coTpNromr4+GMu201X1lCPnKW+NGL2JcYn2I5/Mv65r0k8x7oL8RL2DChAn+
emK7sB5Jvkznpp+gn5k5c2bhfAH2nqTFe6d/pC2MHj3a77VMX0l7iOdrGlG2
PAZ6E234hRdeKJWeEEJ0BcQWYs6PsYbxBDmT+UfG5bz9rEO4HzsdbDWYCwdi
ZMb2GvZcS4t/zWad/8fnUmv/yEDMqSMnIstwP/11KC/lpcO/YXm5Ns4Dz6Ue
+N3GfK7D3o++H18FOxjfbV2gaKw3bL2Qz8JxgnnwUHaoms9Ww3ic5XvfmVBe
6oC6oNz8bWUO68Pqiu8hz2+ba3kPzGszT526Nv6OwndA2vyf++w7jPeGrQLP
ZQ2MtmTfR14+in4LtEfm8ZG5Gu0fYlSp10bpNNOOivYzjfqSIu2vStmr1Alp
8Mwwj/Z+7dsKv3Uw3Ye5d+JAsy8oMm5KZ2zHO2ROhLUqzmNzGPtgFbkmr48O
KdJO29lXss93Ef990sAeLDU/mAffYNl7YrCBQ19mXoY1GfyFirbxLMqWhzmF
VJx5IYQQPRfGTubTUv4R2HMwb8ccpRAiG7Wj5smLdSBaCzobdoShf5joCPoR
dnKx/5UQQoieDfu2jR07NvM8scoa7QUhxLyO2lHzSPfpXNhrqezeoPMS2FzG
+8wKIYTo2WBHwdwffXwW2FmXiTsqxLyG2lFrkO7TuWBDhy9pHFtC/D/eC/7B
cWw4IYQQPRvs4/HjxL86ZUeN3zC+tkX9o4SYF1E7ag3oj+g+qqfOgxjU6D9x
LNF5GeYyiMGCT5cQQoi5D/bRQ94gbhdxcPh78ODBbsiQId7PU3OwQjRG7ag6
U6dO9XuyWswyYr0TRy2OZy3aA/o6sQTE/yGmQrP73QkhhOi+IF8QGwpfBWKe
Eldn2rRpXZ0tIXoUakfVYe2B2GnoQA888ICPecd+MFVizwkhhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCFEzP8A
gmsqUQ==
    "], {{0, 980}, {831, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{831, 980},
  PlotRange->{{0, 831}, {0, 980}}]], "Input",ExpressionUUID->"9054f704-680e-\
4181-a998-c92b2fbaba12"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"RegexUnion", "[", "args__", "]"}], ":=", 
   RowBox[{"NFAUnion", "[", "args", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexConcatenation", "[", "args__", "]"}], ":=", 
   RowBox[{"NFAConcatention", "[", "args", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexStar", "[", "machine_Association", "]"}], ":=", 
   RowBox[{"NFAStar", "[", "machine", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexStar", "[", "c_String", "]"}], ":=", 
   RowBox[{"NFAStar", "[", 
    RowBox[{"Regex", "[", "c", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexDagger", "[", "machine_Association", "]"}], ":=", 
   RowBox[{"NFAConcatention", "[", 
    RowBox[{"machine", ",", 
     RowBox[{"NFAStar", "[", "machine", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexDagger", "[", "c_String", "]"}], ":=", 
   RowBox[{"NFAConcatention", "[", 
    RowBox[{
     RowBox[{"Regex", "[", "c", "]"}], ",", 
     RowBox[{"NFAStar", "[", 
      RowBox[{"Regex", "[", "c", "]"}], "]"}]}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748777933298731*^9, 3.7487779371938334`*^9}, {
   3.748777969531754*^9, 3.748777985636819*^9}, {3.748778016512574*^9, 
   3.748778035290359*^9}, {3.7487883155664873`*^9, 3.748788355111487*^9}, {
   3.7488021749658833`*^9, 3.748802181448103*^9}, {3.748802220353901*^9, 
   3.748802263000498*^9}, {3.748802664752873*^9, 3.748802724474334*^9}, {
   3.7488028835151043`*^9, 3.748802893769829*^9}, {3.748822409064942*^9, 
   3.748822461250548*^9}, 3.748822615571062*^9, {3.7488815924639797`*^9, 
   3.748881618069347*^9}, {3.748894225641362*^9, 3.7488942260451813`*^9}, {
   3.7502646637720547`*^9, 3.750264664122982*^9}, {3.750336547211566*^9, 
   3.750336558039886*^9}, {3.750339686428809*^9, 3.750339686668764*^9}, {
   3.757707867112628*^9, 3.75770786729426*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"415452a1-d59a-4d74-9820-866b75e2c230"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{"c_String", "/;", 
     RowBox[{
      RowBox[{"StringLength", "[", "c", "]"}], "\[Equal]", "1"}]}], "]"}], ":=", 
   RowBox[{"NFA", "[", 
    RowBox[{"c", ",", 
     RowBox[{"{", 
      RowBox[{"Transition", "[", 
       RowBox[{"0", ",", "1", ",", 
        RowBox[{"{", "c", "}"}]}], "]"}], "}"}], ",", "0", ",", 
     RowBox[{"{", "1", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{
     RowBox[{"c_String", "/;", 
      RowBox[{
       RowBox[{"StringLength", "[", "c", "]"}], "\[Equal]", "1"}]}], ",", 
     "stateExpr_"}], "]"}], ":=", 
   RowBox[{"NFA", "[", 
    RowBox[{"c", ",", 
     RowBox[{"{", 
      RowBox[{"Transition", "[", 
       RowBox[{"0", ",", "1", ",", 
        RowBox[{"{", "c", "}"}]}], "]"}], "}"}], ",", "0", ",", 
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", "\[Rule]", "stateExpr"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{
     RowBox[{"s_String", "/;", 
      RowBox[{
       RowBox[{"StringLength", "[", "s", "]"}], ">", "1"}]}], ",", 
     RowBox[{"tokenRecognize_:", "\"\<\>\""}]}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "m", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"m", " ", "=", 
       RowBox[{"Apply", "[", 
        RowBox[{"NFAConcatention", ",", 
         RowBox[{"Map", "[", 
          RowBox[{"Regex", ",", 
           RowBox[{"Characters", "[", "s", "]"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"tokenRecognize", "\[NotEqual]", " ", "\"\<\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"m", "[", "\"\<StateExpressions\>\"", "]"}], " ", "=", 
          RowBox[{"Thread", "[", 
           RowBox[{
            RowBox[{"m", "[", "\"\<AcceptStates\>\"", "]"}], "\[Rule]", 
            "tokenRecognize"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Regex", "[", 
    RowBox[{"r_Association", ",", "tokenRecognize_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", " ", "=", " ", "r"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"m", "[", "\"\<StateExpressions\>\"", "]"}], " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"m", "[", "\"\<AcceptStates\>\"", "]"}], "\[Rule]", 
         "tokenRecognize"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "m", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.748740312676521*^9, 3.748740313645201*^9}, {
  3.7487403479479637`*^9, 3.748740397018611*^9}, {3.748743469717832*^9, 
  3.7487435934236317`*^9}, {3.7487436740558963`*^9, 3.748743681369012*^9}, {
  3.750336869429418*^9, 3.750336938835622*^9}, {3.750337329699889*^9, 
  3.750337380362454*^9}, {3.750340240062293*^9, 3.750340283654842*^9}, {
  3.75046574035165*^9, 3.750465753009005*^9}, {3.750531774957251*^9, 
  3.750531785197893*^9}, {3.750531895605538*^9, 3.7505319893143463`*^9}, {
  3.750532070050654*^9, 3.750532085952318*^9}, {3.750532550372366*^9, 
  3.750532553571492*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"ecb51c45-66ee-4b33-a5df-86b968dffa26"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RegexAlphabet", "[", "alphabet_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "input", ",", "name", ",", "transitions", ",", "acceptStates", ",", 
        "newMachine"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"input", " ", "=", " ", 
        RowBox[{"Characters", "[", "alphabet", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"newMachine", " ", "=", " ", 
        RowBox[{"<|", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Name\>\"", "\[Rule]", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"Riffle", "[", 
             RowBox[{"input", ",", "\"\<\[Union]\>\""}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<NFA\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<Transitions\>\"", "\[Rule]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Transition", "[", 
               RowBox[{"0", ",", "#", ",", 
                RowBox[{"{", 
                 RowBox[{"input", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], "}"}]}], "]"}], "&"}], ",", 
             RowBox[{"Range", "[", 
              RowBox[{"Length", "[", "input", "]"}], "]"}]}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<StartState\>\"", "\[Rule]", "0"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<AcceptStates\>\"", "\[Rule]", 
           RowBox[{"Range", "[", 
            RowBox[{"Length", "[", "input", "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<StateExpressions\>\"", "\[Rule]", 
           RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "|>"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "newMachine", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexAlphabetLowercase", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", 
     RowBox[{"Alphabet", "[", "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexAlphabetUppercase", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", 
     RowBox[{"ToUpperCase", "[", 
      RowBox[{"Alphabet", "[", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexAlphabet", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"Alphabet", "[", "]"}], ",", 
       RowBox[{"ToUpperCase", "[", 
        RowBox[{"Alphabet", "[", "]"}], "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"RegexDigits", "[", "]"}], ":=", 
    RowBox[{"RegexAlphabet", "[", 
     RowBox[{"StringJoin", "@", 
      RowBox[{"Map", "[", 
       RowBox[{"ToString", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "9"}], "]"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"asciiChars", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\\t\>\"", ",", "\"\<\\n\>\"", ",", "\"\<\\f\>\"", ",", 
      "\"\<\\r\>\"", ",", "\"\< \>\"", ",", "\"\<!\>\"", ",", "\"\<#\>\"", 
      ",", "\"\<$\>\"", ",", "\"\<%\>\"", ",", "\"\<&\>\"", ",", "\"\<'\>\"", 
      ",", "\"\<(\>\"", ",", "\"\<)\>\"", ",", "\"\<*\>\"", ",", "\"\<+\>\"", 
      ",", "\"\<,\>\"", ",", "\"\<-\>\"", ",", "\"\<.\>\"", ",", "\"\</\>\"", 
      ",", "\"\<0\>\"", ",", "\"\<1\>\"", ",", "\"\<2\>\"", ",", "\"\<3\>\"", 
      ",", "\"\<4\>\"", ",", "\"\<5\>\"", ",", "\"\<6\>\"", ",", "\"\<7\>\"", 
      ",", "\"\<8\>\"", ",", "\"\<9\>\"", ",", "\"\<:\>\"", ",", "\"\<;\>\"", 
      ",", "\"\<<\>\"", ",", "\"\<=\>\"", ",", "\"\<>\>\"", ",", "\"\<?\>\"", 
      ",", "\"\<@\>\"", ",", "\"\<A\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\"", 
      ",", "\"\<D\>\"", ",", "\"\<E\>\"", ",", "\"\<F\>\"", ",", "\"\<G\>\"", 
      ",", "\"\<H\>\"", ",", "\"\<I\>\"", ",", "\"\<J\>\"", ",", "\"\<K\>\"", 
      ",", "\"\<L\>\"", ",", "\"\<M\>\"", ",", "\"\<N\>\"", ",", "\"\<O\>\"", 
      ",", "\"\<P\>\"", ",", "\"\<Q\>\"", ",", "\"\<R\>\"", ",", "\"\<S\>\"", 
      ",", "\"\<T\>\"", ",", "\"\<U\>\"", ",", "\"\<V\>\"", ",", "\"\<W\>\"", 
      ",", "\"\<X\>\"", ",", "\"\<Y\>\"", ",", "\"\<Z\>\"", ",", "\"\<[\>\"", 
      ",", "\"\<\\\\\>\"", ",", "\"\<]\>\"", ",", "\"\<^\>\"", ",", 
      "\"\<_\>\"", ",", "\"\<`\>\"", ",", "\"\<a\>\"", ",", "\"\<b\>\"", ",", 
      "\"\<c\>\"", ",", "\"\<d\>\"", ",", "\"\<e\>\"", ",", "\"\<f\>\"", ",", 
      "\"\<g\>\"", ",", "\"\<h\>\"", ",", "\"\<i\>\"", ",", "\"\<j\>\"", ",", 
      "\"\<k\>\"", ",", "\"\<l\>\"", ",", "\"\<m\>\"", ",", "\"\<n\>\"", ",", 
      "\"\<o\>\"", ",", "\"\<p\>\"", ",", "\"\<q\>\"", ",", "\"\<r\>\"", ",", 
      "\"\<s\>\"", ",", "\"\<t\>\"", ",", "\"\<u\>\"", ",", "\"\<v\>\"", ",", 
      "\"\<w\>\"", ",", "\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\"", ",", 
      "\"\<{\>\"", ",", "\"\<|\>\"", ",", "\"\<}\>\"", ",", "\"\<~\>\"", ",", 
      "\"\<\.7f\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RegexASCIIChars", "[", "]"}], ":=", 
   RowBox[{"RegexAlphabet", "[", 
    RowBox[{"StringJoin", "@", "asciiChars"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750264626530047*^9, 3.7502646347630997`*^9}, {
  3.750264666135603*^9, 3.750264696357594*^9}, {3.7502647265015993`*^9, 
  3.750264778323572*^9}, {3.750336644015066*^9, 3.750336683110643*^9}, {
  3.750458653932007*^9, 3.750458669102903*^9}, {3.750504916952344*^9, 
  3.7505049209709597`*^9}, {3.7505057133816824`*^9, 3.7505058519705877`*^9}, {
  3.750506533506524*^9, 3.750506536475669*^9}, {3.7505067470086*^9, 
  3.75050675229692*^9}, {3.7505067838361444`*^9, 3.7505067970359073`*^9}, {
  3.7505071411031*^9, 3.7505071411968527`*^9}, {3.750530965582837*^9, 
  3.750531022527288*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"f34515cd-4153-4c7f-acc6-0f2fe37ad4bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RegexCompute", "[", 
    RowBox[{"machine_", ",", "input_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"trace", ",", "result", ",", "recognizedTokens"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"machine", "[", "\"\<Type\>\"", "]"}], "\[Equal]", " ", 
         "\"\<NFA\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"trace", ",", "result"}], "}"}], " ", "=", " ", 
          RowBox[{"NFACompute", "[", 
           RowBox[{"machine", ",", 
            RowBox[{"Characters", "[", "input", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"recognizedTokens", " ", "=", " ", "\[IndentingNewLine]", 
          RowBox[{"Cases", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Last", "[", "trace", "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "\"\<Node\>\""}], "]"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"node_", " ", "/;", " ", 
               RowBox[{"ContainsQ", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}], 
                  "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "node"}], 
                "]"}]}], ")"}], "\[RuleDelayed]", " ", 
             RowBox[{"Replace", "[", 
              RowBox[{"node", ",", 
               RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}]}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"trace", ",", "result"}], "}"}], " ", "=", 
          RowBox[{"DFACompute", "[", 
           RowBox[{"machine", ",", 
            RowBox[{"Characters", "[", "input", "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"recognizedTokens", " ", "=", " ", "\[IndentingNewLine]", 
          RowBox[{"Cases", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Last", "[", "trace", "]"}], "[", "\"\<Node\>\"", "]"}],
              "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"node_", " ", "/;", " ", 
               RowBox[{"ContainsQ", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}], 
                  "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "node"}], 
                "]"}]}], ")"}], "\[RuleDelayed]", " ", 
             RowBox[{"Replace", "[", 
              RowBox[{"node", ",", 
               RowBox[{"machine", "[", "\"\<StateExpressions\>\"", "]"}]}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"trace", ",", "result", ",", "recognizedTokens"}], "}"}], 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750339694319202*^9, 3.750339761565926*^9}, {
  3.750457644064279*^9, 3.75045764564149*^9}, {3.7504584883737307`*^9, 
  3.750458519332707*^9}, {3.750531449449689*^9, 3.750531460840279*^9}, {
  3.7505315512323437`*^9, 3.750531579998457*^9}, {3.750532270345401*^9, 
  3.750532273742708*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"414991df-16ec-4376-92c4-3229bd4568cc"]
}, Closed]],

Cell[CellGroupData[{

Cell["Lexer", "Subchapter",
 CellChangeTimes->{{3.757707928174493*^9, 
  3.7577079289916077`*^9}},ExpressionUUID->"d07c23e9-1d59-4e51-ac14-\
31d0660d35e2"],

Cell["\<\
In computer science, lexical analysis, lexing or tokenization is the process \
of converting a sequence of characters (such as in a computer program or web \
page) into a sequence of tokens (strings with an assigned and thus identified \
meaning). A program that performs lexical analysis may be termed a lexer, \
tokenizer, or scanner, though scanner is also a term for the first stage of a \
lexer.\
\>", "Text",
 CellChangeTimes->{{3.762890215620064*^9, 
  3.762890219350206*^9}},ExpressionUUID->"2b79f5e8-ba38-4784-a836-\
695d0d982284"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Token", "[", 
    RowBox[{"symbol_String", ",", "name_String"}], "]"}], ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Class\>\"", "\[Rule]", "\"\<Token\>\""}], ",", 
     RowBox[{"\"\<Symbol\>\"", "\[Rule]", "symbol"}], ",", 
     RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}]}], "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CreateTokens", "[", "list_", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Token", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", "list"}], 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7500868562980757`*^9, 3.750086917600198*^9}, {
  3.758653946747963*^9, 3.758653979476416*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"d141a225-5d1a-48c0-9caa-0ee703961ea8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TokenKeyword", "[", 
    RowBox[{"symbol_String", ",", "name_String"}], "]"}], ":=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Class\>\"", "\[Rule]", "\"\<TokenKeyword\>\""}], ",", 
     RowBox[{"\"\<Symbol\>\"", "\[Rule]", "symbol"}], ",", 
     RowBox[{"\"\<Name\>\"", "\[Rule]", "name"}]}], "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CreateTokenKeywords", "[", "list_", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"TokenKeyword", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", "list"}], 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7500869240403347`*^9, 3.750086928616561*^9}, {
  3.758653983493526*^9, 3.758653996761425*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"dd1a2e4b-3d9f-46b9-b5c8-8985b121e954"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetToken", "[", 
     RowBox[{"input_", ",", "symbolTokens_", ",", "keywordTokens_"}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "symbolAccept", ",", "symbolResult", ",", "keywordAccept", ",", 
        "keywordResult"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"symbolAccept", ",", "symbolResult"}], "}"}], " ", "=", " ", 
        RowBox[{"Rest", "[", 
         RowBox[{"RegexCompute", "[", 
          RowBox[{"symbolTokens", ",", "input"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"keywordAccept", ",", "keywordResult"}], "}"}], " ", "=", 
        " ", 
        RowBox[{"Quiet", "[", 
         RowBox[{"Rest", "[", 
          RowBox[{"RegexCompute", "[", 
           RowBox[{"keywordTokens", ",", "input"}], "]"}], "]"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"keywordAccept", ",", 
         RowBox[{"Return", "[", 
          RowBox[{"First", "[", "keywordResult", "]"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"symbolAccept", ",", 
         RowBox[{"Return", "[", 
          RowBox[{"First", "[", "symbolResult", "]"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "\"\<Nothing\>\"", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SafeStringTake", "[", 
    RowBox[{"string_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"StringTake", "[", 
    RowBox[{"string", ",", 
     RowBox[{"Min", "[", 
      RowBox[{"n", ",", 
       RowBox[{"StringLength", "[", "string", "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SafeStringTake", "[", 
     RowBox[{"string_", ",", 
      RowBox[{"{", 
       RowBox[{"m_", ",", "n_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"StringTake", "[", 
     RowBox[{"string", ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", 
        RowBox[{"Min", "[", 
         RowBox[{"n", ",", 
          RowBox[{"StringLength", "[", "string", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GetNextToken", "[", 
     RowBox[{"program_", ",", "symbolTokens_", ",", "keywordTokens_"}], "]"}],
     ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tokenizerResult", ",", "nextToken"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Try", " ", "to", " ", "get", " ", "the", " ", "first", " ", "biggest",
         " ", "token", " ", "from", " ", "the", " ", "input"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"tokenizerResult", " ", "=", " ", 
        RowBox[{"NestWhileList", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"First", "[", "#", "]"}], "+", "1"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"GetToken", "[", 
              RowBox[{
               RowBox[{"SafeStringTake", "[", 
                RowBox[{"program", ",", 
                 RowBox[{
                  RowBox[{"First", "[", "#", "]"}], "+", "1"}]}], "]"}], ",", 
               "symbolTokens", ",", "keywordTokens"}], "]"}]}], 
            "\[IndentingNewLine]", "}"}], "&"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"0", ",", "\[IndentingNewLine]", "None"}], 
           "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Last", "[", "#", "]"}], "=!=", " ", 
               "\"\<Nothing\>\""}], ")"}], "&&", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"First", "[", "#", "]"}], "\[LessEqual]", 
               RowBox[{"StringLength", "[", "program", "]"}]}], ")"}]}], 
            ")"}], "&"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"nextToken", " ", "=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "tokenizerResult", "]"}], ">", "2"}], ",", 
          RowBox[{"tokenizerResult", "[", 
           RowBox[{"[", 
            RowBox[{"-", "2"}], "]"}], "]"}], ",", 
          RowBox[{"Last", "[", "tokenizerResult", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "nextToken", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SafeMod", "[", 
    RowBox[{"m_", ",", "0"}], "]"}], ":=", "m"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SafeMod", "[", 
    RowBox[{"m_", ",", "n_"}], "]"}], ":=", 
   RowBox[{"Mod", "[", 
    RowBox[{"m", ",", "n"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LinePosition", "[", 
    RowBox[{"pos_", ",", "lineBreaks_"}], "]"}], ":=", 
   RowBox[{"SafeMod", "[", 
    RowBox[{"pos", ",", 
     RowBox[{"Last", "[", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{
          RowBox[{"lineBreaks", "+", "1"}], ",", " ", "0"}], "]"}], ",", 
        RowBox[{
         RowBox[{"#", "\[LessEqual]", "pos"}], "&"}]}], "]"}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ColumnPosition", "[", 
     RowBox[{"pos_", ",", "lineBreaks_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"Ordering", "[", 
         RowBox[{"Prepend", "[", 
          RowBox[{"lineBreaks", ",", " ", "pos"}], "]"}], "]"}], ",", "1"}], 
       "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"1", ",", "1"}], "]"}], "]"}], "-", "1"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Tokenize", "[", 
    RowBox[{"program_", ",", "symbolTokens_", ",", "keywordTokens_"}], "]"}], 
   ":=", 
   RowBox[{"Block", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"length", ",", "type", ",", "\[IndentingNewLine]", 
       RowBox[{"cursor", " ", "=", " ", "0"}], ",", "\[IndentingNewLine]", 
       RowBox[{"tokenList", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"omitTokens", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<Whitespace\>\"", ",", "\"\<LineBreak\>\""}], "}"}]}], 
       ",", "\[IndentingNewLine]", "formattedTokens"}], "\[IndentingNewLine]",
       "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Iterate", " ", "over", " ", "all", " ", "the", " ", "input", " ", 
       "getting", " ", "the", " ", "tokens", " ", "one", " ", "by", " ", 
       "one"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"cursor", "<", 
         RowBox[{"StringLength", "[", "program", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"length", ",", "type"}], "}"}], " ", "=", " ", 
          RowBox[{"GetNextToken", "[", 
           RowBox[{
            RowBox[{"StringDrop", "[", 
             RowBox[{"program", ",", "cursor"}], "]"}], ",", "symbolTokens", 
            ",", "keywordTokens"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"omitTokens", ",", "type"}], "]"}]}], ",", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"tokenList", ",", 
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"\"\<Type\>\"", "\[Rule]", "type"}], ",", 
               RowBox[{"\"\<Value\>\"", "\[Rule]", 
                RowBox[{"SafeStringTake", "[", 
                 RowBox[{"program", ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"cursor", ",", 
                    RowBox[{"cursor", "+", "length", "-", "1"}]}], "}"}], "+",
                    "1"}]}], "]"}]}]}], "|>"}]}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"cursor", "+=", "length"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Tokens", " ", "without", " ", "value", " ", "only", " ", "carry", " ",
         "type", " ", "information"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"formattedTokens", " ", "=", " ", 
       RowBox[{"Map", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", "\"\<Type\>\"", "]"}], " ", "=!=", 
             RowBox[{"#", "[", "\"\<Value\>\"", "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"<|", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"\"\<Type\>\"", "->", 
               RowBox[{"#", "[", "\"\<Type\>\"", "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"\"\<Value\>\"", "\[Rule]", 
               RowBox[{"#", "[", "\"\<Value\>\"", "]"}]}]}], 
             "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
            RowBox[{"<|", "\[IndentingNewLine]", 
             RowBox[{"\"\<Type\>\"", "->", 
              RowBox[{"#", "[", "\"\<Type\>\"", "]"}]}], 
             "\[IndentingNewLine]", "|>"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", "&"}], ",", "\[IndentingNewLine]", 
         "tokenList"}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "formattedTokens", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7505467952931557`*^9, 3.750546921093223*^9}, {
   3.750546955860371*^9, 3.750546956268186*^9}, {3.75054702722803*^9, 
   3.750547157418901*^9}, {3.750547385123595*^9, 3.750547389067976*^9}, {
   3.7505486456200666`*^9, 3.7505487233998413`*^9}, {3.750614439670219*^9, 
   3.7506144944474382`*^9}, 3.750614612478499*^9, 3.750614674239463*^9, {
   3.750614725493066*^9, 3.750614777471882*^9}, {3.750614812101779*^9, 
   3.7506148537990294`*^9}, {3.750614901115054*^9, 3.7506149036731863`*^9}, {
   3.75061495486823*^9, 3.7506149573642397`*^9}, 3.7506150298739557`*^9, {
   3.750615118034342*^9, 3.7506151500911837`*^9}, {3.750616327714858*^9, 
   3.750616381609274*^9}, {3.750616462525311*^9, 3.750616462932968*^9}, {
   3.750689611104656*^9, 3.7506896131770763`*^9}, {3.750689782032683*^9, 
   3.750689904839724*^9}, {3.750689949718709*^9, 3.7506899850806103`*^9}, {
   3.750690035354953*^9, 3.7506900600413847`*^9}, {3.750690248383431*^9, 
   3.7506902485445127`*^9}, {3.7506922266888533`*^9, 3.750692265015525*^9}, {
   3.750692297732071*^9, 3.750692343698224*^9}, {3.7506924282715883`*^9, 
   3.750692455826165*^9}, {3.750692609973333*^9, 3.750692688737253*^9}, 
   3.750692993505443*^9, {3.750693767600814*^9, 3.7506939070694313`*^9}, {
   3.750693957222479*^9, 3.750694072526411*^9}, {3.75719022484966*^9, 
   3.7571902954715023`*^9}, {3.7577079574640083`*^9, 3.75770798407833*^9}, {
   3.7577083211942244`*^9, 3.757708348091176*^9}, {3.7628904220087957`*^9, 
   3.762890444514476*^9}, {3.762890606274909*^9, 3.762890620696995*^9}, {
   3.762890706731805*^9, 3.762890706952374*^9}, {3.762890762717461*^9, 
   3.762890776205811*^9}, {3.7628908293000174`*^9, 3.7628909828915052`*^9}, {
   3.7628910182397003`*^9, 3.762891027417437*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"33941b84-ca61-4ed5-848e-153c6f0dacbc"],

Cell[CellGroupData[{

Cell["Example", "Subsection",
 CellChangeTimes->{{3.76288175496169*^9, 
  3.762881755994505*^9}},ExpressionUUID->"f974796f-da35-40ea-a8de-\
fb6ce6b1e63d"],

Cell["A lexer for simple arithmetic parser", "Text",
 CellChangeTimes->{{3.762881810515915*^9, 3.762881816112884*^9}, {
  3.7628819259404993`*^9, 
  3.7628819275929213`*^9}},ExpressionUUID->"ff5fc44d-ed3d-4e63-9771-\
47542ca43a5d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"arithmeticTokenSymbols", " ", "=", " ", 
   RowBox[{"CreateTokens", "[", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\< \>\"", ",", "\"\<Whitespace\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<*\>\"", ",", " ", "\"\<*\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<+\>\"", ",", " ", "\"\<+\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<(\>\"", ",", " ", "\"\<(\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<)\>\"", ",", " ", "\"\<)\>\""}], "}"}]}], 
     "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arithmeticTokenSymbolsNFA", " ", "=", " ", 
   RowBox[{"SimplifyMachine", "[", 
    RowBox[{"Apply", "[", 
     RowBox[{"RegexUnion", ",", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Regex", "[", 
          RowBox[{
           RowBox[{"#", "[", "\"\<Symbol\>\"", "]"}], ",", 
           RowBox[{"#", "[", "\"\<Name\>\"", "]"}]}], "]"}], "&"}], ",", 
        "arithmeticTokenSymbols"}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arithmeticTokenSymbolsDFA", " ", "=", " ", 
   RowBox[{"NFAToDFA", "[", "arithmeticTokenSymbolsNFA", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"idLiteral", " ", "=", " ", 
   RowBox[{"Regex", "[", 
    RowBox[{
     RowBox[{"NFAToDFA", "[", 
      RowBox[{"RegexConcatenation", "[", 
       RowBox[{
        RowBox[{"RegexDigits", "[", "]"}], ",", 
        RowBox[{"RegexStar", "[", 
         RowBox[{"RegexDigits", "[", "]"}], "]"}]}], "]"}], "]"}], ",", 
     "\"\<id\>\""}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.762881793936095*^9, 3.762881861284333*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"a8355915-c99b-4ecf-a5f5-0b771b1be2aa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tokens", " ", "=", " ", 
  RowBox[{"Tokenize", "[", 
   RowBox[{
   "\"\<5+6*(7+9)\>\"", ",", "arithmeticTokenSymbolsDFA", ",", "idLiteral"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.762881870372916*^9, 3.762881870958662*^9}},
 CellLabel->
  "In[169]:=",ExpressionUUID->"7c068fff-ef20-49cb-8aa0-b67f24d72bd6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"id\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"5\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"+\"\>"}], "\[RightAssociation]"}],
    ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"id\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"6\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"*\"\>"}], "\[RightAssociation]"}],
    ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"(\"\>"}], "\[RightAssociation]"}],
    ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"id\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"7\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"+\"\>"}], "\[RightAssociation]"}],
    ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"id\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"9\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\")\"\>"}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.762881875819525*^9, 3.762890994753806*^9},
 CellLabel->
  "Out[169]=",ExpressionUUID->"86c1f995-ae5e-4e4a-aed6-7f16fbff94d6"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Parser", "Subchapter",
 CellChangeTimes->{{3.7577080324779577`*^9, 
  3.757708033312429*^9}},ExpressionUUID->"491b6222-dc01-403a-a304-\
3cbf3275f40d"],

Cell[TextData[{
 "Parsing, syntax analysis, or syntactic analysis is the process of analysing \
a string of symbols, either in natural language, computer languages or data \
structures, conforming to the rules of a formal grammar. A parser is a \
software component that takes input data (frequently text) and builds a data \
structure \[Dash] often some kind of parse tree, abstract syntax tree or \
other hierarchical structure, giving a structural representation of the input \
while checking for correct syntax.\n\nIn this project a ",
 StyleBox["recursive descent parser",
  FontWeight->"Bold"],
 " is used.  A recursive descent parser is a kind of top-down parser built \
from a set of mutually recursive procedures (or a non-recursive equivalent) \
where each such procedure implements one of the nonterminals of the grammar. \
Thus the structure of the resulting program closely mirrors that of the \
grammar it recognizes."
}], "Text",
 CellChangeTimes->{{3.762891068874704*^9, 3.76289109858722*^9}, {
  3.762891155253064*^9, 
  3.7628911763955708`*^9}},ExpressionUUID->"b4a913ed-7967-409f-a21f-\
6f80d51b418a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQXY3sTSsNGDQ3F3d3d3d3d3KBQKRYu7FTtQ3Iu7u7a4W7Hi7u75z73/
Nc837za6SR55O/d15Rz6Jk+y2azMzM7MTrvdXuvtNMJwww2376j/+5/1tu2z
7D77bHvg+j3+948Ne+676849d9xh1Z69d9x5x30W2W7E//1xuOGHG27+//3H
SP/7z8gwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw2pDvv/8+eu2116KPPvqo
1UUxDGMYgrHnoosuit57772Wl2Pw4MEtLYNRPx9++GH06aeftroYwXz++edR
v379op9++qnVRTGMtuLLL7+Mtt122+jff/9tdVGMJvLDDz9EJ5xwQjTzzDNH
ww03XOOYZJJJoptvvrnVxTOMXKB/M4Z1FxiHf/3111YXo1b++eef6Nhjj42W
XHLJaKSRRnLjzmOPPday8qDDrLjiitE333zTsjIY5aBNMRbwLX/55Zehzv/4
44/u/3///fdo3XXXjZ588slmFzEYyn7QQQdF888/fzT88MO7/vLZZ5+1uliG
0VacdNJJrm88+OCDrS6K0STuuOOOaLLJJnPj4hlnnBF98cUX0QILLNDQZ2aZ
ZZZWF9EwMnn88cedLDzqqKN2C5v6J598Ek0//fTRCCOM4GwN3RXkzrPOOquL
HeXZZ59tSVmw0U899dTRoEGDuvz97bffjvr06RP17ds3Ovroo53udcQRR0SH
HHKI+/vXX38dez90UX5z8MEHR0ceeWR0zDHHuH8feuihucv0xhtvRPvvv3/U
u3fv4OOtt94qVS8+6ADI01nPPfHEE6Prrruuaf0ROX/vvfeOpppqqmiJJZZw
esrcc8/t/v+DDz5w13D+0ksvbfyGtZnpppvO+SJ0AqzBUK8TTTRRo7+wjmgY
xv8x66yzur6x9dZbt7ooRhNAjxFbaK9evRp/f/PNN6MePXq4v2+//fYtLKFh
5KN///6Nuf3WW29tdXFKwdrSbLPN1nifn3/+udVFqp2bbrqp8b6tkCv/+uuv
aOGFF45OPfXUoc7hy3PxxRdHu+yyS6OM44wzjtNJBgwY4H4bB7rMhRdeGM05
55zuN+OPP350wAEHRLfcckvucjEWo5/ze8bqc845J7r66quHOq644orozDPP
jA477DA3Zk8++eSNsl5++eXB9RLHn3/+GV177bXu3RZZZBH3jJFHHjk67bTT
oquuuiq68sorna8g+tsaa6zh7GQrr7xy9NRTT1VaDs0DDzzgdJIDDzzQ6Vqa
22+/PZpnnnmio446ypX1/fff73L+rrvuimacccbGek0ncPzxxze+7x9//NHq
4hhG24AtSvrGmGOOOUzMn8My2HemnHJK971HG200N19rsPU8//zzLSqdYRSD
9oz9Gnt5kmzZCfz222/R4osvHu2zzz7DlKyCnCvv++677zb9+cQdLLTQQqnX
sIY01lhjuTLuuuuuhe49wwwzBMcg8nupm8033zzXb9A30LX4DTJ8XVAenoGu
kgR+HswxY4wxRjRw4MDKy8A63n/+8x+nQyVxySWXuHKy7hbHOuusE+27776V
l60uLrvsMvc+6ImGYfwfO+64o/NZljFTr8Ma3Q9sZvKt119//VYXxzCM/7Hl
lltG5557rrMlS//8+++/W12s2nnhhRca7+vbzesGH7Fxxx3XrSlkMddcc7ky
rrnmmrnuzbdjvefll18OLh/rO8suu2yjflgTycsGG2wQ7bDDDsHPzmKKKaZw
ZSLeMo2tttrKXYfPV5Vgw2BNZaONNkq9Dj2U9S3KEYf4qHaKrxnrgbJWZxjG
/4f4OGxSr7zySmO8XG655VpdrJZwyimnRMsss4w7Tj755FYXp7by4Isv3/qC
Cy6o7L6GYYRBX99zzz3df9ely7RrnPCLL77YMl2G9QvynLCWkcXaa6/tyjjH
HHPkujc+a8TXlIV4D/zaePZ4442XO//Www8/HK2wwgqlnx/HO++80/hmWf5j
u+22W2Md4auvvqqsDMcdd5y77/XXX595Lb5++L4lseiii7rcR50AfoWmyxhG
V1h/ZR4F/EplzGn2nNJq8E3Bp1nGZ3yQu2N5nnjiiS75yiz/smG0lvvuuy9a
ddVVG3pLHboMtufRRx+9kntVTat0Gez1+NoSy54HYscpI/5SWaB/sCaTR0fK
A74SUkerrLJKrt+QB4/YqzrABiY+6Vl+ncTicy25LKr0X8cfk/u++uqrua5N
8188/fTT3XfthLgZ02UMY2iw24itBJ1Gxss6/WzzgJ84ew3kmQtYhydmljVi
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
JQYqbu1QQ04jfMC6kz3QMAyjE5C9zTiyYvY6BdkHAL0lCeKb9Z4nrM00Y19u
wxgW6VRdBoitIE6nGTIqz8DWUjY/RKeXoV3Kgp8U8XNZ6/b4yxMjFxdPYxiG
YVQH/mQ6NoT1C4nLJp62O4A/vcQKZ+Xb1DHnVe8ZZxjG/9HJugywFwv7zNYN
8Xt+Drhm0w5lEFpdFp5Pboo0yE9IfoK8e24ahmEYYcj+EMSMSC5K4lP5G/le
qtpjvdWwtiK5lmQ/xyQk5yr5mNLymhmGUQ7ZS9PfS7RTIMaZ9QH8iOqCtYe4
fNXNpB3KILS6LOQmIEd4Vv4ZYuf9vKSGYRhG9eicu+S9Za8R8uySo5i8Qt0J
/AFEnyEnJ+svkqeF+ZH9hcjDTW5YcohXvfe0YRj/H2zW9K/55puvkZOZfUOw
raTlI2tHWPPdY489oueff77VRTFqhrx87PWSFSNjGIZhNA9ysRx00EEun9fq
q6/uckySr7LuvNatgtycvC++Y+QAYP8K9v1gDYY4TvLss09cp8lThtFJsL8I
+Z/YB++ss86KzjzzTLfPx1FHHdUlf24nEbJnr9FZkPOhu86NhmEYRmcie4sY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYRnflr7/+igYNGhRde+210W23
3RZ99tlnrS6S0UK+//776KKLLoree++9oPN1MGTIkOjkk0+u9Rmff/551K9f
v+inn36q9TmGYRiGYbQvTz75ZPTbb7+1uhhN4aOPPoq+/PLLVhcjmB9++CHa
f//9owknnDAabrjhGsdII40UDRgwoLbndnq9dUf++eef6Nhjj42WXHJJ9/1p
B4899lju83XwySefRL169Ypmm20297xRRhml8mf8+OOP0UEHHRTNP//80fDD
D++eY7p8OHwz2sUff/xR2T2//fbb6N57740uu+yy6IQTToh69uwZrb/++tFr
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
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYRvvw119/RYMGDYquvfba6Lbbbos+++yzVhfJqIEhQ4ZEJ598cquL
Mczx559/Rk8++WR09dVXR48//nj077//trpIRhP4/vvvo4suuih67733gs7X
Qd1jwOeffx7169cv+umnn2p7hmEYRp0wRzM+Dwt89NFH0ZdfftnqYpTihx9+
iPbff/9owgknjIYbbrjGMdJII0UDBgyo7bndoe46hU8++STq1atXNNtss7lv
O8oooyReW9V3qfP7dlLb+fnnn6MTTjghmmqqqbr0L9Mnuy///PNPdOyxx0ZL
LrmkG0f53o899lju83VQZAwI4ccff4wOOuigaP7554+GH3549wyzh7Uevjtt
648//mh1UYbi9ddfj2655Zaof//+0WGHHRZtv/320Y477tjqYhnDOLfffnu0
/PLLR//5z3/cODbOOOO4sfqOO+6o/dlvvPGGk8d79+4dfLz11luFnoltlXlo
1FFHjQYPHlzTm9UL9Tb33HNH11xzjVuXufnmm6Nxxx23IW/tvPPOtTy3O9Rd
J4FMcfjhh0djjDGG+649evSIva6q71Ln9+2ktvP7779Hyy23XHTmmWdG33zz
TXTooYdGo48+uvsGddoJ2oG333476tOnT9S3b9/o6KOPdrL7EUccER1yyCHu
719//XXs77CF8ZuDDz44OvLII6NjjjnG/Zu66xTQVc4666xo5plnboylzz77
bO7zdZB3DAiFNZgTTzwxmmiiiRrvNKzYNNuVBx54wI2TfIsFFlig7fQZdN8x
xxyzi41n4403bnWxjGGUL774Ilp11VW7tEf/2GGHHWotw5tvvtnos8g555xz
jvPl8I8rrrjCyRViA5h88skbZbz88ssLPRNbgvz21ltvrenN6gM/AN7/tNNO
6/J35jzqCLtxkrxRlk6vu05ll112cXU+6aSTxp6v6rvU+X07qe0w7s0000xd
/sZ60rvvvtuiEjUPxpeLL7640ebEvoVOgh6H7SQOdJkLL7wwmnPOOd1vxh9/
/OiAAw5w9ttO46abbmq8+2uvvVb4fB1kjQFlOf744xvv1G6y87DGZptt1kUO
q3vtL4SBAwd2KSN2VcNoNqxfMlePN9540VZbbeV0hE022aRhe9THZZddVmtZ
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
x4f1JclJx3ojuoXOX6Fjixjz/T3HtS6iY3Ho1/jS6ffz15J5tvRB0dfiIBZT
9CUOxsGqfWsMIw5y6tHm4nLrNRvaPPa3uPXeOPDJSLIPJJE1TwF/x79V1sY5
WMsuuvcF4z/rycyd1K/MF3XpMiuttFKqLpM1X5GXJU1ezKq7rDkTv17O77vv
vkmvGEzWNyvz7Dp1GYmVTJN5s+SYrO+Stz2nyeliF8femYbek0TP51llLNs2
202XKVtfIpe0WpfRMcuSv5dx5plnngm+ZwgSPxmiyxQdhwcOHJj6jZPOh44x
VYwBaeTpGxIPE9L/6hjXscPoOHjfL4s4E22jwSaQB2yfWs5mHScLYpi0noH+
o2F9RJ/XsW/I9rqc5A+IQ6/rkEMuzj7rr1MRP6Sv07qdv9bEWK/1Lf0NGYN0
HlTWfnyIS9LPTst/rvOScEgeBMOoC9on/Yy2nAQ2hzi/M/oQsZ/E2VQBvqHY
LC688MLcv6E/xcUDpqFlgCxfb+ZA7NpyfVqudh/szKxlk0NU/Bzq9jGjLtJ0
GZnTQuXFrLqT+8ueGD6SfyUkj1tekr5ZmWdnvVcZJD8RvuZJZMkxedt0VntO
k9MlXyk5V9NgHpd7aB/RvG2nrC5T9htVpcuUrS+J/W+1LqPjALgPduA88l/V
iLycZNdOImQc1jEJcd846XzoGFPFGJBGnr7BHjCh/a+OcR25QsvDfowOfSXt
fBw6bp6DvJ959t3U+g+HXj9FDpIcE6Ln6DZFnmo5R5yNxI/g2yZ5zOmrWs/A
7xT83IfsN6XLgU4toDNpfUTGdnKbsaZCLj85RzsTHQgbE/ZgnVtevi+6k4xJ
W2+9deM8uen5PbZkYo/8OkRm1HYzcqUZRl3gC0p7Q39nbI87BgwY4PJn7LHH
Hl1+SzvGb1naKvN2GRhjiLPL2mvbBxsd/nFFYC+GuHmI/p60t7X087j8hnFQ
d6wB+77ydesyzCVpuoyswYXKi0l1J2TJo6zLy+9pW0kw/uaJKS7yzco8O+u9
BNk/pAjaDzvJ1yErh1Hcdwlpz2lyOjaGPDK82Jj1/gpJZdSUbZt5v1EWVeky
ZetL8jW3WpfRMd+0VXxRyOdbhpB+omOWdT7bNELHYW2Djvt2SedDx5gqxoA0
8vQNcvuG9r+qx3UgH7DcE58t+U7k26C+8JHVcr3/XGQU/KD08x555JEuv/Hl
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
UpIfCe0BvzL62SuvvJK5R2YV44BhGIZRPcibrC/oPDedBPOQ2F1D9HfDyEOn
9xPDMMpj44BhGEb7gb8QPvtl8zy1iksvvdTpMnofNcOomk7vJ4ZhlMfGAcMw
jPYCnyz88eNybHUK5M7Cj568NIZRB92hnxiGUQ4bBwzDMNoL8tkQW4l/eKeC
/z/7TbN3g2HUQXfoJ4ZhlMPGAcMwjPaDuMcyMbntAHm8yD9qcTJGXXSHfmIY
RjlsHDAMwzCqhj3u0WPy5OMyDMMwDMMwDMNoB8gDyl6NWTk0DcMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMwDMMw
DMMwjHr466+/okGDBkXXXnttdNttt0WfffZZq4tkNIE///wzevLJJ6Orr746
evzxx6N///231UUymsDnn38e9evXL/rpp59aXZSm013e/fvvv48uuuii6L33
3mvaM3nWKaec0rTnGcMmZdpZK/pFOzJkyJDo5JNPbnUxOo4ff/yx1UVoKh99
9FH05ZdftroYpfnhhx+i/fffP5pwwgmj4YYbrnGMNNJI0YABA2p5Znepu07m
559/jk444YRoqqmm6vLd233se/3116Nbbrkl6t+/f3TYYYdF22+/fbTjjju2
ulhNJbT/MEYfdNBB0fzzzx8NP/zw7nsPKzaL7vLu//zzT3TsscdGSy65pBuj
eY/HHnus1mfS3vbee+9o1llndc8bY4wxan1e3PNtvmhfqvo+ZdpZK/pFO/LJ
J59EvXr1imabbTZXB6OMMkqri9T2/Pbbb9Ell1wSLb300tE444zj6m288caL
VlxxxWjgwIFNL8/vv//u5qrevXunHieeeGJ03XXXRYMHDw5+FvZr+suoo45a
6j6t5o033ojmnnvu6JprrnHrMjfffHM07rjjNuTanXfeufJndpe662ToK8st
t1x05plnRt9880106KGHRqOPPrr75nXpr1VBHx9zzDG76F8bb7xxq4vVNMr0
H9YhGP8mmmiiRt1hwxwW6C7vjsx21llnRTPPPHPjPZ599tlan4l8hN1AxogJ
Jpig1udpbL5ob6r8PmXaWSv6RTuCfebwww93eiB10KNHj1YXqa255557hrLn
+gfycTPBVwb/qAsvvDBaZJFFXBlGHnnk6LTTTouuuuqq6Morr3TrjkceeWS0
xhprONvcyiuvHD311FOFn4VNWN7z1ltvreFt6gc/i8knn9zVj4a+gIyLff7r
r7+u/Lndoe46nR122CGaaaaZuvwNu9q7777bohIVA1tJK8eaVlJF/zn++OMb
9/jjjz8qLmF7013e/aabbmq8x2uvvdaUZzJu8Lwpp5yyKc8Dmy/amzq+T5l2
1op+0Y7ssssurg4mnXTSVhelbXnnnXeiscYaKzr44IOjl156Kfriiy+ihx9+
2K3PaPli/PHHb5nv/eabb+7KgK6SxIMPPhiNNtpoTn8tuo6EjQ+/rCOOOMKt
Z3Qi6623nltPw9eomXSHuutkvvrqK7fuvNZaa7W6KMEcc8wxjXGGdxmW/Fur
6D+XXXaZqzvsOcMa3eXdscFJH2iWDaJv377ueTPOOGNTngc2X7Q3dXyfMu2s
Ff2iHcFmTx1MO+20rS5KW4M85INMPMUUU3TRZ1oVeyXlIB4gja222spdh5/V
sMQrr7zi3nuxxRZrdVGMJkPMM9++Z8+erS5KMAsuuGBjjGGN1SgGfoQSEzes
0V3e/YUXXmj0gffff78pzzzqqKPc82aZZZamPM8YNinTzlrRL9qR4447ztXB
DDPM0OqidCRbbLFFl9hxYmqaDetGUoYs/7HddtutYaOL08+6K/iV8d4bbrhh
q4uSSCfG5ealle+2zTbbuG+PX3InQnyoxG5z4DdqDE1aGyNnXXeQ50PoLu/+
4osvNl1mO/roo02XMWqnTDtrRb9oR8SX1nSZMFZdddVGO1p//fVbUoYLLrjA
PZ/44Kw1zyWWWMJdO8IIIzTd16qV8G14b3KGtCPEExL/1x1p9bstvvji7tsT
H9iJEMslY8yII444TNkg8pLVxrqLPB9Cd3l302WM7orpMuUxXSYcYsklvxD5
4Fple5a1oVVWWSX1OvI3ES/DtRtssEHQs/DT7zQdiBgmyeWTZZsnr0gSxEmV
IanuXn75ZZdLjbwo3Y1Wvxvfnji2KnQZvt3bb7/t1kF/+eWXoc4l9Ytvv/3W
5c8jLvPXX38t/Fzyr8lcteyyywaVvTtQpv90F3k+hGa9O9/H7xdV0k66zN9/
/137s7Pm2rLzkTE0RdpwlbJQmXbWabpMXe3WdJkwaMPk9WZ9gxwUrYzFlVgZ
vmUa++67r7turrnmir777rvc90f+Il8H+1ogM5D3wIf8OPhxrbnmmq5eFlpo
oWj11VcP9ut54okn3H3IU8C9brjhhqD7ADmfpK/zrdgnUR+8z9lnnx0tvPDC
Q+mD1BM54TbZZBOnB5I7jrWviy++2OVZIB/iCius4OSFOLLqjn9LTmj0Yr9s
cboVOfU22mijaJlllokWXXRRVz+UnxyNRQn5bnmfH/JuaWA7IJcy8jwH5aVe
49qjkPbt885Z9913n1vb0X5ekmODtrD77rs7OZr2gd8zoL+Q837iiSfuEk9H
H9RITnyOTTfddKhnY3+QvQM4zjjjjMRyYkshHnWeeeZx9U2+eOwclEVDmySX
ADoSOV/YZ4n3wXctNHeJ7NV2+eWXu/7CQcw5f+N5H3/8sfvvK664wp3jOvqQ
jJvkEiXfPbkXOc9/8z5V9R9fnmc+pS3xXclvl9aHixDSN0PGOnLQ0EfXWWcd
9x35frvuumv09NNPD3Vtne/ufx/iEnlXfAWoA/rpXXfd5XItXXrppY3cmvp5
tJ1zzjnHfXO+Pe3ivPPOG6rO8spsVY6PWsbEFkH+EHKG0q/5G/s85RnH8pYp
q72XnY80t99+u4u9w1eD78QcQDmZE84991z3DHJDFc2NVXbuxlbE+zBWEOtF
m6Ht0G5kr1f2tuZvMtbw348++mhQOfK24bhr0+aeIvVQpp21ol8Ufccq2y3f
4KSTTnLvsvzyy0fzzTef8yMnfqCsLlOl3NnuMNffeeed0fTTT+/qDTkAuaBV
azI6Voa5Ow7GJmzSyGLIqciEeWFfDj+/gR+Tg0yI/MQ+OyI3vfnmm26PNubP
Irk+GKvot8iHjGHcU+J7mOuKQE6P2Wef3cmZUvZJJpnElVUOZEkto6677rqN
3zMujD322I1zXEdbn3feed04w73x+ZHz/p69WXVH+ZA39T3+85//dLn+gAMO
aFxP20MGIW8j45dw/fXXO52ab1vEXlj0uxV5ftF3y4K2wP2Ye6WvMR4S1893
2W677bro53HfnneSb83/+3NfHMynyMjsz6TXR8jrD4zN+p1Y/2PthjpifmKu
0Oe1rPnII490OUc9+tDm9TUffvhhbDm5jhx9rEExPpGzME5H+uCDD6JpppnG
/f3888+Pnn/++S655kPHbpFHaU9yL/I8Ui7aBH5x+MrJ90CG/u9//+v2rQXk
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
yCz+97XWNWudi700x7CJSGLBggWV38dts9A57Bg2B3G+853vuGN58zDa3Cw2
DFm+yN/4xjfceauvvnrivGJRXQZsfpk6mG2Fgc1cXK5gzhuZIm6LhZxjfZTk
T1/WvSxafkgcs8MPP7wiM/nyaZacZ+sDa6+9tvOT8rcjjzwyWmWVVSrjzuSw
vM9KFkX6o55nYfr06W7/+uuvn1qnenylQ94LRfoc8ozBWvXwdZG4HgTss+Oc
G6dR76syns/4GC9zvGZRtO6tPJ6FEEJ0HOx9b3Ixc6PPPPNM6vl5dZlasXVq
nVvre4fvvf0+7ouLb4Udw18+Dj7CHMNXJg/YU/C73r17Z55HbnAr//HHH29z
vB5dBvsWu7bvH8t89xZbbBG99tprbX7Dek6cemSlvOcWKT9El/HH8AMPPBBU
H9MFDzvsMDdXn7bdd999ieWEPCu1yNsf9TwLprfjK59Go3WZIn0OecZgM3WZ
st9XZT+fZY/XLIrUvZXHsxBCiI4D85/4xfq+lmzMtT3//PNtzm81XQa7lbTv
HXK92R8l6QvmL5NkV5+F2ZcRfykL4qNZ3ZL8A+rRZcB8lfFfNpAf8AOoBetJ
V155ZaUOzdBlipQfosv4/ezbID311FOp9SFGEvvxpwol77OSh5D+qOdZMF9s
f6zEabQuU6TP4ZOky2TdI5/Q5yNrjDdyvGYRWvdWHs9CCCE6HnwHTzrppIqd
B9s666zTJvZ/2bpM1rcYiNuZ9b179913M2UDs2vBj9T3HzH/eezLknz3syBu
Er/FHj0L84dmIwZtnHp1GeQFfo99B76ygJzix4eKg3wwevRoV/all15a6d8y
dJla97JI+SG6zOWXX165xrx58yr7H3nkkdT6EBON/aecckpmm5IIfVZCyNMf
9TwL+MnX0r8brcsU7fM8Y9CeiUbpMo1+X+V9PrLGuFHmeM0ib91beTwLIYTo
uPA9Yi7PviG33HJL1XGTWSx/QxJ5ZA9ftkg618orKhsA/iMcRwchThnt47tO
nB1i+uSFOK9cjzWfLPD5t7qZruFTry6Dn4zFoR0zZoyzO2PuOw3mQbt37x6d
fPLJFZuQMm3Mat3LIuWbLkO+iTQsZhzb4sWLK/vRa9LqM2rUKLc/LT5UCLWe
lVrk7Y96ngWL6YSvShpl6DJZ74WifZ5nDJrvf6N0mUa+r4o8H1ljPE694zWL
InVv5fEshBCiY0A80qRYPmA5HOLxv2p9fyCP7EGOh6xzmd+rR5chLiyxlrHD
JxfGXXfdFT300EOp7Q6BOMgh7bO5Q/IlJFGvLgP2TSc+FD7wtC8J5ArWb+I+
PmXqMln3smj5pssgJ6VhumXfvn2r9pN/Jq0+5OSxY6zRpUFuHn5b5FnJokh/
1PMskC/RjhFDN4ky4phlvRfy9rmRZwyaXtsoXaZR76uiz0faGC86XpPintei
aN1beTwLIYToGLAmwfeHvAxxzE+XPNo+ZuOc9Q0hRqadg/6QBX4kdi5xa+LY
94g8Eknfw1q6DHGXsW0pE+zQyVdDmfGcCgZ+q2anTh7AJNBxOE7uwKKQY8Ha
jx1WUqxbMPllhx12qNpP3bLkjbLuZdHy/fwySbIZ8eGIv5vUz+QcT6sPsp7F
kiXXZjzWL5BXkPUgyi3yrGRRpD/qeRawr0S+5xhxw5IgfyTHs+JfpxHyXsjb
50aeMWhroay7JuHrMn7eVaOWLtOo91XR5yNtjOcdr7SbeGfsJ19lSJ6reuve
yuNZCCFEx6Fnz54uP5wPaxnYT5GbJf4tJM6x5ahnvYNvILI9c6m2JkC+bfsG
+f4LSfh+26ydxDG7FLZXXnmlzXE/7jL21z7YYLEf2zL8VZ544omqbf78+e57
WQRkrh49ejg5Op5nAvnavu/kFE+Cc8w+jHi09WA6kZ9jMA6xozinS5cu0dtv
v+3KZ47Zz3WO/IO/gR8Pt6x7WbR8PxYc9itxxo0b544hn+WpDzAmmBM2eYqc
e+imF154oasv8rYf/y7vs5JFkf6o51kA1kWYP6etEydOrOpn7BMtZxHnUJd4
rO8sQt4LkLfPIc8YNPmVLenZnj17duX4Y4891uY4upIdT4p92Kj3VdHnI6s+
ecarr6OxcT9CKVr3Vh7PQgghOg5Dhgxx73tyLvKtIcYQsv/WW2+dmAsOzDbA
ts6dO0f9+/d33xbiy1iOSDZsn7g2v/FBTiAGjcnzbHxfBw8e7L45fEt32223
6DOf+UzlOLnR8HHhe8wcL3KQxSJj41r8xnIRYB8ej+ET3zjONYt85/j+fv3r
X3f6DP7M5HabMGGCi4mMXUNSThvAP9ZyWtu3lnzl2Ij5echDweYNX96kuKgG
djq2fsE3Hjtz1oOY/zafYO7V3Xff7c6fO3duafeySPkG9nfIuugsxMJmnY2Y
Cvj783evXr2iGTNmVP2GujM2fF9n6oOMHc91TvxfbNPi44K6Yr/jU+RZKeN+
lPEsGOgS2OtxDut43/rWt1z+9eOPP971s41H7B/z+lOkvRfi6xehfZ5nDLLG
wzPkP+/cm2HDhrn+wY+KuBg2l2/z9dxTnmOeHX6P/I8+xT1g495ik9ro91WR
57PWGM8zXrEt8/s5z/xK3rp3lPEshBCiY4AtFN8Hco8hi2PjjN11mq2SgR3J
dddd574PlrOA+Ti+RcgFzJGx8bft87H9zA3yO8qzfUBssffff9/tw/7Av5Zh
v/ePI1f4dad+6A3IOMhWtnXq1KlKjiLXTFGYi6Tf0OWYG6VPs6BtxC3lm01d
+Zf/+23LA21Ps+vxQbbgPs+cObOqjtw/+sm3KynzXhYp34jbniAXY1fDPC1z
r0k5SK3ufn2WLVuWqa9SN+xYJk+e7OSjpDWWos9KVpkh/VHWs2DQF4xT2so6
x5IlS9x+5H3aXnStEpLeC1ntz+rzPGOQZyjeB/xNvwH9QH+wj2Ocw9+hcxjN
eF8VeT6zxnje8cr1GQNdu3bNbfeap+4daTwLIYQQ7Q05I/GXSfLTRX/g+8t8
JHOEvo2CEEIsb6Bj8C5MyoclhBBCiObC3B7xX2vlhRs7dqyz4U/yPxVCiOUF
7GI33HDDwmvEQgghhCgP/MZDclkQ3xNfDCGEWF5hDRtfl7Q8XUIIIYRoLgMH
DnS+MrVsx/APxp9cCCGWR4gzNmDAAOdzIoQQQojWgBhK+PWPHDky0Zcbf2Hy
hOP3L/syIcTyCn718pEXQgghWgtikFqcMuJ2Et+VWJ0jRoxw8UrJd/mLX/xC
Pv9CCCGEEEKIloM8e+SAGTRokMsPMXz4cJezhBx+QgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII0aq8/vrr0c9//vPon//8Z3tX
RXzC+fOf/xz97Gc/K/z7d999N/r1r3/triOEEEIIUS///e9/o7/+9a/RggUL
og8++KDN8ffee68datX60Gdvvvlmu5XPffnRj34UDRw4MFphhRWiT33qU9Hf
//73dquPaE3KGKdcY9SoUVGfPn3cOPv85z+f6/e8Y84999zoK1/5SvTpT3/a
XeOhhx6qq05CCCGEaB/4rn//+99333S2Bx98sF3qgSyMfLL++utHO+20UzR4
8OCoX79+7t/Fixe7czh+7bXXtkv9sli4cGE0ZsyYaNy4cdFPfvITJyedddZZ
0dixY93+t956K/F3//vf/9xvTj/99Ojss8+Oxo8f7/5/xhln5Cr/t7/9rbt3
nTt3djpge8AazIQJE6Lu3bs72ZCNOW8hjLLG6d/+9rfoxz/+cfS5z33OjbM1
11wz1+955/3yl7+MvvSlL1XG6hNPPFG4PkIIIYRoP0aOHFn5nrPdfffdTa/D
vHnzoo022ig67bTTon/9619Vx+64446of//+0TnnnOPq95e//KXp9asFNlXX
XHNN9N3vfrfSj6uttprTSW688cboP//5T+Lv0GUmTZoUbbHFFu433bp1i049
9dRoxowZucr/1a9+VSl35syZZTSpMOedd16lLsuWLWvXuojWouxxeswxx7hr
feELXyj0+9tvv71Snz/+8Y9110cIIYQQzYV1AF+PaQ9dhvnQTp06RVOnTk09
Z/Lkya5uG2ywQfMqVgDme1dZZRVX1xEjRgT/Dt+SjTfe2NnOFIE1kR/+8Idu
LShNb2oWU6ZMce3HzkwIn7LHKWuYjLUvfvGLhX7/u9/9rvLe+9Of/lR3fYQQ
QgjRPKZPn+7k7tGjR7ebLoNsgxwybNiwzPPQEbBLOfLII5tUs+L07dvX9eP+
++8fdP7HH38cbbvtttGzzz7b4Jo1B9ahaD+2REI0Elur3XTTTQv9/umnn668
91pxvVcIIYQQyWBPgQ0Udh7XX399u+kyP/3pT12Zt956a81zscMi3lAZoEPR
zquvvjq68MILqzZiIj311FOFr33ggQe6Nm2++eZB51900UXOv6YjkeXT/5vf
/KbD6zKtErOgVerRquCbVo8u84c//EG6jBBCCNHBWLJkSdS7d+9KHNP21GV2
3HFHV+b8+fODzq3XDoS1j6FDhzqbts9+9rPOD+eAAw6IDjrooMpGrAHWFopC
fILQ2ErENGBN5t///nfh8poN/tv4XKfR0XWZWu1b3urRykiXEUIIIZYv8DX/
6le/Gg0fPryyrz11mQ033NCVid98LQ4//PC6yjr//POjlVZaKRoyZEj0zDPP
ONuuRnDJJZdU+vIf//hH5rnYoT388MOllU0suPfff7+068VBF+zatauz90uj
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
CCGEEEIIIYQQQgghhBBCCCGEEEK0B/8HtLYmww==
    "], {{0, 256}, {819, 0}}, {0, 
    255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{770., Automatic},
  ImageSizeRaw->{819, 256},
  PlotRange->{{0, 819}, {0, 256}}]], "Input",ExpressionUUID->"09897c71-8957-\
46e6-860e-b7797b16cfdf"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQWYHUX2t3ENsEBwCAQnaILt4u4ssrizbAIJTnAJGoJD8ODuFlwWd3eH
4O4OQerbt76n5t9T01It9/admd/7PJcwLVXdVdVVdU6dc6r3v3ddf8BYY4wx
xuAJ/vef9bfdZ/k99th2v3/97X9/bLjL4IHb79L/P6vvsmf/7fvv8fd/j/2/
g+f+79rl/vc/4/zv/40QQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghmsqXX35pXnjhBfP8
88+bd9991/z44491P1LD4N1uvvlmM2jQILPqqqvW/ThC1A7f//Dhw+t+jG7D
d999Z9Zdd926H6OpHHTQQebBBx/MvO6mm24yTz/9dBOeSAghRHfkm2++MQcf
fLCZZ555zFxzzWX23ntvc8opp5j999/fjs19+vQxu+yyi50X3XHHHXU/biLH
HXecWXTRRc2rr74adP0RRxxhJp98csOWsYsvvniDn050Vj788ENz/PHHm403
3tgstdRSZq211jIHHHCA+eyzz9quGTZsmPnhhx9qfMryfP755/Y74H0dr7/+
urnrrrvMAw88YB555BFz//33mzvvvNPqSOJ46aWX7PXMb/lxLXP8LF577TWr
i8j7o++qAvq1pDx4B8rh119/rSSvKCNGjDCbb7555em2MhdffLHZaKONMq/7
66+/zPrrr2/bnhBCCFElN9xwg5UBJppoInPuuefaMccHeaJfv35WThgyZEgN
TxnG3HPPbZ/x1FNPDb7nrLPOsvcsu+yyjXsw0SlBDmBuOs0001h55+WXXzaj
R4+282DmZMhCrJOefPLJpnfv3nU/bin++OMP+w3cfvvt7Y7fe++9Zr/99jNT
TDGF/U5mmGEGqx9BDoqD/mSRRRax16JL2X333dvJU0kcc8wx9h5+u+66qznp
pJPa/ZA/WTcYOHCgWWCBBdquZY2gLNQneVDH44wzjk13wIABVp/CD93QBhts
YMsAPRByYlUgb95zzz2VpdcZ+Pnnn83UU09tvvrqq8xruYb29MEHHzThyYQQ
QnQH0D2OOeaYZoIJJrC63TQ+/fRTM/PMM5v+/fs36eny8+ijj9o1nRB9s+O2
226z851VVlmlgU8mOhvXX3+96dGjh533YhMWB+s9888/v/2Gtt122yY/YbWc
dtppZptttkk8z/vxnRx22GGZaZ133nl2jSzPegnyF7IAeSyzzDLmzz//TL0e
OW288cbLpevI4uuvvzZjjTWWnZvH6YGQf//2t7/ZOq9i3emVV16xcnNcXl0d
5EtsDEJgvehf//pXg59ICCFEdwD9tdN1MvcJ4bLLLjMrrbRSg5+suSAzUQar
rbZa3Y8iWgTm1MyDt99++8xrTzzxRNt+LrzwwiY8WWP49ttvTc+ePc0zzzyT
eA16Bd7zP//5T2pav//+u1lzzTVtmnnBxmzCCSe0+Rx77LGZ12NzuNdee+XO
J4mRI0favLFzTGKzzTaz15xxxhml89tzzz07yJOst+GPuNtuu9l1Nn577LGH
XRMbPHiwPYfsMHTo0Hb3nX322WannXayaVImXL/zzjub9957z55njYm1K87z
41r0X8D6PutqLk/W7MiH+w899FBz9913d5BH4+4hzR133NHec+utt9q2kMRj
jz1mbQpCIJ2ZZpqp262TCSGEqBb0jX379rXj+GyzzWZ1ryEwBh511FENfrrm
wjgs+Uc4sN9C9sGPLGsNApz8TKyQzgp6eGz50rj00kvte6644oqp19E/IEeU
eRbyGX/88RN9jBwfffSR2XDDDQvn5cMcPku2IU4K1zDnLwNz+umnn75NPomC
zdeWW25p81l77bWtLOlkCdYiN910U3vu/fffb3cfaS244IL23HTTTddhXenF
F1+051ZffXUzatSodudZM996663t+U022cTGhuF39dVXm6mmmsosvPDCHfKL
3sP6+U8//WSPXXPNNTb/Xr162TWuJPArfe6554LKC3kPXyAhhBCiKPgnO/t5
dKh10Si7jzzpVi3/NNOWpeq8Wj29Ruf7ySefmEkmmcTKP6Fxp5iDd3bfH/Tw
+LmkgX0s38mss86aeM3bb79ttthii1LPQt2xxkxe+Pn89ttvqdenrdXkxemE
kuKn4Ps15ZRT2mvoQ8uAjJhmc+vkwAMPPLDDOeRy7JDj7Mc+/vhj24a515dD
kUuwMUyyS3R5+j6e2Bom+Ui6e/DNioJ/GMeR8ZLqkDU+1qlCoJ8ed9xxzRdf
fBF0vRBCCOGDXYOTf5544onS6TG+YaONLQT+4vhLJ+mA33nnHesv/o9//MM8
++yzVmd4ySWXWD0iMYHwu4gD23v0s6SP/pNxk1hTDuau2IAwp7joooti02Bu
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
CCGE6Bwwf8CHOy6OGDYkrKewtiZaH+ay2JBGf9gFIf/w/8jwrQj6hEkmmaSd
j1WV0MaTbKC6Qn5F80Q2jrNV6w6gKwjdywjZCRto349UCCGEEJ0T7G2OP/74
xPPYIYbuzyJaD/ZfQf7Jq89vNjwntlWNADurkJgGnTW/onkSHzo09nhXA/tU
7KVDYN8Dfw9tIYQQQnROsCFB7874nsTQoUOD96QRrQM2oPhU4ItEHbNPKL5B
rQq2S/i/VS03sLZEOTSLZudXNk98eLCt7U5gq4qvUVKMkSjETCGm+5tvvtmE
JxNCCCFEo8FHBZ9e/LDj9v/DRoR4EVl+J0JUAb79yEAh89JQ8K1rZlziZudX
Nk/iRxNHoDtBjATiT2SBfohYNa3qNyeEEEKIYhBniRgHxC8iPh1/E4uX+QE+
vyGxYYWoCuRw4j2I5oDctMIKK9T9GE2F2HR+3L44iLWRZ180IYQQQnQO8Ash
thk+QMSDJU4YsaaEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghsiBuE3u3/+tf/zI77rij+eGHH1Kv/+6772ws1+7EQQcdZB588MGG
5tEdyzUNlXnXJLReP/74Y7PnnnuaTTbZxJx99tk2xn5n4scffzQ333yz3R91
1VVXrftxmkreMUW0Ls36Dq+//nrz7bffFrqX/Zdfe+01+/8vvviijfv597//
veHjR7NgDz72F1hppZXMpZdeWvfjiG7K66+/bu666y7zwAMPmEceecTusUjM
sxdeeCH2+pdeeslez3fIj2uZc4XA+MEeJq+++mqVr9AO+owZZ5zRbL311sF7
84wYMcJsvvnmDXumVuTiiy82G220UUPz6I7lmobKvGuSt16///57s95665mZ
ZprJvPvuuw18smoh5v/kk09u9wRYfPHFg+6hP0Zmyvv75ptvgtJv1TFFhIFM
zTw4bo+9UJg/P/PMM7nva+R3+Nlnn5kxxxzTjDPOOGaGGWawcfRXW201+5t/
/vlNz5497Y9z6BI4zr+LLLKImXLKKe03tuWWW1rZp1+/fvZvfo8++milz1kH
yJ9LL7102zsRV1eIOmAPh/32289MMcUUti3yPe69996Je83fcMMN9hvl2rnm
msvsvvvu5sMPPwzKa+6557b30d81io033tjuX55nbx7G8nvuuadhz9SKoPOa
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
iIPm8snzc/Hmk2i1MYW2QHkx/+Z5+Jc2ghzHvawHI0u4vXGL9Kuh5Ek7TecN
I0aMsOeTYsAWfQ/WiKk7Yi0lrWXlSZvyZ+5Lv5M3ZndW/bp47ci4ZfbspSyJ
/eF8f1w7QZeAzBbnF0c7j44peb9jyiL6nfDj/9GxZsV4YH2FGAVurYr5PfoP
YjL54B/q5FXGZtZhWCun/+cY4w/7frGmh8xBvUe/XdZQnVwf+sxlvvGQPjRv
GZQpa9EaMI/KWpfOC/0bPhLMEZGr+DeqI2Wuia6J7xm9vT+nykOeOQXPxXwn
akvN3Ii2mqVj83H38H7867f36HnyIG+nJ+E4f7s8Oc+5rG+GtKLP6qfr4G+X
pj/3Q1+epO+Pkke/F1euPjwL17nn8cvAp2i9FC0j7uM6V1+k4esE/H6Wa1wb
d+08rg5DyxxCyz2pzP1yc+8fN+dw7xvXfv36ibvGx33X/ND54ksQolfJ2zay
8kd2y4o/3MxvyVFU/gH8aJhHRG2Un3zyybY2Sf/Kz7VH3sX1uRyjP+ZdeQeO
J9Ul5caaHWsDXM+1zDWriglalFYdU3gmbN1C7X+LrP+E0si0q8gLXQRzRPxA
0vR8WWkTvwDZhPl/kTjjIfXL9+H79ueFNPhuXN8WbbdJtgJ+Oy/6HWMXQT/I
9xAacyeavsub50/y8Sd/9FroLpzfGPn6a/Eu3ei36/vQhjxz2W88qw8tUgYh
zy1Eo8g7p2DdJjQGf1cDHUaIryDffpLNTxLduVzTCC1zyFvuKvP6yFOvjjLy
j2gejaqnIv1qK6RdZV7o11mvT9pfNiRt1kBY4y4aq0HfoRCiK8AcxMXvDgE7
ppC9WroirOOG+FawBh/iuxylO5drGqFlDnnLXWVeH3nq1YEtheZdrU/eMSWU
Iv1qK6TdzLya8R76DoUQXQFs3rEDyrO3OPon1iu7E6zpYpObZSvNmrK//00o
3bFc0wgtcyha7irz5pOnXh346hIDK4+/kKiHImNKFmX61TrTbmZezXgPfYdC
iK4C+1PgNz148OBgfwFi3uL73J3Ar5tYvVlg61805md3LNc0Qsscipa7yrz5
5KlXwNaf2ArEL/JjJovWo8iYkkWZfrXOtJuZV6PfQ9+hEKKrQRwVYj+tv/76
NqZVVjwQ+lhidXUniOWVFWOpLN2xXNNQmXdNQuuVeJDslUncX3y6q95fTTSO
vGOKaF30HQohhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCdC++++47s+6669b9GE3loIMOMg8++GDdj9EwVKeNpTuW
bxpVlP3nn39uBg4cWCoN1UtHunpfJ4QQQhRhxIgRZvPNN6/7MZrKxRdfbDba
aKO6H6NhqE4bS3cs3zSqKPvXXnvNLLLIIqXSUL10pKv3dUIIIUQRFl98cXPP
PffU/RhN5eeffzZTTz21+eqrr+p+lIagOm0s3bF806ii7KuQf1QvHenqfZ0Q
QgiRl1deecX07t3b/PXXX3U/StMZMGCAOeWUU+p+jMpRnTa2Trtz+aZRtuzL
yj+ql2S6al8nhBBCFGHPPfc0hx12WLtj9957rxk0aJDZbbfdzN57721/e+yx
h9l1113N4MGD7TnG06FDh7a77+yzzzY77bSTTXOvvfay1++8887mvffes+fR
y+6yyy72PD+uxV4FXn31VWv77/LcfffdbT7cf+ihh5q7777b/Pnnn+3yi7uH
NHfccUd7z6233mp+//33xHd/7LHHTL9+/aooxpbCr9POUp9J97VancZ9M2+8
8Ybp27evPbfvvvtm/ni/hRde2Pz444/2/qJ1VKa8jjnmGJs+dcs9Tz75ZOp7
Dx8+3NY31/PvRRdd1O582bIvK/+oXuLrBbpqXyeEEELkhfF3+umnb5vPRsFW
YssttzRjjDGGWXvttc23337bNl5/+eWXZtNNN7Xn3n///Xb3kdaCCy5oz003
3XQddLEvvviiPbf66qubUaNGtTuP7/LWW29tz2+yySZ2DsLv6quvNlNNNZWd
l/j5Re9ZZZVVzE8//WSPXXPNNTb/Xr16Wb1wEn369DHPPfdc7rKrgq+//tp8
//33laaZVKedpT79+xpdp4888oidG4eSVL5DhgwxM8wwg7nuuuvMN998Y379
9Vfzww8/2LLmPZiXc4zfF198YS699FIzxRRTmKuuuqotjaJ1VKa8eFbqgXtJ
I4nPPvvMTDPNNPa6VVdd1bbdOMp8T2XkH9VLer1AnX2dEEII0SqMHDnSjstJ
YC/BuHrggQd2OIfuvn///rE2FR9//LGZZJJJ7L3kEYWxHxt95htpeTJviXL7
7bfb48suu2ziPcQ5inL//ffb48yLfvvtt9j8jj32WKtrrYPTTjvNbL/99pWm
mVannaU+o/c1uk65jvSYx4aQVL4LLbSQeeGFFzocR/dP+vig+6CT9331i9ZR
mfJiTY5rJp10UvPLL7/EXnPUUUeZ/fbbz1633XbbxV4DZb6nMvKP6iW9XqDO
vk4IIYRoFYgTe8UVVySeP+OMM+y4esghhyRew5wljhNOOMHeO8sss1i9J+CH
yxzlo48+KpTntNNOa8+x5pD3nqeffjo2v08//dRekzQHaSQffPCB1TU7W5sq
SKvTzlKfofdVUafYF5EW94QQV76UA3PmOLCpIv1LLrkk9rwfl7hoHZUpL2yz
FlhgAXtNdN3DwZreOuusY+677z57zWabbZb4bGW+pzLyj+olvV6gzr5OCCGE
aAWwmyAmUJLeHs4666zYsTskvhL2IfPOO6+9f5999rHHdthhB2tvlEZSnuDm
Ag8//HDwPXPOOac99/rrryfmyRyCdYw62GKLLewcqQqy6rSz1GfWfVXWaR75
J+Sb8cmaZ/sUraMy5cX6wXHHHWevodx87rzzTrtWiR8K12Ttr1P0eyoq/6he
wuoF6uzrhBBCiLo5/vjj7dwvjXPOOSd27F5zzTWD8nB6yXHHHdf65uJPn0VS
nth/jD/++GbMMce09vsh97CfInljAxPna++44YYbgt+pavDPxhfg2WefLZ1W
Vp12lvpMu69sneJ/8dZbb7X9kD/J59FHH207hg9JXAyxkG/GJ+88u2gdFS0v
/Eywi8LGceyxxzbjjTdehzjJ22yzjS03fFWcn0kaRb+novKP6iWsXqDOvk4I
IYSoG3T5zzzzTOo1buxmrsB4/Oabb9rYRYzZoWCT4ezcQ+LSJs0XnC088Y1C
7sH2ZYMNNjCLLbaYeffdd1PzdL7TzDXqgFhQs802m3nooYdKpZNVp52lPpPu
K1unyFwTTTSRTTfrd/jhh3dIM+Sb8Sk6z85bR0XLi/ULYvHBaqutZtM488wz
286zLuZkC9Lg/NJLL536LEW/p6Lyj+olrF6g7r5OCCGEqIunnnrKxvTKwo3d
yyyzjDnggANsnKwllljC2i2F8vLLL7fNKc8///zgPMmHOGHYdyy11FJ2rYD8
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
tTb17r7dd9/d7LTTTmbHHXc0hx56qLn11lvN77//nvguxxxzjM1jr732svc9
+eSTqe8+fPhws8suu9jr+feiiy5qd/6xxx4z/fr1y1OcnQK/zuuqbyhT5529
vuO+vTJlCe+99571ccjDH3/8Ya677jrTv39/s/HGG5tDDjnElhF533TTTebp
p582v/zyS9v1ZdtLUv777LOPGTJkiBk2bJg5/PDDzaWXXpp4T9m+omxdl5V/
OmPdd4V6h67arwshhAiDcWL66ae342YUxqIZZpjBjk3ffPON+fXXX80PP/xg
1l57bTPGGGPYcZtj/L744gs7Xk0xxRTmqquuaksD+4Itt9zSXs993377bdu4
9OWXX5pNN93Unnv//ffb5Y1P8NZbb23PrbLKKuann36yx6655hoz3XTTmV69
elndaRI8L2Mu95NOEp999pmZZppp7HWrrrqq+frrr2Ov69Onj3nuueeyirIh
8Ezff/99pWnG1Xmd9Q1l6ryz1nfStwdlypL54/jjj5/4fj7IjHPPPbeZaaaZ
7Pw7yssvv2yWXHJJmxfzYEcV7SWa/3zzzWdl09GjR7cd5z2pzymnnDL2Pijb
V5Sp6zLyT2et+65S71Bnvy6EEKJeRo4caccPn4UWWsi88MILHY6jb2PMwYfU
B52a78uLjQHXH3jggR2u//PPP63OMc4Owd3n6zLvv/9+e5y5w2+//Zb4Xjvv
vLO9btJJJ22nt45y1FFHmf32289et9122yWmdeyxx1r9ax2cdtppZvvtt680
zbg6r7u+o/cWqfPOWN9J356jaFnOM8889r5TTz018xkeeOABM8EEE9i5IPPO
OJhXzjnnnOb6669vO1ZVe3H5n3HGGYnPuOGGG9o0/bU6R5l2U6auy8g/nbXu
u0q9Q539uhBCiHoh9uoVV1zR7hj+oYxZcWDTwNhyySWXxJ7344oyvnE9NhVJ
MI/wSbtv2mmn7aCP9sEmYoEFFrDXxekQsblfZ511zH333Wev2WyzzRLT+vTT
T22eaWNpo/jggw+s/jTJFqQIfp23Qn1n3ZtV582ub8pjhx12MI8++mjs+fPP
P9+ef/755xPTiPv2ohQpy0ceecTaRnFfln0P6wpTTTWVvdbX/ftcffXV5uST
T7b/X1V7cfnPMcccqT4w77zzjhlzzDHNRBNNZOvGp0y7KfNtl5F/OmPdd6V6
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
jDGGOfjgg0s9g+QfIYQQQnRl9txzT3PYYYe1O3bvvfeaQYMGmd12283svffe
9se+brvuuqsZPHiwPcc8bejQobFpYuuEL0Me/vjjD3PdddeZ/v37m4033tgc
csghZq+99rJ533TTTebpp582v/zyS9v1b7zxhunbt699/n333Tfzx7ssvPDC
1h4rLf999tnHDBkyxAwbNswcfvjh1q4o6Z5XX33V+km4ctp9993NTjvtZHbc
cUdz6KGHmltvvdX8/vvvie+MXNCvX79c5dQZYB2jT58+di2DMspLlW3y7LPP
tnVCmrQnrt95553b7PFYY9pll13seX5ci+0dxNUv+XA/9cs+h8gdUepuE6z/
IAO5dyiC5B8hhBBCdFWYh00//fSxvhnY4Gy55ZZ2LrX22mubb7/9tm3e9uWX
X5pNN93Unnv//fc73IvcMP7449v9x0N48sknzdxzz21mmmkmO8+N8vLLL5sl
l1zS5oUM5EBGmWGGGazM8s0335hff/3V/PDDD/ZZuZb5M8f4ffHFF1aOmWKK
KcxVV10Vm/98881nhg8fbkaPHt12nPfceuut7RpG3H2Anz7XkOcqq6xifvrp
J3vsmmuuMdNNN53p1auXXc9IAjnhueeeCyqnqqF+vv/++8rTpW4oj0suuST3
vY1ok6S14IIL2nPUib+u9OKLL9pzq6++uhk1alS789H6xcYMWZjf1Vdfbaaa
aiorU/v51dkmkMd41549exauW8k/QgghhOiqjBw50s7PksAOhzncgQce2OEc
8yzWauJsdeaZZx57H37vWTzwwANmggkmsHM+5rBxMHecc845zfXXX992bKGF
FjIvvPBCh2vRuZM3vuQ+6NZ9n3qX/xlnnJH4jBtuuKFN86KLLoo978rJX/O6
//777XHm87/99lvsvccee6xdk6iD0047zWy//faVpolMMumkk5qll1660P2N
apMff/yxmWSSSey95BEFuQR/I2TltDyR66Lcfvvt9viyyy6beE8dbYJ1KacD
KILkHyGEEEJ0VYgvfMUVVySeRyZgHoUtWhLMlaI88sgj1gaJ+7LseJgro0Pn
Wn/dxwd9+8knn2z/H/uqJJ8SbN3S1h6i8YVd/vjop/mavPPOO2bMMcc0E000
kfn00087nE8rp2mnnbbD2lUU0uOapLlwI/nggw/smliSfV8RWGfjfS+88MJC
9zeiTTpOOOEEe+8ss8xi12SAtoS89dFHHxXK09Uva0h572lkm2ANiPXUIuSV
f7Adxa7vzDPPNEcffbS59tprzVtvvVUobyGEEEKIRvHZZ59Z/4wknTecddZZ
sXO4NNscfLCZt7E+w73PPvts4rWkyzXrrLNO0DOHzAez5J+4/PHVyGLllVeO
1edDUjkB61acIx5AErw/axB1sMUWW6SufeVlq622snHIisQwK9MmQ2LFYSs3
77zz2vvx84IddtjByuxppNXvAgssYM89/PDDwfc0o03gE5WVRxJ55Z+VVlrJ
5kW9jzfeeG3/z1oc8qUQQgghRCtw/PHHW7/sNM4555zYOdx6660Xez3z1v32
28/+/3HHHWfvxVc8CTcXPe+883I+fTJ55B+X/4033ph57THHHGOvxU7KJ6mc
2Edy3HHHtbKg7ycf5YYbbjBrrrlm5jM0AuJI4JOSJqfmAbs3bLuKUKZNhpbf
fffdZ++nXoiHQHyELJLyJB4Hfm6sDeJ7FnJPs9rEZZddZvO/5ZZbct+bR/7h
HSaffHIrt7o1NWwNnR0qsSWEEEIIIVoB5v5Z+yX6czjme+eee66du8VBjACn
B2cOhA4Y+6o4fT5rOaTNL2985DRC5Z9o/iH7Rl555ZX2WmIh+MTNddF7b7DB
BmaxxRaz++Ck4Xz+KbM6wHZpttlmMw899FDptFjbSGofWeRpk9QzcS/efPNN
G1ctT56bbbZZmw9OSIztJFkG2T5pjl93m7jjjjts/ueff37ue/Ou/3B9XJy/
FVZYwe79lCbnCSGEEEI0g6eeesr6B2Th5nDM14jfS3yt2WefPfFef63H2Ywh
O/h88sknbfJHkRjJSYTKP9H8fd+NOO6880577TjjjNPhnCsnYoFts802Vm8/
zTTTWD+W0D1ssFfCdyIvjz/+uDnppJNK/4jx4GyW4mL6hUJMcmSpvORtk8ss
s4yN9UzM6iWWWMLaoYVCTEFX9yHygcuTfPBDI27EUkstZdd+yD9Ovq+zTQDP
Sf744uSlaPwD1sCIVU/sB+pm/vnnt8+Q5lslhBBCCNEMHn30USvTZBGnw8ZX
nrmfDz7bxLAmbhX+NPxc3Oq4eF7ohCeccEJ7Psv/Ig+h8k80f9Y/ssAXg2t5
R59oOX344YdmueWWs38feeSRwc+N3eARRxwRfL3jrrvusrHQyv6IO+DiSsfF
ng6FeT7x9PLuXVqmTbKWt/zyywfnRdt09ozEGciKE+3y5L7nn3/eljnyWtp9
dbYJOPHEEwt/W3nlH9ayaDfIg+SJDxB737rYJry/EEIIIUTdzDXXXFYPnga+
EXH7yWPb70NsLeyniGHtfuh9iTnMukLcnBpfGtI//fTTS71LFPzak+JfJ+VP
vOEsuIZrWQPz8cuJfXXYmwg5gPlyFsTPIlZXGbmjDKwh9e7d265xlYX5PWVR
xJYuT5v0bdFC10nY4wn5BZCZSAs/oJA842JuZ91TV5tgLyPk+yLxB/LIP/iN
4f8z2WSTWVmN2ChO9nW6CMk/QgghhGgFjjrqKGu7kwbxbJm/YMuSBfs9xrHt
ttsm7kWCbQ7n4taT4rjtttsyr9ljjz2C4y+7/Nn7NAts+fBzj4tZHFdO+F9w
PetFWfGlWX9K2/OmkSCjEg86xAcqBPb15L3T4l4kkadNpsW/TgLftKjs/tJL
L1l7RtYr0mwwXZ4utkcIdbYJ/KJ4p3/+85+F7s8j/2y33Xb2neL24nK6CMk/
QgghhGgF8KvGvxo/6yTYv5T5S9x6TxR0vknzUeISkwbrC3E2UewdGWKvdsEF
F9jYylk4n3TiNITg8k+Ln8w+Odj2JMl4SeU0cOBAe3zLLbdMfQZ84tP2vGkk
gwYNsv4/VbLJJpvYvZLYNykPedpkmvxDzOfdd9+93TFiaxMjwbdZw6YtaQ9T
P8+s7yDknma0CWLokQd7+xYhj/yDvSt5EYciCt86a1CSf4QQQgjRSuCrMXLk
yMTz6OOZvzBnS4PYCEl7OTIP6tWrV2Kcaeal+K4jX7C/aVysKPTm2NGF6N/d
ehN2TiG4/HnGt99+u8N55svMjVdcccVEnT22V3HlxPWzzjpr4r5B8MUXX1i/
+LQ9bxoF787aD7ZWVYL8wbrKqquumtsPKLRNJtms4YNPDIbofrrYgGHrRkx2
H8oAmzTSZM0mLc8BAwYEv0ddbQJbRuxNk2LUh5BH/mHdBzs7/H0oJ2JA4ntE
HHQXYwK9AfajxBwRQgghhKgT7L/i9h7FF52YVczBmL9g27/55ptbH58o3333
nbVXYj8T9kAcMmRIu3i9zMWwR3N+0MSOZn2G+V0U5nn4jbBGtOiii5phw4aZ
m2++2c6liFXMfeiSn3jiicR3ueiii+y1PXr0sHmxpw2ykPP1SMPl369fP2uv
RN7EsRo6dKhZY4017P6gcXLZqFGj7P6Z5BUtp8svv7ztmvvvv9/KAi4OhO8X
w9oL8mMd8F6Nypv1POyi2F919OjRwfeFtsmePXvaWHWsdbgf79KnTx8bcw3Y
j4b1HbfP0zzzzGPbo5uHYydGfY899tj2PP9Sf7Q7wAYtmicyOv5f2HVxbxx1
tgnSwReH7wj/u6LkjX9AvsSuQO5ye5/yXqzZEvdh0kkntfZ4de3xK4QQQgjh
YF7KPI3YbVGY6xNTy60L8DfXxs1jOYaOn2u5JwrHOO/SibvGh1hSxKzixzrC
V199FbSGgM0UeTk5xc87FJc/sltW3F6eK66cfPst/uac+zcKa09Ja2eNhvdj
P85GgXzFfBjfqSR5wSe0TYbi7klqo9Hzfv35bcjVYVobrqtNXHfddXYdBvmv
bLzpovGv2R8MW7c0+0UhhBBCiLpBPx5nFyQaDzGU8+xb0xm5/fbb7XpMnthy
3blNFm0TxJ9mrQp9QVmKyj9CCCGEEJ0BYvFiHySaD7EHQv2UuhPduU22QpuQ
/COEEEKIrg76eey9RPPAVgi/kjJ+Gl2Z7tgmW6VNSP4RQgghRFeHWL34bIvm
gT88MY5FPN2xTbZKm5D8I4QQQoiuDnvTr7DCCnU/RreCOGR333133Y/RsnTH
NtkqbYL4eMRSFEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCG6C9dff7359ttvC937/PPPm9dee63t
7xdffNEce+yx5u9//7t58MEHq3pEIUQn5scffzQ333yzGTRokFl11VXrfhzR
jfjzzz/NE088YQ499FAz//zzm1GjRtX9SKIJdPY+R3MpIRrLZ599ZsYcc0wz
zjjjmBlmmMGssMIKZrXVVrM/xoqePXvaH+foQzjOv4sssoiZcsopzRhjjGG2
3HJLmxbfa79+/ewxfo8++mjNbyeyOO6448yiiy5qXn311bofRXRhjjjiCDP5
5JPbfmHxxRevNG3mOaeeeqp57733Kk23kVx66aXmmWeeqfsxugX33HOPmXvu
udvGpQ8//LDuRxJNoJF9Th6KjLGaS4ko9FnHH3+82Xjjjc1SSy1l1lprLXPA
AQfY+btj2LBh5ocffqjxKTsfJ598sv2+DjroIPPLL7+0O0dZIhtxfs899+xw
75tvvmmWX355M9lkk5nffvvNHkPX1qNHD3vPs88+25R3EMVx8wLmj0I0krPO
Osu2tWWXXbayNN99910zxxxzmIknnrhTzRE22WQTM9ZYY9kxTDSeL7/8sm0u
+dVXX9X9OKJJNKLPyUvRMVZzKYHcs/nmm5tpppnGjhUvv/yyGT16tPn111/N
Aw88YGUhbLCYx/fu3bvux+10oBdB9kliqqmmst/fMcccE3semWmxxRYzt956
a9uxueaay97zyiuvVP68olqYM6In++677+p+FNHFue2222y/sMoqq1SS3uuv
v25mnHFGuw792GOPVZJms2Bus//++9vyOPjgg+t+nG7BBBNMYMv7p59+qvtR
RJOous8pQpkxVnOp7gt+Kci/G2ywgdXfxMEaBXZarFNsu+22TX7Czg3f4447
7mj++uuvxGumnXZa+/2xhpsEMmlUt4FMxT1RvyAhRPeGeQD9Aja0Zfn5559N
nz59zNRTT92pbTfR6VEmI0aMqPtRujzoUClrdKeie1Bln1MHmkt1T5hPYx+w
/fbbZ1574okn2jZy4YUXNuHJuhch8o8P/nqt8s1effXV5osvvqj7MRpCV363
ZvPII4/E2niK6mCNpqq5yJAhQ2xal1xySQVPFk8z2gTrQAsuuKD1sfz+++8b
mld3x41lkn9ah0aPYVX2OY0irQxaaS4lmsMNN9xgZR98xhgfsnAyPrbgolo6
s/yDDM26IH5KXY3Qd0tb2wu5LvT+zs6uu+5q22zSOnN3p4p2UNVchFiVk046
qVl66aVLP1MazWoTd999t83nsMMOa2g+nY2q+57uIv80us+uKv1mjM+tJP/E
lVtWGbTKXCpK1e2r1dNrZr6ffPKJmWSSSaz88/TTTwfd89FHH8n3p0GUlX/e
f/99c8IJJ5hNN93UbLTRRtamMQmuxSb+P//5j41zgW3I559/Xui5hw4d2ubv
ig3wc8891/a77rrrbFxMfJZuuukm+0x//PGHtaO58cYb247z//D777+bkSNH
2ntuueUWc/vtt7flQ9yHiy++2Oy2227WT22//faz15YFm8Ldd9/dpknZMRd7
6aWXUt/N9ZF8Q2effba1eebdGO9ZI8WO9Nxzz23LI3rdRRdd1Hb8nXfesf50
//jHP6zfJfby6Nm33nrrzDoktizPSkzADTfc0Jx00kn2fspyjz32MKeccor1
3wt5zzxQf9TbmWeeaY4++mhz7bXXmrfeeiv4/p122smW56efflppHpTbDjvs
kOibf/7559vz+DBW/U5pUPcDBw609hWUf9x3VqYdMBZcfvnlZpdddrF1u9VW
W7Wt2ZSdixA7LXS9v0wZhrSJsnk4WAOaaaaZEs+XaUdVPWMc2J9ju0eMYeqY
b5y+M45Gt7ks3FiG3xjPse6665plllnGPjv5JlHluAR5+8iQ/MuUW0j6oWNK
9Pq0us4aw/I8m6PKPgf72irmCUljbGgZFJ1LhRLaFvPUf8h3Tt/D/cQR5v9J
jzLYZ599bGwY4la4tQ/effDgwWbNNdc02223nV2Xb3R6oe+R97vIYptttrH1
nceXh3ZB3y+qp4z8079/fxsrmz7YHePn9wOADnS22WZr82NGrqANEXf7gw8+
yPXMzBEWXnjhtth1+AngRzjzzDObvn37WnmFvDjH8auuusp+G4yLfCscn332
2e26NHCONj7hhBOaf/3rX23jO/Fr55tvPrPeeutZ/Q3971NPPWX90VZcccXC
8XhJH1t1Jwe88MIL9nno+9PejeN8C87Ond8VV1xhx8TxxhvP/o1egZgVcdfB
k08+aXXr7jhzJWKib7HFFpl1SN9PGbm28vXXX9tnGn/88W2/uvLKK9t7Xbmm
vWdeVlpppbb3i74rbZCxLIuQuW6RPCiDeeaZx8YR8denGT+5n3G6Ee+UBG2Z
OQLjNGOea0fROVeZdkDMmuWWW87OK91zfvzxx2aJJZaoRP6hvCiHkDheZcow
VP6pop4Yj93cPI4y7aiqZ/QhrjT9zr///W/7fMAaFmn7z9LoNheCG8vWX3/9
trbD2h79ErERLrvssg73VDkuQd4+MiT/MuUWkn7omOLIquusMaxI2Vfd5yAD
lJ0noJOIG2PzlEGRuVQooW0RnUlo/Yd858QtI16nS48+AzkEWeuQQw6xMW04
jsxLbBj6Es7x7pQX+Ub1QFWnF/oeeb+LLBhnxh57bHsv7yTqp4z8Q9uJctRR
R9njxIuLgj0L4/rhhx/e7vhDDz1krx8wYEChZ5933nnt/XH7PVxzzTX2HP1b
FNYjOE5MKXQ90WfkWte3Yq+L7zVzEr+Nk99EE01k+xJ0QnlhLZP+Ncp9993X
7ljauzFO8FycJ+4nOh7GC8YO9gCMu87psID9VIhpznFizkdJqkN0I9xD/x21
WWVOwfV77bWXLSfGZqdHCXnPEMiPfR6oDxfbibFv7733tnnTj/kQ+wM9kfsx
V+Ba+kF3DPnVrWkXycOBbpbvCLnY+XgwhlJe6J9d7Piy7xQC/pTI7FGWXHJJ
mybfW5Qi7YDy4p34+bbLLhZTWfkHu7fpp58+87q8ZZi3TRTJIwn3naA3TqJI
O6ryGaPQ7zDnpu1E4dtm3Gde4WSMRre5UNxY5sfSYt4xxRRTWLuT6DpQ1eNS
3j4yT/5Fyi1P+qFjSp66ThvD8jxbI/ucsvOEpDHWkVYGkHcuFUrethhS/3nq
/ptvvmmLx8h6fhTWLznOedbDorCe456vUenleY/Q7yIEZDLSQb6v2obv7bff
rjS97kKV/j/ML5Bv0TlE+wxsxpzOi3vc7/TTT7fH//a3vxV6dtpwUt+CHO9i
ez/88MPtzs0yyywdjqNniY4rrE86XVscrE9zHj1KHpifcB+2ML4/NPqGkHcD
bAU4jy9dGu66O++8s93xpLgzSXVI3XE9eq8orIc53UmR9wyF54yLA4YeFN1Q
tI+nX0c+dXqbtF90/M2Thw/lwDXsW0ZfTZ+J7jDNt6RMfnFQd8xLmbdGIQak
r5905G0H6Aq5Ht2pT1W2+HPOOadZaKGFgq4NLcOibSJPHmnccccdNm10xmkU
aUdVPWOUzTbbLHZeBryDO96MNheKG8vidLJO1kXP7qh6XMrbR+bNP2+55U0/
a0zJW9dpY1ieZ2tkn1N2ngBJYyxkjeN551Kh5G2L0feIq/8i33mS7IfsyHG+
V597773XnqP/a0R6Rd4jdK6VheuD1llnnVLp+Dz++OO2nYj8VB3/AD0b59BX
OdjDiTVXfGjifthe5h2fIatvwb6V89EYg+j/0ANynD7YgTwftbdB/8w1SeuU
yD2cx8Y0Ly7mP3okbEjj/HWz3s2tz//3v/9NzSvpurx1eM4559hjrClHoc/n
OHaHRd4zL/gjYFeHLgU7OnTl5IGPYJQzzjjD7Lvvvm0/t9c2Nk/uGPtixe27
EJqHD3NCxiy+KfTxSbZOVeUXB2O1n6+z84rr2/O2A2dvEvduVck/tCVfH5tF
SBmWaROheSTh5iP45WRRtB2VfcYo6Ci5L0RX0eg2F0pa/AOne0WedFQ9LuXt
I/Pm3+hxN2RMyVPXaWNYnmdrdJ9TZp4AaeVWVP6BMt9CkfE6q/7zfudJ7873
mSSvuPW/OPmnqvTyvkfoXCsL1i9JJy3mKD4C+LThO3bsscdafzDWArHzi9tf
Ct0ya4TjjDNOqWfrrjj7Rso6FMo76Zt142b0m2UMx0azarL6FreGTf5uTMR+
GB0OOgD0CfDZZ59Ze1JHdC/xpLgs+GFyvsh70cbx43N5YLeCzjk6FtUp/8TV
IevKHMPvKQrxbfyxI897hoJPxNprr23HTNLCBpeyd7q7pHJyhPh6lM0D8FPk
2tNOO63h75QFbR6dKespReaice0AvSzHsK/yqUr+QaeALUOIjUCZMgz1/6mi
ntweDkm+uD552lFVz+hg3Yl7GFPz6p4b0eZCSZN/XH/NnNJR9biUt4/Mm3/e
csubft55XlZdp41heZ6t0X1O0XmCo4z8k3cuFUqR8TpP/Yd8560q/+R9j6rk
H/y7SAc9XBLI1jwzOiy3/oit0V133RXbF2PjzJqp5J9iOB0DMmYoxDJK+mad
L1r0m2Xei+1JkXlvGu57SPNTdWMGdr70X8svv7w9jh8bx4lrwLtH5yV8E7Qn
zr/44oux6dI3ct63Iw2FuR06YaeD5heNC5D1bqHfpPPt868j9nyeOqTusH+l
XIgLAZQTz8neJklzyKz3DAH7XsYm7JnZZ5u+3c2N0dlXIf9UkQdtiPnnAgss
YNs8tsKNfKcksP/BR5T+ljV7xrqkvj1vO3B+qHG2VlXJP0ceeaRNx7fF9ilb
hiHyT1X1tPrqq1sbhZBYBHnaUZXP6ECnyD2sQYXKP41sc6GEyD/MKRxVj0t5
+8i8+ectt7zph44poXWdNoblebZm9DlF5gmOpDEWssbxvHOpUIqM1yH1n+c7
d34zVckrVaaX5z2qkn/wQSKd0H0Q+Ea4Pmn9nz4NuYg2K/mnGG6Nl3EzFGfX
FPrNstbNMeIYVYnrW9LmB24d+J///Kddx3ax3bD34zj+PcR383G2pvhXxuHm
aMSqLAvtGJ9i5juOrHcL/SbRpcdd59LP0+8yL8IvA50SNrHE46HfIEZk0fcM
AZ0bejjWk3ycf2NZ+adsHthL0F9RLvhMYrPBd5IUw6yKd4qDOcKss85qbUgc
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
evbsaeMf/j+oPge/I/r2ikj5cAzo1q1bYD485wfGZxhnFUk3xuEaN24c2F8w
VzF+e+655yasWyCFRcdIyRX6LhaPoUOH2vinPH1yRSS5AQMGlOl77UXONLVC
RUSKkY6Rkiv0XSx8zHEzxkZeHnWcqXWTSh8bEUmOuV/+vujjE4Z+xVHr2ouI
FBIdIyVX6LsoIpIe5LyybpLa1UH52azJY31ulDx7EZFCo2Ok5Ap9F0VE0oc+
r67+E3V4+Dc1cKlXQj2VsN4kIiLFQMdIyRX6LoqIpAdr61h/Tk4xNUeptbhg
wYK4d0tEJCfoGCm5Qt9FEREREREREREREREREREREREREZH0eeaZZ8rdj/WD
Dz4wixcvLvn3okWLbO/Y5s2bm7feeitduyiSs/Sdj1cu/f6//PJL2+uiXbt2
pm3btrYHdirooTBq1Cj7+HHjxkW+TxKbOXOmufDCC02rVq3MIYccYvr372/r
UomISHFavXq12XDDDc0mm2xidtppJ3PooYeao446yv40bNjQbL311vaH++jR
y+38t0mTJmarrbayNT06d+5sn4vrkEaNGtnb+HnnnXdifncimVXs3/nbbrvN
HHjggeaTTz6J5fVz6fc/evRo0717d9vzjWMm+3PFFVdEfvzXX39tWrZsWfJe
WCMc5b44xf35J0NN3XPOOcf2FrnvvvtKPhd+pk6dGvfuiYhITO688057Lrjm
mmvMH3/8Ueq+X3/91cZG3N+3b98yj12yZIkd4/zPf/5j/vrrL3vbP//8Y6pW
rWof8/7772flPYjEqZi/8/Xr17fvm3mJuOTC73/atGlml112sXWOsHbtWjNl
yhSzbt26lJ9r7733tu+Fx6dyXxxy4fNPhL4ixKUOcSTnOuboNP8jIlK8mjVr
Zs8HYbbZZht7fhs6dGjg/cRM1HPn/O/sueee9jEff/xx2vdXJBcV63ee+Rb6
N/z888+x7kfcv/82bdqYww8/PC3Pxfw67+Wll15K6b445MrnH+Sxxx4zNWrU
UG8REREphXNWr169zL///hu6zfbbb2/Pt+Q5hPnoo49Kjf8RU/EY77ogkUKm
73y84vz9f/PNN/a1zzvvvLQ83xlnnGGfL2jtUKL7pLRatWrZNWEiIiKpihL/
+HHO0bVg5j311FPm+++/j3s3xOg7nw2Jvu9x/v5ff/11+9oXXXRRWp7vzDPP
DI1xEt0n/8+yZcvs7+mUU06Je1dERCQPKf4pLdFcWTYx38baLNZgJZIr+5tJ
ufAe8/E7n87fW6LnSsfrJPu+x/n7v/fee4s+/sn055+qhx9+2P6eevbsGboN
68bilgvHLhERKaui8c/KlSvNsGHDTIcOHczpp59ua22HYVvWpXbr1s3meVx9
9dXmu+++S/p6rDl+9913zeDBg23NOsaIqQtFHaazzjrLPie1Y8OQv8J5khya
Pn36lHlN7qd20BFHHGH3n3zyO+64w5x66qlm7NixpbYlF5Dn6Nixo33Pl156
qfnwww/T8j6dG2+8saSG0QsvvGAWLFhgf9y1Xyr7m8q+RN02yu8gkWSfRybf
Y5Ao76e833nqhjz66KOmd+/e9vmpy+tf28467UmTJpnnnnvOrrOjbhXPyfee
ulvPPvtsye38P9avX2+fh8c8//zz5sUXX7S3L1++3NY8Oeigg2ytAOpjsU6C
GlnJ9tXP+xk88sgjpe5L5+sk+74j28cch8+GNfa8No93+0YdbCfKZ+xV3vgn
29+lTH3+zN3wN0Zd0dNOO80MHz7cPp79ueyyy8zIkSPN33//Hfr4sM+En7lz
55oxY8aYY4891j5PRV6fNVju90Q9Plf7YunSpebpp5+2v6vJkyfb/3pl89gl
IiLlU5H45/zzz7frdTnnudv48Z8r8eqrr5rdd9/dxjHgXM75gLrb3muJIDzW
1SHi58orrzQ33XSTPU9T93TzzTc31atXt9v5cR665JJL7Lmdcx2Pp8aSO79y
/tluu+1K1Z3lnF6pUiX774022qikbh7nQrZ118YLFy40e+yxhz1npeN9gvXG
jRs3LqnLx76y9rt27dr29lT2N5V9ibptlN9BIsk+j1Q/k4r+vqO+n/J85+fP
n28aNGhg2rdvb+c1GAt+7733bAx/2GGHmS+++MJux7UX17W8D56Lz/vJJ5+0
49effvppyTUx+0WOGLiP3yXffXKAeB9c+/F34PbplltusfXuO3XqlHRf/YI+
Ayedr5Ps+16R339Fvxt8ftS/ZI09r0Ft5b322svWgXPzDlE/Y6/yxD/Z/i5l
6vMnzuJ13Pnmxx9/tJ9z5cqVbRxCjQke6/Yt2WfC++QzdT/8jtzrEwdV5PWJ
axgXcc/neugx1kbNuRYtWtjb69SpU/L82Tx2iYhI+VUk/uEa1ov5GG6nXpwX
5w3qzF1//fWlbqdnHdvTUyOZH374odQYsZfLT6lSpUqp9QMXXHCBPR96uXMW
r+1w3uG6httbt25txwc5/3AuYs7J2XXXXe31gxdrA9xt6Xifzj777GMfs2rV
qjL3RdnfVPYllW2T/Q4Sifp5ZOI9hon6flL9zvM93Hbbbe178Ned5zPlu8p1
F2PvDmPK7prOi/kpbqcflxuDdu+fbb11fqnHTL16tr/99tsj7WsY72fg5goy
8TpI9H1HHMcc54EHHgjMfyvPZ4xU45+4vkvp/vyZ1+AxxLbe3LTHH3/cbk8v
Jd4f8VSyOZCwzwTEG0HxV3len9+Hi839PcQnTpxob99///1L3Z6tY5eIiJRf
Otf/UG9u4403tuNr3nMreRpuTI3HuJ+7777b3r7llltGet3NNtvMbu+/BoDr
mzFw4MCSfeG8xTilF/Xw/OOZcHWXyGcIwrgq91Nz6Jdffil1H2N+6XyfcOOY
YdeDyfY3lX2Jum2U30GYVD+PdL/HIKm8n1S/8126dCkZGw9CjhD3M+bsMAfm
6tG//fbbpbZnjNl/O9d3/mtPhNVKC9vXRNxnMH369Iy+TrLve1zHHJDXFXSt
XZ7PGKnGP3F+l9L5+fNZsL2/ZgHzWG7uL6qwzwSMs3Af815e5X19d470xz+u
LgYxjl+mj10iIlIx6a5/ULNmTXufty/gIYccYvMLyFsP+iHHIMpaVZdXENTv
gbxt7mM+weH8Ts6HF+fLoOvtKOuOXQ8SxknJ4/bvR7reJ5JdDybb31T2JZVt
k/0OEknl80j3ewwT9f2k+p3fcccd7W1vvvlm4PNxrcr9rFPwct9jruEc1lpU
q1bN3s51k8N48po1ayq8r4kk+gzS+TrljX/CXiudf4th19rl/YxTjX/i/C6l
8/O///777W3kLnoRW3H7AQccEPj+giSKf3r06GHvYw7Mq7yv7+LFsPjn+OOP
L/OYbBy7RESk/FxMceutt0Z+DHkNYec9cpf95z1ytXfeeecK76uL1YKuUe+5
5x57H9sE4THkxderV6/c8Q9rQ5o0aWK344ecFPIX3HkqXe8TFY1/UtmXVLZN
9juIKtnngXS+xzBR308q33lvrmZYvbLx48fb+/377/KTvH0dL7zwQjs+z/wZ
eWJYvXp1aD+aRNelQX+fiZT3+jfV10n2fY/rmIOga+2KfMZuvibod+q/L+7v
Ujo/f+oTcBvrlbyo/eeP05IpT/xT3tdPFv+cdNJJZR6TjWOXiIiUnxunI2c7
qv322y/0vMcx3X/e45qSHPWKjmclin/IdeC+unXrlrqdXDlqJLBmmlwElxtR
nvgHrDsmZ6FRo0Yl1yVurXy63ifc9WDYOthk+5vKvqS634l+B8lE/TyQzvdY
0feTynee7+cmm2xib6NOYRCuQbnfvx4K7rqS6zeuTVnvDbeugfXv/L3OmjUr
8LkPPPDAlP4+E3E1KoI+g3S+TrLve1zHHARda1fkMz7hhBNCf6f+++L+LqXz
8+ezIFeM90MdA/f+2G9qS3z77beB+xAkUfxDjYyg+Ke8r5+J+Ced308REUmd
y4W44YYbIj/G5QxFPe8x189t1F2tiCjzP0cffXTJbdR73W233Ww+gVOR/Dc/
xl2p57Pvvvvaf6frfcJdD7J2NkiU/Iqo+1KR/fb/DhJJ5fNAOt9jVGHvJ9Xv
vFvP76/V4QwZMsTeTw1nP5enw7UwOUrU4wI5qtzOOhDqgIVx3510xCXkVIV9
Bul8nWTf97iOOQi71i7vZ+xqjAX9ToPui/O7lO7Pn3V21AtgDoY1Mm3atLFj
INSMTkWi+Ifa4EHxT3lfn1p5PJ+/N29F4p9MHLtERCQ6cpA5Dg8aNCjyY6if
w2O4nvULOu9xjuU2cp2CzjPUs/avCwni4p+g+gfnnnuuvY84yHHjkx9//HHJ
beWNf+hx4fpieDEu7eqfput9gutvnmvOnDmB9yfb31T2Jeq2UX4HiaTyeaT7
PQZJ5f2k+p2/66677G3k8QdhHJr76THi9+uvv5qqVauaTTfd1F4nOazd4DHk
zrBOOgw17VLZ10Tcfr788ssZfZ1k3/e4jjkIu9Yu72fsah4G/U6D7ovzu5TO
z5/6dPTEmTFjRujrRZUo/jnxxBPtff4a2uV9fTeHxvHCi+cpb/yTyveT+Wn6
PbCei3rdIiJSMYyFudqe1OGKytUVeuutt8rcR11V7vPWL2W+xq3zIC+c9bqz
Z8+245mMwUWpnQwX/7zxxhulbieHg3ksemF46w25/XS1i+jb4K6jxo0bZ8/b
Lv+gXbt29nZ/zSCHx3JO974vzu1cP9DPJp3vE65+kHtueMfGk+1vKvsSddso
v4NEUvk80v0eg6TyflL9znPNwv5T785/fUgPEv7uwtZcgPt4Tvrce5Gjt8UW
W9gaW2FS3ddEWBPO9syLZfJ1kn3f4zrmYMSIEfZ56LXsVd7PONHvNOi+OL9L
6fz86cvKbfQPqqiwzwTk+HEfPXq8yvv6ffv2tY/jO+NqjHOccHX5WD/IOi1v
7fB0Hruoe8F2/NBHVUREyoc5klatWpWs/eGHnB9yTMiF+PrrrwMfx7GcsS73
GOqfXnfddfY+esVRB8fdRy1Rb+8czg8c0128xQ//T58D+iVE4eIfcrWvvfZa
O75H7jo5VV27di1zHienj+15XMuWLW3+Bz3xuI3rbs4ljP+z5tjNg3FOYo0w
NVH9OKfT14HHkXN/8MEH2/x47+um432CORLeJ4+n3yI5MFwbcn6Mur+p7EvU
baP8DsJE+TyQymdS0d93svdTke8810rUUuDvius1esHzWOptc23GdW0Y+oLy
O/H2hQW5TmG9QfhdHnfcceXaVz/et/f3yvfP1ZZP5+s4Yd/3CRMmxHbMIRan
z6lby0+swDXvgw8+WLJNKp8xcT89Qr2/00svvdSO2SS6L9XX8SvPdykTn79b
o+n/oVY2/a35G/fGEFE/E4791DYgt4/fIc/HfawFZc7E+57K8/pfffVVST8f
vqPMD3fu3NnOyXAbNYSoqc36rEwcu8i7I9aknnhQrCkiItFwbOU4z/mQ8wnn
Ts6vjEnREyUM25N7xrY8hn+7tTjcxn2cr3lObg+6xiAfg3EuzpNBvdETcfEP
+QKMidGTj5yEROdMaiBxbcHaX4fxP3d9691v9554vqB1qStWrLDrhNl3ch/8
+eDpep8Ovz9qRtMn3O1/Kvtbnn1Jtm0qv4MgyT6PbLzHVN5POr7z3M/7JnZl
zinqmueg9diMO4et0+b1+anIvoa9b3d8SPfreAV93+M+5vD8vCavzevw7/J+
xm5/vb9Tl8ub6L5UXydIqt+lTHz+bHf55ZfbeSzW4LgfYgtqAXBsj1IDzvuZ
8Hru2BC0z97fYUVen/dBbibfTVcnnO/V0qVLS22XqWMXv0N//QURESkOieof
iIhI7iIm6NatW+C6K2IxakIyv1Wory8iIlIein9ERPLTgAEDzO233x56P+uT
qMtdqK8vIiJSHop/RETyD7lg1Kjx12TzuvHGG21vsEJ8fRERkfJyvYoSrVES
EZHcwhoY6gxQOyBojQv1AaipkKlje9yvLyIikqp58+bZnpmuRg41T6nX5a11
LSIiuYv+rBy/qWPWtGlT+++TTz7ZnHrqqbY2ZKbn9eN+fRERkVSsXLnS1ugi
Dvrggw9sHR7qgEatfSQiIvFydb5Zg0O/G3oeU7e6WF5fRERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERCRd+vfvb/7888+4dyNtVqxY
YUaMGBH3boiIiIiISI758ssvzf777x/3bqTV77//bnbbbbeCiulERERERKTi
brzxRjNs2LC4dyPtevToYZ588sm4d0NERERERHJIw4YNzXfffWf/f82aNebe
e++1cYP/5/HHHzf33HOP/Zk/f77dnnmW++67r9R2Dz74oJk3b569/5NPPjGP
PPJIyX38/6xZs8yUKVPs87nbH330UTN27Fjz7LPPmq+++qrU/n3wwQfm4Ycf
LvUa7AP/nTt3rvn3338D39fs2bPN0UcfncHfnIiIiIiI5JM333zTnHzyySX/
/vvvv82iRYvs3MkGG2xgmjdvbl5//XXz3nvvmY8//thMmjTJ7LTTTuawww6z
2xN7EIMMHDjQbs/PuHHjzNq1a+39v/76q3nuuefs7U2bNjXTpk0z3377rc25
I6bh9urVq5s5c+aYBQsWmFGjRpkaNWqY0047zfz888/2Ofjv22+/bXbZZRe7
PXNVH330kXnqqadMo0aNTO3atc3EiRMD3x95fStXrszwb1FERERERPJBly5d
zNSpU8vc/uqrr9pYo1evXmXuW7p0qalXr5758ccfS93esWNH+5jevXuXup24
ab/99rOxkBex0yabbGL23nvvUrfPmDHDbLjhhub4448vdTtxGs//6aefltz2
22+/mTp16phNN93UxkR+t912mxkyZEjIuxcRERERkWKxbt06s8cee9g5Hz/m
hYg1+vTpE/jYb775xs7jeK1evdrUrFnTxjTM5YAY55xzzjFffPFF4PNsttlm
pkGDBmVur1u3rn39VatWldx25pln2tuWLFlSatu+ffva22+//fYyz8M+EV+F
5ciJiIiIiEhxYL3NlVdeGXgfa3SC4h/mhZI9J49r1qyZ+eeff8zIkSPNW2+9
Fbp91apVA+Ofgw8+2D7P+++/X3Kbm1/yxz+DBw+2t48ePTrwNU488cSE+yAi
IiIiIoXvkEMOsblpQd55550y8Q/5bl27dk34nMyzuNiF3LpkPXiqVatWJv75
448/7JqgzTff3Oa3OZ07dw6Mf4444gi7/ddffx34GpMnT0663yIiIiIiUrg+
++wzG6eEcfHPWWedZeuoEUOwHidKHPHuu+/a9Tsbb7yx+eGHHxJuS/zjXf9D
Ll63bt3saw8aNKjUtv7453//+5+59dZbzb777ltSjy7I+vXrbZ7fL7/8knTf
RURERESk8Fx99dW2znUYF/8ce+yxts70hAkT7Pob1vIkQwyz66672sdfeuml
Cbcl/qlSpYrNYaPmHHNB1GwbM2ZMmTU7Lv5hXonYjfmhTp06RVrbwxqhhx56
KOl2IiIiIiJSeFj3kygeCMp/++uvvyLFP8Qy9P/ZYYcdbC0E7xoeP+/8D/M5
rBkK453/WbZsma17Td6bv19QkAEDBtg+RSIiIiIiUnw+/PBD07p169D7w+of
vPzyywmfl5489DXFY489Zp+DuZqwORrqH9SvXz/SPrv6B+TugTrZG220kTn0
0EMTxk3cR71u15NIRERERESKDzXa/LUEnDfeeCNh/WvQw5QfZ/HixaZ79+4l
/ybmadWqlX2esFy7SpUq2dgkijPOOMM+l7fPD72GuO2GG24IfRw9V8mTExER
ERGR4kW96IEDBwbe98orrwT2MnWoKcD80Zo1a+y/6SXUtGnTMj2B3nvvPfs8
9AWiF48f8ze77757pP11/U9dbyH8/vvvdv6IPLvnnnsu8HGnnXZa0rrdIiIi
IiJS2H766SfbZ5R1Nw5zNvQcpfYasQYxzueff26WLl1a8vPpp5+aDh062PU4
f/75p/nggw/MYYcdZvbcc0+7Lof61Q7xUa1atexztWnTxs7d8JjvvvvO5tJx
e+XKlc3zzz9v55K8++JQT4F5qoYNG9rt77zzTrvmx+XUUZ+O+Ic6ClOnTi3z
+uxXovw4EREREREpDtS3fvHFF0v+/f3335ubb77ZDB8+3Nxzzz0Jf1asWGHr
JAwdOtT+m5ptPPa1116zz0W9BO5zz8V8E/cT99xyyy3m9ttvL3muYcOG2fvI
ofObO3euvY/Hsy3Px7+9/X6mTJli4yJ+vO+H/kP+OtoiIiIiIlKciEVYV1Oo
GjVqZOesREREREREyCFj/QzzPoWGvLx27drFvRsiIiIiIpJDrr32WjNq1Ki4
dyPtLr74YjNu3Li4d0NERERERHLI8uXLTZMmTeLejbRi7RF15X777be4d0VE
RERERHLMRRddZOuyFQrq0A0ZMiTu3RAREREREREREREREREREREREZE8Ro25
OnXqmIULF8a9KyIiIiIiIhnXr18/079//7h3Q0REREREJOPoxbPLLrvYuSAR
EREREZFCt88++5hZs2bFvRsiIiIiIiIZN3jwYHPZZZfFvRsiIiIiIiIZ9+GH
H9o6CMqBExERERGRYlC/fn3z3nvvxb0bIiIiIiIiGTdgwADVgRMRERERkaLA
3E/dunXj3g0REREREZGs2G233cyiRYvi3g0REREREZGMowbcoEGD4t4NERER
ERGRjJs5c6bZb7/94t4NERERERGRjPvnn3/MdtttZ5YvXx73roiIiIiIiGTc
OeecY+666664d0NERERERERERERERKSorVu3zixcuDDu3Uir3377zSxYsCDu
3RARERERkRwzYsQIc8MNN8S9G2m1evVq06BBg7h3Q0REREREckyjRo3MF198
EfdupN1xxx1nZs2aFfduiIiIiIhIjpg/f7454ogj7P9/8MEH5s8//4z0uPXr
1+d8r9OJEyea888/P+7dEBERERGRHHHxxReb8ePH2/9v3LixqVmzprngggvM
VVddZX9at25tatSoYf/rbrvooovMzjvvbH/69u1rdt11V1O9enXTsGFD0717
d9O7d2+73ZFHHmk22GAD069fP/PTTz+ZK664wuyxxx5myy23NLVr17b/7tKl
i51/6ty5s5k9e3bJfn388cd235o3b2422WQTc8wxx4S+B567WrVqdruWLVua
K6+80ixbtsz8/fffdt9+/fXXjP8eRUREREQkt/31119m9913N7///rtZvHix
/X9/75577rnHxjC33XZbqdvXrl1rmjVrZubOnWsefPBBu83VV19d5jWGDBli
9txzz5J/P/zww3bba6+9ttRzNWnSxMYvr7zySqnHv//++3b7TTfd1Hz33XeB
72P06NE2PmO7adOmlbqvT58+9jVFRERERKS4TZgwwVx44YX2/x966KHAfLbH
HnvMxhUjR44scx+x0tixY81TTz1lt7npppsCX2fMmDHm+++/t/9PThrb+ust
PP/88/b2o48+utTtM2bMMLVq1bL3jRo1KvD5zz33XPvabDN58uRS9/Ge2rRp
E/IbEBERERGRYnHUUUfZ+ZtEEsU/zqRJkwLjnx9++KHMtlOmTAmMf5YsWWJv
b9q0aanbmX9y+3DwwQeXeT7WLLFvd955p93G5fJ5HXjggebzzz9P+D5FRERE
RKRwrVq1yuy3335Jt4sS/zDn4o9/yFVj3Y/f1KlTA+Mf8t64/dJLLy11+3XX
XWf+/fdfu45nww03NEuXLi11f//+/e36n/vuu88+nvkov7vuuqtUvp2IiIiI
iBSXG2+80QwbNizpduWJf/755x9zyy23RI5/qDl3+OGHm0MOOcSsWbOm1PZu
O9YW8bjrr7++5D7WLVFnAY8//nhojhzxUd26dc3//ve/pO9XREREREQKD7Xa
wuoJeKUS/7gacaeeeqqt8eZiEy8X/1Ab7uabbzaXX365jXvGjRtXJj7h32wD
6jPwuL322qvk/gceeMDW7/buw9ChQwP38cwzzzTTp09P+n5FRERERKSwEPfs
u+++kbYtb/7bnDlzzCWXXFJmWxf/UPv65ZdftnltG2+8sVm4cGGZbamBTY0G
h3pzPHbevHn239THdohtuG/w4MGB+3j33XebQYMGJX/DIiIiIiJScOir88kn
nyTdrrzxD2t2/Gt84M9/o35B5cqVbf1r6nF7kdPmrUlHbhuPveyyy2yvIG9d
65kzZ5b0Ggpy2GGHlcwViYiIiIhIcaGu2oABA5JuR11s4orhw4eHbvP0008n
rH8N1gQREz3zzDN2W+9cDDlu3EavHi/y51gb5FBPrlKlSmbHHXe0PVZZ/+O4
PkHeOSHnyy+/NPvvv3/S9yoiIiIiIoXp559/jlQTwNVVu/XWW0O3eeKJJ5LG
P927dzfffPONefLJJ8v0SmUfDjroIFvfjfjI6dChQ5nnad++vX183759S93+
6aef2tu7detW5jHEWiNGjEj4PkVEREREpLB16tTJvPDCCwm3ueOOO2xcQR3q
MPfff3/C3DPuP+aYY+z/P/jgg4F1rj/77DNTpUoVs/nmm5u33nrLzvvUq1fP
zhl50WuIOIl4x/94nvekk04qdTuPp2aC678qIiIiIiLF6dVXXzWnn3564H3U
L2CdTatWrUzjxo1NixYtbH7am2++WbLNihUrbP22tm3b2m2o/8a/yVtzPxdd
dJFd2/PSSy/ZfLt27drZbZnvIQby1mSjdw/31a9f3z6G/z/vvPPMxIkTS7Yh
561jx44l/167dq2d3+F9sD2PIwfOxXW8x9NOOy3dvzoREREREckzxTA3whzX
tGnT4t4NERERERHJAcyd3HnnnXHvRkZEXeMkIiIiIiLFgRw28sYKUdQadyIi
IiIiUjzojUP96EITtceRiIiIiIgUD/qM9u/fP+7dSKsvvvjC1m4QERERERHx
ojfpTz/9FPdupFUhvicREREREUnN+vXrVQ9AREREREQKDnWt6RdK71L64zRo
0MD2F33nnXdi2R/y7Nq3bx/La4uIiIiISGH57bffbLxzySWXmIYNG5ott9zS
HHfccWbgwIFm/PjxtsbBn3/+Gdv+ff3116ZmzZo2Ny3dXnzxxdjiOhERERER
yQ7imSlTppgOHTrYeOeII44wQ4cONXPmzMnJPLf69etnpNYcPU532GEHs2zZ
srQ/t4iIiIiIxIu+PZdddpmdT2nTpo0ZPXq0zXfLdT169DB33HFHRp575MiR
dt7r119/zcjzi4iIiIhIdjGvc8YZZ5itt97aXHHFFWblypVx71JKnnjiCXPi
iSdm7Pm7d+9unz8TOXYiIn7MwefiXHtFkEstIiISt8WLF5uTTjrJ1KlTx4wY
McL88ssvce9SuaxevdrUqFEjY9cLf/31l2nRooW56aabMvL8IiJeF154oV1/
WEiYR1+3bl3cuyEiIkWKeKFnz55m2223Nbfffnus9QvSZe+99zbz58/P2PN/
+eWXZvvttzczZ87M2GuIiPzxxx9m9913L4jjslefPn3Mww8/HPduiIhIEeL8
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
XET8u+OOO5opU6bEvSsiIiJ569NPP7V9ZnPVkCFDzAUXXBD3bojE6pFHHjF9
+vSJezfSbvTo0WbAgAFpea6zzz67KHrGUWdi22231biQiEgC1MKR8qM2wP/+
97+4dyNjeG/UgGONbS765ptvbC8o6iCJFCtqgC1YsMD+//r1683NN99sf6jx
fM8995i777675Db3M3ny5JLHs45u6NChdltqA3D/s88+a++jzxr/ph+Ye54n
n3zSPP/88/b/R40aZeMU97x33XWXrZ3vPS5+9tln9j7qNvIat912W8m/n3rq
KfPTTz8Fvi9up9Z9RY+xS5cutccJ6qYUgxdffNH2Wvryyy/j3hURkZyzYsWK
nOzvkk+6detW8LkGjRo1yumxxOOOO872lRcpRsuXLzcHHnhgqduIG+6//36z
wQYb2Plb5nG/+OIL8+OPP5oPP/zQtGrVyuaCuZrJq1evNpMmTTKbb765fczI
kSPNH3/8Ueo1atSoYfsOE9vw/NzPc1WtWtU+Zt68efZ5pk+fbtfl7b333vZ+
EL8wVnHYYYfZba+99lrzww8/2LmKc845x2y22Wamf//+ge+vY8eOtudxRXCc
Zn1UMWFunGO3xoZEREpjbXsh1QGNwxtvvGFOOumkuHcjo7g+GTt2bNy7ISIB
iCWYg/H76quvbKxx+OGHl7mP9UJHH320jWW8OB/wGOops77Ooc48MU1Qvfl9
9tnHbLLJJqVu+/rrr0316tVNnTp1Sq1JIpeN53dzSw79SLk9qNbkK6+8Yk4/
/fSQd58c81dbb721jf2KCZ/fWWedZetkiojI/+HYuNdee6WlfwrnFe+5Mgry
EMhJWLNmTWBuA2teo/ZzI9+D50p0P9cCnJMz0cuT8z9jm4WKvJhCXFsgku84
7tKji7kUv++++87GFMQ5QTgurlq1qtRtHIuZS+JxDzzwQMntF110kfnoo48C
n2e//fYzm266aZnb27dvb5+HXCznuuuus7dNnTq11LYPPvigvT2o3pt7j+U9
V1144YWhc0uFjjiXOaDbb7897l0REckJr732mu3t4nzwwQfm0ksvNXvuuafN
c+CYST+1q666ytY/btmyZUlehF+7du3Myy+/nPQ16VHw3//+1+ZQXHLJJebR
Rx+1ueLdu3c3RxxxhH19V+uHul7bb7+9nXtgH6644gq7T+zboYceam/jp3Pn
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
3To7rz5x4sSMvk4hK08PoLjRf6hFixZx74ZIVjDOc+6558a9G2nBfMWUKVPi
3o2c1r59e/PGG28k3IY84KD+p36VKlVKGP9Qx421PmCux9v/FNR143W6dOlS
chsx7HPPPVdqO+oksB35BOybV9OmTW2etR9zmXH0ZReRwsOY0UknnWR69uwZ
635Qd47jXTbqWlJnjvWcmY61ChW5EIzZ5RNifHr1kUsjUsief/75gsnz5Vqb
+YV8X7+Uac8++2zSeHft2rU23ghbVwOOj/TmId8wCLXmWHtD7x5y2qjT5u9Z
we3kCPBa1113nb2NOgr+HtjUuSbXLmhe3j3eX6+dtUXDhw9P+D5FRKLg+ETN
6bhrQy9ZsqTUPHqm9enTx5x99tlZe71CwlrV888/P+7dSBk5FXHUdRfJFq5x
uXadMWNG3LuSFmeeeabtRyeJrV+/3sYlQTEvccbAgQPNCSecYONifoiV/HEE
vUVPOeWUkm04xhObeH+4VmCs9OGHH7Z5AG5beut6+/lQJ3Svvfay38UDDjjA
1KtXz9bhIA/ZOwZFLvrSpUtL/s3zsgaZ7Xle6ra652VslOekhraISEWQU8Dx
iTGduFGXrWXLlll7PXKTibfizvnLRy+++KLNwc435513nrn77rvj3g2RjCHn
qFDWhpPrRE606jZGQy21+++/P+7dSEkq+R7E9MRnIiIVQa4wta7nzJkT965Y
5Acz1pdN1Hygt0Eh5IlkE2N7iXIochXrbzPRX0okF7i8N3qpFALybP11wSQc
x+VDDjkk7t3IGPI1/GuIRERSwfoXYh9/Pm4xIg/gkksuiXs38ko212qlE732
qJMkUmjoD8o69ELpb8YxhnPU559/Hveu5BXWzXzyySdx70baEdOT30een4hI
eUydOtWeV15++eWk23777bdmzZo1Wdir7PH3duW6Yeedd7YxoUSXjVp96ca6
XPqg0udXpJAwjlMoeW+455577HoVSQ2/t379+sW9G2l33333FeT7EpHsoGbl
9ttvb2bPnh1pe3KFWOtRSBo1amS++uqrUrc99dRTtlcG60QlmoYNG9r5lHzT
unVr2wdXpFCQE0S/yELJewPHl0Kp4ZBNrJWiRkChoXbC4sWL494NEckznBc7
depk67AsW7Ys8mMKcb556NChperUONSZGTx4cAx7lJ+OPvpou94g37BGmBqq
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
cIPpZfjCNaCYfmiTvjP0PNO3Vk6YvWi7t0kpMFtmxowZppeRetChoUmLywMP
PBB6DdH+b+75U+R/3d8/4h6/+goaMR7rPudQP0KTRgyxfPny0LURV4XFZtSQ
eP6wuVB6HlGHDh1CX4t9AMd590R8z73xk66J3X777aHPiSdzWGwmJAOeAWE+
gWmH2V142NvC2LFjrddO4YGG3jXPkLMqdW6cSbIwO4c84SGHHGJ6GbmAPaX2
/NAzAdGy8/vnh309vpBoKplrwWx1P29yNIveuR9BkJ+mv5p+Z3pZmMXB3p7c
LRpcvccdNmyY8jqjJk3fC/oZXpt18Vg93/2CCy5Q9UL6q729x8RPzB5Eq4K3
C6/Fa/NaXr0OTJkyRfUh6PePxp+9IH5jfK9eeOEF3/e0bNmysn5mtfaN18kj
5Obw55Q6ZWFK1XGQd6Ce+dtvv/nez3eCvf5LL70U+Bzoj/wejxccfmrM73X/
LSdPnqyekz1fWM6D/pkwTVCPHj3U84R53/G6nC+It8LeA7P06KPy7qP1nB/3
OvBZ5ly1/vrrB84lxq89Cz35NsC14Ouvvza9jNgcfPDByjPRFvr27au0oDbD
LLDmzZubXoZR6JuzuQdqzJgx1vf9sdehB1coL1z7vbMtgPiE67ufH/zw4cPV
7Ixvvvmm2u1du3Z1tthiC5XLDeOmm25S+hdmuZMzdsP5h/4OYhNo3bq12oO4
j9Nr8+ZuiXuoGbrPwey1mMVBfOTtIaX3mWsk+Q6vdwH7L+37pH1veV/EgFr3
7wfeTnj5lgN6XvJ8biYHb4sPkmmoQZSaA0Pjhg+NH7rGEjQvnP6jE044IfC5
iQH8Zv2gJyM2OvXUU339RMhNMI80LD955JFHqudmfmsYrJE+HOIwPz82NAic
H7xeDcCMRF7D65VL3W2dddZRmjm/8wAx4YQJE0LXJZQOcTdxq625kpUrVyov
4qD8Qxrh2heWS7CBL7/80tlss81ML8Mo5I3I49hKFmaHSv9PZQja43z33Xfq
+k4Oyo+7775b5Ws1aJSbNm2qHhOmuaaeEzQDREOPC/sj9Ct+e7ivvvpKPQfx
lt+6dQ0eHyb6CYLeA7CfCprXTp2L+9y5aP6fuSrc7qetQHtKXFcO+J1dccUV
ZXnutIPeCX2ULT5IpiFnQJ2zFPxyI9Rlya1tvfXWziabbOLsv//+qubrrndQ
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
abPQADZu3LhqZpAbavve3ufPPvtMxUXEcX45RuI6rkth9auooLUjZrQBm2I1
P/h71a5dW7QcQhV8FoiJvXPBsgR5Gno8TVDIr8wv/qFn1m9vSW8N/TH8zbbb
bjvVB+SdHYe2lefjelCqR1qU+Ie+JY6JsifCf49j3fMwOPf7xT/4DXA78yuC
IL9bbj899OJ33313WV/DRuilIw4X8gXnJVs8/EvVj5lm9913L7mPxs+Dm30g
+Tjd38m1BC8y4iEN1w7mpBA3MPMUf3K3DoHzrvYfYE9JLd5dqyJ/hz6WnhHi
IfwQeF3659FCEB/hyePlhx9+UL7WxD08N2tn/gC9OUHQi4ivD308XEfZo5Pr
5HdHjhA/O+/ngFiJGjYaPvJsXJOY56zh98Hrs+en/8nt58BrJOVbjX4wSMeR
NogH/WbV2oJt/VZC+aE/3Vv/zRp4ldGvYoKxY8eGzqvR8Q86Z/qK2V8QL3nj
H65j7h4tem14HP1AbriucXtYbi0qUeIf6j5ej4QguN5xrPv34Y1/0Fs8/PDD
qu+J614YXJfKvRfj9yh+MdVhb0F87fZ+EvIB9WdbdI/0SQbVH2ygVatWygen
VLhWuOd+UlvXfm/uH3ffD/GP93631wk1Ie/9fnUMPG/4zHD9HTVqlDq3ExsF
aZCIM/zWFuUczN+amI1rEdcu4q4gvRbxm/c1vHNh+H3o+9w+BwcccEBi1wR6
cKdNm5bIc5UTcq7ErJWcO5E0aO2T2BcJ2YHelKx7v6GTcud2KgnnyrAZ3jr+
oX5C/o2ZEegGhg0bVu04/k7jx4+v+rfum+H53VDr4vYketOjxD9oDwrprzV4
jGqvO42Of3bddVflwU0ujvMs+rZCcL3bfvvty1bPpnaHbtLmc3454LtUCe2h
kD6oy9owC5gYnbqEzdBfk0SNlbqM1/dZiAe/S6/nQymgL3Bf19MKmj+8ZG2G
eNakB7CQPui/D+ojyQJ8b8lVm/LpZU8f1H8Kfvo3dMrU893Qb0H84PYgRYNM
/d6tEdeePvhTlxoXRIl/qL9wDP46hUBn7n2v3voPr8W/o8yFW716tbPXXntF
eCfx4O/m9WsQHOeGG27wnf8kZB9y5Dbky9BRBXmn2AJxptevLC7kyUrV0gl/
1NLQdCQF51Gus2mHuRd4p9kMfrXkawVBg6bKhu9fXKibeGsklYR6Dv4HQaBL
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
D/ZyL7/8sullVBT05xMnTjS9DOs46KCDlPYkz6BZYk8ptR+hFPBPxE/HC98x
v9mofv0/+ALovn70YNR4iHP0D8/FY/AswTcAL7XatWv7zjuNQlj8g2+2O94K
A29ujmXOELj1b/i+obGtW7eu8tHyg+8effD4VEWFmm3W5jzQ3/Xggw+aXkbF
iDI3Kw3YvqfCu67QfGYhfzRp0sS3Z9VmsjjTtRBoKyZNmmR6GVZB39vGG29s
9Uy3UmHfxd5McmNCqdCLwowQr1caulzmmnrRnm5z586tuo3PI7EMfRHUVLxQ
Y+IxZ555pvo39Sb+HWXP7DdbE20aj/fzy6F2hT4CTV6hayRxGb09+jj83/jR
sPfCH4592M8//1zj8fjaFTu/mvVx/sqSfoMaWSEvvyyBhvG9994zvYyCkCe3
2Se4QYMGzg8//GB6GULKyOL8H/pC16xZY3oZFYWeJ9EvFQd+EdTN8gy59rx5
LgnlA+0xdQk3P/30k5qz/fvvv1e7vV+/fir2mDVrVo3noY7it9/iOTbbbLOq
/QyzUfFTo3cmrG8EfxM//6e7775breHmm2/2fZyuD6HLC4L9K3Uod384a+TH
je5fOv3002s8B+ehOJptHpcl35tHHnlEeeHlAXw8mEmT9ro766PGSo+ajdBH
6P0uCgJw3cBLJktwbYyrh7AVtCLif1AczJ3jeptX8CWm/rtw4ULTSxEyAv06
9M14ocfO6w1H/wrxADozN+yzmFcaxBlnnKEeR+8e0GPDOb9t27a+eS9qL2jR
mJHmRfsWhM0fveGGG5x1113Xt8bEHnafffZRvTtuDxXWw48b7sdjkddzz/nk
OYgP43iw4NcY9ruyDfSBu+yyi+llVARqfvSGpR1m9VIHtRW0snxHBcEL55qs
ecjgkZo3TRO5VPE3iQ65Y3Jvea6JX3/99Up/LghJQS9d586da9y+YMECp1u3
bur/mfGDHxMxCXo59ib0gBOHcy1itif7LTyz3XMM0I0RX+23337qcejLzj33
XKU5W716tYqniOfxa6OuibaN/6evhudkDZrFixcrP1z0aDzXjjvu6Fx44YVq
bX4sWrRI9YDjM0O9heem3kO/CjOKNMQj6Nh4Tn74frljK2pFaIm4jzkNvF98
Hvx886KQtfMYvVL0SXlrhVmEGqcNc9rRje69996mlxEb+qLlOif4wbWHa0GW
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
C6BfxKY5DVGZPXu21ef+uND3Z7N/UZKgoZg0aZLpZVQEzvk77LCD8/XXX5te
iiBU8dxzz6mefNtAq2SzLpxr3z777OOsWLHC9FJis3DhQuenn34yvYyS4O9A
P/Lnn39ueilFMXz4cOe2224zvYxYMD+qa9euppchCIIgVIi8zTcSBCEYW3vX
BUEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEFInnfeeUfNrPrxxx9NL0UQEuNvf/ubc8kllzi//vqr6aUI
giAIgiAIKeGpp55y6tWrp2ZDMrdZELLCa6+95my33XZO586drZz9KwiCIAiC
ICTLokWLnDp16jiDBg0yvRRBKAuffvqp06xZM6d79+6mlyIIgiBkkNdffz3S
cW+++WaZV2KGf//735I/F6zhl19+UftC6j6CkGVeeuklZ5111nEefvhh00sp
yOTJkyPNz37yySdTp+tbs2aN88gjjzh33nmnc++99zoLFy50/vu//9v0sgQL
ePvtt527777bufHGG5277rpLfWf/93//1/SyEoc9Yo8ePZznn3/e9FLKxvvv
v+8cc8wxzpZbbumst956zmabbeYcfPDBzv3335/Jv+lPP/3kNG7cWJ33wrj6
6qudXXfdtUKrKj/kFvk7N2jQwFlrrbXUz/bbb+9cfvnlzvfff296eYIQyM03
3+xssMEGztdff216KUJKoR/s22+/Nb2MRDjttNNUvP8///M/ppcSCnujrl27
hsZA1157rbPjjjs63333XQVXFs5jjz3mrL/++lXXQf2zww47OAsWLDC9PCHF
3HTTTc7aa69d47Oz++67Zy5fvnr1avXerrrqKtNLKRvsiXmPPXv2VPHsZZdd
5uy1117qttNPP9308srC8uXLVQw0atQo3/uJfXbaaSeVI8oKfIb5mx5++OEq
9rv11lud448/XuUaW7ZsKf3kQmr5y1/+4px55pmml1GQV1991TnhhBOcvffe
22nRooVzwAEHOFdeeaXz8ccfm15aJKiz0Yf/wQcfmF5KZMaOHes0adKkah9S
u3Ztp2PHjs6sWbNMLy021CJ4L3PnzjW9lFCIe44++mh1TfGr77CfIPb55JNP
DKwuGPxT+P3y2SFm/uKLL1RMtO2226o8y4oVK0wvUUgpfN757MyfP1/9m8/P
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

    "], {{0, 669}, {832, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{832, 669},
  PlotRange->{{0, 832}, {0, 669}}]], "Input",ExpressionUUID->"e43c9207-f164-\
4275-a71e-6b60447e7c37"],

Cell[CellGroupData[{

Cell["Rule matching", "Subsection",
 CellChangeTimes->{{3.7628918304661922`*^9, 
  3.762891832752256*^9}},ExpressionUUID->"c06cd52b-d735-4565-a405-\
dc0b6fdce09b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Protect", "[", 
    RowBox[{"EmptyString", ",", "Term", ",", "NonTerm"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetArgument", "[", 
    RowBox[{"_", "[", "arg_", "]"}], "]"}], ":=", "arg"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Substitute", "[", 
     RowBox[{"l1_", ",", "l2_"}], "]"}], ":=", 
    RowBox[{"Join", "[", 
     RowBox[{"l1", ",", 
      RowBox[{"Drop", "[", 
       RowBox[{"l2", ",", 
        RowBox[{"Length", "[", "l1", "]"}]}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TermMatchQ", "[", 
    RowBox[{"input_", ",", 
     RowBox[{"{", "}"}]}], "]"}], ":=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TermMatchQ", "[", 
    RowBox[{"input_", ",", "terms_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"Take", "[", 
       RowBox[{"input", ",", 
        RowBox[{"Length", "[", "terms", "]"}]}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "\"\<Type\>\""}], "]"}], "]"}], " ", "\[Equal]", 
     " ", 
     RowBox[{"Map", "[", 
      RowBox[{"GetArgument", ",", "terms"}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GenerateTransition", "[", 
     RowBox[{"rule_", ",", "stateId_", ",", "lastId_"}], "]"}], ":=", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", "stateId"}], "}"}],
         "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"#1", ",", 
          RowBox[{"lastId", "+", 
           RowBox[{"First", "[", "#2", "]"}]}]}], "}"}]}], "&"}], ",", 
      RowBox[{"rule", "[", "\"\<To\>\"", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MatchTerminalsWithRule", "[", 
     RowBox[{"stateId_", ",", "lastId_", ",", "input_", ",", "rule_"}], "]"}],
     ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "terms", ",", "transition", ",", "rest", ",", "cuttedInput", ",", 
        "currentState", ",", "lastIndex", ",", "matchTransitions"}], "}"}], 
      ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"currentState", " ", "=", " ", 
        RowBox[{"rule", "[", "\"\<From\>\"", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"rule", "[", "\"\<To\>\"", "]"}], "===", 
          RowBox[{"EmptyString", "[", "]"}]}], ",", 
         RowBox[{"Return", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"currentState", ",", "stateId"}], "}"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"EmptyString", "[", "]"}], ",", 
                RowBox[{"lastId", "+", "1"}]}], "}"}]}], "}"}], ",", 
            RowBox[{"{", "}"}], ",", "input", ",", 
            RowBox[{"lastId", "+", "1"}]}], "}"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"transition", " ", "=", " ", 
        RowBox[{"GenerateTransition", "[", 
         RowBox[{"rule", ",", "stateId", ",", "lastId"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"lastIndex", " ", "=", " ", 
        RowBox[{"Last", "@", 
         RowBox[{"Last", "@", 
          RowBox[{"Last", "@", "transition"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"terms", " ", "=", " ", 
        RowBox[{"TakeWhile", "[", 
         RowBox[{
          RowBox[{"rule", "[", "\"\<To\>\"", "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Head", "[", "#", "]"}], "=!=", "NonTerm"}], "&"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"rest", " ", "=", " ", 
        RowBox[{"Drop", "[", 
         RowBox[{
          RowBox[{"transition", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
          RowBox[{"Length", "[", "terms", "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "terms", "]"}], ">", 
          RowBox[{"Length", "[", "input", "]"}]}], ",", 
         RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"TermMatchQ", "[", 
          RowBox[{"input", ",", "terms"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"matchTransitions", " ", "=", 
           RowBox[{"MapIndexed", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"KeyExistsQ", "[", 
                 RowBox[{"#1", ",", "\"\<Value\>\""}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", 
                   "stateId"}], "}"}], "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Term", "[", 
                    RowBox[{"#1", "[", "\"\<Type\>\"", "]"}], "]"}], ",", 
                   RowBox[{"lastId", "+", 
                    RowBox[{"First", "[", "#2", "]"}]}], ",", 
                   RowBox[{"#1", "[", "\"\<Value\>\"", "]"}]}], "}"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", 
                   "stateId"}], "}"}], "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Term", "[", 
                    RowBox[{"#1", "[", "\"\<Type\>\"", "]"}], "]"}], ",", 
                   RowBox[{"lastId", "+", 
                    RowBox[{"First", "[", "#2", "]"}]}]}], "}"}]}]}], 
               "\[IndentingNewLine]", "]"}], "&"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Take", "[", 
              RowBox[{"input", ",", 
               RowBox[{"Length", "[", "terms", "]"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"transition", " ", "=", " ", 
           RowBox[{"Substitute", "[", 
            RowBox[{"matchTransitions", ",", "transition"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"cuttedInput", " ", "=", " ", 
           RowBox[{"Drop", "[", 
            RowBox[{"input", ",", 
             RowBox[{"Length", "[", "terms", "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", 
           RowBox[{"{", 
            RowBox[{
            "transition", ",", "rest", ",", "cuttedInput", ",", "lastIndex"}],
             "}"}], "]"}], ";"}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Return", "[", "$Failed", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MapUntil", "[", 
     RowBox[{"f_", ",", "expr_", ",", "test_"}], "]"}], ":=", 
    RowBox[{"Drop", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"NestWhileList", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"f", "[", 
             RowBox[{"#", "[", 
              RowBox[{"[", 
               RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], ",", 
            RowBox[{"Drop", "[", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], "]"}], ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"test", "[", 
                RowBox[{"f", "[", 
                 RowBox[{"#", "[", 
                  RowBox[{"[", 
                   RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}], "]"}]}], "&&",
               " ", 
              RowBox[{
               RowBox[{"Length", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "\[NotEqual]", 
               "1"}]}], ")"}]}], "}"}], "&"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "expr", ",", "True"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "&"}]}], "\[IndentingNewLine]", 
        "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
      "1"}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MatchTerminals", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"state_", ",", "stateId_"}], "}"}], ",", "lastId_", ",", 
     "input_", ",", "grammar_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"possibleTransitions", ",", "matched"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"possibleTransitions", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"grammar", ",", 
         RowBox[{"KeyValuePattern", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<From\>\"", "\[Rule]", "state"}], "}"}], "]"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"matched", " ", "=", " ", 
       RowBox[{"Last", "[", 
        RowBox[{"MapUntil", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#", ",", 
             RowBox[{"MatchTerminalsWithRule", "[", 
              RowBox[{"stateId", ",", "lastId", ",", "input", ",", "#"}], 
              "]"}]}], "}"}], "&"}], ",", "possibleTransitions", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Last", "[", "#", "]"}], "=!=", "$Failed"}], "&"}]}], 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "matched", "]"}], ";"}]}], "\[IndentingNewLine]",
     "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.757274783650526*^9, 3.757274820428228*^9}, {
   3.757274862544322*^9, 3.757275103606566*^9}, {3.7572751636565237`*^9, 
   3.757275164811874*^9}, {3.7572751964583693`*^9, 3.757275196915545*^9}, {
   3.757275248182845*^9, 3.757275305590396*^9}, {3.7572755185338383`*^9, 
   3.757275525223351*^9}, {3.757275562775797*^9, 3.757275570631586*^9}, 
   3.757276113821259*^9, {3.757276918159042*^9, 3.7572770037161493`*^9}, {
   3.75728418007928*^9, 3.7572842206198187`*^9}, {3.757287044508272*^9, 
   3.757287046411515*^9}, {3.7572872857087393`*^9, 3.757287300671541*^9}, {
   3.757287362543298*^9, 3.757287362659718*^9}, {3.7572874347766237`*^9, 
   3.7572874349241343`*^9}, {3.7572874783326197`*^9, 3.75728747843075*^9}, {
   3.7572875128295393`*^9, 3.757287518510971*^9}, {3.7572894865818453`*^9, 
   3.75728948864775*^9}, {3.757358932698401*^9, 3.757358952178666*^9}, {
   3.757358985741022*^9, 3.757358989712109*^9}, {3.757359643749208*^9, 
   3.7573596496516743`*^9}, {3.757359690226437*^9, 3.7573596984694967`*^9}, {
   3.7577015909094152`*^9, 3.757701632528507*^9}, {3.7577029124528008`*^9, 
   3.7577030244891577`*^9}, {3.757703073074065*^9, 3.757703075078184*^9}, {
   3.7577031093317966`*^9, 3.757703113940316*^9}, {3.757703245654786*^9, 
   3.757703245855764*^9}, {3.7577032941945972`*^9, 3.757703296627157*^9}, {
   3.757703411503927*^9, 3.7577034138585777`*^9}, {3.7577036175904703`*^9, 
   3.757703633547387*^9}, {3.757703760883068*^9, 3.757703830680175*^9}, {
   3.757704333388521*^9, 3.757704335579052*^9}, {3.757704448889593*^9, 
   3.757704449106048*^9}, {3.757704517873886*^9, 3.7577046238877153`*^9}, {
   3.7577047304257717`*^9, 3.7577047306601686`*^9}, {3.757706426428527*^9, 
   3.757706450360586*^9}, {3.757706490330243*^9, 3.757706490622726*^9}, {
   3.757709390136578*^9, 3.7577094288164988`*^9}, {3.7577094599477177`*^9, 
   3.757709468534696*^9}, {3.757709534401555*^9, 3.757709545184486*^9}, {
   3.757709605535029*^9, 3.757709682226736*^9}, {3.757709819069147*^9, 
   3.757709876650505*^9}, {3.75770995313941*^9, 3.7577099542666388`*^9}, {
   3.757710616283051*^9, 3.757710654877925*^9}, {3.7577112623004704`*^9, 
   3.757711262767686*^9}, {3.7586545910677977`*^9, 3.758654594622621*^9}, {
   3.758656730004923*^9, 3.758656736471569*^9}, 3.7614199762889214`*^9, {
   3.761420009744522*^9, 3.76142000984664*^9}, {3.761420197199554*^9, 
   3.761420207689537*^9}, {3.762463217533012*^9, 3.762463217713563*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"48f5ec51-854c-4046-8362-e0b917d47448"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.762891419312245*^9, 
  3.762891421573617*^9}},ExpressionUUID->"b630cce7-46a5-4695-9757-\
8d6fac6905c4"],

Cell["Given a simple arithmetic grammar", "Text",
 CellChangeTimes->{{3.7628920349108963`*^9, 
  3.762892041916973*^9}},ExpressionUUID->"7efcc219-7753-4d6b-bde9-\
34ae30ea41c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"arithmeticGrammar", " ", "=", " ", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", 
        RowBox[{"NonTerm", "[", "\"\<E\>\"", "]"}]}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<i\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<E'\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<V\>\"", "]"}]}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", 
        RowBox[{"NonTerm", "[", "\"\<V\>\"", "]"}]}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<j\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<V\>\"", "]"}]}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", 
        RowBox[{"NonTerm", "[", "\"\<V\>\"", "]"}]}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", 
        RowBox[{"NonTerm", "[", "\"\<E'\>\"", "]"}]}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<+\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<i\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<E'\>\"", "]"}]}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", 
        RowBox[{"NonTerm", "[", "\"\<E'\>\"", "]"}]}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}]}], "|>"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.762891431719359*^9, 3.762891434194105*^9}, {
  3.762891914058043*^9, 
  3.762891916071423*^9}},ExpressionUUID->"b850989c-bf66-4056-b563-\
0fd5ea8f5205"],

Cell["and the input i+i", "Text",
 CellChangeTimes->{{3.762892044354554*^9, 
  3.7628920472139378`*^9}},ExpressionUUID->"f87de5f0-dfd3-4f14-95cb-\
658c8171f8c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testInput", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"<|", 
      RowBox[{"\"\<Type\>\"", "\[Rule]", "#"}], "|>"}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<i\>\"", ",", "\"\<+\>\"", ",", "\"\<i\>\""}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.762891509873342*^9, 3.7628915487024508`*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"2481fe36-f4ae-421f-8f32-c8051b4428bd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"i\"\>"}], "\[RightAssociation]"}],
    ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"+\"\>"}], "\[RightAssociation]"}],
    ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"i\"\>"}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.762891524521123*^9, 3.762891549568232*^9}},
 CellLabel->
  "Out[186]=",ExpressionUUID->"b2a450dc-a566-48de-8c30-eb683bf006dd"]
}, Open  ]],

Cell[TextData[{
 "If we try to match with the rule ",
 StyleBox["E\[CloseCurlyQuote]",
  FontWeight->"Bold"],
 " -> + i ",
 StyleBox["E\[CloseCurlyQuote]",
  FontWeight->"Bold"],
 " since i can\[CloseCurlyQuote]t match with + the function will return false."
}], "Text",
 CellChangeTimes->{{3.7628920523123417`*^9, 
  3.762892144634548*^9}},ExpressionUUID->"2a54fba8-90ac-4ef0-8bc9-\
fef84ca7928b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchTerminalsWithRule", "[", 
  RowBox[{"1", ",", "4", ",", "testInput", ",", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<From\>\"", "\[Rule]", 
      RowBox[{"NonTerm", "[", "\"\<E'\>\"", "]"}]}], ",", 
     RowBox[{"\"\<To\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Term", "[", "\"\<+\>\"", "]"}], ",", 
        RowBox[{"Term", "[", "\"\<i\>\"", "]"}], ",", 
        RowBox[{"NonTerm", "[", "\"\<E'\>\"", "]"}]}], "}"}]}]}], "|>"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.762891872079225*^9, 3.7628919497735233`*^9}},
 CellLabel->
  "In[198]:=",ExpressionUUID->"fef932c3-34d0-4898-8736-599665012b53"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.762891905644623*^9, 3.762891950214456*^9}},
 CellLabel->
  "Out[198]=",ExpressionUUID->"6186542a-1bc1-49b9-9a8a-68ae1e74d95a"]
}, Open  ]],

Cell[TextData[{
 "If we try to match with the rule ",
 StyleBox["E",
  FontWeight->"Bold"],
 " -> i ",
 StyleBox["E\[CloseCurlyQuote] V",
  FontWeight->"Bold"],
 " it will list the full transition,"
}], "Text",
 CellChangeTimes->{{3.762892123102323*^9, 
  3.762892159722374*^9}},ExpressionUUID->"1504301c-158e-4dec-899d-\
e8f41b462c17"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"transition", ",", "rest", ",", "cuttedInput", ",", "lastIndex"}],
     "}"}], " ", "=", " ", 
   RowBox[{"MatchTerminalsWithRule", "[", 
    RowBox[{"1", ",", "4", ",", "testInput", ",", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", 
        RowBox[{"NonTerm", "[", "\"\<E\>\"", "]"}]}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<i\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<E'\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<V\>\"", "]"}]}], "}"}]}]}], "|>"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.762891717062999*^9, 3.76289177089655*^9}},
 CellLabel->
  "In[192]:=",ExpressionUUID->"0801f3ef-b068-462f-839e-2189717872dc"],

Cell[CellGroupData[{

Cell[BoxData["transition"], "Input",
 CellChangeTimes->{{3.762891763938052*^9, 3.7628917655786953`*^9}},
 CellLabel->
  "In[190]:=",ExpressionUUID->"c8963286-6a28-4d22-a1f9-e1b9cb3d568e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "1"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Term", "[", "\<\"i\"\>", "]"}], ",", "5"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "1"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "6"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "1"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"V\"\>", "]"}], ",", "7"}], "}"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.762891765807143*^9},
 CellLabel->
  "Out[190]=",ExpressionUUID->"54d234f3-c71d-40c2-b87f-ce0a323cd033"]
}, Open  ]],

Cell["the unmatched symbols of the rule,", "Text",
 CellChangeTimes->{{3.762892167099929*^9, 
  3.762892178510685*^9}},ExpressionUUID->"5792d41d-f399-4ee6-9b0d-\
ae8f1bec0b9e"],

Cell[CellGroupData[{

Cell[BoxData["rest"], "Input",
 CellChangeTimes->{{3.762891767027424*^9, 3.762891767687969*^9}},
 CellLabel->
  "In[191]:=",ExpressionUUID->"153f18a5-1c77-406f-805c-b0318bc0c5e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\<\"V\"\>", "]"}], ",", "7"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.762891767971436*^9},
 CellLabel->
  "Out[191]=",ExpressionUUID->"02afdb95-6845-4851-b0ee-2ea8baa8febe"]
}, Open  ]],

Cell["the remaining input", "Text",
 CellChangeTimes->{{3.762892181221031*^9, 
  3.7628921835699263`*^9}},ExpressionUUID->"e33a3f38-437b-48c6-81ca-\
4f9cf667b7ed"],

Cell[CellGroupData[{

Cell[BoxData["cuttedInput"], "Input",
 CellChangeTimes->{{3.762891774586718*^9, 3.762891775486128*^9}},
 CellLabel->
  "In[193]:=",ExpressionUUID->"248db685-d58a-42e8-8099-239408e123ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"+\"\>"}], "\[RightAssociation]"}],
    ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"i\"\>"}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.762891775733839*^9},
 CellLabel->
  "Out[193]=",ExpressionUUID->"2aeacc02-cfef-4a6c-90e0-02fcff792889"]
}, Open  ]],

Cell["and the last index used by the counter.", "Text",
 CellChangeTimes->{{3.76289218601898*^9, 
  3.7628921944098883`*^9}},ExpressionUUID->"e545747e-7795-4c73-88fc-\
671ed34fa74d"],

Cell[CellGroupData[{

Cell[BoxData["lastIndex"], "Input",
 CellChangeTimes->{{3.762891777290329*^9, 3.7628917781511993`*^9}},
 CellLabel->
  "In[194]:=",ExpressionUUID->"999e3b47-3211-4b07-9ab1-9ed92c4fb6d7"],

Cell[BoxData["7"], "Output",
 CellChangeTimes->{3.762891778364313*^9},
 CellLabel->
  "Out[194]=",ExpressionUUID->"f4934ca9-6b5b-456f-963f-6644deedb561"]
}, Open  ]],

Cell["\<\
We can try with all the rules in the grammar at once and choose the first  \
rule that matches.\
\>", "Text",
 CellChangeTimes->{{3.762892227741742*^9, 
  3.762892284737846*^9}},ExpressionUUID->"04a6ce09-5fab-4fea-970c-\
58bd2c1a70ce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchTerminals", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NonTerm", "[", "\"\<E\>\"", "]"}], ",", "1"}], "}"}], ",", "4", 
   ",", "testInput", ",", "arithmeticGrammar"}], "]"}]], "Input",
 CellChangeTimes->{{3.762891446431342*^9, 3.762891453458987*^9}, {
  3.762891531243019*^9, 3.7628915601049833`*^9}},
 CellLabel->
  "In[187]:=",ExpressionUUID->"22c83a2c-9f3d-4535-82e3-747d5d8441d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"From\"\>", "\[Rule]", 
      RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}]}], ",", 
     RowBox[{"\<\"To\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Term", "[", "\<\"i\"\>", "]"}], ",", 
        RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", 
        RowBox[{"NonTerm", "[", "\<\"V\"\>", "]"}]}], "}"}]}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "1"}], "}"}], 
        "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\<\"i\"\>", "]"}], ",", "5"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "1"}], "}"}], 
        "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "6"}], "}"}]}], 
       ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "1"}], "}"}], 
        "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\<\"V\"\>", "]"}], ",", "7"}], "}"}]}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "6"}], "}"}], ",", 
       
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NonTerm", "[", "\<\"V\"\>", "]"}], ",", "7"}], "}"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"+\"\>"}], 
        "\[RightAssociation]"}], ",", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"i\"\>"}], 
        "\[RightAssociation]"}]}], "}"}], ",", "7"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7628914491135683`*^9, 3.762891453874061*^9}, {
  3.7628915316802883`*^9, 3.762891560789419*^9}},
 CellLabel->
  "Out[187]=",ExpressionUUID->"16cd7fc3-2acb-4cfd-bcd9-bbac66e4ed60"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Parser", "Subsection",
 CellChangeTimes->{{3.762891842803632*^9, 
  3.762891847359253*^9}},ExpressionUUID->"c0c25edf-5fe4-4181-ac55-\
0ce34bd48780"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Protect", "[", "$IncompleteGrammar", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"VerifyGrammar", "[", "grammar_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "grammarKeys", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grammarKeys", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Map", "[", 
         RowBox[{"Keys", ",", "grammar"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"grammarKeys", "\[Equal]", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"\"\<From\>\"", ",", "\"\<To\>\"", ",", "\"\<Action\>\""}],
            "}"}], "}"}]}], ",", " ", 
        RowBox[{"Return", "[", "True", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"grammarKeys", ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<From\>\"", ",", "\"\<To\>\""}], "}"}]}], "]"}], ",", 
        " ", 
        RowBox[{"Return", "[", "$IncompleteGrammar", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "False", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"VerifyInput", "[", "input_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "inputKeys", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Input", " ", "must", " ", "be", " ", "a", " ", "list", " ", "of", " ",
         "tokens", " ", "with", " ", "Type", " ", "and", " ", "Value", " ", 
        RowBox[{"entries", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"inputKeys", " ", "=", " ", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"Map", "[", 
          RowBox[{"Keys", ",", "tokens"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"inputKeys", " ", "\[Equal]", " ", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"\"\<Type\>\"", ",", "\"\<Value\>\""}], "}"}], "}"}]}], 
         ",", " ", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "True", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "False", "]"}]}], "\[IndentingNewLine]", 
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "Parse", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<Trace\>\"", "\[Rule]", "False"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Parse", "::", "incompleteGrammar"}], " ", "=", " ", 
   "\"\<Actions in this grammar are not correctly specified\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Parse", "::", "badGrammar"}], " ", "=", " ", 
   "\"\<Incorrect grammar\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Parse", "::", "badInput"}], " ", "=", " ", 
   "\"\<Incorrect input\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Parse", "[", 
     RowBox[{"input_", ",", "grammar_", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "grammarCheck", ",", "pGrammar", ",", "trace", ",", "symbolRules", ",",
         "rule", ",", "stack", ",", "transitions", ",", "next", ",", 
        "inputBuffer", ",", "lastId", ",", "parseTree", ",", "parseSymbol", 
        ",", "toStack"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Error", " ", "check"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"grammarCheck", " ", "=", " ", 
        RowBox[{"VerifyGrammar", "[", "grammar", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"grammarCheck", " ", "\[Equal]", " ", "False"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"Parse", "::", "badGrammar"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"grammarCheck", " ", "===", "$IncompleteGrammar"}], ",", 
         RowBox[{"Message", "[", 
          RowBox[{"Parse", "::", "incompleteGrammar"}], "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"VerifyInput", "[", "input", "]"}], " ", "\[Equal]", " ", 
          "False"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{"Parse", "::", "badInput"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "Initialization", " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"pGrammar", " ", "=", " ", 
        RowBox[{"MapAt", "[", 
         RowBox[{"NonTerm", ",", "grammar", ",", 
          RowBox[{"{", 
           RowBox[{"All", ",", 
            RowBox[{"Key", "[", "\"\<From\>\"", "]"}]}], "}"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"stack", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"parseTree", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"lastId", " ", "=", " ", "1"}], ";", "\[IndentingNewLine]", 
       RowBox[{"inputBuffer", " ", "=", " ", "input"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"parseSymbol", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "pGrammar", "]"}], "[", "\"\<From\>\"", 
           "]"}], ",", "1"}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"symbolRules", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"trace", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<ParseSymbol\>\"", "\[Rule]", "parseSymbol"}], ",", 
           RowBox[{"\"\<Stack\>\"", "\[Rule]", "stack"}], ",", 
           RowBox[{"\"\<LastID\>\"", "\[Rule]", "lastId"}], ",", 
           RowBox[{"\"\<InputBuffer\>\"", "\[Rule]", "inputBuffer"}]}], 
          "|>"}], "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Loop", " ", "until", " ", "there", " ", "are", " ", "no", " ", 
         "input", " ", "symbols", " ", "left", " ", "and", " ", "no", " ", 
         "symbol", " ", "left", " ", "to", " ", "parse"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"inputBuffer", ",", "parseSymbol"}], "}"}], " ", "=!=", 
          " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "}"}], ",", "None"}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Head", "[", 
              RowBox[{"First", "[", "parseSymbol", "]"}], "]"}], " ", "===", 
             "NonTerm"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Case", " ", "where", " ", "the", " ", "parse", " ", "symbol", 
              " ", "is", " ", "a", " ", "non", " ", "terminal"}], " ", "*)"}],
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"rule", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "transitions", ",", "next", ",", "inputBuffer", ",", 
                  "lastId"}], "}"}]}], " ", "}"}], " ", "=", " ", 
              RowBox[{"MatchTerminals", "[", 
               RowBox[{
               "parseSymbol", ",", "lastId", ",", "inputBuffer", ",", 
                "pGrammar"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"parseTree", ",", "transitions"}], "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"symbolRules", ",", 
               RowBox[{"{", 
                RowBox[{"parseSymbol", ",", 
                 RowBox[{"rule", "[", "\"\<Action\>\"", "]"}]}], "}"}]}], 
              "]"}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Case", " ", "where", " ", "the", " ", "parse", " ", "symbol", 
              " ", "is", " ", "a", " ", "terminal"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"GetArgument", "[", 
                 RowBox[{"First", "[", "parseSymbol", "]"}], "]"}], " ", 
                "\[Equal]", " ", 
                RowBox[{
                 RowBox[{"First", "[", "inputBuffer", "]"}], "[", 
                 "\"\<Type\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"inputBuffer", " ", "=", 
                 RowBox[{"Drop", "[", 
                  RowBox[{"inputBuffer", ",", "1"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"next", " ", "=", " ", 
                 RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
             ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "next", "]"}], ">", "0"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "If", " ", "there", " ", "are", " ", "symbols", " ", "left", 
               " ", "to", " ", "process"}], ",", " ", 
              RowBox[{
              "process", " ", "the", " ", "first", " ", "and", " ", "push", 
               " ", "the", " ", "rest", " ", "to", " ", "the", " ", 
               "stack"}]}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"parseSymbol", ",", "toStack"}], "}"}], "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"First", "[", "next", "]"}], ",", 
                RowBox[{"Reverse", "[", 
                 RowBox[{"Rest", "[", "next", "]"}], "]"}]}], "}"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"stack", " ", "=", " ", 
              RowBox[{"Join", "[", 
               RowBox[{"stack", ",", "toStack"}], "]"}]}], ";"}], 
            "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
              "If", " ", "there", " ", "are", " ", "no", " ", "symbols", " ", 
               "left"}], ",", " ", 
              RowBox[{
              "pop", " ", "one", " ", "from", " ", "the", " ", "stack"}]}], 
             " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "[", "stack", "]"}], " ", ">", " ", "0"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"parseSymbol", ",", "stack"}], "}"}], "=", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Last", "[", "stack", "]"}], ",", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"stack", ",", 
                    RowBox[{"-", "1"}]}], "]"}]}], "}"}]}], ";"}], 
               "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "Flag", " ", "to", " ", "stop", " ", "the", " ", "loop", " ", 
                 "when", " ", "the", " ", "stack", " ", "is", " ", "empty"}], 
                " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"parseSymbol", " ", "=", " ", "None"}], ";"}]}], 
              "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"trace", ",", 
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"\"\<ParseSymbol\>\"", "\[Rule]", "parseSymbol"}], ",", 
              RowBox[{"\"\<Stack\>\"", "\[Rule]", "stack"}], ",", 
              RowBox[{"\"\<LastID\>\"", "\[Rule]", "lastId"}], ",", 
              RowBox[{"\"\<InputBuffer\>\"", "\[Rule]", "inputBuffer"}]}], 
             "|>"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"parseTree", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"parseTree", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<Trace\>\"", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "trace", "]"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"grammarCheck", " ", "===", "$IncompleteGrammar"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Return", "[", "parseTree", "]"}], "\[IndentingNewLine]", 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Return", "[", 
            RowBox[{"{", 
             RowBox[{"parseTree", ",", "symbolRules"}], "}"}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Parse", "[", 
     RowBox[{
     "input_", ",", "grammar_", ",", "symbolTokens_", ",", "keywordTokens_", 
      ",", 
      RowBox[{"opt", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"Parse", "[", 
     RowBox[{
      RowBox[{"Tokenize", "[", 
       RowBox[{"input", ",", "symbolTokens", ",", "keywordTokens"}], "]"}], 
      ",", "grammar", ",", "opt"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ParseTree", "[", 
    RowBox[{"input_", ",", "grammar_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "parseTree", ",", "startProduction", ",", "styledParseTree", ",", 
       "styleRules"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"parseTree", " ", "=", " ", 
       RowBox[{"First", "@", 
        RowBox[{"Parse", "[", 
         RowBox[{"input", ",", "grammar"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"styleRules", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"NonTerm", "[", "x_", "]"}], "\[RuleDelayed]", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{"\"\<NonTerm(\>\"", "<>", 
             RowBox[{"ToString", "[", "x", "]"}], "<>", "\"\<)\>\""}], ",", 
            "Blue"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"Term", "[", "x_", "]"}], "\[RuleDelayed]", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{"\"\<Term(\>\"", "<>", 
             RowBox[{"ToString", "[", "x", "]"}], "<>", "\"\<)\>\""}], ",", 
            "Red"}], "]"}]}]}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"styledParseTree", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"parseTree", ",", "styleRules"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"startProduction", " ", "=", " ", 
       RowBox[{"First", "[", 
        RowBox[{"First", "[", "styledParseTree", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"TreePlot", "[", 
       RowBox[{
       "styledParseTree", ",", "Automatic", ",", "startProduction", ",", 
        RowBox[{"VertexLabeling", "\[Rule]", "True"}], ",", 
        RowBox[{"AspectRatio", "\[Rule]", 
         RowBox[{"1", "/", "4"}]}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.757287153826024*^9, 3.7572872216771708`*^9}, {
   3.757287634689281*^9, 3.7572876934867487`*^9}, {3.757287725455359*^9, 
   3.757287824962241*^9}, {3.7572878564582787`*^9, 3.757287879362458*^9}, {
   3.7572879118394012`*^9, 3.757288160008748*^9}, {3.757288349761772*^9, 
   3.757288351613283*^9}, {3.7572889289313383`*^9, 3.757289005745718*^9}, {
   3.757289165081707*^9, 3.757289166406535*^9}, {3.757289360893189*^9, 
   3.757289409590063*^9}, {3.757340091531893*^9, 3.7573400925674057`*^9}, {
   3.757340156334832*^9, 3.7573401565282784`*^9}, {3.757340515890152*^9, 
   3.757340526180696*^9}, {3.757340562484044*^9, 3.7573405975335827`*^9}, {
   3.757340933022827*^9, 3.757340933437621*^9}, {3.757340966854559*^9, 
   3.7573409700190067`*^9}, 3.757341013479683*^9, {3.757341133565576*^9, 
   3.757341133750214*^9}, {3.7573413629451227`*^9, 3.7573413752743187`*^9}, {
   3.757341421584483*^9, 3.757341423787003*^9}, {3.7573415600769033`*^9, 
   3.757341586136511*^9}, {3.757341624460498*^9, 3.757341624623155*^9}, 
   3.757341695002104*^9, {3.7573417542240133`*^9, 3.757341791794108*^9}, {
   3.757341964907411*^9, 3.757342100584084*^9}, {3.757342146356031*^9, 
   3.757342149031186*^9}, {3.7573422320844507`*^9, 3.757342233882634*^9}, {
   3.757342986668407*^9, 3.757342991181703*^9}, {3.757343021725061*^9, 
   3.7573430245026827`*^9}, {3.757348186509583*^9, 3.75734818726821*^9}, {
   3.757348432609365*^9, 3.757348438598989*^9}, {3.757348542730608*^9, 
   3.7573487161025267`*^9}, {3.757348807780157*^9, 3.757348807877275*^9}, {
   3.757348853901032*^9, 3.75734890920122*^9}, {3.757349127318986*^9, 
   3.7573491325688753`*^9}, {3.757349183127816*^9, 3.75734920603309*^9}, {
   3.757349279727099*^9, 3.757349320836172*^9}, {3.75735707187536*^9, 
   3.757357072643874*^9}, {3.757357112790221*^9, 3.757357193156868*^9}, 
   3.7573574231479273`*^9, {3.757359302539564*^9, 3.757359334814144*^9}, {
   3.757359366158173*^9, 3.757359383080202*^9}, {3.757359435585299*^9, 
   3.7573594511022797`*^9}, {3.757359492657642*^9, 3.757359600688477*^9}, {
   3.757359935887082*^9, 3.757359976604569*^9}, 3.757360016542276*^9, {
   3.75736006648175*^9, 3.757360068159026*^9}, {3.757701549727418*^9, 
   3.757701555250287*^9}, {3.7577037078609962`*^9, 3.757703708043736*^9}, {
   3.757705080342566*^9, 3.757705378744836*^9}, {3.7577054100903473`*^9, 
   3.757705486613831*^9}, {3.757706700406754*^9, 3.7577067250799437`*^9}, {
   3.757706774280291*^9, 3.757706881682398*^9}, {3.757706948416572*^9, 
   3.757706954048917*^9}, {3.75770700973498*^9, 3.757707010367838*^9}, 
   3.757708591061474*^9, 3.7577100591345367`*^9, {3.757711446222785*^9, 
   3.7577114490659313`*^9}, {3.757712040489437*^9, 3.757712047454317*^9}, {
   3.758657773667*^9, 3.758657776598665*^9}, 3.758658374624056*^9, {
   3.761420226240258*^9, 3.761420265317005*^9}, 3.76142030288695*^9, {
   3.761420350138957*^9, 3.761420389042295*^9}, {3.761421028267684*^9, 
   3.761421037845132*^9}, {3.7614212258947697`*^9, 3.761421231317347*^9}, 
   3.761421373967327*^9, {3.7614236829307833`*^9, 3.761423683707498*^9}, {
   3.7614237990432653`*^9, 3.7614237992557287`*^9}, {3.761423935278761*^9, 
   3.76142408280269*^9}, {3.761424133666154*^9, 3.761424607160438*^9}, {
   3.762461198400983*^9, 3.7624612501967707`*^9}, {3.76254221762576*^9, 
   3.762542309208*^9}, {3.762882072105544*^9, 3.762882093903145*^9}, {
   3.76288214542204*^9, 3.76288215081001*^9}, {3.762882686880164*^9, 
   3.762882738847706*^9}, {3.762892509740242*^9, 3.762892534266121*^9}, {
   3.76289585649084*^9, 3.7628959017176247`*^9}, {3.7628959655256233`*^9, 
   3.762895965688238*^9}, {3.7628960400408173`*^9, 3.7628960442566633`*^9}, {
   3.762896390996791*^9, 3.762896394497034*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"2cf6f8d1-ea3f-4462-bbc9-ba4759efb938"],

Cell["Grammar beautification", "Text",
 CellChangeTimes->{{3.762893252774466*^9, 
  3.7628932582838383`*^9}},ExpressionUUID->"a7a86422-b762-4408-a0bf-\
5c97515a2df4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GrammarPrettifyRule", "[", "rule_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Style", "[", 
     RowBox[{
      RowBox[{"rule", "[", "\"\<From\>\"", "]"}], ",", "Bold"}], "]"}], "->", 
    RowBox[{"ReplaceAll", "[", 
     RowBox[{
      RowBox[{"rule", "[", "\"\<To\>\"", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"NonTerm", "[", "arg_", "]"}], "\[RuleDelayed]", 
         RowBox[{"Style", "[", 
          RowBox[{"arg", ",", "Bold"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Term", "[", "arg_", "]"}], "\[RuleDelayed]", 
         RowBox[{"Style", "[", 
          RowBox[{"arg", ",", "Italic"}], "]"}]}]}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GrammarPrettify", "[", "grammar_", "]"}], ":=", 
    RowBox[{"Column", "[", 
     RowBox[{"Map", "[", 
      RowBox[{"GrammarPrettifyRule", ",", "grammar"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GrammarGraph", "[", "grammar_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"graphData", ",", "allSymbols", ",", "colorStyle"}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"graphData", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Map", "[", 
          RowBox[{"Thread", ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"NonTerm", "[", 
                 RowBox[{"#", "[", "\"\<From\>\"", "]"}], "]"}], "\[Rule]", 
                RowBox[{"#", "[", "\"\<To\>\"", "]"}]}], ")"}], "&"}], ",", 
             "grammar"}], "]"}]}], "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"allSymbols", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"NonTerm", "[", 
               RowBox[{"#", "[", "\"\<From\>\"", "]"}], "]"}], ",", 
              RowBox[{"#", "[", "\"\<To\>\"", "]"}]}], "}"}], "&"}], ",", 
           "grammar"}], "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"colorStyle", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"allSymbols", ",", "_NonTerm"}], "]"}], "\[Rule]", 
           "Blue"}], "]"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"allSymbols", ",", "_Term"}], "]"}], "\[Rule]", "Red"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Graph", "[", 
       RowBox[{"graphData", ",", 
        RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
        RowBox[{"VertexStyle", "\[Rule]", "colorStyle"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.76142673852979*^9, 3.7614267387204647`*^9}, {
  3.762894996453464*^9, 3.7628949968944693`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"fcd69484-be2f-4f01-a01f-824dd627e978"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.762892348233199*^9, 
  3.7628923490690603`*^9}},ExpressionUUID->"896de7a1-c6c8-4128-a81a-\
d0d973f2a60e"],

Cell["We can build a parse tree from the arithmetic grammar.", "Text",
 CellChangeTimes->{{3.762892636899596*^9, 
  3.7628926449278383`*^9}},ExpressionUUID->"df15d334-d589-4c81-818f-\
ebb65676a368"],

Cell[BoxData[
 RowBox[{
  RowBox[{"arithmeticGrammar", " ", "=", " ", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<E\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<i\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<E'\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<V\>\"", "]"}]}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<V\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<j\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<V\>\"", "]"}]}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<V\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<E'\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<+\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<i\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<E'\>\"", "]"}]}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<E'\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}]}], "|>"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.76289235354572*^9, 3.7628923566973963`*^9}, {
  3.762892404788412*^9, 3.762892406371882*^9}, {3.762892436654317*^9, 
  3.762892453821312*^9}},
 CellLabel->
  "In[171]:=",ExpressionUUID->"dbf32b82-7ca2-4677-8eb6-82ce11070df1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GrammarPrettify", "[", "arithmeticGrammar", "]"}]], "Input",
 CellChangeTimes->{3.762892770879414*^9},
 CellLabel->
  "In[219]:=",ExpressionUUID->"6380ba92-fcac-4137-9c7e-64a9264f9a31"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      StyleBox["\<\"E\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"i\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"E'\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"V\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"V\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"j\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"V\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"V\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"E'\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"+\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"i\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"E'\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"E'\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.7628927712394114`*^9},
 CellLabel->
  "Out[219]=",ExpressionUUID->"62435d8c-4cc6-4eb4-99e7-c74213453392"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GrammarGraph", "[", "arithmeticGrammar", "]"}]], "Input",
 CellChangeTimes->{{3.762895006373399*^9, 3.7628950081084003`*^9}},
 CellLabel->
  "In[172]:=",ExpressionUUID->"0fa33548-65ce-4abb-8284-039a8faacc9b"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
       $CellContext`NonTerm["E"], 
       $CellContext`Term["i"], 
       $CellContext`NonTerm["E'"], 
       $CellContext`NonTerm["V"], 
       $CellContext`Term["j"], 
       $CellContext`EmptyString[], 
       $CellContext`Term["+"]}, {{{1, 2}, {1, 3}, {1, 4}, {4, 5}, {4, 4}, {4, 
       6}, {3, 7}, {3, 2}, {3, 3}, {3, 6}}, Null}, {
      VertexLabels -> {"Name"}, 
       VertexStyle -> {$CellContext`NonTerm["E'"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["E"] -> 
         RGBColor[0, 0, 1], $CellContext`Term["+"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["i"] -> 
         RGBColor[1, 0, 0], $CellContext`NonTerm["V"] -> 
         RGBColor[0, 0, 1], $CellContext`Term["j"] -> RGBColor[1, 0, 0]}}]]}, 
    
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYcZvKamy4+tGL/JPewZ68s/9vLrV8TfOvwrv18
pkejDgX/s6/aM1P07OSj+4tO+MS2+f611/g0fYLHsXP79zC+fWum/sfepybj
7PqaK/vfPljKc+XBL/sn6UpSnWK39rOnle+Mrfpp//6ujXiExIP9HBMTv1z+
/N1e1sa8dVLq4/2fElP2mvl+s6/2Y7j++dOz/Ydu1Iu0tX2xj5gcKmp/88X+
1C4VP7X6z/bnWkJ9Qtpe7b/fK2T7NvuT/SMlhhrjX6/36z/2fHjL56N9f27o
kjsmb/eHdJ2yeq/4wf5aSuhRf7N3++ezaU4OufbWficHw/2ef+/2O83xl5YI
fG1vFhn6cXLv+/0Tr3LwaW55Ye8XFvon5fH7/T2bQrLb/z+1hwTLh/3GYPAY
zp+3sfu6ff4DOP8cf/eUxuW37RmhfPGcg2I5B6/B5SUrdpna61yC81ekv3n0
9fxpOH+K3cvJdi8Pw/kPXl77s8FjJ5z/T+tMJx/rCjgfFmEAJyTJ2Q==
         "]], 
         0.030239520958083826`], 
        ArrowBox[{{0., 2.}, {0., 1.}}, 0.030239520958083826`], 
        ArrowBox[{{0., 2.}, {1., 1.}}, 0.030239520958083826`], 
        ArrowBox[{{0., 1.}, {-1., 0.}}, 0.030239520958083826`], 
        ArrowBox[{{0., 1.}, {1., 0.}}, 0.030239520958083826`], 
        ArrowBox[{{0., 1.}, {0., 0.}}, 0.030239520958083826`], 
        ArrowBox[BezierCurveBox[{{0., 1.}, {0.1497620642896098, 
         1.3539810335992366`}, {0.32843653781555265`, 1.4106287144356808`}, {
         0.4503875111906732, 1.377640769385264}, {0.5855044122094823, 
         1.051439714439832}, {0.5225980516061934, 0.9418813545514252}, {
         0.3562001604931222, 0.8555953819542356}, {0., 1.}},
         SplineDegree->7], 0.030239520958083826`], 
        ArrowBox[{{1., 1.}, {2., 0.}}, 0.030239520958083826`], 
        ArrowBox[{{1., 1.}, {1., 0.}}, 0.030239520958083826`], 
        ArrowBox[BezierCurveBox[{{1., 1.}, {0.9355932806275475, 
         1.3158081925553935`}, {1.0803266108897343`, 1.492809597074613}, {
         1.2303508566930683`, 1.5299621070187697`}, {1.529962107018769, 
         1.2303508566930696`}, {1.4928095970746127`, 1.0803266108897354`}, {
         1.3158081925553935`, 0.9355932806275484}, {1., 1.}},
         SplineDegree->7], 0.030239520958083826`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {RGBColor[0, 0, 1], DiskBox[{0., 2.}, 0.030239520958083826]}, 
         InsetBox[
          RowBox[{"NonTerm", "(", "\<\"E\"\>", ")"}], 
          Offset[{2, 2}, {0.030239520958083826, 2.0302395209580837}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], DiskBox[{-1., 0.}, 0.030239520958083826]}, 
         InsetBox[
          RowBox[{"Term", "(", "\<\"i\"\>", ")"}], 
          Offset[{2, 2}, {-0.9697604790419162, 0.030239520958083826}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], DiskBox[{0., 1.}, 0.030239520958083826]}, 
         InsetBox[
          RowBox[{"NonTerm", "(", "\<\"E'\"\>", ")"}], 
          Offset[{2, 2}, {0.030239520958083826, 1.030239520958084}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], DiskBox[{1., 1.}, 0.030239520958083826]}, 
         InsetBox[
          RowBox[{"NonTerm", "(", "\<\"V\"\>", ")"}], 
          Offset[{2, 2}, {1.030239520958084, 1.030239520958084}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], DiskBox[{2., 0.}, 0.030239520958083826]}, 
         InsetBox[
          RowBox[{"Term", "(", "\<\"j\"\>", ")"}], 
          Offset[{2, 2}, {2.0302395209580837, 0.030239520958083826}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.030239520958083826], 
         InsetBox[
          RowBox[{"EmptyString", "(", ")"}], 
          Offset[{2, 2}, {1.030239520958084, 0.030239520958083826}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], DiskBox[{0., 0.}, 0.030239520958083826]}, 
         InsetBox[
          RowBox[{"Term", "(", "\<\"+\"\>", ")"}], 
          Offset[{2, 2}, {0.030239520958083826, 0.030239520958083826}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.7628950085957317`*^9},
 CellLabel->
  "Out[172]=",ExpressionUUID->"1550b8b5-9542-472d-a762-002399d9c6be"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testInput", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{"\"\<Type\>\"", "\[Rule]", "#"}], "|>"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<i\>\"", ",", "\"\<+\>\"", ",", "\"\<i\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.7628923844282713`*^9},
 CellLabel->
  "In[204]:=",ExpressionUUID->"6efb9402-eed1-4ecc-a237-8d92fcde72c9"],

Cell["\<\
Since no actions are specified in this grammar, a warning is given about the \
grammar being incomplete.\
\>", "Text",
 CellChangeTimes->{{3.762892570621649*^9, 
  3.7628926266095943`*^9}},ExpressionUUID->"c47c2fd1-b40d-4281-a4c2-\
d7d9694442a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Parse", "[", 
  RowBox[{"testInput", ",", "arithmeticGrammar"}], "]"}]], "Input",
 CellChangeTimes->{{3.76289239486596*^9, 3.762892397260335*^9}, {
   3.762892561432838*^9, 3.7628925622979593`*^9}, 3.762892600105403*^9},
 CellLabel->
  "In[218]:=",ExpressionUUID->"31ae04e6-e28b-4dee-a354-e39aa16a85ef"],

Cell[BoxData[
 TemplateBox[{
  "Parse","incompleteGrammar",
   "\"Actions in this grammar are not correctly specified\"",2,218,42,
   20944175440082894326,"Local","Global`Parse"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.762892600433241*^9},
 CellLabel->
  "During evaluation of \
In[218]:=",ExpressionUUID->"d77211b5-a36d-4c85-a2df-d1bcad3b7557"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "1"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Term", "[", "\<\"i\"\>", "]"}], ",", "2"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "1"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "3"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E\"\>", "]"}], ",", "1"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"V\"\>", "]"}], ",", "4"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "3"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Term", "[", "\<\"+\"\>", "]"}], ",", "5"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "3"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Term", "[", "\<\"i\"\>", "]"}], ",", "6"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "3"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "7"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"E'\"\>", "]"}], ",", "7"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"EmptyString", "[", "]"}], ",", "8"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NonTerm", "[", "\<\"V\"\>", "]"}], ",", "4"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"EmptyString", "[", "]"}], ",", "9"}], "}"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.762892400825457*^9, 3.762892413008812*^9}, 
   3.762892455580511*^9, {3.7628925559883957`*^9, 3.762892562909225*^9}, 
   3.762892600435131*^9},
 CellLabel->
  "Out[218]=",ExpressionUUID->"177bd292-7ffa-4fbd-8dee-4f2b0787f639"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["PL/0 Implementation", "Chapter",
 CellChangeTimes->{{3.757707693055922*^9, 3.7577076948058662`*^9}, {
  3.7628926625129557`*^9, 
  3.762892664933724*^9}},ExpressionUUID->"9764d62a-13d8-4273-861c-\
c2aab0ea6f24"],

Cell[CellGroupData[{

Cell["Lexer tokens definition", "Subchapter",
 CellChangeTimes->{{3.758399824330983*^9, 3.758399825304015*^9}, {
  3.761427194757874*^9, 
  3.761427199685686*^9}},ExpressionUUID->"bab3d486-94e8-495d-b547-\
0903f2fcb95e"],

Cell["\<\
Here we define the tokens that will be recognized by the lexer.\
\>", "Text",
 CellChangeTimes->{{3.762892857688925*^9, 
  3.7628928694794617`*^9}},ExpressionUUID->"3c77fe03-00e4-4637-85bd-\
4d5bd8a422da"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"tokenSymbols", " ", "=", " ", 
    RowBox[{"CreateTokens", "[", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\< \>\"", ",", "\"\<Whitespace\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<\\n\>\"", ",", " ", "\"\<LineBreak\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<:\>\"", ",", " ", "\"\<IncompleteAssign\>\""}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<:=\>\"", ",", " ", "\"\<Assign\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<*\>\"", ",", " ", "\"\<Times\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\</\>\"", ",", " ", "\"\<Slash\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<+\>\"", ",", " ", "\"\<Plus\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<-\>\"", ",", " ", "\"\<Minus\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<=\>\"", ",", " ", "\"\<Equal\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<#\>\"", ",", " ", "\"\<NotEqual\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<(\>\"", ",", " ", "\"\<LeftParenthesis\>\""}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<)\>\"", ",", " ", "\"\<RightParenthesis\>\""}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<;\>\"", ",", " ", "\"\<Semicolon\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<,\>\"", ",", " ", "\"\<Comma\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<.\>\"", ",", " ", "\"\<Dot\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<>\>\"", ",", " ", "\"\<Greater\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<>=\>\"", ",", " ", "\"\<GreaterOrEqual\>\""}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<<\>\"", ",", " ", "\"\<Lower\>\""}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<<=\>\"", ",", " ", "\"\<LowerOrEqual\>\""}], "}"}]}], 
      "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tokenIdentifiersAndLiterals", " ", "=", " ", 
    RowBox[{"CreateTokens", "[", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<identifier\>\"", ",", " ", "\"\<Identifier\>\""}], "}"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<number\>\"", ",", " ", "\"\<Number\>\""}], "}"}]}], 
      "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tokenKeywords", " ", "=", " ", 
   RowBox[{"CreateTokenKeywords", "[", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<const\>\"", ",", " ", "\"\<Const\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<var\>\"", ",", " ", "\"\<Var\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<procedure\>\"", ",", " ", "\"\<Procedure\>\""}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<call\>\"", ",", " ", "\"\<Call\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<print\>\"", ",", " ", "\"\<Print\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<begin\>\"", ",", " ", "\"\<Begin\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<end\>\"", ",", " ", "\"\<End\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<if\>\"", ",", " ", "\"\<If\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<then\>\"", ",", " ", "\"\<Then\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<while\>\"", ",", " ", "\"\<While\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<do\>\"", ",", " ", "\"\<Do\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<odd\>\"", ",", " ", "\"\<Odd\>\""}], "}"}]}], 
     "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.757707294752634*^9, 3.757707329734219*^9}, {
  3.757708239562243*^9, 3.757708247301545*^9}, {3.758396841840823*^9, 
  3.758396857327552*^9}, {3.758397220477949*^9, 3.7583972258113413`*^9}, {
  3.7586540231677933`*^9, 3.7586540433465843`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"478722ae-2361-477f-afb1-f1ba00b38f86"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tokenSymbolsNFA", " ", "=", " ", 
   RowBox[{"SimplifyMachine", "[", 
    RowBox[{"Apply", "[", 
     RowBox[{"RegexUnion", ",", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Regex", "[", 
          RowBox[{
           RowBox[{"#", "[", "\"\<Symbol\>\"", "]"}], ",", 
           RowBox[{"#", "[", "\"\<Name\>\"", "]"}]}], "]"}], "&"}], ",", 
        "tokenSymbols"}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tokenSymbolsDFA", " ", "=", " ", 
    RowBox[{"NFAToDFA", "[", "tokenSymbolsNFA", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"identifierRegex", " ", "=", 
   RowBox[{"RegexConcatenation", "[", 
    RowBox[{
     RowBox[{"RegexAlphabet", "[", "]"}], ",", 
     RowBox[{"RegexStar", "[", 
      RowBox[{"RegexUnion", "[", 
       RowBox[{
        RowBox[{"RegexAlphabet", "[", "]"}], ",", 
        RowBox[{"RegexDigits", "[", "]"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numberLiteral", " ", "=", " ", 
    RowBox[{"RegexConcatenation", "[", 
     RowBox[{
      RowBox[{"RegexDigits", "[", "]"}], ",", 
      RowBox[{"RegexStar", "[", 
       RowBox[{"RegexDigits", "[", "]"}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"identifierRegex", " ", "=", " ", 
   RowBox[{"Regex", "[", 
    RowBox[{"identifierRegex", ",", "\"\<Identifier\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"integerLiteral", " ", "=", " ", 
   RowBox[{"Regex", "[", 
    RowBox[{"numberLiteral", ",", "\"\<NumberLiteral\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"symbolRecognizer", "=", " ", 
   RowBox[{"RegexUnion", "[", 
    RowBox[{
    "identifierRegex", ",", "integerLiteral", ",", "tokenSymbolsDFA"}], 
    "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.750545689764975*^9, 3.75054569007624*^9}, {
  3.75054756997795*^9, 3.75054757074094*^9}, {3.757189645862894*^9, 
  3.7571896462142572`*^9}, {3.757189723083748*^9, 3.7571897448523893`*^9}, {
  3.762892908482109*^9, 3.76289292341813*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"5f478895-e67f-4842-8936-a7f82f98e1dd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"keywordNFA", " ", "=", " ", 
   RowBox[{"SimplifyMachine", "[", 
    RowBox[{"Apply", "[", 
     RowBox[{"RegexUnion", ",", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Regex", "[", 
          RowBox[{
           RowBox[{"#", "[", "\"\<Symbol\>\"", "]"}], ",", 
           RowBox[{"#", "[", "\"\<Name\>\"", "]"}]}], "]"}], "&"}], ",", 
        "tokenKeywords"}], "]"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"keywordRecognizer", " ", "=", " ", 
   RowBox[{"NFAToDFA", "[", "keywordNFA", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7505475524660587`*^9, 3.750547578156279*^9}, {
  3.762892890662448*^9, 3.7628928999377327`*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"27ceeb91-84ca-4f8f-b889-0991a3c2b621"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.762893019242077*^9, 
  3.76289302017313*^9}},ExpressionUUID->"7d9e5c7a-444d-44de-bac5-\
52d4287c0baa"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "testProgram", " ", "=", "\[IndentingNewLine]", 
   "\"\<var n;\nbegin\n   n := (1+4)*5;\n   if n # 16 then\n   begin\n      \
print n;\n   end;\nend.\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.750087542246511*^9, 3.750087556285872*^9}, {
   3.7571898361710367`*^9, 3.757189844338978*^9}, {3.7571898795910482`*^9, 
   3.757189884095022*^9}, 3.7571907007273607`*^9, {3.757191843678382*^9, 
   3.757191844209124*^9}, 3.758397209647339*^9, 3.758397864293529*^9, {
   3.762462528757049*^9, 3.762462546748828*^9}, {3.762541772740735*^9, 
   3.7625417779870987`*^9}, {3.7625555086764708`*^9, 3.762555530246003*^9}, 
   3.762635445378129*^9, {3.762893026516049*^9, 3.762893028943925*^9}},
 CellLabel->
  "In[234]:=",ExpressionUUID->"755fc599-1137-4d38-b150-c3b15f38e174"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tokens", " ", "=", " ", 
   RowBox[{"Tokenize", "[", 
    RowBox[{
    "testProgram", ",", "symbolRecognizer", ",", "keywordRecognizer"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7577075887691603`*^9, 3.757707619469573*^9}, {
   3.757710161500033*^9, 3.757710163165203*^9}, {3.7577113871881037`*^9, 
   3.75771138942542*^9}, {3.757712097580559*^9, 3.7577120987472267`*^9}, 
   3.758396952036305*^9, 3.758396988339271*^9, {3.7628929514871798`*^9, 
   3.76289295575058*^9}, 3.762893034225111*^9},
 CellLabel->
  "In[235]:=",ExpressionUUID->"3a4b5cb8-85ab-443d-8f69-d704df1dd23a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", "tokens", "]"}]], "Input",
 CellChangeTimes->{{3.758396989487317*^9, 3.7583969945421257`*^9}},
 CellLabel->
  "In[236]:=",ExpressionUUID->"a3da1426-9fa3-4da2-8d95-09fc4f17fd8d"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 27, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Type", "Value"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 27], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          Association[{All, "Type"} -> 1, {All, "Value"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Type" -> TypeSystem`PackageScope`AtomShape[124.80000000000001`],
               "Value" -> 
              TypeSystem`PackageScope`AtomShape[48.00000000000001]]]], 
           20, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1891437121], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Type", "Value"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 27], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1891437121]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Type\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Type\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1593864976][{All, "Type"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[All, "Type"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Value\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Value\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    1593864976][{All, "Value"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[All, "Value"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[1, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[2, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[2, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Semicolon", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[3, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[";", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[3, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Begin", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[4, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["begin", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[4, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[5, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[5, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Assign", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[6, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[":=", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[6, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["LeftParenthesis", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[7, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["(", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[7, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["NumberLiteral", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[8, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[8, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Plus", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[9, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["+", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[9, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["NumberLiteral", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[10, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["4", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[10, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["RightParenthesis", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[11, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[")", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[11, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Times", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[12, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["*", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[12, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["NumberLiteral", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[13, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["5", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[13, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Semicolon", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[14, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[";", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[14, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["If", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[15, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["if", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[15, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[16, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[16, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["NotEqual", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[17, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["#", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[17, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["NumberLiteral", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[18, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["16", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[18, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Then", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[19, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["then", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[19, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation["Begin", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[20, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{124.80000000000001`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["begin", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
                  GeneralUtilities`Slice[20, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Deploy[
                 Mouseover[
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    27 (-20), {1, 27 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 27 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    27, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 27 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    27 20, {1, 27 - 20 + 1}])}]}, "   "], 
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    27 (-20), {1, 27 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 27 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    27, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 27 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    27 20, {1, 27 - 20 + 1}])}]}, "   "]]], Background -> 
                GrayLevel[0.98], Alignment -> {Left, Top}, 
                BaseStyle -> {ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1593864976},
                     1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1593864976},
                     10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1593864976},
                     30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1593864976},
                     100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show all", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1593864976},
                     100000000, {}]], MenuEvaluator -> Automatic]}}], 
               SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1593864976][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1593864976]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1593864976][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {238., {279., 285.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.758396995401924*^9, 3.7583972464171743`*^9, 
  3.758397872223709*^9, 3.7586553533103867`*^9, 3.761420817095357*^9, 
  3.7624625542406693`*^9, 3.7625417829576*^9, 3.762555542212228*^9, 
  3.762892959233074*^9, 3.762893044908225*^9},
 CellLabel->
  "Out[236]=",ExpressionUUID->"4a657748-6afb-406e-8f02-e9e02c1fc120"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Grammar definition", "Subchapter",
 CellChangeTimes->{{3.758399830686873*^9, 3.7583998314688797`*^9}, {
  3.761427205364833*^9, 
  3.7614272070327377`*^9}},ExpressionUUID->"eaca36e0-bc36-4820-9969-\
a42cd00fd781"],

Cell["Here we define the PL/0 grammar in BNF form.", "Text",
 CellChangeTimes->{{3.7628978350993*^9, 
  3.7628978538461847`*^9}},ExpressionUUID->"c4175d0b-3fe9-4a9c-aa86-\
bd239621b79c"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
EATrI3otCIIgCNZH9FoQBEEQrI/otSAIgiBYH9FrwZ/kXs6n06lnKSnzYsCv
RRD0pOdmct1My8kI+LUIghk81evqY6vTTf1ucpg2KHIwlepdSmPn2d0+u16c
C+dsu6RtQMprf2wslSpViipUqEDjx08I+POzOvHJR/l5vTfvfcPjWi9qzcft
vxAb8Gu+1jB6V4uLESNH0kMPPURVqjwW8PJQTNk9levcqKjRhsf9b8T/6IFh
DwT8eq81EtIvcPm/MutVv5y/bt269OCDD1LvPn0Cfq96jp84yfpxyy23UK/e
vd3K6w+9jj4fw+/CC1NfuCb1ukyZMh7ljf76Gzo1YyYlrFlDu1q1Cni9UZxZ
uIh2tGjhMC31wEHaXKcOf456/XVKjtzi1rkDpdcLDyzi8/XY1LNYn9PJv6fR
vk6dKOdSCoVUrBjwZwusoNcPPPAALV+xwlJlHSi97ry6C39vyNGNbucNf+YZ
Sjt8mOL+6kXxw0e4lddq7Y+/9Rps2RpFZcuW9Sivv8u6devWltBrBTRV9Nq9
ZxgI/KnXZhG99h9W0Ovrr7+e352rsaxFr/1Dceh1wvkL7A9NTUu3XFkHQq/7
hPelWwfeSjXG1aDIU1ttjjHSa/RpKwdVodsH3U6NZzSxaafz//2XRkaNoqpj
Hqey/cvS48FP0JK4pZym1+u8y5fpg/kf8Ha/zf2LpY75S6/zc/MoftQoimzY
kEJr1mT9TI+PL0zLzqG4Xr1pc926rJ2xv/5KuRmZWt5tb73FdWpny5YU+dJL
tP+HH+iy7pmenj2HIgr2hz31FJ8/YdUq3p8WF8fHh9euTRurVuXP4Pz69Vpe
b/Qa7ZwaE7G3rzGe/c7cFlx3ms16hd7+5x0bvT6cdISaz36D7hx8J5UfWZ6+
X9OVMnKzOG3Y1uFaHXhoxEN0z5B7aOqeadp59WMxCtQlX75rzvBUQ4zuCShf
FcoA4HPdyXU5rcG0BtRweiMub5TZhws+5HKbHj3T1LtqVNYAafg+5Me13djv
Rrf6QfkFdfG6666jAwcPWqKs4xIP2dQNe/t6T0I01Z5Ym24ZcAt1W9e9iF6v
i19Pz056ltNRr8bvvDIupupxp1Xf0W0Db+M2TrV/qg9pzxcrvjR97YHQa6N7
ysnPs6mLKw+t4u2f1v/M2/iM/PcOvZfrVc1xNbmO7Tsfo+k16u67897j8kRb
cCbtnKmyBthfJegx+nZ1J742bK86vFpLv5CYxHqdfPGSW2VVHGVd3HqNsn5m
4jNc30r3Lk2Pjq7I84vUMc70ekb0LN5fb0o9+nnDL3TzgJv5GabmFPaBxmwP
5vTHxlSlX0N+o08Wf0J/bPyT0/R6/c2qb4tVq4E3ep0Uvpmff8bJU3Rhwwab
tPgRI1gP0+OPUn5ePiVv2856irRj48ZR1KuvUlbCecpOvkg73nuPDg8cpOWF
Xu/65BPKz8ml3PQMinj+eUoMDeO07KRkCqlUiVJjD/B2xqnTlLLf1s4xsq9z
Cur52cVL+HPC6tWUeS7B9P3+s3+uNpfBXq+VjfHytJfpo4Ufcf1Rep2Zl631
5QZEDOR3EWk/rO3GeZW24d2HpuE46BvSsvJy2M+JtkW1FdhecGChT56TK/DM
kiIiuY91es4/pvMZ3RNwpdflhpejrmt/KHw3lrbjPi72u3pXXZU1UHoNrcYx
Q7cO4/602XvbsCGEbrzxRrqUkmqJsr6Uncp1ov2yDg71+qnxT/H+NkvaUP0p
9bm8lF6jft7Q9wYu39Hbgtg2xLFL45ZxutI29Jn6RwywqftHLx7n7206s5mm
adjefDLS9LXjXc0pKMeLO3dRSvQ+t8rL07I2uiczeg09fm3W6/y5V1hvLj/0
95Reo3xbzH2XXp/dnLc/XfypqbIG0Gf1/XiO0Im1R9Zp6Xn5l+nOO++kBQvN
v/9myxoajn4i+ouelHUg9PpIcqENCFsJ2+g3qWOc6XWjGY3puj7X0bn087z9
56YefNzc/fO09+X6vtfz3E2VB/UC/5VewxbA/y9XfmX6midPnkzdunUrwvAR
5vtO3ui1ERH16tnYtXq2F2gpbAm1fW7FCtrSqLG2Db3Wt1d7O35OJ6ZM4c/Z
Bf3LjVWqcN3LdeITMtJrb3E2fo2+GOy0i1mFdR06pfR6xaGV/LnLmu/ZXgbo
W9839D4+Vmnb2B3jeBt9cmwnZ13pQ3vjD3dGTJcu3Oe2B30lb8/t6p5c6TXe
qd3n9vL+5YdWcJuHdg7pRu+qq7IGSq83Hgt1+75q1arF9s3QYcP8Ur+8wdH4
9anUMzZlizYKbZXS6x/X/8Tp82Lnc1kpWx1+PqQrbYtNLOwfo47XmlDL5nu9
8Yc7g/1kDupm/LDhXp/b6J7M6PVfYb1oRNRI/oy5+A+PfJjbbaXXFUZVYJ8q
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
0GVeMCN6Fu+vN6Ue/bzhF7p5wM1UfmR5Ss1J53TcK9L/CutFnyz+hD+jfS6O
55QUvpm1NePkKbqwYYNN2u52n9H+rl0pLyub9TX8mWcocVMopyWsXk2bn3uO
0uPjKefiJdreooWNXm9r3pwO9etP+dk5dHbJUgqpWNFGr5Hn7OIl2rnQNzBz
vdCpG/reQI8HP0GjtwXRK7Ne5fJaGreM01Gm0LUHhj2g1Qelt0qvwZ+belC3
dd35c5slbbTzK72GVg+IGEhDtw6jkVGjOE09my5rvqd+m/tzf+G5Sc9R/r//
8rmv63Md9zPn7p9HQdvGUPtlHbTzqrozMHIQ9xtRt1ccWqmlbzoexnUK9dVe
r4uj/oheC0LJxVO97ry6C7c3aPPUPug0/qNNQxraPmzD3kHbBVsF26p9Hrtj
HG83m/UKb8PWmLlvNn/+af3PnDY/dkGxjV83mtGY23LM/cU2tEJ/j2hvHxz+
IH/efDJS0wRXZXWiQGO7devmkJiY/d49v8ws1tjUg3HavoM9elDsL7/w5/0/
/EAHe14pB2iv0uuM4yc4b3ZSspa+pVFjn8w3+3H9T1w+82Lns99DjWt8MP8D
7ZiIk1u4z1e6d2nWT1V/lF5D67ENnYWtDH+Lyqv0euOxUJvvTcvJ4PPBrsf3
Augxjt13PoZOpZ7h9CpBj9G0vTNsbHbwxYov+djvVnfmZ6x8QvY4Gr/2V/3R
I3otCCUXT/UaPj20N2iH7dOUnTEiaqS2D7bUbQNv489Kr2ftm8Pbqu1FOw0b
CZ8n757CaWhji0uv0YbfNfgubXt69Ew+bsiWobyN9lb51qNOb+e0b1Z967Ks
cvPyKbFAEx2RnZPr1fPLOHGyUHOTr/w27ejo0bSnQ0f+jPHoo2PGaGlJW6M0
vcZY9saqVW3Ot/Pjj32i1x8t/Mjh2AR0VH9c7Ym1eX/w9rHaPqXX0D+1D/Yx
dFbpp6oz0F/9+Q4kHnT4vWDZoeV8DOol/ODYB31tt/Qz7hMg7dilE+zHxn6k
o58AbbW/P0d67a/6o0f0WhBKLp7qNewPtDewf9U+jEPiv719DX+gI/vakV7D
B6nGJZGGMXJ39XpJ3FLNl+ro2l3Z17gObEPv7e0jT9rb4wWa2rVrV4fs2xfj
3fNzZl//XOif2F9gw8PfrdLYP67s6/+0Pjc9Q0vHGLUv9Lr7uh81f2/I0Y0a
KDd1DPzkahwY4DfxfI3/6fXDIx9mHc3Oz+V0aKzKq+qMyqNAXYOuox+g/16g
nmthvb9MO8/u1vz0YSc225wnMTOZ7e8yfcrw2Ln9/RnZ176uP3pErwWh5OKp
XqOtQ1sGewK+a4zzYbwYafBrPhFcjceh0W6jHUPbBJ1GupFeq/Fr2DWw0zEW
qNdr2PMYP1Rj0LDXsA2dV9e2/cxOTntq/FM0cdckbfzaVV5lD9WfUp9+2fAr
j3viOvTjj1azrwFsaG38ukC3MX6txrjPr1vHPu7ctHSee4Z5aTbj12++Sadm
zuLPl3bvKTJ+7SlqfgN82v0jBvB48MeLPuaxW6TDDkYfDn5waCXK8vXZzTlN
6TV0F3PFXpv1utPxa3u9Bh8u+JDzwrcNW/rXkN94PltGbhZdyEiiV2e/xuPW
6GsqvUadQV7Mb4QvH3UTNj/G4N+c8xanYVwH9UWNX9868FZtG2M5/qo/ekSv
BaHk4s38cMzDgeah3S03vJyN//lw0hFuZzGXDLYI5o4r+9tIr7GNMWzM00Fb
1yO0p41eo2105OvEvCX9tX258ise70S7rdpIM3kxJ65iUCX23Tec3oiiz1+x
f33R3vqDzDNn2f8dVqsWRb70Eh0bP94mPX7UKNr6yiu084MP6MCff9roNeah
7fzwQ56HFv3lV7T9nXd8tl7KmiNrWbtQB1CeqCvwfaA/B/82yk/5mpX/HHMa
lF6j/OEDQf3CHAdH88Md6fXFrBT2/6DeYc4j6hHOj/oH7Ww6sxnrLbQY9Uz/
uwbUEfQxMN8RevzytJe1Od7KL+MIdYy/64/otSCUXKz++2uh5KH0GrZvoK/F
aoheC0LJRfRasBqi184RvRaEkovotWA1RK+ds3FTKK1cuSrg1yEIQvEjei0I
giAI1kf0WhAEQRCsj+i1EEjSczN5jjfWJQv0tQiCIOixWpx70WshkKjf2BXX
Oux6jh47TpUqV6aMzKxi/d7GTZrQwkWLiv1+AzlXrUyZMpSkW4PPCoSGhdNT
Tz0VkO8OVB1wBtaIqIGYP16u33StEai4uc4QvRYCSSD1um27djR02LAi+72J
XXry72m0r1MnyrmUwmvPODrGWVttJhZazPff09mlyyg9/ihtadzErbxGeo01
dhBPJu6vXhQ/fIRb92wmrzO99lWcWE+uy0ivvbkuM3md1QEz9cdTXF3X39Om
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
Onu8LUbvHmP3ubQ/fPD2IVJlfFXlJy83qpy0XNpSLqZeMvKfSIiWjxY0l8dH
Pi6PjXhMPl38mWTdzHaqvULjtsjL016Wh4c+LLWn1JYVUStz1Q3nn5nwrGqH
R4c9qo5Dotc5/WyhW7Yqn6i9tLPnzkvx4sUlMSm/H6FAzc3pNxfXrFHndzVu
IueWLJWb2Tedy/s/XNXr5CNHZVvdupJ1LbXIed9r2lTGBgQ43YZ7L+y3+x61
PzwmMVbemv22evcPDnlQXgh8UeYenm/kz/7zTwmIGKfeO9KfD3zBeM91ptSx
W/a5lAsq/VpmmnQM6SQVx1RUfa/tyq9Uv9JlD985Ql2PcVZjUg0pOaikvD37
nVz179z5B+na9UePjyNCiGcwo9fXb2QqP2DnkB/UHNFi4cfqeOnxZSo9/UaG
0tzSw0vL0B3DlMbguu4b/IwytF5Dq3HNqN2j1VwGvcZ5nLvP/z6l258s+lTu
H3S/ZGRnue257XH40hH1HJhPUYdJf0zO5Q9vvrCFtF/bQYIOzJQu67qqa/Q6
IjUrXWl58YHFpc2KNtJzcy81b2KNUlh7YZ7H/P302Kflly2/StUJ1VQ5f1zY
Z9QN+oy8aI9xEePl1y19ZEPMRqefrW/fftKwYUO7aatzNLdSpUp20zJzNPzC
8hXq//h16yT9YryRlnb2nBzv3Vv259i3e1u1kqN+fpIaG+dUXk1Beg17PTM5
RZL27pPkQ4ftXnOkSxeJGT7CVF5oV9u2bZ1uw8tpCeq94f3hXXRd/2Muf3jY
qXCpP72+DNs5XGYenK3eY4mBJeT8tYsqfeKeQJXv2YnPyX9De0vr5a3Ve0Ta
8sgVMuH3icY6DuUC9Cukt1v9nUprtayVfL3qG/X/x4s+Meqm9RrrXqxxcS9o
t239R44aJa+99pryLXhyHBFCPIMn/OFrTqw15jPYAABzEOwCfY3W6y0nw3Ll
RVnQKvwPOwVzz/R9v6lr9bzniNNnzopfjmbY40iOHebsc8Efac8fro+xbki6
nqzWEA2DGuZqC9hA+nrY1rCpCmuv/tsGqPNLji1Vx5vjQvOVBb1GfBPsrKK8
o9i4k1KmTBl56KGHlE/c3jWz58yVGjVqFPn9Q4NTY2ON/Wvo94UVK4tUhivx
Zmk57zssp97X4y+Zyt+nT1/56KPmRc6n15R5/eF4N/p9p2SmSu/QX9R166LX
q3OwodFntM0MMrNvGP878oejH0GHa06uaZxrNKuRujY+9bI61nrdL6y/w3pD
pxFnV7JkSZk4MdBUmxFCvIcn9HryH1Ps+vYA5jFco/X6bMr5XHlRFmwS/P/E
yCfk5009jfie08lnC6wP4n4RT2WPjEznbXN7eo05s9uG7mrNYfs8dafWVelj
IwLU8dS90xyW66i9tO20/+JBdYznxDF86/oa6DXsMjPvKTvn/Xbp0lWaNmtm
Nx32tY+Pj+k+BBv2Stg2U3ld0evIvv3kWK9epusN+9perHxhONLrHWd2Kf8H
tNW2jwRHLlfpWH/Ch+KoXEd6fSb5nDoPP5M+9+3qdurcnvN71bHWa1v/e14m
T54itWvXlqSryabbjBDiPVzRa+y9YY7os7VvrvOrT6xR579Z9a3al7VF2xNa
r21tDVCQXp+6eqbA+pw6fUa6detml8NF+O2OPb3WWltvWj313HgW+OthMyEd
vm2kw+d9q21v5irXUXvlta9Rtj372na/u6hs3LjJoc+7oP1rT2NWrzMSkySs
Vi1l35u997vvvSdjxjqOY3OEI73We9CDtg9WPhL9OwP0HaQjLgH2ta2fCOtA
/f/VjBR1PWxn23JxDfaja02ula+P5rWv5x1e4LDeWJ9gD/t2v2NCiHtwRa+x
tsccgXlq2r7pxn4s/IKVx1dRsWbwCSKOC/u8tvttntBrT9rXWq+xdxmXdErF
nuln189cKaCSqjvWKdiHxvxsG2PnqL0Qm4cYNsTlYT8Te//YE9C2E3BVr6GL
ZuLDPY1ZvY4NCJBD37c3fV8dHx4dHVPkvIXp9abYzXLo0hHlD7HVa8Rn4Bhx
aCjjq5Vf5/O1IJYQ8ZXYy7bdv9b29JfBX6r+pfuizueMXiM+vHt3P4fp1apX
F/+BA297HyCEOIer30v5fm17eXLUk8rWtNWTyIQopc/lR5dXsVSYu6BxOt0T
eu0u7Ok1bOUOIR1V7DfAc8PvqfUaIO4I39GA3xNzLvzZtvZTQe21MXaTst2h
y7CjtA9V46peh2/fIeXKlXOY7uj3157GjF7fSL8u4TnrC/jhzd4Xz2v299eO
9Dr89A7VH9DfsVbTcWlar9GHRuwaqeL89ZjQaRrsp/x93N+VHW47PrCPhFjH
CqMr/BUfnmO7X0m/9Vt6Z/S6fYcO0qPHzw7TixUrpvZNbncfIIQ4B79vdm+A
uLMSJUpIrE38ti3wTdwp3zc7M2u27G3Z0vQ98S03xNcddBA3fjcC/9Kbb75Z
pN+vEUKsBfX63qFnz15SuUoVUzFWnsKMXp9ftFiuHjjo9brfKeB7pIgn9PX9
QC5dvuL1+hBCzEG9Jt4E37MODLT297cJIcQKUK8JIYQQ60O9JoQQQqwP9ZoQ
QgixPtRrQgghxPpQrwkhhBDrQ70mhBBCrA/1mhBCCLE+1GtCCCHE+lCvCSGE
EOtDvSaEEEKsD/WaEEIIsT7Ua0IIIcT6UK8JIYQQ60O9JoQQQqwP9ZoQQgix
PtRrQgghxPpQrwkhhBDrQ70mhBBCrA/12r2kZqXLuZQLci0zzet1IeROJ+tm
thpPCelJXq8LId7GVb1ecGSRVB5XWYoPLC4VRlfw+vN4m6D9M6SYfzEZFzG+
wOueHvu0pdqrcZMmsiw42Ov1APGpl1UbNp3XzGt1GODvL126dPVM+dk3JcLX
V5KPHvN6W1ud2MQ41Rc+W/xPr9dFk30jWyKaNZOUyCiv14XcW7iq19Dq0sNL
y+Q/psj8IwvdVq8u67qqcRoat8XrbVQUvKXXrrYX9To3ZvX6zMxZcrhzZ8m8
miyhVavavebckqVysN13pvLea3hLrw916Chn58yV+PXrZd8XX+RLP78sWA58
285UXkLM4qpelxhYQl6e9rLb63Wn6rWzUK8dc7fr9Z4WLdRcbiYvuT0UprlZ
aekSVru2pJ06XeS8hJjFrF63WPixmlNtsdWfwduHSJXxVeWBwQ9IuVHlpOXS
lnIx9ZKRfiIhWj5a0FweH/m4PDbiMfl08Wdqr2rZ8eB85YL/W/O9kReahDXC
w0MfltpTasuKqJW56obzz0x4Vjqt6yyPDntUHYdEr/NoO0ZdOZGrvnnt6wPx
h4w6+238KZ9eb4zdJPWn11fpz018XqbsnZqvrTuH/KCep/qEZ2Tvhf0qzZn2
cgYzel1QvTbEbFRpP2/qqY7xF8drT4SoY/yP/E+OelJ+XN9Nak2uJT4BPnL4
0hFDr9+e/Y7qF2iT9+Y1lfPXLqq82X/+KQER4+TZic/JI8MekdeCXpNtp7e7
tQ94Sq/TL8ZLaLVqkpmcUuS8BeGo/6TfyJCak2uq/aqD8YclNumkGpOVAiqp
PWHd1m/MeEM+mP+h8pU1mfuu0dYA53HNwPBB8tTYp6TU4FLSd2s/lRadEKPS
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
    "], {{0, 334}, {
    492, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{492, 334},
  PlotRange->{{0, 492}, {0, 334}}]], "Input",ExpressionUUID->"149dc345-7f1a-\
4ff6-bc22-f3a417052e81"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvee7VEXah/ue8OF8PP/Cua6ZcUQk55wEFAQEUaJERVFQyShZAQERiQYk
CKiAoICIZCVHRUSyoIAKKqCOk5z3fafOvguqp/Zida/Vvffupje/DzfsXqGq
VoWnfvVU1Vr/X88n2z7yf/7Xf/3XwP+n4J+2PYY2HDCgx/B2/2/Bj/b9Bz7W
p//Dve/uP+jhPg8PqNHz/yo4+Pj/8V//tbDg+v+74O9//9uYf//40jX+8ZUQ
QgghhBAlS4H+ND+9dI1/fiWEEEIIIUSJIf0phBBCCCGyifSnEEIIIYTIJtKf
QgghhBAim0h/CiGEEEKIbCL9KYQQQgghson0pxBCCCGEyCbSn0IIIYQQIptI
fwohhBBCiGySD/rzwO7V5g+33W6uXPw04zA6dW5vRo8aGDu8P91+h1m3ZuEN
94r0+eH8flOrbm2zbcuynKclir073k+rrs2aMd40v6eZ/bso9bQ46nhp4eNN
S219+fHCgZynRZQMJW1T31v+uqlavbqpXbdOVp6ntLTfLz79yD7HxW/25Dwt
ojDTp41L9DWlhaLozwc6tLV1NYznxg0ttjQWR9s++vkG8/XJ7bHD8/Wnf69I
n46d2puJE57JeTri8OuPn1sN+q/fjse6/mbSn//+x2nz6uyJSX/nE8+PG2Y6
F2iU4g43aLPKVaxky+/1VybdcN1tZcqaLz/bcEMY/fs/YoYP7W///u+/nkhq
A2HjusU5z8ubkZK2qU2aNjajRw40f7t6xP5Gj5akpiqJ9puNdAfjyJX+TKUl
ALscdl1R229U3FE6Jqz9V65WzYa5ef2StPJg385Vth4lO3/h7C5z+OC60HL7
/MCH1+rf9wezWm5Fpaj68/HHe9l8CfLzpUMZpOW0+Z+/nbzheHGPLdPVn/lG
XO2UjTDpfytUqmR++SH9+pAP3Ez689jhjaZM2TuT/s4nrl76zPYtm9e/Vazh
YrP69ett7TacOfGJmf/GVNvely+dU+g6/Gct773H9jF+GGH6c+6rk0Pt4N9/
/rLIaU5mF/OBkrBFcaDslr09J5F/VapXM4f2rS2x+Eqi/RY13XHyPhhHLvVn
Mi0B//v3U4nrirP9RsUdpWNc+58/98VEmhhbET5pOntiW+w8ePTRHrH9BcFy
O310i03HP345mtVyKypF1Z+DBz8eWT4zpz9vx6N3Vqhomt/d1Cxa8LLNP85z
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
+W06zBYF8W3qG69NsbrKf7ZUdiWqT3HXJNOfcWwEz4Av0T+PH2HUyPA9U1Ht
l99oZuyMfx9jQRdPlP6MY7Pj5L1PMv2JNnLXuP7L6VnsodNVDmydezbqLnrw
d2/+Hx8kfuRU7ZLn4PmD+P6N4m6/7tqi6k/S4NLEb8YAfh9W0vrTJ932lEuK
qj+T1RnsMWOnsDX49F2Uk6urwTYVxLXt82d2FjpOmeNTKor+xDbwdyE7/5dj
kfrTn+91x1gvwhx7sL8OhhcEDYMvxD/mwnTzwvgvsFP41BmLMg/KeXQJ57E7
wX6XtNCnMVZlXg+N4fTnhPHDk665xnfHNWiRMHuJ/wQfGfM86MVk5YYvK5gX
ceJNFUdUXlHeycIfMvgJ6xO6prfC14YH9WdUvqda/zlm9CDTtl1r+zd9HW2F
OpJJHacNcd75UhzoAvyz/B2lP/FbsB4qGDd9BWuoXJn760Rox/jY/OvRkW5c
w7O7/HX5EFd/ss7Cv4Y6/Mgj3RK/8dG6ucCwPMNuM/9Mv0bZYHN5FuYyUtks
f60XegsbQJ0aO2ZwoetcX0B54k9AZ/E7TH9SX8PsoL+2weF0iT+nCfSRvv4M
2sWo53XtgPDdPfSrzNX4YfjjO/LczfkDecJ558tybbaTtxcMHyllyTiONDCm
Qe/55ZhqDAC+TaVO08bIL+Yh8f0mW38Yp0+BVPozyka4Zxg2tPC8DseS6ZSo
9uvyPYz61+dbo/RnHNsZJ+99kulPf07f79/4jS1jLYJdr3G9HmLbGN+6uovf
3Y+HY8nmlV17YyxFewzi1+fibr/u2lQ6JlX+ha3/xve05M3phXzb2dSf6bSn
XFNU/ZmszmAnnK1wayAcrA9hvOTqJfmeKh7Xtv024do2tjBMfzL2iqM/mTuw
+tObJ0UvRelPvzz99unC89cJ/et6WlLpz/qBtkm94h7mDYiLZ6XvcVrOrTf2
9efwoTfOg1O38Q8ybmetE9ehQZmXZ21OqnxHi2ATg8dZx4guZY6O8WcyX1iY
/owTb6o4ovKKPp2/k+13cv1AsvljX3/GyfdU+pM+nN/MY3Ed/pNM67jTn7Qp
/zzr1GiD/B1Hf7KeIBg31zjbTJl/8P78xDnsr68twNef35zabvMC+JtjYfqT
9UdB/en6TAdzfqz1db+d/UimP9H3jAv8Pa7Ulyj9GaYhGI/Ydn1ub+I6vy9A
k5M36Av63qD+xKaF2cGwPSDUbe5hHaV/nDlKX38G7WLU8zo75Ps9eFY/P8L0
J2v53HmnP139Bl9/0tdf25u5IDHnS18b1J9htsgn7P1LxMlzs3aQtSt7drx3
w31x+hRIpT+jbESyZ4ijP5O1Xzfu3fBh8nUrUfozju2Mk/c+yfRnsv6N36xv
Zc2TX8/Qd77+DNbdOPqzKOs/M22/7tpUOiZVelLNf+BHcb6SMP3p+sfi1p/p
tKdcU9Lz74yPsA3+sUGD+ib8QunoT39OgLrv9CW+ZWwiOsudd3MsUfrTzS34
8+/uXQaZ6E+nX6i77rybk0+lP1lT5dfNhC6+8kWo74v6HqU/g3N19FvcQ94w
l2PXJ3p+X3SpP34P6k/6m+D7HZjHZl4p7Lnc/Ltvk6PijYojKq9cubt9OQ7C
d75f/Db+mnT80/zGV+Xrzzj5HrX/nT1CrIPCZ5Vs/1mcOo625m/2mPj5hhaf
dH2NRJT+pB8Mzr+TL74WSld/hsHaXObS/WNPP/3oDfoTTepfwx4C/z1dbv7d
b5s++HL996PQF2BLiqI/GSu464J9Ab5ZxhDcX5T5dzQpYyrWNrhjjKEpm1T6
M+p5s6E/w3zoxFEU/enWMgbzmjoTdm9UnwJx5t9T2YhM9Wey9stvbBjrAv37
0EuuPcaZf4+y2SWtP7GFwfE7dpNjN4P+TLf9phN3GFH6k/ky/t53vV/x99NT
niWhP9NtT7mkpPUn/TprIVjDhbbAl0Ebcu9KSEd/MteILx5bPXLEAFu2bh0g
5eLmTrDvzJ0wJxalP/GTun2E/KaNsTY92f73qPZJerB9rDnBp4p9YY+xv58p
CBqGeXL8G4yTWWfD3PPDDz9kzzsdx7Ngbxg34V/nmFunFbQ72ASegTXHpAnw
caEviAMbhh3HbtMmqLPstSVPXXsI6k/8VWg3NBBlif+AOp3sPY1u/5Hvl46K
NyqOqLwC1uCzlgt/HGHgc2Ce0mk3wqDM2e/KOib8dZSZe/enqxtx8j1Kf767
9BU7D4Pv2V+zmkkdx3byPgH2yHGMeRXy162td+tgKXvqXvA3NonndP5c8h9t
Qvtzfrri0J/Uc9Ll3j3CeI78Dtt/xPpryoj9s6TVX2uBr43+ONn+I9oV7y5g
rsHVE9YAovlT2Sz//S303ZQl4wN8S05/hPVftGU0Ivt5i7r/CBuDH4mxGc/H
/AR5lEp/Rj1vNvQnc8nUZdYfYTtJJ7qP8nZzSOnqT+w2e/0pC3wJ/M+e9hlJ
6lhUnwK+/qSe80zUMefzjLIRmerPVO2X9kreoXuJk3la1ka5uZ1gew2mO47N
Dqabtkf5Jtu3H4wjqn+jfPAz44ulrZB/7l0Zbq9Apvoz1fuX3F7f4m6/7tpk
5Ur/QP7561F8wt6/hN2jH6OfcmsCaJP0x27OBxvOehtffzJmZ60rZRK2XtPX
n2F12pFue8ol2Xj/EvWSMqdvI499Wx1Hf+I3Jq/p/8lHwsF2+NofPyZlw/wU
5/Dn0NbdOC3V+5fQGazZZq4EfznrJP33JaWjP/mNDWOeE5tI/8Ba/6B/1gcN
Q1/E+JH000bon/x+hLqHneGZWL9C/eMarqX9hdlL+m/ygvziOvzw+7w10fhD
0TOkk/2KzKn4+6aC+pO2zfp81vagC0gPNiM45+SDXgu+wzdVvFFxxMkr/KcD
rr9bhTLFX+Nrf7QWfap7/xL54vZsBNd/RuV7lP6kj+Ba9HJR6zjPyPy007PY
GP88+pln5ZlIV/A319AfufkYdD7P5OasXJkXVX/St1IXCf+uZk3s/ln6At9v
RntgPETfRZyUN/4APxzsPuuXksXDHAPah/vxnbLWivW69I/J3tsUfNc0fQI+
ZPoJf79wWP8F7JPmvqLqTzQKGsitz+Z+2orrr8LsYtTzZkN/ogMIj3aLP491
vTwLaaU90V+nqz8ZF5FO7kfH0q7xHf2e5P2VUX0K+PoTsAfoS7ePKspGpKs/
47Rf2gX+T/deHPTYjJefS2iNsPYaTHeUzQ6mG/sdtm7Hx48jTv/G2gfaK3UX
DcX8BO9DIE3YhUz1p98ug7h+qLjbr7s2Wbm69uD7UIJ1MZhW924t9gH5+/RY
p8KabvKGMnTjDTe/xnnqDXYzbD928PtHwbrhSLc95ZJ8+P5mvkGd88vazcP4
3y7w8TVMaYN5EfrHqHU0ccm3vMJ+MdfKutFcp+VmIur7Duh8+retG9/JeVpL
iqBfF60e/I6LEEWF924E38EuxM2A9Gfxw1wAfiXGNcA72hgvhr3bFPJNU6UL
vg7ma4ojrHzJK3ys+BDwUbLePdfpudmI0p+M10vi+5s3C8zN8t5u5sawC/hl
8OVonCKKE9bm+O+UEOJmQvqz+GENNPMizI8wv8MeZbcuOox80VSZwvwcc3X+
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
HOQ1vkbSzJo7tDr78NEAaIZM9Wcq0CRh17n3SrH3zL0PMpn+BHzSnCuq/gS0
Fu9UIn60oksLfs/vzu5OXBeWz8wBM17gPjQsa1dZA8AYi/rJNSWtPzMtyyBh
dQZNjuakHdNmGSP67yAIEnxXPHvR8FMzpvD33YfpT+BdGdyn9y8JIcStyc3+
/nm0F300e1ZynRYhhBBCCFF0blb9iS8Q/yjvRMevksoXI4QQQggh8oebVX/y
Dh7mwJkndO+rF0IIIYQQ+c/Nqj+FEEIIIUTpRPpTCCGEEEJkE+lPIYQQQgiR
TaQ/hRBCCCFENpH+FEIIIYQQ2UT6UwghhBBCZBPpTyGEEEIIkU2kP4UQQggh
RDaR/hRCCCGEENlE+lMIIYQQQmQT6U8hhBBCCJFNpD+FEEIIIUQ2kf4UQggh
hBDZRPpTCCGEEEJkE+lPIYQQQgiRTaQ/hRBCCCFENpH+FEIIIYQQ2UT6Uwgh
hBBCZBPpTyGEEEIIkU2kP4XIjJ9/+TXvyXUeilsX1WEhbm2kP0U+s3fH++YP
t91urlz8NPR8p87tzehRA0sk7lxrx9LWd7+3/HVTtXp1U7tunRIJ/4tPP7J1
5eI3e3L+rDcrxd1eunbtkDS8fKvDs2aMN83vaVasYabKHziwe3VK+yZEPpOv
+vOH8/vN2DGDTcNGDc3tZcuZKtWrWdu5dtWCnKctiu/O7jarVrye83TkI//+
x2nz6uyJid+//vi51aD/+u24/b1v5yprs935o59vMF+f3F4iacm1diypvjuY
x9miSdPGZvTIgeZvV4+USPj5pD9zZSOKu71If2aePyD9KUoz+ag/z5/ZaWrU
rmXubtHMfPD+fHPqy63m0L61ZsqkEebPd9xppr44OudpDMNppAXzppoePTrl
PD3BdGVeh06b//nbyayk9djhjaZM2TuTnn/00R5Z005R/eJPl6+YPo89bipX
q25q1alndu7eE6s/LVMwnvrT7XcUonHTZrHuXbhosY2LOCdOmpxR3x2VxyUF
vs9lb88pkToK+aQ/i2ojiiO/ioN09eesOa+Yu5rdbX748afEsRGjx5iOnR+S
/rwJylOI4iQf9WfPnl3sHN1vV7644RxzeE891cf8/pdj9vfxLzaZhx7qaP2j
1WvVNH36dDPnvtqRuL57905Wt44bO8Q0a97UXvPkk4+Yf/xy1Gzfuty2/W/P
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
PvOU1cdB/enWsfjHLpzdFZqmKPtQ1Drl9J/D1dWgjcikTbtj7NV0x0i375t1
bc6tnwnTn4w1kuUXflT0OXMvlDNreDl/8sgWez5T/blv/wEbztSXXo6s52Fh
L1k03eYZczTUPcZP1C8//1O1c/yO+B7881Mmj0ypP1PlBdo0bLzGegiXP6zb
YB2Hf96tAZP+FKWRbOtP1uX5tjOsX0sF83+MU1PtMXHz0vQLYf5V+lY3DqUv
GZ6ifwFszqtzXrC2mjWJ26/7GNycDfOTydISFn6U/mSOC39mqnxYt2ahnZdm
boh5etZnuXOse2K9WrJ7k+3DeHP+NGuvGX/Tb8yeMT5pGOhPtIV/LCpepz+D
62nRMfQXzEm5NWzJwiiq/nx+XOE+xfl98VXwmz4ouO84Xf154dvv7Dza3S1b
mW+/u5gz/+dnnx8u6AdrmyZNmxdZf0a1oyD039Qhf80dvp509adfFnHaG9BO
WUeHj5I5U9qgP//u1/s4+jOVfShqnaKtoU8cTisGbUQmbdod88uAdOOz9fMq
Sn8myy+OMxc0ccIziXWop49uKbL+vPrzL6bdAx3MkGHDTcUq1cyx4yfS0p+s
x6X9MafifImsWQrqz1TtnDUbzLv457HLyfRnVF5cOr/vuv5cUug+ytXlzzPD
n7S+fP+8q/PSn6I0kov1n24Ovl4G6z+B8Tu25Mr3N86ZYXOYw6WPQtME5w3d
Ph3Wp/M7jv5Ez2An2GtP2M6muflA1gj59xOH87lkoj+Zf0fn+nPbhOd8sMAz
uXVpdzVrYt5aNCNxjrk69l34YTKf7tZYJtOfXIMNZZ8IGj/VPuEw/RkVr9Of
jOndeWeX3VoC8hc97YeBv9SVYVH0Z79+D9v9JH7YrO+nr3J5XRz6E9j3061n
LzN67HM5058PdOxkxj433vyYYv9TWNkG8zhOOwqWOedYM+eOseaNY0XRn3Ha
m6+14MvPrs1fcG9J6M/irlPJbEQmbbqk9Sfly99ubS7wTEXVn3PfmG9a3NvG
+u3HPT/BdO3eIy39Geav57nT0Z/4MYPz76zlT6Y/o/KCuXbmNPzxmrPhLn9Y
DxCcf2edvfSnKK3k4/53NEvdBvWs1qCN077Zo8DcMbrpjdem2OtYf0V7dmNS
bDW2l/ucjzSO/mT+if6kc5cHEvPTDmwSY9ZvTm23dgPfHf48fCDJwue9pdgx
0uPvo3XQbzF/w/w615B29ukwn+OvL2IPK/YdreD7hNz8H2N+9n7Q/7CeiT34
nE/1HhrixK/Kc6UqgzD9GRWv05/0q5Qh17BHmudy+1iwt/is0BjkJ+stmEvF
/8x5/Fp2nrFAz+ALD+pP1hCQL+Qb68D8/pT4nV+E/uDsiW12ryl7UNwzFJf+
hHdXrjSt72uXM/3JfPeXx46l1XeH5XGcduRDvtOv4i9CF9I2WDPJfqXJgfbj
E6U/o9ob6WUvDfOq1CegvyccfOsloT+Lu04lsxGZtOmS1p9ubRLrIihnxpXo
No65dajp6s8Tp04X2J9qZseu3fb39xcvFdj6Rubtd5bGrsPs58eGYLeZH8JW
tW3X2uo/6nOcMqHeUK9Y50UesVee+plMf8bJC/Qs+49YJ8V8PH5zX3/ii+F6
bB19AHWaPVLSn6K0ko/6E7DL9G+0Z+wEtgFds91bfw/sC2VfN/5E5pZZf++v
P4yjPwHtiR0I7lnFBzvg+vtg8B0y7mZuPFX49CWkBdvj9qEGwW9DnKSb939g
x9Fi/jW8d4Y0+fs6Hfhq7btaCrQp+s5pWc6l0p9OIzKHlSr/w/RnVLwubPQN
dhx7j5Zg7ODuR1Pg/2QNFWHgI5/x8nNW03Ae/wJ5TL7w/pKg/qR/JlzyFxse
fP8Svl33fhPWt6KH/D3cxak/i7L/Pfj+T+CdSumEQ75ksv89mMdx2lEQ9mmT
v6zFZI0bc9HsR+Z+f3+QTxz9GdXe7LuQCuoU9+KzJc3u/V4loT+Lu06lshHp
tumS1p/8pixJC+VBnSA96GLyHt2Vrv7s+fAjZugzzxY6tmbtOvs+27NffxOr
DjPW4Bmxm8ynsM+cdQ3YK9aCov2iygQ7hK+B959wnDX/zKvQ3yQrs6i8wEax
h4nxPWtR8Hcyl8c6ZRcGOpe5f/o02g31ObiGV4jSQr7qT1EyYP+w2SXx/urS
9i7lKP23avWajPRncWH156nTaetPIbJBcdXzXD+HECIzpD8FsBbp8MF11ufC
OxVLIo5bTX/yvaOqNWqZi5d+yLr2/PTQtfdn+d+RUd8tbiakP4W4tZH+FMD6
POarUq3PKyq3mv6EQUOGpf39zaLgvr9ZtXpN8/rceeq7xU2L9KcQtzbSn0Jk
RrZ9miVBrvNQ3LqoDgtxayP9KURm5Fo7qu8W+YzqsBC3NtKfQgghhBAim0h/
CiGEEEKIbCL9KYQQQgghson0pxBCCCGEyCbSn0IIIYQQIptIfwohhBBCiGwi
/SmEEEIIIbJJvunPXL8vUQghhBBCpEb6UwghhBBCZBPpTyGEEEIIkU2kP4UQ
QgghRDaR/hRCCCGEENlE+lMIIYQQQmQT6U8hhBBCCJFNbgX9uXP3HnNnhUrm
88NHEsdWrV5jqlavab4+dz7nZRCXOg0amQMHP0vrnh69HzYDBg1J/L585app
2bqNmTJ1Wqz7y5QtZ/50+x2FaNy0Wc7zQgghhBD5y62gP2HUmHGmfYdO5urP
v5jzFy6YGrXrmKXLV+Q8/9MhE/154tRpU75yVbNh0yb7e9qMmabZPS3Mjz9d
jnU/+nPrJ9ty/uxCCCGEKD3cKvrz+4uXTP2Gjc0b8xeapwYMMt179c5aHl+5
+rMZ9/wE06BRE1O7bn2r/1avWZt2OJnoT5g7b4F99r379ls/8I5du2PfK/0p
hBBCiOLmVtGfsH7jJlO2fEVToVIVc+Lkqdh51LV7D+tDDDJh0uRY9698f5Vp
2KSp1cD83rt/v5k8ZWraZZWp/sTni++XZx81emxa90p/CiGEEKK4uZX056Uf
fjTVa9Uxnbo8lNU83rRli6lao5bZvWdvkcLJVH/C7FdfM3+47Xbz8bbtad2H
/ry9gDIe06bPzHm9FUIIIUT+civpz+cmTDTdevQy9Ro0tj7JbObz4KHDrP4r
V7GyeXPxkozCyFR/fnXmrKlSrYYZ+syzpsW9bcxPl6/Evlf+TyGEEEIUN7eK
/tx/4KCpULmaOX7ipFm77iO7/4h9SHHyqKjz7/ge72nZ2nxx5MsilVWm+vPR
vo+bZ0aOsvPw97Vrb/cgxb1X+lMIIYQQxc2toD9551CrNm3NjFmzE8fQZAMH
Dc1KHrP3/qHuPW06+M17oIY9MyL2HnRHJvqTfU4169Q1F779zv5Gh5evVNkc
/iKeFo6jP89+/Y2pVaeeeWfZuzmvz0IIIYS4+bkV9OesOa+YZi1aFpp3Pnn6
K+vD3Lh5c4nnMfPf3Xr2MnUL9CO0aNXGLF+xMu1w0tWfaE722wfjGjPuefNA
x2vvoooKI+z9n3Ds2InENae/OmvXFix4c1HO67MQQgghbn5uBf1ZWijK/iMh
hBBCiJsF6c/8QfpTCCGEEKUB6c/8QfpTCCGEEKUB6U8hhBBCCJFNpD+FEEII
IUQ2kf4UQgghhBDZRPpTCCGEEEJkE+lPIYQQQgiRTaQ/hRBCCCFENpH+FEII
IYQQ2aS06U8hhBBCCJHfSH8KIYQQQohsIv0phBBCCCGyifSnEEIIIYTIJtKf
QgghhBAim0h/CiGEEEKIbCL9KYQQQgghson0pxBCCCGEyCbSn0IIIYQQIptI
fwohhBBCiGwi/SluFXL9LbJsfM9MiJJA9VcIUdxIf4qbhenTxpnm9zQrsfBz
rR1LU/999PMNpvFdjU2ZO8uZU19uLZE47qxQ0axa8XrOn/Vmpbjby6wZ45OG
l2/1N9WzlFSYB3avNn+47XZz5eKnOa8bQuQD+ao/fzi/34wdM9g0bNTQ3F62
nKlSvZrp1Lm9WbtqQc7TFsV3Z3erXw3Jhwtnd5nDB9eVWHy51o4l1X+/t/x1
c/GbPVktu2efecq0at3C/OWnw+Z//nayROLIF/3573+cNq/Onpj1eIu7vUh/
Fi1M6U8h0iMf9ef5MztNjdq1zN0tmpkP3p9v/S+H9q01UyaNMH++404z9cXR
OU9jGP/67bj9f8G8qaZHj045T08wXdkm2/mQql+sVaeeqVKthv1/wqTJsfvT
rt26mz/+uYz50+13FOLEqdOx7p/28gwbZ9UatUz5ylXT7r/RPoy9qP/ZLLsn
nuhtBgx4rETrU77oz2OHN5oyZe/M+P5ctb8g6erPnbv3FJRRJfP54SOJY6tW
rzFVq9c0X587L/0phEhJPurPnj27mNp165jfrnxxwzl8QU891cf8/pdj9vfx
LzaZhx7qaPvo6rVqmj59uplzX+1IXN+9eyerW8eNHWKaNW9qr3nyyUfMP345
arZvXW7tybdndheKY9CgvubBDu3s31cvfWYGFvTDlapWNRUqVzYPdGhr9u1c
lbi2S5cHbfg9ena2umTm9OfNbWXK2r/pX08fC5+7ZH6Te7mGNPXt29P6Czl3
/wNtzNAh/QpdjyYnrbu2rbC/P1y9wOpz5kcbNGxgxj8/zPz95y/tuf27Vtlr
N3y42ObL5BdGmLLlK5gVy14tFOaa9+aZO8qVtz6usDR+9MGbplWbFqZ8pUqm
fsP6ZszoQeavV47Yc//791M2jrcWzTDdunW0acBX/eb8afZ8WD4E5xOjyo4+
f9XKueaRR7rZueBadWubOTMnJK03Ufpz85ataftz0J8vvvRykf1Cu/bsTVt/
4nek3MhnymngdT1I/zd48OOmTr06tk7e376N2b19Zco2Ne/1F6/NpxfkKW1r
4oRnkvo1O3d5wJYb5UfZnTiy2Wrw5e/MMU2aNjadO7eP1TZIZ//+jxToleq2
nja/u2khvUnY1B/qPs/JmDNV+b4ya6Jtl6SjRcu7Tc06tWycX5/cXmJ1au+O
9+09lAHpfWfJrMj2B2H5RTi0QdJHGTRq3NCW28J5L5l7Wja3+YTmd+Xit5fP
9q61aUADUd60R9L/8aaliTiJf8SzT9t8IV1Nm91l7aU7n4n/c9SYcaZ9h07m
6s+/mPMXLhSUUR2zdPmKtPyflE/v3l1tPSlXsZJp/+B95tD+/4ynUtlozjMG
e/mlsba+Y4uefvpRe30qrRiVF3HCXL92kb2Ptkea3136ivSnEGmQbf2Jvb63
VQvbTrGR6Kx07v/lh0PWduM7i3NtxSpVzPjnhprfLh82P186ZLUptv2fv17T
p9g9rnF2+uK5vfb34oXTrZ3HPr3+yqREmOjaCgX2aNnbc+zvXr262jB+vHDA
/P7bcfP24pm2H3Ga1Wnl99+day5/d9AeGz60f0q/HxoOGztt6hhrJ9F/6E1s
H2la8uZ0m0bfb0LfW6d+Xav7Pj/woU3Dpo+WmP/+6wmrTVvf19KMHDHAXst5
8r9fv972HPENGfxEQlM76JsHJvFxUY6UAxqVPKEPob9FK7hr0Cj0oW5ueOcn
K2y86PqwfPD70zhlR3+PZjl3+pq+oAwJP9l6xNKmP219Lchbntn3f7IOBThH
H01boSyStbWN6xbb84xdqMNHD20wlatVs20gWR19/PFehfyf9MG0a9Lx64+f
x2oblD9a9sr3B209pb5ynnllV753NWtitm1ZZuso9T5V+c59dbLVCi9OGWX1
A+0DXYCvtqTqFKCZff9nVPtLll/E3abtvTY/+I02Ryejg/j9/dd7bLiUV7C9
fPHpRzadtL+/Xb02Bnxh4rOmWo3qNi/4/dy4oVYL01Z53tUr37BtmPED5zPR
n99fvFRgxxubN+YvNE8NGGS69+qdVv0F8qFPn+5Wt+FTGD1qoLV/TmenstGJ
/C/QkGh16hn5g5ZNpT+j8iIqTOowbYa+AfvHuAb7J/0pRHyyrT9b3nuPbaMO
bE869x/5dL29b8+O9yKvXbTgZasVnS8UsOHcv3n9W/Y3tg0/o38f/odRIwfa
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
t3KN822F5UPw/UtRZXez6M+w938ueeudrOhPoP7RBpy+Qe/gn2YcQb3s2Kl9
yveDfnX8Y9O2XWubd7QnvuFAeVAu1Luwe+Loz6i2wfpP3s1FPJxn/al7f1Em
5RulP0uiTgH+NJ6NMGddX7OSqv2liqck59/Zj08b5B1HvMONdTK8W4p0E1a6
+nPWnFdMsxYtzU+XrySOnTz9la3HGzdvjl1/iZs8op5QHuQTeh1fNRo0ykYz
dsEvwLtKyEPW5zNnRV1OVmZReREnTDSp+wYYYWAzyW++jRJlO4UQ+as/RcmA
TWWNQXG8E/uaf3RhkcMpLkpCfxYXRdGfQpQ0xVXPc/0cQoibB+lPAayJY54c
nxDvaSyOMKU/pT9F6UD6UwhR3Eh/CmCOnHn+4DsJi0K+6c9Mvr9ZVIr6/U0h
soH0pxCiuJH+FLcKufJtFie5zkNxa6L6K4QobqQ/xa1CrrWj+m+Rr6j+CiGK
G+lPIYQQQgiRTaQ/hRBCCCFENpH+FEIIIYQQ2UT6UwghhBBCZBPpTyGEEEII
kU2kP4UQQgghRDaR/hRCCCGEENlE+lMIIYQQQmQT6U8hhBBCCJFNpD+FEEII
IUQ2kf4UQgghhBDZRPpTCCGEEEJkE+lPIYQQQgiRTaQ/hRBCCCFENpH+FEII
IYQQ2STf9OfPv/wqhBBCCCFuYqQ/hRBCCCFENpH+FEIIIYQQ2UT6UwghhBBC
ZBPpTyGEEEIIkU2kP4UQQgghRDaR/hRCCCGEENnkVtCfO3fvMXdWqGQ+P3wk
cWzV6jWmavWa5utz53NeBnGp06CROXDws7TumTZ9pvnDbbebP91+RyHeXro8
588jhBBCiFuTW0F/wqgx40z7Dp3M1Z9/MecvXDA1atcxS5evyHn+p0Om+rNj
54dynnYhhBBCCMetoj+/v3jJ1G/Y2Lwxf6F5asAg071X76zl8ZWrP5txz08w
DRo1MbXr1jfN7mlhVq9Zm3Y40p9CCCGEKA3cKvoT1m/cZMqWr2gqVKpiTpw8
FTuPunbvYcpXrnoDEyZNjnX/yvdXmYZNmloNzO+9+/ebyVOmpl1W0p9CCCGE
KA3cSvrz0g8/muq16phOXbKrxzZt2WKq1qhldu/ZW6RwMtWff/xzGVOmbLkE
rIXNdb0TQgghxK3LraQ/n5sw0XTr0cvUa9DY+iSzmc+Dhw6z+4DKVaxs3ly8
JKMw5P8UQgghRGngVtGf+w8cNBUqVzPHT5w0a9d9ZPcfsQ8pTh4Vdf599quv
mXtatjZfHPmySGUl/SmEEEKI0sCtoD8vX7lqWrVpa2bMmp049mjfx83AQUOz
ksfsvX+oe0+bDn7zHqhhz4wwP/50Oa1wSlJ/Pjd+grm3zX05r49CCCGEKP3c
Cvpz1pxXTLMWLc1Pl68kjp08/ZX1YW7cvLnE8/irM2dNt569TN0C/QgtWrUx
y1esTDuc4nz/54BBQwpdN2TYcFOrTr2c10chhBBClH5uBf1ZWshEfwohhBBC
3GxIf+YP0p9CCCGEKA1If+YP0p9CCCGEKA1IfwohhBBCiGwi/SmEEEIIIbKJ
9KcQQgghhMgm0p9CCCGEECKbSH8KIYQQQohsIv0phBBCCCGyifSnEEIIIYTI
JqVNfwohhBBCiPxG+lMIIYQQQmQT6U8hhBBCCJFNpD+FEEIIIUQ2kf4UQggh
hBDZRPpTCCGEEEJkE+lPIYQQQgiRTaQ/hRBCCCFENpH+FEIIIYQQ2UT6Uwgh
hBBCZBPpTyGEEEIIkU2kP4UQQgghRDaR/hRCCCGEENlE+lMIIYQQQmQT6U8h
hBBCCJFNpD+FEEIIIUQ2kf4U2ebnX34VpRTVF5FNcm3LhBCZk6/683/+dtJ0
6fKgmTJ5ZM7TItIj132WyC89kOtnEjcvk14YYbp27WD7g1zbNSFEeuSr/pw2
dYxpd38ba3fua9vKPP54rxuu6dato6lRu1bBM54udHzm9OdNxSpVzH//9UTO
n6O08t7y183Fb/aEnst1nyVKjrDypv29OntixnUp188kbl6w4dj/6dPG5dzm
CSHSIx/15w/n95s7ypU3u7evtL9nzRhvKlSqZP712/HENX+7esSUKXunKV9w
/MvPNhS6//4H2pinnuqT8+cojVAG6I0q1auZQ/vWhl4T1o/s3L3H3Fmhkvn8
8JHEsVWr15iq1Wuar8+dz1p/1r1X74J6U86cv3Ah7XsXvLnI3F5wb6069Szn
zsdL97TpM80fbrvd/On2Owrx9tLlse7fvGVrIk7C2bt/f+w0b9+xy97DM99R
roKp26CRmTBpsrn68y8Z5V9YeR87vNG2xUzrVFg8F779ztSuW9+89fbSxLHj
J06a8pWrmi1bP7np6wv3BMu7cdNmsevLH/9cxoZRrmJl07zFvWbp8hVpp33R
krfMI4/2zei5d+/Za+vNc8+PT+u+rt26m9vKlDVl7ixvKlapZjp06mr27N2X
cf5TP7ZvWWbKlq9gfvr2QM7tnxAiPvmoP2e8/Jxpfk+zxO/jX2yytnDPjvcS
xzavf8s0atzQPPZYT6tP3fGrlz6ztvuD9+cnfg8c8JipVLWqqVC5snmgQ1uz
b+eqlPGvXPaaaXxXY9unNmveNBEWfH1yu+ndu6sNr1zFSqb9g/eZQ/v/o8O6
d+9kpkwaYcaNHWLvrV6rpnnyyUfMP345mjQ+7kczE1+turXNS1PHmP/9+yl7
jvE//twmTRsX6LeKpvndTc2iBS8nfL6vzJpoHuzQzix/Z45p0fJuU7NOLfuM
pJPzhDt0SL9C8Z0/s9Pm565tK+zvD1cvMHe3aFbQZ5QzDRo2MOOfH2b+/vOX
9tz+XavstRs+XGw1J35p+gKOMUYgb4PPk6wvGTVmnGnfoZPVPvTnNWrXyahf
zRR07p/vuNOycNHitO9Hfz7QsVPa96EnOnZ+qFieAQ2frv5E+/A3+b5v/wFT
pVoN8/Y7SzOKP1jWe3e8b+st9YH6+c6SWYk2+9BDHW2doQ306dPNnPtqR2j9
TxbX6jVrTeVq1c2Zs1/b3w9172mGDBueF/UF7bj1k20ZxevXl8tXrppl7660
ZXjs2Im0wimK/hw5aqx97tr1G6Y1VkF/vvjSy/bv776/aEaMHmMaNGqScRm4
OnJXsyaF7LwQ4uYnH/Unmm78c0MLHavfsL6ZMH544vfIEQPMM8OfNAvnvWQ1
lju+euUb1m7+5afD9nevXl2tXvzxwgHz+2/HzduLZ9r+8tszu0PjPrhnjb1/
3ZqF5udLh6z2xPZznPP3tmpR0Jd2N1cufmp+u/KFGT1qoO1f3fok4mLu/+NN
S+3vi+f22t+LF04Pje+3y4dtH/3ilFHm8ncHzReffmTXFKArOf/yS2OtJv38
wIfW94hPGJ/vm/On2fNzX51sf3M/mpRryL8nnuhtzy95c7qN3/cdE3ad+nWt
xiVc8mPTR0us1kWbtr6vpc1fruU82qJfv9723F+vHLHz7hxLx/8J31+8VFCO
jc0b8xeapwYMsr6lbGkJeH3uvIKyqmMGDx1mHuzUJe37811/JjRC9x5m8pSp
RdIDPqtWvF7I//nLD4dsnaMNU79pR8xH1K5bx/zz12Ox6ws89ng/0/eJfmbx
kret//f8hW/zor4Ul/5MhHdnebNly8dphZOp/kTz8tz4yRnLp+Nv9vWnrX87
r9U/wixKfRs7ZrAdV+e6bxJCxCcf9Sdz7fgg/WPYH/yJ7ne9Aj2KRvzq+MfW
RtLHcRx/HOvV+RsfIDrp3OnthcJq1bqF9SmGxY2v8pFHuhU6tnbVAnPyyBb7
N/5UNJg7x9yjHwf6k31T/v34gUaNHBgaH3oYX6q/VnXfjvfNjo/ftX+jTYNr
64YN7W9atWlh/0Z/4rf83dOXs2eMT+QV6UVPb934TuI8flL0Kn8//fSjN/gw
N69fYueZ0dToYZ5v25ZlifOZ6k9Yv3GTKVu+YkEZVzEnTp6K3Q9NLejTmHsN
8mDHzrHDuK9dezPsmRF2Pps6c+LU6bT6wnzXn/ixduzabdc8ZDonGlbeQf2J
f542/Ptf/qM1v//6Wp1h3iKd+nLm7NcF7aO6rTOs18iX+lJc+vOny1es7xU/
JP7EdMLJVH+u+2iDrTOnvzpr63s6Pmdff3773UUzcPDQjH2wfn1jfof5q1z3
TUKI+OSb/kRH0U85/6Fj5ycr7HF8cKePbrH28dcfP7fn8I2ueW+e9f9Vq1Hd
+kQ5vmXD2/aeMIYMfiI0fnx/Qd+rD3PW6Ev8h9Vq1ijoy6vb8Jw+RX+iD/17
ODZ48OOh4eHTRQ+HncOHS9gb1y0udPzVOS8kbDH6s2GjhoXOcwx97n4z9zlo
UF/79+ljW22YZ058knjeZHmEj9jpT1/DF0V/XvrhR+tb6dSlePRYXI58edSm
+ZNtO8yVqz+bmnXqmpmz56QVRlH0p1vP50BHZvIcmehPnhvthYbj79FjnzM/
/nS5SHrAJ6g/nxs31LS8954brmOcNP+NqWnVF+j5cJ+C+l7N6pl8qS+U8e1e
eQP1IG59YQ0lZUYY5StVzmi9RKb6s9+TT5vOXa+1z7nzFlj9/0PM+oL+xFdL
2qnzzHcUdf0nMCamPPxxthDi5iZf9ecnmwvrT+aP0VxvLZph5s99sdBczIhn
n7b6ymmlC2d32eNoWH4zHxg3fvQY/WfYOXQXax4nTngmsT4SLRzUn8PT1J9h
fTU4/cncuH+c+XPmN/kbrck6WP98UH/iJybvyFvWb97f/j/rFdhbylrVZPnh
8tTf614U/fnchImmW49epl6Dxmbl+6uypieYbyZO95v1bS3ubZNWGPnu/4Qz
Z782Tw4YaHr0frhIesAnTH+yTiV4HdcsmJee/ly3fqPdh4QGfWbkqLypL8Xl
/8RnfejwF6ZFqzZm1pxX0gonE/3JGhn2PLHegd9nvzlntfDqNR/Eut/3f+K7
3bRli/W3Mw9flPqGDZT+FCK/yDf9Cczd8X6f4PH+/R+xoOf8tej4B+vUq2Pn
qe9p2Txx3M2/u330DnyowXc2OZh/Z77cP7bs7Tl27xPxEJ7zu8KKZa8WSX8y
/876TX9/EnPvhMvf+FjdWlAHWrttu9b27zj6k3lQtyaVdfxoeHeO+fcOHe8v
dD/P59YzFKf+3H/goPVjsY957bqP7P6juPuKizqf2rBJU6sJ3H30sTzDZ58f
jt0Xlgb9CbyLgGfPxAcaVt5B/blk0fQb5t/dnrfguDJVfUELuXEKc8Hsp962
fWde1JfiXv85feYs0+6BDmmFk4n+fHvpMvucrI9xz47+ZB1unPuD6z+B8SZr
STPJC1dHmH93Y24hRH6Qj/oT36a/18jB3iL25mCHjny6PnGcfUCscWTN49QX
Rxe6p2fPLnZ++5tT2+16RvZxMw/42d5w7cR+b+aN3l36il07uW7NAhs2e+aP
HtpgbTPz+ujX7VuX27l4f31kuvoTH2flatXM6JED7R4pngst7fQ1aznZt3H0
8w02/WhT9p8vXzrHno+jP2H4sP52XSw6wfcHs/ee9LNPib0hpIE9Wz16drbn
w/Qn2pRjjBHCfMth/Qj7D1q1aWtmzJqdOPZo38fNwEFDM+qX0gHfC+n94siX
hY43bX5PWv1iadCf35y7YJ4eONjc3bJVoevwb7G/5+jx47H0gM/6tYuurdH4
aofdb0SdZt2ymyegvvD+Xurpv0L8V8niGjV6rOnWs1fi99w35tsyizsXnMv6
Upz6k7UALVu3sXvJ0wknE/3J3rR+Tw0odGz5ipX23V0Xvvs++n5Pf9Lmt378
idWw769eXei658ZPMPe2uS8yPFdHxoweZN/zkeu+SQgRn3zUn+wNCpuTxi/H
WJw1nkH/ZafO7W2fwX5t//iV7w+aAdffv8TcOeEyH50qfrRdoyaN7Nor/IWr
Vs5NnOM9yKz5JDx8sfSt6DX8PWjQdPUnoIWZE3fvX+L9TW4/PfuSJr8wwr5X
iffb4N91vlGIqz/Rz+SP2xfvwx5/+/6lgvh5NvyrqfyfQJ6i451O9QnrR5g7
bNaipZ2Tc8dOnv7K9k0bN28uUT3BvC3v7gkeZx8+69PihlMU/Rn2/s8Bg4ak
HVam6z/dGkTevdTr4UetpvGv4z1YYZormR4ItkvaFeMiN26iHaIXOMaYkbbC
uyDC7g+LZ9eevXbdo6+HWYfZ+r525oXJU276+hL2/s+471AKrhdm/cHwESPN
xUs/pPUc6erPM2e/tvaVPWr+cdosaVjy1juRYSTe/3n9fbNNmjY3r74294br
2NPEeCcqPFdHsMNzZk7Ied8khIhPPupPfHBoRfaB5zotIn1KUhvkkkz1Z3GS
rv4sblRf8oeivP/zZoH6wTwT4xjeT5dr2yaEiE8+6k/Az8h7PfXd3/wj131W
SSH9Kf2ZT5QG/cn8D2vdZ+j7m0LkHfmqP9GdrFecMnlkztMi0iPXfVZJken3
N4tKUb6/WdyovuQPpUF/svaIfkB+CCHyj3zVnyJ/yXWfJUoO1ReRTXJty4QQ
mSP9KbJNrvsskV96INfPJG5ecm3LhBCZI/0phBBCCCGyifSnEEIIIYTIJtKf
QgghhBAim0h/CiGEEEKIbCL9KYQQQgghson0pxBCCCGEyCbSn0IIIYQQIptI
fwohhBBCiGwi/SmEEEIIIbKJ9KcQQgghhMgm0p9CCCGEECKbSH+K0kyuv0+t
b1yLfEX1VwhRkkh/itJMrrVjaeu/R48aaO6sUNE8/fSjJRL+3Fcnm0aNG+b8
OW9m/nDb7WbdmoXFFt6fbr8jNLx8rL/JnqUkw+zatYNtF7muF0LkG/mqP384
v9+MHTPYNGzU0NxetpypUr2a6dS5vVm7akHO0xbFd2d3m1UrXs95Om4Fcq0d
S6r/zkUdos2hfda8N8/8/pdjJRJHPunPfTtXmQO7V2c93r073jdXvj9YbOFJ
fxYtTOlPITIjH/Xn+TM7TY3atczdLZqZD96fb059udUc2rfWTJk0wvz5jjvN
1BdH5zyNYfzrt+P2/wXzppoePTrlPD3BdOV7HGFE9Y3ffnfRNGzS1Kz54MPY
/en2HbusDqNf8hk8dFjsMDZs2mRq12tgvjl3IaP+Oxd1iHbGc39zavsN5/79
j9Pmf/52sshx5JP+fPTRHubV2RMzure48qs4SFd/9uj9sBkwaEji9+UrV03L
1m3MlKnTpD+FELHJR/3Zs2cXU7tuHfPblS9uOPfe8tfNU0/1Sfhnjn+xyTz0
UEfrH61eq6bp06ebOffVjsT13bt3srp13NghplnzpvaaJ598xPzjl6Nm+9bl
tr/99szuQnEMGtTXPNihnf376qXPzMABj5lKVauaCpUrmwc6tLV+EXdtly4P
2vB79Oxs7djM6c+b28qUtX8zj3n62NbQZzz6+QZ7L9eQpr59e1qfF+fuf6CN
GTqkX6Hr0eSkdde2Ffb3h6sXWH1e5s5ypkHDBmb888PM33/+0p7bv2uVvXbD
h4ttvkx+YYQpW76CWbHs1UJh4ue6o1x585efDofUm9NmxrRxpm6DeqZCpUpm
+ND+5vVXJpkmTRsnrvnjn8uY5e/Mscc6d24fqzza3d/GTBg/vFBc5Kk79vJL
Y8397dtYndKi5d02DHTY91/vCc3HKG03dPgzZuCgoWn5c9CflF9R/ULPjBxl
Hu//ZNr6M1kd+uiDN02rNi1M+YLyqN+wvhkzepD565UjSdvR1ye3m969u9q6
W65iJdP+wfvMof1rQ6/d+ckKWxeoN9QV2gjp6NipvXlp6hhbz/DLRdU9WLVy
rml+TzMbHvWgX7+HzZWLn9pzlGvTZnfZeQzu5RrKP0zzOsqUvdOG+cgj3Uzj
uxqbWnVrmzkzJyTO//dfT9i0Ug/Jr+Z3NzWLFrxs6zDnX5k10bZn6ip1qmad
WjZO8idZnN26dbR5wdxLvYK8jmMLwvLLxT3/jak2T7iPMGjP2CbaV6Mmjcye
He8lwvHn31PZL3f9J5uXmvvatrLPTn4/8URv8+OFA4nz6erPE6dOm/KVq9ox
FL+nzZhpmt3Twvz40+W09Oe811+05UX5Yc8nTngmock/27vWPif+Zdo79Zlr
P960NHH/6aNbbJ3luTi3ef1btl2k0opReREVJrawf/9HTMUqVawPZNaM8dae
SX8KkT7Z1p/Y3HtbtbC2BZuCzkrn/l9+OGR1Df6fONdiJ8Y/N9T8dvmw+fnS
IatNsXX//PWaPqX/5Rpn1y6e22t/L1443dpC+iJ0lQsTXYveWvb2HPu7V6+u
Ngxs2O+/HTdvL55p7anTrE4rv//uXHP5u2tzZmi1VL4rNAP9yLSCfop+G5uH
3qR/Ik1L3pxu0+j7FOnH6tSva/7376fM5wc+tGnY9NES2/fSl7W+r6UZOWKA
vZbz5H+/fr3tOeIbMviJhKZ2oA3pC8PS+NaiGTaOHR+/a9NBflStXt2m0V2D
dqCs8U3/+uPnscojSn9i7+m70b7oB8oD/wOaPCydqXTdkaNHC/qZSub4iZM5
0Z9fnTlr4z/46aG0/Z/BOkS7ol24uXG0ExqQcUuyekbZ9OnT3Wo/xnL0odS7
ZH65k0e2FPJ/vlbQLuiDnxs39Fr9L4g3qu7RLkjnxnWLbTzcx9hs+LD+9jz6
s3K1arY+cu7iN3tsnaKuJnsOpynPnb6WLtoy6cRfy2/GLGhS0kZd3b19pdXo
b86floiT3y9OGWXrFNegQdAmqewLflrf/xllC8Lyy8Xt0uJ8zOhgnp1jo0cO
NC3vvScRj68/U9kvfmNz0MjocWwJ54PPlsn8+9x5Cwrsd2Ozd99+W4d37Nqd
Vv2l/ImX8TJ5dfTQBlvuLt1ffPqRfU7q79+uXhtDvTDxWVOtRnVbRoA+fPzx
XtY+/vTtAfPYYz1t3UqmP6PyIk6YtDvGMYyZSRdzbYzdpD+FSJ9s60/sKHbF
QR+Yzv1HPl1v7/P9AcnAx4FW9Neq4Sfjfsa1/MZ+42f072M8O2rkNXuC76ZN
23sT5/AZOp8gfTxhuX7P0ap1C+vrcOGjqfzzUfpz6VuzTZ16dQodQ79hB/Fd
4mdhncHWje8kztNf0X/yN3tDgrpx8/ol1vbS5zvbvm3LssR55284c+KTRHxc
nyyf8f9gm/1j5KOvP9EF+FbTKY9Y+rOgT3d6FdavXWTDCFsTl6oPfWnadNPl
oW5p68bi0p/Q8+E+5vmJLxRZf9JnBusUYx7qTJj/GqhHvn/02OGNofXZEdSf
aCfqoT8PEVX3XPt1vlJgzOT+JkyudZoDaEv49pK1F+qZa2+AjiBd+GH5jZ8r
OE8+rCD/8BW7OBnT/O6N52YX1LNUcYKvP+PYgrD8cvrTzwPGAH67QfuQPvc7
qD9T2S/CResyFnDnGbv79iUT/Xn1519M+w6dTNnyFc2o0WPTrr/kte93BNYz
uLrjbBT2zp0/uGeNPYaOPHxwnf2bOuvOM7eSam9WVF7ECZO65vs+CAtNLP0p
RPpkW3/62tORzv3OHuB3i7oWP4PvN3Bgy5nv4m/sN32Rf55jgwc/bv9mXE58
+HH4jR8Gnx1/b9nwdujzAP4bF1awP47Sn2itZOGuXPaavQbfJOsA+Jv5V187
4m9Kdj++GGfbg33lPS2bm0nX+z3mItnb5eYog+ADwB/hH5syeeQN+pNw0imP
OPqT+Uj/vHueLz+70Zeeql/s3qu3mfziSxnpT+IrU6CTfD7ZtiPtsGbOnmMe
7Ni5yPqTfCV//WuYSyedyeYY8D2hXfCbV6tZw/qvuR6dGXZ9mP4MjpOi6h7X
4P9mTpNxHXPHaFJ3P2Ey7+6HyTE3xx0G9QytHTzGehK0N3Hjb/PPvzrnBTvX
7cKnrieLE+3hP4fTIr7+jGMLwvKLY/6aFSBe5w/1w3a/g/ozlf2CJYum23LB
94q2ZQyIJnfnM91/NPvV12xaPt62Pe36y7iH+XY0PnWPdGEHGEf5bdpfV+OO
XTi7y6414W9fyzOujXo3QKq8iAqT8Zo/VnYw9yL9KUT6ZFt/Ylt92xymR1LB
vC0+hFTr/t28NP1xmH8V/5kbw2Krh0fYbzQV/RU2k7Vv26/7Dd08H/PKydIS
Fn6U/kTX4c9MlQ/YQ/pP/AjM07NGyp1jfRPrwZLd6+y4m99z0Odhl/FTMaeN
DyhZGMxTTfJ8NID/Nag//T3accojTH9i3339WT+gRZjf53nC1tKm6hdbtWlr
5i1YmFP/59tLl5m7mt1dLPrz+XHDCl3jfNq+P8dB2ePHRwO4tZmsfUtXfwb3
CkXVPcel8/vs2ITxnG3PBe0rWZhx9GfwXQBB/cl6AP8861WYp44TJzaHZ3fw
m+O+/oxjC5LFc1ezJoWOES9zBe53lP5MZb/QVNf05YLEugrW7xRVf7J2pEq1
GmboMwW26t425qfLV9Kqv6xNZtzjjxmpC0H96dsoX3+uXvnGNa14+T++fepx
Kv0ZlRdRYVJnr+nPwnWJOi/9KUT65GL9p5uDr5fB+k9gTRA2I2y+FdvCWi/6
Aca6wflet0+Hdej8jqM/6WOwMey1J2xnu9ycG+vJ/PuJw/kNM9GfzL+jc/1x
OOE5HyzwTG7dF/0X6zHdOeZAO3S8v1CYzKez3pK/k+lPrkGTsIcLTRA878O7
rliH7x9jTj6V/oxTHuxT4r1afrisD/X1J/Oz/rxxot8I2Y8WpT/nL3wz5/qz
afN7iqw/2cPDXhT/mneXvmLTGZYv+APJM8rcHUOvFVV/RtU92k6w3bIPhXaV
LMyi6E/+xr+G3vTPM3fQtl3rjOOEsPn3VLYgF/ozbM6Bc0XVn4/2fdzun2Me
/r527e0epHTqb9Bfzzw2eRNXf7o9lP7Yyq1rT6Y/o/IiKkzSiO3x59+dHZb+
FCJ98nH/O+NQuy+0wF7Rx9Av4gPDH4dueuO1KfY6fB/YFufjoQ/EvnGf85HG
0Z/MAWGjO3d54AafH/uLWONFn0zfyvpQ5pHwPSULH32FTiM9/j5VB3qBPpM+
kmtIO3tmmR/1dRd7NvBT4j/0/S5u3pWxPeskWfPE3gj2eXA+mf4E4sSvynOl
KgP2ZLHunv2p2GW0Dhoilf6MUx7Ycebk3PpOfLJoVl9/Ei/+E9YIshaMedyH
H34oNJ2p+lDeI5PsnTHZ0p92/r1Tl7T1Z7AOUQ7Ot0N5nD2xze4jHziwb+j9
bl0J2gZ9xLsemIsPrgv2iaM/o+oe60fwsdM+aC/UWzSrez9CSehP/PiMYRjr
EidrdxjfLV86J+M4gfUqtEHKgLWFUbYgF/pz/twX7X58bBhzJcSH7kZHOT9f
uvpz9Zq1pmaduubCt9/Z3/sPHDTlK1U2h7/4Mnb9Zf0Q4xTqrqsDrMd18zhR
+pNnce8FYf8cx6hnqfa/R+VFnDBZo8p6CdY6MR/PnIP0pxCZkY/6E7D5zFNj
C7Dx6Br8QdsDfSfjV/Z109/Q7+GzY9+jOx9HfwLaE9vn9tQ68OUMuP7OFXyH
jK99+xcWPn00acFuufclBWFeijhJN/sT0JmsffWv4d0upClsny6+WvsOnAJt
im51WpZzqfQnOoZzzFWlyn9sNRqQtffkPWv62GdMn+yuCdMFUeXB3zwr5+y6
h9kT7T4n5ytBf/Jc9M/M36FN6SOCexkS9SSFrsNn07Vb94z0J3kUfP9ng0ZN
0g6r18OPmgmTJqetP8PqEH5rNCf1kPWM7GHx92kFmT5tnK0b1F3KgfpBXpKn
YRo0jv6MqntoXfbjkD53njGIe7dYSehP9Dh5wbssOE4d9d81lqn+RGMTHuXA
mDHKFuRCfzJGI3+xIYwP2a/NdwRIB1oLDZWO/kRz1q5b3yxfsbLQ8THjnjcP
dOxk/aFx6u9Xxz+22o/8w4bzvi3qMfWZ9h+lP/nNGIr1OuQ1a8JZl8keet4B
ERZnnLyIChNdij1ijI7toy6jV5995qmUdUUIcSP5qj9FycB7FLHNcd4X7+9R
hhHPPm31S0mmD/3p+1ijSKXrjh4/bt8dw/sMi8OXmS5nzn5tylWsnNH7l4Qo
aYqrnuf6OYQQNyfSnwJYx8T7R/Dl8N7CqOt5tw1+53073rf+Jd6Ngk/AvRe1
pChO/Qn2/fOD03v/fHHx7KjR5vF+/dV/i5sS6U8hREki/SmAdwYyLzU5sL41
GcyjogWZK2QelTks9nj47zEsCYpbf2by/c3iYOPmzUX6/qYQJY30pxCiJJH+
FKWZXPg1i5tc56G4NVH9FUKUJNKfojSTa+2o/lvkK6q/QoiSRPpTCCGEEEJk
E+lPIYQQQgiRTaQ/hRBCCCFENpH+FEIIIYQQ2UT6UwghhBBCZBPpTyGEEEII
kU3yTX/m+l04QgghhBAiNdKfQgghhBAim0h/CiGEEEKIbCL9KYQQQgghson0
pxBCCCGEyCbSn0IIIYQQIptIfwohhBBCiGxyK+jPnbv3mDsrVDKfHz6SOLZq
9RpTtXpN8/W58yWex127/f/tnfefFMXWh/+Ze6+K5CwscREUEBBBgqAkc0JA
MSAgCEjOQZEMigiKiGQTIEgQRZRoAlRQAbNeb3jr3aek5ta0M9M9u2zPzuz3
h+ezs9WpuvrUOd86VT3Tx/z98irmH1dcmcTR4ydy/vyFEEIIIeKmMuhPGD5y
lOnavae58P0P5tTp06Zh4yKzctXqWNoY/TlpyrScP2shhBBCiIpAZdGfX585
a5q1KDbPLlxsBg4aYvr0HxBbG0t/CiGEEEL8j8qiP2HTlq2mao1apmbtuubo
seOR26h3n76mRp16f2Hs+AnRjpf+FEIIIYRIUJn059lvvjUNGhWZnr1ujrWN
0Z+XValqqlStnuDmPv1y/uyFEEIIIXJBZdKfo8eOM7f07W+aNi82a15eG1sb
K/8phBBCCPE/Kov+3Ltvv6lZp745cvSYWb9ho33/iPeQorSR5t+FEEIIIS4d
lUF/njt/wXTo1NnMmDU7UXbHXXebwUOGxtLGUfXnjT16mkcfH55zmxBCCCGE
KE8qg/6cNWeuadOuvfnu3PlE2bETn9gc5pZt28q9jdN9/+fyFc8n7Vfcuo25
5/6BObcJIYQQQojypDLoTyGEEEIIUXGQ/hRCCCGEEHEi/SmEEEIIIeJE+lMI
IYQQQsSJ9KcQQgghhIgT6U8hhBBCCBEn0p9CCCGEECJOpD+FEEIIIUScSH8K
IYQQQog4kf4UQgghhBBxUmj6UwghhBBC5DfSn0IIIYQQIk6kP4UQQgghRJxI
fwohhBBCiDiR/hRCCCGEEHEi/SmEEEIIIeJE+lMIIYQQQsSJ9KcQQgghhIgT
6U8hhBBCCBEn0p9CCCGEECJOpD+FEEIIIUScSH8KIYQQQog4kf4U2TJrxhhz
Tds2Oa9Hrul5U1czYvjglNs+fG+j+dtlV5gzX+y+ZNfbt+sVe87zZ97L+b2X
tl3Km969u1/Saw8Y0Ns8MvS+cqvv9Kmj1JcCVBT/Ut79LZf9JBve3fFyxnYo
ax8pD18p8oN805/Xd+5g7r67/1/Kb7mlh2nYuFHJ/ZxIKp85/UlTq25d8+9f
jua87oVCRYkPuebjDzabz49tT/z/0qpnEj40Dv25Z+daW5brdvjqs11m7epn
0rZLnOSb/jz92Tvm4P4NOX+GFYmK4l8utf4M9tdc9pNs+PHbD6wG/dfPR1Le
R2n6SHn7SpEf5Jv+xDfVrF070Rfg1wuHTJWq1UyNkvKPDmxO2r/LjZ3MwIG3
57zehURFiQ8VCcY9dRvUN+/vWW//j0N/3nFHXzNv9rhS1/c/vx67JPVatGCy
6du3Z86fAeSb/qxM+D47E5fSv5TFzi+1/ixLf61IBO8j2z4Sh68U+UG+6c8j
H261trp7x0uJsm2bVpiWxS3MnXf2s77LlV84e8D8/fIq5tWXFyb+HzzoTlO7
Xj1Ts04dc2P3znYsl+l6a1542hRfXWz1bZtrWifOBYxd6Xucr3qt2qZrt+vN
+3vXJ7b36dPTTBw/zIx64iF7bINGV5n777/N/P7Dx2mvx5i4V69uplrNWnb/
u+7qZ/NLbENLD33o3qT9T32607bHO2+vtv+/9soic227NqZKteqmeYvmZsyT
D5vfvv8osT/3sXbNfHPbbbfY+2rUpLGZM3NsBvs4YaZNecIUNS2y+v6BB+6w
9+THB57JzTf3sD6FOt9++y3m5Cc70p6T+gx77AFzVVEjW8/Wba6242H/fj49
+lZi/3vvHWD3++ePhxNlHTq1S9R7wTOTEs+ocZMiM27sozbm/PTdQVO1Rk2z
+oV5Sddf99ICc2X1Gna7X/7iyrm2Tn5Z/asamptu6pr4n2Owqfd2v5qYP+Na
XId6c15szPnUHW++aHP21J86vrl1ZanaBfx4SL6fz1dUrW6atmhmt1MP5nOL
mjWx9eEZPb98VuJ45gJ69Oxqpkweac9PTmPurHGmW/cbzKrn55h27a+116Zf
+HmZt7attPeATfKM77lngPn29L7EOS+rUtX844or7fYTh99ItMvP5w7a6/j3
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
mNFDTa9e3exntOblV1YzP5//MLHd6c///nY8UUYO0/+dRrQh+VL3f1B/uvM7
+K3H4SWalc+cF63771+OJrYvWjDZFDUtSvwv/SmEEEKIyki+689fzh+yujAV
zS7Oz6M1fd3nylq1Lk4qYz7f5UPh9c3P2fO4/4P68+Gh9yUdT9mDD96d+H/5
0umm4/Xtbe4VbVuzRO8yD++2S38KIYQQojKS7/rz1wt/6s/Nry1Luz9ak2OC
ZVe3aZVUhv5cumha4v8w/flIBv258dUlF/XlosT7TsuXTJf+FEIIIUSlJ9/1
JzD/PnXyyKR9WG/JOk8+50J/stbUXzsKbJP+FEIIIURlJx/1Z9v215hHHr7P
fH/2fbvOkveLaterZ3ZtX2NzjUc+3Gqat2hu5s15yu6fC/25cP4kW6evP99t
/vj5iL1e5xs62neSfj530O7j688D7643wx57IKGZhRBCCCEKlXzUn8xj851G
rKvknSI0J/lPvn+pStVqVkfOmDY68W5RLvQn6wLuvru/fceJ/OzkSSPMN6f2
2nqwFvTC2QNJ+nP1C/Ps+VnPmuv2FUIIIYQoT/JRfwohhBBCiPxF+lMIIYQQ
QsSJ9KcQQgghhIgT6U8hhBBCCBEn0p9CCCGEECJOpD+FEEIIIUScSH8KIYQQ
Qog4kf4UQgghhBBxIv0phBBCCCHiRPpTCCGEEELEifSnEEIIIYSIE+lPIYQQ
QggRJ9KfQgghhBAiTqQ/hRBCCCFEnEh/CiGEEEKIOJH+FEIIIYQQcSL9KYQQ
Qggh4kT6UwghhBBCxIn0pxBCCCGEiBPpTyGEEEIIESfSn0IIIYQQIk6kP4UQ
QgghRJzkm/78/ocfRQ7J9fOviOT6mQjZuxBC5BvSn6Ks8fgfV1xpNqxbnHPb
kE2KOOxdCCFE2ZH+FGWNx9KfuX8uIj57F0IIUXYKQX/u3LXbVKtZ23xw8FCi
bO0r60y9BleZz0+eKvcY1fuWPubvl1exOszn6PETWZ2nqHlLs2//gayOmTp9
pvnbZVf85drPrVyVtN/oJ8eYNm3blUs8lv4sXJtMRd8Bt5pBQx5K/H/u/AXT
vmMnM3Hy1HK/r+073klp7w8OfThpv9c2brL7lbWtc21bQghRqBSC/oThI0eZ
rt17mgvf/2BOnT5tGjYuMitXrS73eOhi/aQp08p8ntLqzx433Ry+34yZpku3
HmWuY6pnQvxftni66dOnp7myeg3TomULs3zp9MT2//x6zEyfOsoUNWtiqtao
aa5p28Y8v3xW0jne37vedLmxk6lStZpp1KSxmTJ5pPnvb8fttn//ctTMnP6k
adW6uETT1TLXXNvaLF00rcR2T9jtc2eNM92632AWPjvZnrtmnTpm8KA7zalP
d9o6NWne1LRs1dLs3vFS4noXzh6w+9SuV8/uf2P3zmbPzrWJ7R++t9H06NnV
1Kxd21SvVdt079HFllU2m0wFGrZGnXpm89atCdtibPPtd+fK/b7Qn9hb6H47
/9SpaONLbe9CCCHKTqHoz6/PnDXNWhSbZxcuNgMHDTF9+g+IJc5fylhfnvpz
waLFpt+tt5W5jqmeCXqgeYvmZvvrL5gfvnnfrFg6w8Z+p/eemTvetCxuYQ4f
3GK16P7d66zmW792kd3+87mDpm6D+mbSxOHm3Ff7rc5r2LiR1ZVsnzblCatJ
P9j3mvnXz0fMru1rTI0SXbhk4VS7ff68CUn/H//oDXv9du2vNWe+2G3LRjw+
2LS/rm2izv379zYDBvQ2357eZ/4oOedzy2Za7fvlp7vsdur71LjHzO8/fGx+
vXDITJ40whRfXZzQvJXFJtMxf8Eie2/v7tlr87w73tkVy31F1Z/knWvWrlsu
9i6EEKLsFIr+hE1btpqqNWrZuHP02PHosbpPX5vPCTJ2/IRYY3156s9Vq9eY
+x4YVC7xGD0wdswjSWXkKkeOGGI/ox1XPT8nafuY0UNNr17d7Ge0H3lI8pxu
+54dL5sdb75oP6NN580el3T8w0PvMx06tbOfnf50+VJo0OgqM+GpYYn/WR9Q
pVp1+/nzY9utPj15YnvSOTt0bGfzrHwm50nO9n/95ERK7VnoNpkOcrrkdrm3
4SOeiHwc+chU9wUbNm4OPT6q/vz0s89N42YtysXehRBClJ1C0p9nv/m2RHcU
mZ69wvXYpYRYf1mVqqZK1eoJbu7TL+vzlFZ/ss7Pvzb5qOB+3507b86c/aZc
4jF64MWVc5PK+va7ydx++y3ml/OHrNZLRbMWzey+aFe0X6pz//TdQbvvlg3L
ksrnzXnK5lD5jP5E7/rbm5ac2+VD4fXNz9nz+J9T8dCD99h91r20wGpQ8rqP
PTrQbNu0olT6M99tMhOz5z1t2+zNt7fHdl9u/ad/X/DW2zv+su/pr74uF3sX
QghRdgpJf44eO87c0re/adq82Kx5eW2ssb6i5z8vFameCfrzpVXPJJX169fL
3HvvrXbuGr2w+bVlaZ8p+tOfG/dx+nPrxuVJ5czN16pb135Gf17dplXSdvQn
a0Td/77+fHPrSvuZtQKZbA3tvGn9UjP88cE2P8t8fTbz74Vgk+n45NPPTN36
Dc3QRx8z7a7rZMc3cdxX1Pxnedq7EEKIslMo+nPvvv2mZp365sjRY2b9ho32
XQ/e+YgUqyvIXGc+60/WR/pl6EE3J8/8+9TJI5O2nzn5rvnjp8P2M/PvzJ+z
1tJtZ+599Qvz7Of6VzVMrAV1DBlyl+l8Q0f7OVv96ebfWUfqH8P7Sk5fsi7U
3/bRgc1/vk99bPtf7r+QbTIdd9x1t3n08eF2Hv76G7rad5CiHBfX/Ht52rsQ
QoiyUwj6k5jWoVNnM2PW7KT4OHjI0FhiVCHozxt79LR6ojTxGD3A+zq8N8T7
RS+/ON9qNfe++NNzx9v8IXqP7Uc+3GrntZlDZzs5zjr169t3hNB9h97bZIqa
FplZM8bY7bNL/jZuUmQ+/mCzPR5tynv0q1b+uaY0W/0J5GeZ8//i+HZ7TvKz
rA898O56c/KTHXbumvv454+HLYsWTLbv3pPPLSSbjPrcfV5Zt95cVdTEnP7y
K/s/OrtG7Trm4Icflft9XSr9+cq6V02joqbm4yNHsrZ3IYQQZacQ9OesOXNN
m3btk+YAj534xOZUtmzbFkusT/Vdi8tXPJ/VeS7l93/6388YheLWbcw99w8M
3S/4PHjnh+vzfhHvE6HR+P6llStmJ/ZB35H/5PuXeMccbThj2uik94XQfV26
/u/7lyaOH2aPYxvvJfEu0VVFjez527a/JpEbhdLoz/Nf7zeDLn7/Et8Zxfy/
/x2mG19dYvUp1+M7mPh+J96JKjSbjPrcHWjOxk2a2ffZ/PKRo560WpZ8aHne
V7rv/2zeslVW5+F7sOwY6VBmzZxrfyeEEIVKIejPQqE0+jNucv38KyK5fiZC
9i6EEPmG9GfFQfozP8n1MxGydyGEyDekPysO0p/5Sa6fiZC9CyFEviH9KRSP
ZZNC9i6EEHEi/SkUj2WTQvYuhBBxkm/6UwghhBBC5DfSn0IIIYQQIk6kP4UQ
QgghRJxIfwohhBBCiDiR/hRCCCGEEHEi/SmEEEIIIeJE+lMIIYQQQsSJ9KcQ
QgghhIgTpz//79spf/L7J0IIIYQQQpQr/w+3UXDf
    "], {{0, 363}, {672, 0}}, {0, 
    255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{672, 363},
  PlotRange->{{0, 672}, {0, 363}}]], "Input",ExpressionUUID->"4b33cae6-5740-\
4d9f-ad8e-7d83116b3730"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Variable", " ", "name", " ", "generator"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"currentVar", " ", "=", " ", "None"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"index", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ResetVarGenerator", "[", "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"index", " ", "=", " ", "0"}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"NewVar", "[", "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"currentVar", " ", "=", " ", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"\"\<$\>\"", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"index", "++"}], "]"}]}], "]"}]}], ")"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CurrentVar", "[", "]"}], ":=", "currentVar"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CurrentVar", "[", "s_", "]"}], ":=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"s", ",", "currentVar"}], "]"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"LineJoin", "[", "l_", "]"}], ":=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"DeleteCases", "[", 
         RowBox[{"l", ",", "\"\<\>\""}], "]"}], ",", "\"\< \>\""}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ColumnJoin", "[", "l_", "]"}], ":=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"DeleteCases", "[", 
         RowBox[{"l", ",", "\"\<\>\""}], "]"}], ",", "\"\<\\n\>\""}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"LabelIdentifier", "[", "s_", "]"}], ":=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<<\>\"", ",", "s", ",", "\"\<>\>\""}], "]"}]}], 
    ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7609730519802227`*^9, 3.7609730536340218`*^9}, {
   3.760973257256879*^9, 3.760973322106689*^9}, {3.760973372019713*^9, 
   3.760973376831653*^9}, {3.762634526421596*^9, 3.762634555424038*^9}, {
   3.7628105357747383`*^9, 3.762810613774233*^9}, {3.7628106523421717`*^9, 
   3.762810666325725*^9}, {3.762810824912396*^9, 3.7628108275675097`*^9}, {
   3.762811319356358*^9, 3.762811325037032*^9}, 3.762811870991556*^9, {
   3.763901883340357*^9, 3.7639019087108088`*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"a42c14cc-f192-4d04-8fdf-01492960e98c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"grammar", " ", "=", " ", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", "Program", " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Program\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Dot\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
          RowBox[{
           RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}], "[", 
           "\"\<TACode\>\"", "]"}]}], "}"}]}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Block\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<ConstOpt\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<VarOpt\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<ProcRep\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              "\"\<return\>\"", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<ProcRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<ConstOpt\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<VarOpt\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ConstOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Const\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Equal\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<ConstOptRep\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Semicolon\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<declare_const\>\"", ",", 
              RowBox[{"LabelIdentifier", "[", 
               RowBox[{
                RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                "\"\<Value\>\"", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], "[", 
               "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "|>"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ConstOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ConstOptRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Comma\>\"", "]"}], ",", " ", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Equal\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<ConstOptRep\>\"", "]"}]}], "}"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
          RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"LineJoin", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<declare_const\>\"", ",", 
                RowBox[{"LabelIdentifier", "[", 
                 RowBox[{
                  RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                  "\"\<Value\>\"", "]"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], "[", 
                 "\"\<Value\>\"", "]"}]}], "}"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<ConstOptRep\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
      "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ConstOptRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<VarOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Var\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<VarOptRep\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Semicolon\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<declare_var\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{
                   RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                   "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<VarOptRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<VarOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<VarOptRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Comma\>\"", "]"}], ",", " ", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<VarOptRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<declare_var\>\"", ",", 
              RowBox[{"LabelIdentifier", "[", 
               RowBox[{
                RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "|>"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<VarOptRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ProcRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Procedure\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Semicolon\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Semicolon\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<ProcRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<begin_proc\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{
                   RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                   "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Block\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<end_proc\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{
                   RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                   "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<ProcRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<ProcRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "Statements", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Assign\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}]}], "}"}]}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<set\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{
                   RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                   "\"\<Value\>\"", "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
                  "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Call\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<call\>\"", ",", " ", 
              RowBox[{"LabelIdentifier", "[", 
               RowBox[{
                RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Print\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{"LineJoin", "[", 
            RowBox[{"{", 
             RowBox[{"\"\<print\>\"", ",", " ", 
              RowBox[{"LabelIdentifier", "[", 
               RowBox[{
                RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
                "\"\<Value\>\"", "]"}], "]"}]}], "}"}], "]"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Begin\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<StatementRep\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<End\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<StatementRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<If\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Then\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], "[", 
                  "\"\<Conditional\>\"", "]"}], ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentVar", "[", "\"\<L\>\"", "]"}], "]"}]}], 
                "}"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<label\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentVar", "[", "\"\<L\>\"", "]"}], "]"}]}], 
                "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<While\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<Do\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<label\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentVar", "[", "\"\<L1\>\"", "]"}], "]"}]}], 
                "}"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Condition\>\"", "]"}], "[", 
                  "\"\<Conditional\>\"", "]"}], ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentVar", "[", "\"\<L2\>\"", "]"}], "]"}]}], 
                "}"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<goto\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentVar", "[", "\"\<L1\>\"", "]"}], "]"}]}], 
                "}"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<label\>\"", ",", 
                 RowBox[{"LabelIdentifier", "[", 
                  RowBox[{"CurrentVar", "[", "\"\<L2\>\"", "]"}], "]"}]}], 
                "}"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Statement\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<StatementRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Semicolon\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<StatementRep\>\"", "]"}]}], "}"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", "\"\<\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Statement\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<StatementRep\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}]}], "\[IndentingNewLine]", "}"}], 
            "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<StatementRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "Conditionals", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Condition\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Odd\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}]}], "}"}]}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<odd\>\"", ",", 
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
                  "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<Conditional\>\"", "\[Rule]", "\"\<if_odd\>\""}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "|>"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Condition\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<Expression1\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Op\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Expression2\>\"", "]"}]}], "}"}]}], 
       ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
           RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Expression1\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"NonTerm", "[", "\"\<Expression2\>\"", "]"}], "[", 
               "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"LineJoin", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<compare\>\"", ",", 
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Expression1\>\"", "]"}], "[", 
                  "\"\<Value\>\"", "]"}], ",", " ", 
                 RowBox[{
                  RowBox[{"NonTerm", "[", "\"\<Expression2\>\"", "]"}], "[", 
                  "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<Conditional\>\"", "\[Rule]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Op\>\"", "]"}], "[", 
            "\"\<Conditional\>\"", "]"}]}]}], "\[IndentingNewLine]", 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Expression1\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}]}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<TACode\>\"", "]"}]}]}], "}"}]}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Expression2\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}]}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<TACode\>\"", "]"}]}]}], "}"}]}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Equal\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Conditional\>\"", "\[Rule]", "\"\<if_equal\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<NotEqual\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Conditional\>\"", "\[Rule]", "\"\<if_not_equal\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Lower\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Conditional\>\"", "\[Rule]", "\"\<if_less\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<LowerOrEqual\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Conditional\>\"", "\[Rule]", "\"\<if_less_or_equal\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Greater\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Conditional\>\"", "\[Rule]", "\"\<if_greater\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Op\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<GreaterOrEqual\>\"", "]"}], "}"}]}], ",", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Conditional\>\"", "\[Rule]", "\"\<if_greater_or_equal\>\""}], 
         "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Numeric", " ", "expressions"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Expression\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<SignOpt\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", " ", "\"\<\>\""}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "there", " ", "is", " ", "a", " ", 
            "nonempty", " ", "AddRep"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<SignOpt\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", " ", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}]}],
            "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "AddRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "|>"}], ",",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<SignOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Plus\>\"", "]"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<+\>\""}], "}"}]}]}], "|>"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<SignOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Minus\>\"", "]"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<-\>\""}], "}"}]}]}], "|>"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<SignOpt\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<AddRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Plus\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", " ", "\"\<\>\""}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "there", " ", "is", " ", "a", " ", 
            "nonempty", " ", "AddRep"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<add\>\""}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "AddRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<add\>\""}]}], 
           "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<AddRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Minus\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", " ", "\"\<\>\""}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "there", " ", "is", " ", "a", " ", 
            "nonempty", " ", "AddRep"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<AddRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<substract\>\""}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "AddRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Term\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<substract\>\""}]}], 
           "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<AddRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Term\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", "\"\<\>\""}], " ", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "there", " ", "is", " ", "a", " ", 
            "nonempty", " ", "MultRep"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}]}],
            "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "MultRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}]}], "\[IndentingNewLine]", "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "|>"}], ",",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<MultRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Times\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", "\"\<\>\""}], " ", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "there", " ", "is", " ", "a", " ", 
            "nonempty", " ", "MultRep"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", " ", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<multiply\>\""}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "MultRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<multiply\>\""}]}], 
           "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<MultRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<Slash\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}]}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[RuleDelayed]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}], " ", "\[NotEqual]", "\"\<\>\""}], " ", 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{"NewVar", "[", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", "\[IndentingNewLine]", 
             RowBox[{"ColumnJoin", "[", "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                 "\"\<TACode\>\"", "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"LineJoin", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Op\>\"", "]"}], ",", 
                   RowBox[{"CurrentVar", "[", "]"}], ",", " ", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"NonTerm", "[", "\"\<MultRep\>\"", "]"}], "[", 
                    "\"\<Value\>\"", "]"}]}], "}"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<divide\>\""}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Case", " ", "when", " ", "MultRep", " ", "is", " ", "an", " ", 
            "empty", " ", "string"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<Value\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<TACode\>\"", "\[RuleDelayed]", 
             RowBox[{
              RowBox[{"NonTerm", "[", "\"\<Factor\>\"", "]"}], "[", 
              "\"\<TACode\>\"", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<divide\>\""}]}], 
           "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<MultRep\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"EmptyString", "[", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}], ",", 
          RowBox[{"\"\<Op\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], "|>"}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Factor\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[RuleDelayed]", 
           RowBox[{"LabelIdentifier", "[", 
            RowBox[{
             RowBox[{"Term", "[", "\"\<Identifier\>\"", "]"}], "[", 
             "\"\<Value\>\"", "]"}], "]"}]}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Factor\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", 
           RowBox[{
            RowBox[{"Term", "[", "\"\<NumberLiteral\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}]}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", "\"\<\>\""}]}], "}"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<From\>\"", "\[Rule]", "\"\<Factor\>\""}], ",", 
       RowBox[{"\"\<To\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Term", "[", "\"\<LeftParenthesis\>\"", "]"}], ",", 
          RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], ",", 
          RowBox[{"Term", "[", "\"\<RightParenthesis\>\"", "]"}]}], "}"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Action\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Value\>\"", "\[Rule]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<Value\>\"", "]"}]}], ",", 
          RowBox[{"\"\<TACode\>\"", "\[Rule]", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Expression\>\"", "]"}], "[", 
            "\"\<TACode\>\"", "]"}]}]}], "}"}]}]}], "|>"}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.757708463418523*^9, {3.758397084945386*^9, 3.7583971201135187`*^9}, {
   3.758397259771913*^9, 3.758397262037738*^9}, {3.758397357164755*^9, 
   3.7583973926301126`*^9}, {3.758397428460285*^9, 3.758397549530447*^9}, {
   3.758397602835465*^9, 3.758397620280055*^9}, {3.758654815982897*^9, 
   3.758654920895102*^9}, {3.7586549522277317`*^9, 3.7586552128488607`*^9}, {
   3.758655252497868*^9, 3.758655340564067*^9}, 3.758655412726343*^9, {
   3.758657086580977*^9, 3.7586571036949987`*^9}, {3.758658126395973*^9, 
   3.7586581370928183`*^9}, {3.758658423276381*^9, 3.7586584450004463`*^9}, {
   3.758658497772645*^9, 3.758658644329619*^9}, {3.758658676355166*^9, 
   3.7586586821468887`*^9}, {3.758662144653244*^9, 3.758662188518877*^9}, {
   3.758662232086268*^9, 3.758662260290092*^9}, {3.758662296403809*^9, 
   3.758662631794086*^9}, {3.758663063941772*^9, 3.758663067888268*^9}, {
   3.758663780691115*^9, 3.758663790049144*^9}, {3.7586638387129*^9, 
   3.75866397188455*^9}, {3.758664037881525*^9, 3.7586640724907417`*^9}, {
   3.7586641596355877`*^9, 3.758664229787222*^9}, {3.7586642602104187`*^9, 
   3.758664484551022*^9}, {3.758664535540159*^9, 3.758664609068871*^9}, {
   3.7614193173266*^9, 3.761419710447349*^9}, {3.761419742605357*^9, 
   3.761419782932187*^9}, {3.7614200279841547`*^9, 3.7614200473975563`*^9}, 
   3.761424933878924*^9, {3.761425000770694*^9, 3.7614250722860193`*^9}, {
   3.7614251560524406`*^9, 3.761425190091009*^9}, {3.761425230171857*^9, 
   3.761425255125432*^9}, {3.761425310444149*^9, 3.761425340445744*^9}, 
   3.761425411509207*^9, {3.761425442157999*^9, 3.761425530314145*^9}, {
   3.761425654073043*^9, 3.76142568841543*^9}, {3.761425755367526*^9, 
   3.7614258073040733`*^9}, {3.761425863866975*^9, 3.761425889886579*^9}, {
   3.7614259756734247`*^9, 3.761426027062324*^9}, {3.762461731416399*^9, 
   3.762461797428293*^9}, {3.762461841588917*^9, 3.7624618643312397`*^9}, {
   3.7624629746705914`*^9, 3.762463003210812*^9}, {3.76246305172112*^9, 
   3.7624630821568317`*^9}, {3.762464979008932*^9, 3.7624649806341467`*^9}, 
   3.762465097647737*^9, {3.762465631189554*^9, 3.762465633616901*^9}, {
   3.762526611476314*^9, 3.762526612440469*^9}, {3.762527042446353*^9, 
   3.762527100683155*^9}, {3.7625272215647917`*^9, 3.76252722308502*^9}, {
   3.762527270632585*^9, 3.762527305429284*^9}, 3.762527388160746*^9, {
   3.762527532196085*^9, 3.7625275555056*^9}, {3.7625275922416267`*^9, 
   3.7625276063844767`*^9}, {3.762528089673645*^9, 3.762528089854987*^9}, {
   3.762542531438052*^9, 3.762542581202112*^9}, 3.762542614244337*^9, {
   3.76254389251585*^9, 3.762543895619216*^9}, 3.762544878222232*^9, 
   3.762544976093575*^9, {3.762545010850215*^9, 3.762545016794711*^9}, {
   3.762554428487412*^9, 3.762554519336939*^9}, {3.762554677524194*^9, 
   3.7625546821081057`*^9}, {3.762554818638681*^9, 3.762554819696615*^9}, {
   3.7625552881866417`*^9, 3.762555294184272*^9}, {3.762555617980438*^9, 
   3.76255569134691*^9}, {3.762556682810298*^9, 3.7625567501901093`*^9}, {
   3.762557443523364*^9, 3.762557485560464*^9}, {3.762557561734536*^9, 
   3.762557563938469*^9}, 3.7625581988291903`*^9, {3.762558235466861*^9, 
   3.762558260192402*^9}, {3.762632586068125*^9, 3.7626326076588793`*^9}, {
   3.7626326428123817`*^9, 3.762632649446107*^9}, {3.7626337660959053`*^9, 
   3.762633782459092*^9}, {3.762634377369495*^9, 3.762634428418358*^9}, 
   3.762634513371749*^9, {3.7626346100758657`*^9, 3.762634697766529*^9}, {
   3.7626350276827803`*^9, 3.762635112107459*^9}, {3.7626361767729187`*^9, 
   3.762636253815197*^9}, {3.76263666115584*^9, 3.7626366656826057`*^9}, {
   3.762803591480563*^9, 3.7628036051011753`*^9}, {3.762803802918893*^9, 
   3.762803840307683*^9}, {3.762804136688395*^9, 3.762804186983327*^9}, 
   3.762804220850264*^9, {3.7628042512732477`*^9, 3.762804341848919*^9}, {
   3.76280438079278*^9, 3.762804390669153*^9}, {3.762804421769392*^9, 
   3.76280446139423*^9}, {3.762804497230981*^9, 3.762804497586347*^9}, {
   3.762804553848971*^9, 3.762804594034915*^9}, {3.7628046403500977`*^9, 
   3.762804641385178*^9}, {3.762804705687111*^9, 3.762804739348929*^9}, 
   3.762804818218153*^9, {3.762804867648096*^9, 3.7628048770622787`*^9}, {
   3.7628049980523653`*^9, 3.762805002867304*^9}, {3.762805270775476*^9, 
   3.762805295660387*^9}, {3.762805460076379*^9, 3.762805487481439*^9}, {
   3.762805603662918*^9, 3.7628056636639547`*^9}, {3.7628057254868593`*^9, 
   3.762805759318329*^9}, {3.762806195138658*^9, 3.7628062252523613`*^9}, {
   3.762806312494196*^9, 3.762806330706641*^9}, {3.7628063675477448`*^9, 
   3.762806379877239*^9}, {3.762806736080415*^9, 3.762806773843936*^9}, {
   3.762811094800206*^9, 3.762811099453433*^9}, {3.76281113670343*^9, 
   3.7628112378503103`*^9}, {3.762811271642569*^9, 3.762811288309873*^9}, {
   3.762811415932268*^9, 3.762811506010005*^9}, {3.762811585693389*^9, 
   3.762811708633666*^9}, {3.76281192222262*^9, 3.7628119789093227`*^9}, {
   3.762812035201005*^9, 3.762812076505178*^9}, {3.7628795878950243`*^9, 
   3.762879607153058*^9}, {3.762879656353517*^9, 3.762879695501746*^9}, {
   3.7628799161968927`*^9, 3.7628800197510357`*^9}, {3.762880049819096*^9, 
   3.762880113712551*^9}, {3.762880839855822*^9, 3.762880852948409*^9}, {
   3.762880935007348*^9, 3.762881030288554*^9}, {3.7628823885801897`*^9, 
   3.762882393348343*^9}, {3.762882525771327*^9, 3.7628825787591877`*^9}, {
   3.762882609494554*^9, 3.762882657567606*^9}, {3.763901210998481*^9, 
   3.76390121763516*^9}, {3.763901686271734*^9, 3.763901724483602*^9}, {
   3.76390179532345*^9, 3.7639018243978453`*^9}, {3.7639019213319263`*^9, 
   3.7639019615814323`*^9}, {3.763901992333843*^9, 3.7639020798114843`*^9}, {
   3.7639021873372707`*^9, 3.763902225235034*^9}, {3.763909917806077*^9, 
   3.763909921028821*^9}, {3.763909961920467*^9, 3.763909970460782*^9}, {
   3.763910253653021*^9, 3.763910254018202*^9}, {3.76391116365902*^9, 
   3.76391117974481*^9}, {3.763911280092414*^9, 3.763911280738295*^9}, {
   3.7639222692984877`*^9, 3.763922283023196*^9}, {3.7639223238103323`*^9, 
   3.76392246701787*^9}, {3.7639226296376734`*^9, 3.763922633061536*^9}, {
   3.7639227035432568`*^9, 3.763922714687293*^9}, {3.7639228808370504`*^9, 
   3.7639229135344753`*^9}, {3.7639256425343113`*^9, 
   3.7639256428029227`*^9}, {3.763929198946018*^9, 3.763929202857572*^9}, {
   3.7639292385854945`*^9, 3.7639292697422733`*^9}},
 CellLabel->
  "In[238]:=",ExpressionUUID->"2acc6ca5-763c-47d1-84db-b9bd9d839b1a"],

Cell[CellGroupData[{

Cell["Example", "Subsubsection",
 CellChangeTimes->{{3.762893063137998*^9, 
  3.762893064054627*^9}},ExpressionUUID->"3f162af0-a6a6-4196-aab9-\
840e3416d4f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GrammarPrettify", "[", "grammar", "]"}]], "Input",
 CellChangeTimes->{{3.761426744651774*^9, 3.761426745669683*^9}},
 CellLabel->
  "(Debug) In[195]:=",ExpressionUUID->"164cffec-d679-429b-b5cb-4eb1b932e1fe"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      StyleBox["\<\"Program\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Block\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"Dot\"\>",
         StripOnInput->False,
         FontSlant->Italic]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Block\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"ConstOpt\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"VarOpt\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"ProcRep\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"Statement\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"ConstOpt\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Const\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Identifier\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Equal\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"NumberLiteral\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"ConstOptRep\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"Semicolon\"\>",
         StripOnInput->False,
         FontSlant->Italic]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"ConstOpt\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"ConstOptRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Comma\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Identifier\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Equal\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"NumberLiteral\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"ConstOptRep\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"ConstOptRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"VarOpt\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Var\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Identifier\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"VarOptRep\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"Semicolon\"\>",
         StripOnInput->False,
         FontSlant->Italic]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"VarOpt\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"VarOptRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Comma\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Identifier\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"VarOptRep\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"VarOptRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"ProcRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Procedure\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Identifier\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Semicolon\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Block\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"Semicolon\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"ProcRep\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"ProcRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Statement\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Identifier\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Assign\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Expression\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Statement\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Call\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Identifier\"\>",
         StripOnInput->False,
         FontSlant->Italic]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Statement\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Print\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Identifier\"\>",
         StripOnInput->False,
         FontSlant->Italic]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Statement\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Begin\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Statement\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"StatementRep\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"End\"\>",
         StripOnInput->False,
         FontSlant->Italic]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Statement\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"If\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Condition\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"Then\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Statement\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Statement\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"While\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Condition\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"Do\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Statement\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Statement\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"StatementRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Semicolon\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Statement\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"StatementRep\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"StatementRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Condition\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Odd\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Expression\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Condition\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Expression\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"Op\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"Expression\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Op\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       StyleBox["\<\"Equal\"\>",
        StripOnInput->False,
        FontSlant->Italic], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Op\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       StyleBox["\<\"NotEqual\"\>",
        StripOnInput->False,
        FontSlant->Italic], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Op\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       StyleBox["\<\"Lower\"\>",
        StripOnInput->False,
        FontSlant->Italic], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Op\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       StyleBox["\<\"LowerOrEqual\"\>",
        StripOnInput->False,
        FontSlant->Italic], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Op\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       StyleBox["\<\"Greater\"\>",
        StripOnInput->False,
        FontSlant->Italic], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Op\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       StyleBox["\<\"GreaterOrEqual\"\>",
        StripOnInput->False,
        FontSlant->Italic], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Expression\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"SignOpt\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"Term\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"AddRep\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"SignOpt\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       StyleBox["\<\"Plus\"\>",
        StripOnInput->False,
        FontSlant->Italic], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"SignOpt\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       StyleBox["\<\"Minus\"\>",
        StripOnInput->False,
        FontSlant->Italic], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"SignOpt\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"AddRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Plus\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Term\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"AddRep\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"AddRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Minus\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Term\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"AddRep\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"AddRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Term\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Factor\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"MultRep\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"MultRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Times\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Factor\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"MultRep\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"MultRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"Slash\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Factor\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"MultRep\"\>",
         StripOnInput->False,
         FontWeight->Bold]}], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"MultRep\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"EmptyString", "[", "]"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Factor\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       StyleBox["\<\"Identifier\"\>",
        StripOnInput->False,
        FontSlant->Italic], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Factor\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       StyleBox["\<\"NumberLiteral\"\>",
        StripOnInput->False,
        FontSlant->Italic], "}"}]}]},
    {
     RowBox[{
      StyleBox["\<\"Factor\"\>",
       StripOnInput->False,
       FontWeight->Bold], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        StyleBox["\<\"LeftParenthesis\"\>",
         StripOnInput->False,
         FontSlant->Italic], ",", 
        StyleBox["\<\"Expression\"\>",
         StripOnInput->False,
         FontWeight->Bold], ",", 
        StyleBox["\<\"RightParenthesis\"\>",
         StripOnInput->False,
         FontSlant->Italic]}], "}"}]}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.7614267458716908`*^9, 3.762545138039527*^9},
 CellLabel->
  "(Debug) Out[195]=",ExpressionUUID->"eaf25382-2044-4c24-9a10-4745c82c050b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GrammarGraph", "[", "grammar", "]"}]], "Input",
 CellChangeTimes->{
  3.762894939736002*^9, {3.76289504874774*^9, 3.762895053505512*^9}},
 CellLabel->
  "In[173]:=",ExpressionUUID->"9e959e3b-1222-4890-8564-d321f265ce0c"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
       $CellContext`NonTerm["Program"], 
       $CellContext`NonTerm["Block"], 
       $CellContext`Term["Dot"], 
       $CellContext`NonTerm["ConstOpt"], 
       $CellContext`NonTerm["VarOpt"], 
       $CellContext`NonTerm["ProcRep"], 
       $CellContext`NonTerm["Statement"], 
       $CellContext`Term["Const"], 
       $CellContext`Term["Identifier"], 
       $CellContext`Term["Equal"], 
       $CellContext`Term["NumberLiteral"], 
       $CellContext`NonTerm["ConstOptRep"], 
       $CellContext`Term["Semicolon"], 
       $CellContext`EmptyString[], 
       $CellContext`Term["Comma"], 
       $CellContext`Term["Var"], 
       $CellContext`NonTerm["VarOptRep"], 
       $CellContext`Term["Procedure"], 
       $CellContext`Term["Assign"], 
       $CellContext`NonTerm["Expression"], 
       $CellContext`Term["Call"], 
       $CellContext`Term["Print"], 
       $CellContext`Term["Begin"], 
       $CellContext`NonTerm["StatementRep"], 
       $CellContext`Term["End"], 
       $CellContext`Term["If"], 
       $CellContext`NonTerm["Condition"], 
       $CellContext`Term["Then"], 
       $CellContext`Term["While"], 
       $CellContext`Term["Do"], 
       $CellContext`Term["Odd"], 
       $CellContext`NonTerm["Expression1"], 
       $CellContext`NonTerm["Op"], 
       $CellContext`NonTerm["Expression2"], 
       $CellContext`Term["NotEqual"], 
       $CellContext`Term["Lower"], 
       $CellContext`Term["LowerOrEqual"], 
       $CellContext`Term["Greater"], 
       $CellContext`Term["GreaterOrEqual"], 
       $CellContext`NonTerm["SignOpt"], 
       $CellContext`NonTerm["Term"], 
       $CellContext`NonTerm["AddRep"], 
       $CellContext`Term["Plus"], 
       $CellContext`Term["Minus"], 
       $CellContext`NonTerm["Factor"], 
       $CellContext`NonTerm["MultRep"], 
       $CellContext`Term["Times"], 
       $CellContext`Term["Slash"], 
       $CellContext`Term["LeftParenthesis"], 
       $CellContext`Term["RightParenthesis"]}, {{{1, 2}, {1, 3}, {2, 4}, {2, 
       5}, {2, 6}, {2, 7}, {4, 8}, {4, 9}, {4, 10}, {4, 11}, {4, 12}, {4, 
       13}, {4, 14}, {12, 15}, {12, 9}, {12, 10}, {12, 11}, {12, 12}, {12, 
       14}, {5, 16}, {5, 9}, {5, 17}, {5, 13}, {5, 14}, {17, 15}, {17, 9}, {
       17, 17}, {17, 14}, {6, 18}, {6, 9}, {6, 13}, {6, 2}, {6, 6}, {6, 14}, {
       7, 9}, {7, 19}, {7, 20}, {7, 21}, {7, 22}, {7, 23}, {7, 7}, {7, 24}, {
       7, 25}, {7, 26}, {7, 27}, {7, 28}, {7, 29}, {7, 30}, {7, 14}, {24, 
       13}, {24, 7}, {24, 24}, {24, 14}, {27, 31}, {27, 20}, {27, 32}, {27, 
       33}, {27, 34}, {32, 20}, {34, 20}, {33, 10}, {33, 35}, {33, 36}, {33, 
       37}, {33, 38}, {33, 39}, {20, 40}, {20, 41}, {20, 42}, {40, 43}, {40, 
       44}, {40, 14}, {42, 43}, {42, 41}, {42, 42}, {42, 44}, {42, 14}, {41, 
       45}, {41, 46}, {46, 47}, {46, 45}, {46, 46}, {46, 48}, {46, 14}, {45, 
       9}, {45, 11}, {45, 49}, {45, 20}, {45, 50}}, Null}, {
      VertexLabels -> {"Name"}, 
       VertexStyle -> {$CellContext`NonTerm["StatementRep"] -> 
         RGBColor[0, 0, 1], $CellContext`Term["Greater"] -> 
         RGBColor[1, 0, 0], $CellContext`NonTerm["Statement"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["Term"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["Program"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["VarOptRep"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["Expression2"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["ConstOptRep"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["Factor"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["VarOpt"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["AddRep"] -> 
         RGBColor[0, 0, 1], $CellContext`Term["Var"] -> 
         RGBColor[1, 0, 0], $CellContext`NonTerm["Op"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["MultRep"] -> 
         RGBColor[0, 0, 1], $CellContext`Term["Comma"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["NotEqual"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["RightParenthesis"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["LeftParenthesis"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Equal"] -> 
         RGBColor[1, 0, 0], $CellContext`NonTerm["SignOpt"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["Block"] -> 
         RGBColor[0, 0, 1], $CellContext`Term["Dot"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Print"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Identifier"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Then"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Semicolon"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Times"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Plus"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Slash"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Do"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Begin"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Odd"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Assign"] -> 
         RGBColor[1, 0, 0], $CellContext`NonTerm["ProcRep"] -> 
         RGBColor[0, 0, 1], $CellContext`Term["Lower"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Minus"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["While"] -> 
         RGBColor[1, 0, 0], $CellContext`NonTerm["Condition"] -> 
         RGBColor[0, 0, 1], $CellContext`NonTerm["ConstOpt"] -> 
         RGBColor[0, 0, 1], $CellContext`Term["LowerOrEqual"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Call"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["Procedure"] -> 
         RGBColor[1, 0, 0], $CellContext`NonTerm["Expression1"] -> 
         RGBColor[0, 0, 1], $CellContext`Term["Const"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["End"] -> 
         RGBColor[1, 0, 0], $CellContext`NonTerm["Expression"] -> 
         RGBColor[0, 0, 1], $CellContext`Term["NumberLiteral"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["If"] -> 
         RGBColor[1, 0, 0], $CellContext`Term["GreaterOrEqual"] -> 
         RGBColor[1, 0, 0]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.0192086006764089], 
        ArrowBox[{{6.117791118535141, 0.6122123879958659}, {5.071124948001668,
          1.5145097822321754`}}, 0.052748296902312974`], 
        ArrowBox[{{6.117791118535141, 0.6122123879958659}, {
         6.8651925498008755`, 0.}}, 0.052748296902312974`], 
        ArrowBox[{{5.071124948001668, 1.5145097822321754`}, {
         4.381283190119518, 2.4264339150569674`}}, 0.052748296902312974`], 
        ArrowBox[{{5.071124948001668, 1.5145097822321754`}, {
         5.325328095238799, 2.400920605397517}}, 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{5.071124948001668, 1.5145097822321754`}, {
         5.104485387267343, 1.8536635230741878`}, {5.332642113753628, 
         2.106809107543864}}], 0.052748296902312974`], 
        ArrowBox[{{5.071124948001668, 1.5145097822321754`}, {
         3.7380813442115106`, 1.3939457272055482`}}, 0.052748296902312974`], 
        ArrowBox[{{4.381283190119518, 2.4264339150569674`}, {
         5.508917222740667, 2.6971202178057996`}}, 0.052748296902312974`], 
        ArrowBox[{{4.381283190119518, 2.4264339150569674`}, {
         4.626250296234113, 2.5331012031219724`}}, 0.052748296902312974`], 
        ArrowBox[{{4.381283190119518, 2.4264339150569674`}, {
         2.8714358026181586`, 2.525680503598187}}, 0.052748296902312974`], 
        ArrowBox[{{4.381283190119518, 2.4264339150569674`}, {
         4.4349856618530765`, 3.2616384945204113`}}, 0.052748296902312974`], 
        ArrowBox[{{4.381283190119518, 2.4264339150569674`}, {
         4.047252887133222, 2.9044313459656577`}}, 0.052748296902312974`], 
        ArrowBox[{{4.381283190119518, 2.4264339150569674`}, {
         4.960715801178875, 2.001870491194436}}, 0.052748296902312974`], 
        ArrowBox[{{4.381283190119518, 2.4264339150569674`}, {
         4.333557174047402, 2.865348478078523}}, 0.052748296902312974`], 
        ArrowBox[{{5.325328095238799, 2.400920605397517}, {4.626250296234113, 
         2.5331012031219724`}}, 0.052748296902312974`], 
        ArrowBox[{{5.325328095238799, 2.400920605397517}, {4.960715801178875, 
         2.001870491194436}}, 0.052748296902312974`], 
        ArrowBox[{{5.325328095238799, 2.400920605397517}, {4.333557174047402, 
         2.865348478078523}}, 0.052748296902312974`], 
        ArrowBox[{{5.325328095238799, 2.400920605397517}, {6.405966560437507, 
         2.5045080336346515`}}, 0.052748296902312974`], 
        ArrowBox[{{5.325328095238799, 2.400920605397517}, {5.124971923291862, 
         2.9677274521396804`}}, 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{5.332642113753628, 2.106809107543864}, {
         5.299281674487953, 1.7676553667653578`}, {5.071124948001668, 
         1.5145097822321754`}}], 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{5.332642113753628, 2.106809107543864}, {
         5.217409508952861, 2.362454042700597}, {5.292370896962141, 
         2.5146644614424796`}, {5.392763773169931, 2.5698013972364424`}, {
         5.6744457127825285`, 2.4248449136044976`}, {5.687932446809377, 
         2.3111043347097637`}, {5.607645904166559, 2.16163429645353}, {
         5.332642113753628, 2.106809107543864}},
         SplineDegree->7], 0.052748296902312974`], 
        ArrowBox[{{5.332642113753628, 2.106809107543864}, {4.626250296234113, 
         2.5331012031219724`}}, 0.052748296902312974`], 
        ArrowBox[{{5.332642113753628, 2.106809107543864}, {4.960715801178875, 
         2.001870491194436}}, 0.052748296902312974`], 
        ArrowBox[{{5.332642113753628, 2.106809107543864}, {4.333557174047402, 
         2.865348478078523}}, 0.052748296902312974`], 
        ArrowBox[{{5.332642113753628, 2.106809107543864}, {6.348286789167826, 
         1.7913527913429148`}}, 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         4.149534500979755, 1.3763395909683822`}, {4.197293381062795, 
         1.3281533459090509`}, {4.212562879009028, 1.2852689685946683`}, {
         4.166393781409405, 1.1626627384935055`}, {4.126630525345514, 
         1.1405017174798027`}, {4.058950519953108, 1.1357856057563542`}, {
         3.7380813442115106`, 1.3939457272055482`}},
         SplineDegree->7], 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         4.626250296234113, 2.5331012031219724`}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         4.333557174047402, 2.865348478078523}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         2.904481059298527, 0.6462795858281758}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         3.287436239766647, 2.956800547476229}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         2.8889392869948933`, 1.0722069880076694`}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         4.414989482761747, 0.6822007951102318}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         3.8862019578342077`, 0.6272279987482909}}, 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         3.937718829772496, 1.7505246626967292`}, {4.31003635091963, 
         1.9189981808831251`}}], 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         3.5356396961643557`, 0.28675956816273285`}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         3.862042417496953, 0.22584206141000207`}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         2.3768477332130082`, 2.1967901788440627`}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         3.313277318398064, 0.745472725466195}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         3.202243300769556, 0.336563161373336}}, 0.052748296902312974`], 
        ArrowBox[{{3.7380813442115106`, 1.3939457272055482`}, {
         4.225426217002918, 0.3589729301386386}}, 0.052748296902312974`], 
        ArrowBox[{{4.047252887133222, 2.9044313459656577`}, {
         4.626250296234113, 2.5331012031219724`}}, 0.052748296902312974`], 
        ArrowBox[{{4.047252887133222, 2.9044313459656577`}, {
         2.8714358026181586`, 2.525680503598187}}, 0.052748296902312974`], 
        ArrowBox[{{4.047252887133222, 2.9044313459656577`}, {
         4.4349856618530765`, 3.2616384945204113`}}, 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{4.047252887133222, 2.9044313459656577`}, {
         3.765451317985101, 2.9518109076375603`}, {3.682096173007788, 
         3.0954916743399843`}, {3.690782077641772, 3.2072542313716284`}, {
         3.9591587374577877`, 3.363792379073658}, {4.06071579191022, 
         3.316332092680634}, {4.144743451668775, 3.173043588920263}, {
         4.047252887133222, 2.9044313459656577`}},
         SplineDegree->7], 0.052748296902312974`], 
        ArrowBox[{{4.047252887133222, 2.9044313459656577`}, {
         4.333557174047402, 2.865348478078523}}, 0.052748296902312974`], 
        ArrowBox[{{4.047252887133222, 2.9044313459656577`}, {
         4.956474601812568, 3.4183829606774054`}}, 0.052748296902312974`], 
        ArrowBox[{{5.124971923291862, 2.9677274521396804`}, {
         4.626250296234113, 2.5331012031219724`}}, 0.052748296902312974`], 
        ArrowBox[{{5.124971923291862, 2.9677274521396804`}, {
         4.333557174047402, 2.865348478078523}}, 0.052748296902312974`], 
        ArrowBox[{{5.124971923291862, 2.9677274521396804`}, {
         4.956474601812568, 3.4183829606774054`}}, 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{5.124971923291862, 2.9677274521396804`}, {
         5.183908188535301, 3.218165968776563}, {5.349334207434345, 
         3.2986904065029123`}, {5.4714439007778255`, 3.2750505627137882`}, {
         5.587921183671315, 2.9547541029153592`}, {5.509521291014055, 
         2.8581980246284746`}, {5.33101263517611, 2.8136490337211386`}, {
         5.124971923291862, 2.9677274521396804`}},
         SplineDegree->7], 0.052748296902312974`], 
        ArrowBox[{{3.287436239766647, 2.956800547476229}, {3.339038624553645, 
         3.657045111161323}}, 0.052748296902312974`], 
        ArrowBox[{{3.287436239766647, 2.956800547476229}, {3.850922201525535, 
         3.94509968790823}}, 0.052748296902312974`], 
        ArrowBox[{{3.287436239766647, 2.956800547476229}, {3.520464659266626, 
         3.7615954228542243`}}, 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{4.31003635091963, 1.9189981808831251`}, {
         4.110398865358635, 1.5624192453957582`}, {3.7380813442115106`, 
         1.3939457272055482`}}], 0.052748296902312974`], 
        ArrowBox[{{4.31003635091963, 1.9189981808831251`}, {4.960715801178875,
          2.001870491194436}}, 0.052748296902312974`], 
        ArrowBox[{{4.31003635091963, 1.9189981808831251`}, {4.333557174047402,
          2.865348478078523}}, 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{4.31003635091963, 1.9189981808831251`}, {
         4.593204151980403, 1.8282305412678157`}, {4.653166030857171, 
         1.6819571339000798`}, {4.632239865646587, 1.5774168530105523`}, {
         4.36304815274046, 1.4524334401222068`}, {4.269684690298645, 
         1.5039100231455353`}, {4.196639834342998, 1.644109116009286}, {
         4.31003635091963, 1.9189981808831251`}},
         SplineDegree->7], 0.052748296902312974`], 
        ArrowBox[{{2.3768477332130082`, 2.1967901788440627`}, {
         3.287436239766647, 2.956800547476229}}, 0.052748296902312974`], 
        ArrowBox[{{2.3768477332130082`, 2.1967901788440627`}, {
         1.5811976621321926`, 1.7306977337150635`}}, 0.052748296902312974`], 
        ArrowBox[{{2.3768477332130082`, 2.1967901788440627`}, {
         2.359220306968771, 2.9674904047734696`}}, 0.052748296902312974`], 
        ArrowBox[{{2.3768477332130082`, 2.1967901788440627`}, {
         1.0629140129497383`, 2.4199331970684956`}}, 0.052748296902312974`], 
        ArrowBox[{{2.3768477332130082`, 2.1967901788440627`}, {
         2.3955883643246954`, 2.7010669967846295`}}, 0.052748296902312974`], 
        ArrowBox[{{2.359220306968771, 2.9674904047734696`}, {
         3.287436239766647, 2.956800547476229}}, 0.052748296902312974`], 
        ArrowBox[{{1.0629140129497383`, 2.4199331970684956`}, {
         2.8714358026181586`, 2.525680503598187}}, 0.052748296902312974`], 
        ArrowBox[{{1.0629140129497383`, 2.4199331970684956`}, {
         0.015881014764774548`, 2.7125356239351754`}}, 0.052748296902312974`],
         ArrowBox[{{1.0629140129497383`, 2.4199331970684956`}, {
         0.2705706012998026, 1.8490604121929506`}}, 0.052748296902312974`], 
        ArrowBox[{{1.0629140129497383`, 2.4199331970684956`}, {
         0.26476170701049995`, 2.443743860261095}}, 0.052748296902312974`], 
        ArrowBox[{{1.0629140129497383`, 2.4199331970684956`}, {0., 
         2.181236154959466}}, 0.052748296902312974`], 
        ArrowBox[{{1.0629140129497383`, 2.4199331970684956`}, {
         0.3246779117423748, 3.0165709754297594`}}, 0.052748296902312974`], 
        ArrowBox[{{2.3955883643246954`, 2.7010669967846295`}, {
         3.287436239766647, 2.956800547476229}}, 0.052748296902312974`], 
        ArrowBox[{{3.339038624553645, 3.657045111161323}, {4.333557174047402, 
         2.865348478078523}}, 0.052748296902312974`], 
        ArrowBox[{{3.339038624553645, 3.657045111161323}, {
         3.2078982484369396`, 4.446389579396916}}, 0.052748296902312974`], 
        ArrowBox[{{3.339038624553645, 3.657045111161323}, {2.900816167094537, 
         4.261132573746677}}, 0.052748296902312974`], 
        ArrowBox[{{3.850922201525535, 3.94509968790823}, {4.438564378699833, 
         3.7886472144991172`}}, 0.052748296902312974`], 
        ArrowBox[{{3.850922201525535, 3.94509968790823}, {4.412315354517082, 
         4.433165205948058}}, 0.052748296902312974`], 
        ArrowBox[{{3.520464659266626, 3.7615954228542243`}, {
         4.333557174047402, 2.865348478078523}}, 0.052748296902312974`], 
        ArrowBox[{{3.520464659266626, 3.7615954228542243`}, {
         3.850922201525535, 3.94509968790823}}, 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{3.520464659266626, 3.7615954228542243`}, {
         3.3313068155700734`, 3.4868991724761673`}, {3.2013591550206586`, 
         3.470218489414533}, {3.1204177136594478`, 3.5052242158620515`}, {
         3.0457091926508943`, 3.7423340266759912`}, {3.0919639912054593`, 
         3.8174167239132735`}, {3.2080027671325695`, 3.8782414076445235`}, {
         3.520464659266626, 3.7615954228542243`}},
         SplineDegree->7], 0.052748296902312974`], 
        ArrowBox[{{3.520464659266626, 3.7615954228542243`}, {
         3.2078982484369396`, 4.446389579396916}}, 0.052748296902312974`], 
        ArrowBox[{{3.520464659266626, 3.7615954228542243`}, {
         2.900816167094537, 4.261132573746677}}, 0.052748296902312974`], 
        ArrowBox[{{4.438564378699833, 3.7886472144991172`}, {
         4.626250296234113, 2.5331012031219724`}}, 0.052748296902312974`], 
        ArrowBox[{{4.438564378699833, 3.7886472144991172`}, {
         4.4349856618530765`, 3.2616384945204113`}}, 0.052748296902312974`], 
        ArrowBox[{{4.438564378699833, 3.7886472144991172`}, {
         3.287436239766647, 2.956800547476229}}, 0.052748296902312974`], 
        ArrowBox[{{4.438564378699833, 3.7886472144991172`}, {
         5.280975720181868, 4.4749437463391075`}}, 0.052748296902312974`], 
        ArrowBox[{{4.438564378699833, 3.7886472144991172`}, {
         4.921726264658532, 4.735252567997348}}, 0.052748296902312974`], 
        ArrowBox[{{4.412315354517082, 4.433165205948058}, {4.333557174047402, 
         2.865348478078523}}, 0.052748296902312974`], 
        ArrowBox[{{4.412315354517082, 4.433165205948058}, {4.438564378699833, 
         3.7886472144991172`}}, 0.052748296902312974`], 
        ArrowBox[BezierCurveBox[{{4.412315354517082, 4.433165205948058}, {
         4.625468793055009, 4.620833374667173}, {4.790689581240433, 
         4.594589481454219}, {4.872272573353258, 4.5165331470892935`}, {
         4.821903347480556, 4.207890855899521}, {4.719737160128941, 
         4.15982167555905}, {4.554745118685316, 4.187467236502015}, {
         4.412315354517082, 4.433165205948058}},
         SplineDegree->7], 0.052748296902312974`], 
        ArrowBox[{{4.412315354517082, 4.433165205948058}, {4.339516930956839, 
         5.4895049063981345`}}, 0.052748296902312974`], 
        ArrowBox[{{4.412315354517082, 4.433165205948058}, {4.800613312902412, 
         5.451635251969737}}, 0.052748296902312974`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], {
         {RGBColor[0, 0, 1], 
          DiskBox[{6.117791118535141, 0.6122123879958659}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"Program\"\>", ")"}], 
          Offset[{2, 2}, {6.170539415437454, 0.6649606848981788}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{5.071124948001668, 1.5145097822321754}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"Block\"\>", ")"}], 
          Offset[{2, 2}, {5.12387324490398, 1.5672580791344883}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{6.8651925498008755, 0.}, 0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Dot\"\>", ")"}], 
          Offset[{2, 2}, {6.917940846703188, 0.052748296902312974}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{4.381283190119518, 2.4264339150569674}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"ConstOpt\"\>", ")"}], 
          Offset[{2, 2}, {4.434031487021831, 2.47918221195928}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{5.325328095238799, 2.400920605397517}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"VarOpt\"\>", ")"}], 
          Offset[{2, 2}, {5.378076392141112, 2.45366890229983}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{5.332642113753628, 2.106809107543864}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"ProcRep\"\>", ")"}], 
          Offset[{2, 2}, {5.3853904106559405, 2.1595574044461774}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{3.7380813442115106, 1.3939457272055482}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"Statement\"\>", ")"}], 
          Offset[{2, 2}, {3.790829641113824, 1.4466940241078612}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{5.508917222740667, 2.6971202178057996}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Const\"\>", ")"}], Offset[{2, 2}, 
          {5.56166551964298, 2.7498685147081128}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.626250296234113, 2.5331012031219724}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Identifier\"\>", ")"}], 
          Offset[{2, 2}, {4.678998593136426, 2.5858495000242856}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{2.8714358026181586, 2.525680503598187}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Equal\"\>", ")"}], 
          Offset[{2, 2}, {2.9241840995204713, 2.5784288005005003}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.4349856618530765, 3.2616384945204113}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"NumberLiteral\"\>", ")"}], 
          Offset[{2, 2}, {4.487733958755389, 3.3143867914227245}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{4.047252887133222, 2.9044313459656577}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"ConstOptRep\"\>", ")"}], 
          Offset[{2, 2}, {4.100001184035535, 2.9571796428679704}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.960715801178875, 2.001870491194436}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Semicolon\"\>", ")"}], 
          Offset[{2, 2}, {5.0134640980811875, 2.0546187880967492}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.333557174047402, 2.865348478078523}, 
          0.052748296902312974], InsetBox[
          RowBox[{"EmptyString", "(", ")"}], 
          Offset[{2, 2}, {4.386305470949715, 2.918096774980836}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.956474601812568, 3.4183829606774054}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Comma\"\>", ")"}], 
          Offset[{2, 2}, {5.009222898714881, 3.471131257579718}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{6.405966560437507, 2.5045080336346515}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Var\"\>", ")"}], 
          Offset[{2, 2}, {6.45871485733982, 2.5572563305369647}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{5.124971923291862, 2.9677274521396804}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"VarOptRep\"\>", ")"}], 
          Offset[{2, 2}, {5.177720220194175, 3.020475749041993}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{6.348286789167826, 1.7913527913429148}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Procedure\"\>", ")"}], 
          Offset[{2, 2}, {6.401035086070139, 1.8441010882452278}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{2.904481059298527, 0.6462795858281758}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Assign\"\>", ")"}], 
          Offset[{2, 2}, {2.9572293562008403, 0.6990278827304888}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{3.287436239766647, 2.956800547476229}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"Expression\"\>", ")"}], 
          Offset[{2, 2}, {3.3401845366689598, 3.009548844378542}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{2.8889392869948933, 1.0722069880076694}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Call\"\>", ")"}], 
          Offset[{2, 2}, {2.941687583897206, 1.1249552849099824}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.414989482761747, 0.6822007951102318}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Print\"\>", ")"}], 
          Offset[{2, 2}, {4.46773777966406, 0.7349490920125448}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{3.8862019578342077, 0.6272279987482909}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Begin\"\>", ")"}], 
          Offset[{2, 2}, {3.938950254736521, 0.6799762956506039}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{4.31003635091963, 1.9189981808831251}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"StatementRep\"\>", ")"}], 
          Offset[{2, 2}, {4.362784647821943, 1.971746477785438}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{3.5356396961643557, 0.28675956816273285}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"End\"\>", ")"}], 
          Offset[{2, 2}, {3.588387993066669, 0.3395078650650458}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{3.862042417496953, 0.22584206141000207}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"If\"\>", ")"}], 
          Offset[{2, 2}, {3.914790714399266, 0.27859035831231505}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{2.3768477332130082, 2.1967901788440627}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"Condition\"\>", ")"}], 
          Offset[{2, 2}, {2.429596030115321, 2.249538475746376}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{3.313277318398064, 0.745472725466195}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Then\"\>", ")"}], 
          Offset[{2, 2}, {3.3660256153003774, 0.798221022368508}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{3.202243300769556, 0.336563161373336}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"While\"\>", ")"}], 
          Offset[{2, 2}, {3.254991597671869, 0.38931145827564895}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.225426217002918, 0.3589729301386386}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Do\"\>", ")"}], 
          Offset[{2, 2}, {4.278174513905231, 0.4117212270409516}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{1.5811976621321926, 1.7306977337150635}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Odd\"\>", ")"}], 
          Offset[{2, 2}, {1.6339459590345056, 1.7834460306173765}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{2.359220306968771, 2.9674904047734696}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"Expression1\"\>", ")"}], 
          Offset[{2, 2}, {2.4119686038710837, 3.0202387016757823}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{1.0629140129497383, 2.4199331970684956}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"Op\"\>", ")"}], 
          Offset[{2, 2}, {1.1156623098520513, 2.472681493970809}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{2.3955883643246954, 2.7010669967846295}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"Expression2\"\>", ")"}], 
          Offset[{2, 2}, {2.4483366612270085, 2.7538152936869427}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{0.015881014764774548, 2.7125356239351754}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"NotEqual\"\>", ")"}], 
          Offset[{2, 2}, {0.06862931166708752, 2.765283920837488}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{0.2705706012998026, 1.8490604121929506}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Lower\"\>", ")"}], 
          Offset[{2, 2}, {0.32331889820211557, 1.9018087090952636}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{0.26476170701049995, 2.443743860261095}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"LowerOrEqual\"\>", ")"}], 
          Offset[{2, 2}, {0.3175100039128129, 2.4964921571634076}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{0., 2.181236154959466}, 0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Greater\"\>", ")"}], 
          Offset[{2, 2}, {0.052748296902312974, 2.2339844518617786}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{0.3246779117423748, 3.0165709754297594}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"GreaterOrEqual\"\>", ")"}], 
          Offset[{2, 2}, {0.3774262086446878, 3.0693192723320726}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{3.339038624553645, 3.657045111161323}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"SignOpt\"\>", ")"}], 
          Offset[{2, 2}, {3.3917869214559584, 3.7097934080636357}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{3.850922201525535, 3.94509968790823}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"Term\"\>", ")"}], Offset[{2, 2}, 
          {3.9036704984278483, 3.9978479848105426}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{3.520464659266626, 3.7615954228542243}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"AddRep\"\>", ")"}], 
          Offset[{2, 2}, {3.5732129561689394, 3.814343719756537}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{3.2078982484369396, 4.446389579396916}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Plus\"\>", ")"}], 
          Offset[{2, 2}, {3.2606465453392524, 4.499137876299229}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{2.900816167094537, 4.261132573746677}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Minus\"\>", ")"}], 
          Offset[{2, 2}, {2.95356446399685, 4.3138808706489895}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{4.438564378699833, 3.7886472144991172}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"Factor\"\>", ")"}], 
          Offset[{2, 2}, {4.4913126756021455, 3.84139551140143}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[0, 0, 1], 
          DiskBox[{4.412315354517082, 4.433165205948058}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"NonTerm", "(", "\<\"MultRep\"\>", ")"}], 
          Offset[{2, 2}, {4.465063651419395, 4.485913502850371}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.339516930956839, 5.4895049063981345}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Times\"\>", ")"}], 
          Offset[{2, 2}, {4.392265227859152, 5.542253203300447}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.800613312902412, 5.451635251969737}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"Slash\"\>", ")"}], 
          Offset[{2, 2}, {4.8533616098047245, 5.50438354887205}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{5.280975720181868, 4.4749437463391075}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"LeftParenthesis\"\>", ")"}], 
          Offset[{2, 2}, {5.33372401708418, 4.52769204324142}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.921726264658532, 4.735252567997348}, 
           0.052748296902312974]}, InsetBox[
          RowBox[{"Term", "(", "\<\"RightParenthesis\"\>", ")"}], 
          Offset[{2, 2}, {4.974474561560845, 4.788000864899661}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->{1481., Automatic}]], "Output",
 CellChangeTimes->{3.762545490209569*^9, 3.7628949433597593`*^9, 
  3.762895053835287*^9},
 CellLabel->
  "Out[173]=",ExpressionUUID->"38b67629-e7e8-460b-90bb-11b24469b8df"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "testProgram", " ", "=", "\[IndentingNewLine]", 
   "\"\<procedure primes;\nvar arg;\nbegin\n    arg := 2;\n    while arg < 4 \
do\n    begin\n       arg := arg + 1\n    end\nend;\n\ncall primes.\>\""}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.750087542246511*^9, 3.750087556285872*^9}, {
   3.7571898361710367`*^9, 3.757189844338978*^9}, {3.7571898795910482`*^9, 
   3.757189884095022*^9}, 3.7571907007273607`*^9, {3.757191843678382*^9, 
   3.757191844209124*^9}, 3.758397209647339*^9, 3.758397864293529*^9, {
   3.762462528757049*^9, 3.762462546748828*^9}, {3.762541772740735*^9, 
   3.7625417779870987`*^9}, {3.7625555086764708`*^9, 3.762555530246003*^9}, 
   3.762635445378129*^9, {3.762893026516049*^9, 3.762893028943925*^9}, 
   3.763900622245826*^9, {3.763900729083053*^9, 3.7639007463934717`*^9}},
 CellLabel->
  "In[149]:=",ExpressionUUID->"6b287729-6102-4f45-a488-c9c8c315844a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tokens", " ", "=", " ", 
   RowBox[{"Tokenize", "[", 
    RowBox[{
    "testProgram", ",", "symbolRecognizer", ",", "keywordRecognizer"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7577075887691603`*^9, 3.757707619469573*^9}, {
   3.757710161500033*^9, 3.757710163165203*^9}, {3.7577113871881037`*^9, 
   3.75771138942542*^9}, {3.757712097580559*^9, 3.7577120987472267`*^9}, 
   3.758396952036305*^9, 3.758396988339271*^9, {3.7628929514871798`*^9, 
   3.76289295575058*^9}, 3.762893034225111*^9},
 CellLabel->
  "In[150]:=",ExpressionUUID->"68031c17-4218-422a-9bd0-7024410c4cfd"],

Cell[CellGroupData[{

Cell[BoxData["tokens"], "Input",
 CellLabel->
  "In[151]:=",ExpressionUUID->"64a54b3c-9032-494b-a949-8118d12ab153"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Procedure\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"procedure\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Identifier\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"primes\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Semicolon\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\";\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Var\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"var\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Identifier\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"arg\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Semicolon\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\";\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Begin\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"begin\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Identifier\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"arg\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Assign\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\":=\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"NumberLiteral\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"2\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Semicolon\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\";\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"While\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"while\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Identifier\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"arg\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Lower\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"<\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"NumberLiteral\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"4\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Do\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"do\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Begin\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"begin\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Identifier\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"arg\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Assign\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\":=\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Identifier\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"arg\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Plus\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"+\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"NumberLiteral\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"1\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"End\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"end\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"End\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"end\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Semicolon\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\";\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Call\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"call\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Identifier\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\"primes\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Type\"\>", "\[Rule]", "\<\"Dot\"\>"}], ",", 
     RowBox[{"\<\"Value\"\>", "\[Rule]", "\<\".\"\>"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7639006455577803`*^9, 3.763900755826901*^9},
 CellLabel->
  "Out[151]=",ExpressionUUID->"dd934328-2079-4da5-b5b8-10dc14328a56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ParseTree", "[", 
   RowBox[{"tokens", ",", "grammar"}], "]"}], " "}]], "Input",
 CellChangeTimes->{3.757712085869459*^9, 3.762898037283906*^9},
 CellLabel->
  "In[152]:=",ExpressionUUID->"81e6ce23-a996-4ea6-b3c8-e42aa594bd86"],

Cell[BoxData[
 GraphicsBox[
  TagBox[GraphicsComplexBox[CompressedData["
1:eJx1lF9IU3EUx2/OWVtSc64t93/gQ0T0ULCoRfcXSaH5shVCWEjJ0EzRl6iX
7CHRGEWW/UEoIUhmbbgszQcZBTOLwNhGq67ZgyCIiyhbthRq1e79Htk1B+PH
537POffcc87vOE40e7x5HMd5//7/nRcfjRclatTMV3q2k3XpmOndp+G+V2uY
pfymU/dby+Yvh06tml9LHKuKNFYOTfAPmwYnZ+qLWLy9RanKTy7x6OT0nhsq
Bu6/a5s7ZDMQw7+9tFd5xr+e/MGWAT45VJUijllfuOsCC8T79vuPFnIcI/tf
DRrvZgVx+vHW0fDhAmLf+8qGq091xJz0CzRNua3nCqXnX/hczhCL8YsZGP6x
J5ae5x4Vi2dPgc/lWWKxbt+IxXNhmZ7OHEk2biqg9+fqeQwMOzC/2BfoYibi
YMKnfJYwM7k//ORnXBZXnIN8Zpb8oINLyiOBCu06Yti3SXl7P7jKusOriflr
mfTcjHqZHpXqAB2M+LD3XW8ZU/v1S3k3e+w7dm8k/l4z1WmesBHXVfeqWrdr
Kb83zo7aBy+LifdqT4bfHttA3NGWcX4tsxIvno+E3D0aej/igfs/VxgUKT0x
7JF/UJoTs9RX6GDcIzDso9LcYE7BuDf/1wWZLlB82CN/5If8wbj3yAc6WOx/
CTHsEf9ntu56YrG/hhV0QaYLFB/2wXHXhVtGE9XXeN/yMRIyE6Pf4IE7x0/f
G7YTwx/fB38w+p07f0b6vtrqeOvgAQtx/UhmVzpqJ4Y95Zvtn5lYnF/rCrog
0wWpnzayF+fFTnxpektq22sHsU11sLtgp538Ez9cY7cVDmLo2FPQwbnxBKon
6gGm+y3tT+w/cb/qaZ96r2isyVkD8R/3uM+M
    "], {
     {RGBColor[0.5, 0., 0.], 
      LineBox[{{1, 2}, {1, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {4, 8}, {5, 
       9}, {6, 10}, {6, 11}, {6, 12}, {6, 13}, {6, 14}, {6, 15}, {7, 100}, {7,
        101}, {13, 16}, {13, 17}, {13, 18}, {13, 19}, {15, 99}, {16, 20}, {17,
        21}, {17, 22}, {17, 23}, {17, 24}, {18, 26}, {19, 27}, {19, 28}, {19, 
       29}, {19, 30}, {23, 25}, {28, 31}, {28, 32}, {28, 33}, {29, 43}, {29, 
       44}, {29, 45}, {33, 34}, {33, 35}, {33, 36}, {34, 37}, {35, 38}, {35, 
       39}, {36, 42}, {38, 40}, {39, 41}, {44, 46}, {44, 47}, {44, 48}, {44, 
       49}, {45, 98}, {47, 50}, {47, 51}, {47, 52}, {49, 74}, {49, 75}, {49, 
       76}, {49, 77}, {50, 53}, {51, 63}, {52, 64}, {53, 54}, {53, 55}, {53, 
       56}, {54, 57}, {55, 58}, {55, 59}, {56, 62}, {58, 60}, {59, 61}, {64, 
       65}, {64, 66}, {64, 67}, {65, 68}, {66, 69}, {66, 70}, {67, 73}, {69, 
       71}, {70, 72}, {75, 78}, {75, 79}, {75, 80}, {76, 97}, {80, 81}, {80, 
       82}, {80, 83}, {81, 84}, {82, 85}, {82, 86}, {83, 89}, {83, 90}, {83, 
       91}, {85, 87}, {86, 88}, {90, 92}, {90, 93}, {91, 96}, {92, 94}, {93, 
       95}}]}, {InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Program)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "1"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 1], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Block)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "2"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 2], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Dot)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "3"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 3], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(ConstOpt)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "4"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 4], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(VarOpt)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "5"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 5], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(ProcRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "6"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 6], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Statement)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "7"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 7], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "8"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 8], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "9"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 9], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Procedure)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "10", 
          ",", "\<\"procedure\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 10], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Identifier)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "11", ",", "\<\"primes\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 11], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Semicolon)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "12", ",", "\<\";\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 12], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Block)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "13"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 13], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Semicolon)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "14"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 14], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(ProcRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "15"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 15], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(ConstOpt)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "16"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 16], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(VarOpt)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "17"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 17], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(ProcRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "18"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 18], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Statement)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "19"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 19], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "20"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 20], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Var)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "21", ",", "\<\"var\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 21], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Identifier)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "22", ",", "\<\"arg\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 22], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(VarOptRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "23"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 23], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Semicolon)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "24"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 24], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "25"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 25], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "26"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 26], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Begin)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "27", ",", "\<\"begin\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 27], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Statement)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "28"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 28], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(StatementRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "29"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 29], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(End)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "30"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 30], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Identifier)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "31", ",", "\<\"arg\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 31], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Assign)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "32", ",", "\<\":=\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 32], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Expression)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "33"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 33], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(SignOpt)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "34"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 34], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Term)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "35"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 35], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(AddRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "36"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 36], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "37"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 37], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Factor)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "38"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 38], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(MultRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "39"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 39], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(NumberLiteral)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "40", ",", "\<\"2\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 40], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "41"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 41], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "42"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 42], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Semicolon)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "43", ",", "\<\";\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 43], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Statement)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "44"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 44], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(StatementRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "45"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 45], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(While)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "46", ",", "\<\"while\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 46], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Condition)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "47"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 47], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Do)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "48"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 48], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Statement)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "49"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 49], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Expression1)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "50"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 50], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Op)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "51"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 51], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Expression2)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "52"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 52], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Expression)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "53"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 53], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(SignOpt)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "54"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 54], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Term)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "55"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 55], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(AddRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "56"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 56], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "57"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 57], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Factor)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "58"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 58], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(MultRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "59"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 59], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Identifier)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "60", ",", "\<\"arg\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 60], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "61"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 61], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "62"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 62], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Lower)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "63", ",", "\<\"<\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 63], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Expression)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "64"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 64], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(SignOpt)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "65"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 65], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Term)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "66"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 66], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(AddRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "67"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 67], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "68"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 68], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Factor)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "69"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 69], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(MultRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "70"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 70], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(NumberLiteral)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "71", ",", "\<\"4\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 71], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "72"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 72], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "73"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 73], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Begin)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "74", ",", "\<\"begin\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 74], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Statement)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "75"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 75], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(StatementRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "76"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 76], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(End)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "77"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 77], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Identifier)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "78", ",", "\<\"arg\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 78], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Assign)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "79", ",", "\<\":=\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 79], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Expression)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "80"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 80], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(SignOpt)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "81"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 81], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Term)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "82"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 82], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(AddRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "83"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 83], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "84"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 84], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Factor)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "85"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 85], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(MultRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "86"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 86], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Identifier)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "87", ",", "\<\"arg\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 87], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "88"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 88], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Plus)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "89", ",", "\<\"+\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 89], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Term)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "90"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 90], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(AddRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "91"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 91], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(Factor)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "92"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 92], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"NonTerm(MultRep)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontColor->RGBColor[0, 0, 1]], ",", "93"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 93], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(NumberLiteral)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "94", ",", "\<\"1\"\>"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 94], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "95"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 95], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "96"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 96], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "97"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 97], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "98"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 98], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"EmptyString", "(", ")"}], ",", "99"}], "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 99], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Call)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "100", ",", "\<\"call\"\>"}], 
         "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 100], InsetBox[
       FrameBox[
        RowBox[{"{", 
         RowBox[{
          StyleBox["\<\"Term(Identifier)\"\>",
           StripOnInput->False,
           LineColor->RGBColor[1, 0, 0],
           FrontFaceColor->RGBColor[1, 0, 0],
           BackFaceColor->RGBColor[1, 0, 0],
           GraphicsColor->RGBColor[1, 0, 0],
           FontColor->RGBColor[1, 0, 0]], ",", "101", ",", "\<\"primes\"\>"}],
          "}"}],
        Background->RGBColor[1, 1, 0.8],
        FrameStyle->RGBColor[0.94, 0.85, 0.36],
        StripOnInput->False], 101]}}],
   Annotation[#, VertexCoordinateRules -> CompressedData["
1:eJx1lF9IU3EUx2/OWVtSc64t93/gQ0T0ULCoRfcXSaH5shVCWEjJ0EzRl6iX
7CHRGEWW/UEoIUhmbbgszQcZBTOLwNhGq67ZgyCIiyhbthRq1e79Htk1B+PH
537POffcc87vOE40e7x5HMd5//7/nRcfjRclatTMV3q2k3XpmOndp+G+V2uY
pfymU/dby+Yvh06tml9LHKuKNFYOTfAPmwYnZ+qLWLy9RanKTy7x6OT0nhsq
Bu6/a5s7ZDMQw7+9tFd5xr+e/MGWAT45VJUijllfuOsCC8T79vuPFnIcI/tf
DRrvZgVx+vHW0fDhAmLf+8qGq091xJz0CzRNua3nCqXnX/hczhCL8YsZGP6x
J5ae5x4Vi2dPgc/lWWKxbt+IxXNhmZ7OHEk2biqg9+fqeQwMOzC/2BfoYibi
YMKnfJYwM7k//ORnXBZXnIN8Zpb8oINLyiOBCu06Yti3SXl7P7jKusOriflr
mfTcjHqZHpXqAB2M+LD3XW8ZU/v1S3k3e+w7dm8k/l4z1WmesBHXVfeqWrdr
Kb83zo7aBy+LifdqT4bfHttA3NGWcX4tsxIvno+E3D0aej/igfs/VxgUKT0x
7JF/UJoTs9RX6GDcIzDso9LcYE7BuDf/1wWZLlB82CN/5If8wbj3yAc6WOx/
CTHsEf9ntu56YrG/hhV0QaYLFB/2wXHXhVtGE9XXeN/yMRIyE6Pf4IE7x0/f
G7YTwx/fB38w+p07f0b6vtrqeOvgAQtx/UhmVzpqJ4Y95Zvtn5lYnF/rCrog
0wWpnzayF+fFTnxpektq22sHsU11sLtgp538Ez9cY7cVDmLo2FPQwbnxBKon
6gGm+y3tT+w/cb/qaZ96r2isyVkD8R/3uM+M
     "]]& ],
  AspectRatio->NCache[
    Rational[1, 4], 0.25],
  FrameTicks->None,
  ImageSize->{1846., Automatic},
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{3.762893097117194*^9, 3.762895921973545*^9, 
  3.762896077157527*^9, 3.762896403376581*^9, 3.7639006403873243`*^9, 
  3.763900765219161*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"e68f5393-fa4a-4e2d-aaad-acb6d9cba75c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "@", 
  RowBox[{"Parse", "[", 
   RowBox[{"tokens", ",", "grammar", ",", 
    RowBox[{"\"\<Trace\>\"", "\[Rule]", "True"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.761421409299613*^9, 3.761421420701951*^9}, {
  3.762893112738916*^9, 3.762893113911317*^9}},
 CellLabel->
  "In[240]:=",ExpressionUUID->"f872ff57-250d-4e27-87c0-586b4bb8d507"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 5, "Length" -> 59, "InitialType" -> TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "ParseSymbol", "Stack", "LastID", "InputBuffer"}, {
           TypeSystem`AnyType, 
            TypeSystem`Vector[
             TypeSystem`Tuple[{TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`AnyLength], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Vector[
             TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 2], 
             TypeSystem`AnyLength]}], 59], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "ParseSymbol"} -> 1, {All, "Stack"} -> 
           2, {All, "LastID"} -> 1, {All, "InputBuffer"} -> 2], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "ParseSymbol" -> TypeSystem`PackageScope`UnknownShape, "Stack" -> 
              TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 
                 TypeSystem`PackageScope`RowShape[{
                  TypeSystem`PackageScope`UnknownShape, 
                   TypeSystem`PackageScope`UnknownShape}]], 4, {
                All, "Stack"}], "LastID" -> 
              TypeSystem`PackageScope`AtomShape[34], "InputBuffer" -> 
              TypeSystem`PackageScope`Limited[
                TypeSystem`PackageScope`ColumnShape[
                 TypeSystem`PackageScope`Limited[
                  TypeSystem`PackageScope`ColumnShape[
                   TypeSystem`PackageScope`KeyValueShape[
                   TypeSystem`PackageScope`UnknownShape, 
                    TypeSystem`PackageScope`UnknownShape]], 2, {
                  All, "InputBuffer", All}]], 2, {All, "InputBuffer"}]]]], 
           5, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1602494934], "Type" -> 
        TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "ParseSymbol", "Stack", "LastID", "InputBuffer"}, {
           TypeSystem`AnyType, 
            TypeSystem`Vector[
             TypeSystem`Tuple[{TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`AnyLength], 
            TypeSystem`Atom[Integer], 
            TypeSystem`Vector[
             TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 2], 
             TypeSystem`AnyLength]}], 59], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1602494934]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ParseSymbol\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"ParseSymbol\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    All, "ParseSymbol"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[All, "ParseSymbol"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Stack\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Stack\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    All, "Stack"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[All, "Stack"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Center, Baseline}], 
               SpanFromLeft, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"LastID\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"LastID\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    All, "LastID"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[All, "LastID"]], "Mouse"], 
                Background -> GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"InputBuffer\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"InputBuffer\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    All, "InputBuffer"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[All, "InputBuffer"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Center, Baseline}], SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    $CellContext`NonTerm["Program"], 1}, ShowStringCharacters -> 
                    False], 
                    Style[
                    Style[{
                    $CellContext`NonTerm["Program"], 1}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    1, 
                    Key["ParseSymbol"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[1, 
                   Key["ParseSymbol"]]], "Mouse"]], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Spacer[10], 
                    Style[
                    Spacer[10], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    1, 
                    Key["Stack"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[1, 
                   Key["Stack"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5], 8}], SpanFromLeft, 
               Pane[
                Annotation[
                 RawBoxes["1"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[1, 
                   Key["LastID"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation["Type", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[1, 
                    Key["InputBuffer"], 1, 
                    Key["Type"]]], "Mouse"], 
                  ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[1, 
                   Key["InputBuffer"], 1, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromBoth, SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Value", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[1, 
                    Key["InputBuffer"], 1, 
                    Key["Value"]]], "Mouse"], 
                  ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[1, 
                   Key["InputBuffer"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromBoth, SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Type", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[1, 
                    Key["InputBuffer"], 2, 
                    Key["Type"]]], "Mouse"], 
                  ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[1, 
                   Key["InputBuffer"], 2, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromBoth, SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Value", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[1, 
                    Key["InputBuffer"], 2, 
                    Key["Value"]]], "Mouse"], 
                  ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[1, 
                   Key["InputBuffer"], 2, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{9.600000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromBoth, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["27 total \:203a ", ""], 
                    Style[
                    Superscript["27 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    1, 
                    Key["InputBuffer"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[1, 
                   Key["InputBuffer"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "InputBuffer"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "InputBuffer"}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "InputBuffer"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "InputBuffer"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    $CellContext`NonTerm["Block"], 2}, ShowStringCharacters -> 
                    False], 
                    Style[
                    Style[{
                    $CellContext`NonTerm["Block"], 2}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    2, 
                    Key["ParseSymbol"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[2, 
                   Key["ParseSymbol"]]], "Mouse"]], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"Term", "[", "\"Dot\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[2, 
                   Key["Stack"], 1, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[2, 
                   Key["Stack"], 1, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[2, 
                   Key["LastID"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation["Type", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[2, 
                    Key["InputBuffer"], 1, 
                    Key["Type"]]], "Mouse"], 
                  ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[2, 
                   Key["InputBuffer"], 1, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Value", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[2, 
                    Key["InputBuffer"], 1, 
                    Key["Value"]]], "Mouse"], 
                  ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[2, 
                   Key["InputBuffer"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Type", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[2, 
                    Key["InputBuffer"], 2, 
                    Key["Type"]]], "Mouse"], 
                  ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[2, 
                   Key["InputBuffer"], 2, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Value", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[2, 
                    Key["InputBuffer"], 2, 
                    Key["Value"]]], "Mouse"], 
                  ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[2, 
                   Key["InputBuffer"], 2, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{9.600000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["27 total \:203a ", ""], 
                    Style[
                    Superscript["27 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    2, 
                    Key["InputBuffer"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[2, 
                   Key["InputBuffer"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "InputBuffer"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "InputBuffer"}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "InputBuffer"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "InputBuffer"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    $CellContext`NonTerm["ConstOpt"], 4}, 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    $CellContext`NonTerm["ConstOpt"], 4}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    3, 
                    Key["ParseSymbol"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["ParseSymbol"]]], "Mouse"]], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"Term", "[", "\"Dot\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["Stack"], 1, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["Stack"], 1, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["LastID"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation["Type", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[3, 
                    Key["InputBuffer"], 1, 
                    Key["Type"]]], "Mouse"], 
                  ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["InputBuffer"], 1, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"NonTerm", "[", "\"Statement\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["Stack"], 2, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["Stack"], 2, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Value", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[3, 
                    Key["InputBuffer"], 1, 
                    Key["Value"]]], "Mouse"], 
                  ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["InputBuffer"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"NonTerm", "[", "\"ProcRep\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["Stack"], 3, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["Stack"], 3, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Type", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[3, 
                    Key["InputBuffer"], 2, 
                    Key["Type"]]], "Mouse"], 
                  ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["InputBuffer"], 2, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"NonTerm", "[", "\"VarOpt\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["Stack"], 4, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["5"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["Stack"], 4, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Value", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[3, 
                    Key["InputBuffer"], 2, 
                    Key["Value"]]], "Mouse"], 
                  ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["InputBuffer"], 2, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{9.600000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["27 total \:203a ", ""], 
                    Style[
                    Superscript["27 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    3, 
                    Key["InputBuffer"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[3, 
                   Key["InputBuffer"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "InputBuffer"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "InputBuffer"}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "InputBuffer"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "InputBuffer"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    $CellContext`NonTerm["VarOpt"], 5}, ShowStringCharacters -> 
                    False], 
                    Style[
                    Style[{
                    $CellContext`NonTerm["VarOpt"], 5}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    4, 
                    Key["ParseSymbol"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["ParseSymbol"]]], "Mouse"]], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"Term", "[", "\"Dot\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["Stack"], 1, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["Stack"], 1, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["8"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["LastID"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation["Type", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[4, 
                    Key["InputBuffer"], 1, 
                    Key["Type"]]], "Mouse"], 
                  ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["InputBuffer"], 1, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"NonTerm", "[", "\"Statement\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["Stack"], 2, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["Stack"], 2, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Value", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[4, 
                    Key["InputBuffer"], 1, 
                    Key["Value"]]], "Mouse"], 
                  ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["var", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["InputBuffer"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"NonTerm", "[", "\"ProcRep\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["Stack"], 3, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["Stack"], 3, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Type", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[4, 
                    Key["InputBuffer"], 2, 
                    Key["Type"]]], "Mouse"], 
                  ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Identifier", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["InputBuffer"], 2, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{96.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Value", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[4, 
                    Key["InputBuffer"], 2, 
                    Key["Value"]]], "Mouse"], 
                  ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["n", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["InputBuffer"], 2, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{9.600000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["27 total \:203a ", ""], 
                    Style[
                    Superscript["27 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    4, 
                    Key["InputBuffer"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[4, 
                   Key["InputBuffer"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "InputBuffer"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "InputBuffer"}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "InputBuffer"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "InputBuffer"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{
                    $CellContext`NonTerm["VarOptRep"], 11}, 
                    ShowStringCharacters -> False], 
                    Style[
                    Style[{
                    $CellContext`NonTerm["VarOptRep"], 11}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    5, 
                    Key["ParseSymbol"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["ParseSymbol"]]], "Mouse"]], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"Term", "[", "\"Dot\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["Stack"], 1, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["3"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["Stack"], 1, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["12"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["LastID"]]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation["Type", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[5, 
                    Key["InputBuffer"], 1, 
                    Key["Type"]]], "Mouse"], 
                  ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Semicolon", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["InputBuffer"], 1, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"NonTerm", "[", "\"Statement\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["Stack"], 2, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["7"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["Stack"], 2, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Value", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[5, 
                    Key["InputBuffer"], 1, 
                    Key["Value"]]], "Mouse"], 
                  ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[";", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["InputBuffer"], 1, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{9.600000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"NonTerm", "[", "\"ProcRep\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["Stack"], 3, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["6"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["Stack"], 3, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Type", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[5, 
                    Key["InputBuffer"], 2, 
                    Key["Type"]]], "Mouse"], 
                  ImageSize -> {{38.400000000000006`, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["Begin", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["InputBuffer"], 2, 
                   Key["Type"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {SpanFromAbove, 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                   RowBox[{"Term", "[", "\"Semicolon\"", "]"}], FontFamily -> 
                   "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                   True]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["Stack"], 4, 1]], "Mouse"], 
                ImageSize -> {{60, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes["12"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["Stack"], 4, 2]], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], SpanFromAbove, 
               Item[
                Pane[
                 Pane[
                  Annotation["Value", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   924538494][
                    GeneralUtilities`Slice[5, 
                    Key["InputBuffer"], 2, 
                    Key["Value"]]], "Mouse"], 
                  ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["begin", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["InputBuffer"], 2, 
                   Key["Value"]]], "Mouse"], 
                ImageSize -> {{48.00000000000001, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
              SpanFromAbove, SpanFromAbove, SpanFromAbove, SpanFromAbove, 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Superscript["25 total \:203a ", ""], 
                    Style[
                    Superscript["25 total \:203a ", ""], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][{
                    5, 
                    Key["InputBuffer"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
                  GeneralUtilities`Slice[5, 
                   Key["InputBuffer"]]], "Mouse"], BaseStyle -> {{
                   RGBColor[
                   0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274], 8}, ContextMenu -> {
                    MenuItem["Show 1 more row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "InputBuffer"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 more rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "InputBuffer"}]], MenuEvaluator -> Automatic],
                     Delimiter, 
                    MenuItem["Show 1 fewer row at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "InputBuffer"}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show 5 fewer rows at this level", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "InputBuffer"}]], MenuEvaluator -> Automatic]}}, 
                Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]],
                SpanFromLeft}, {
               Item[
                Deploy[
                 Mouseover[
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    59 (-5), {1, 59 - -5 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 5, {
                    1, 59 - -5 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 5, " of ", 
                    Style[
                    59, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 5, {
                    1, 59 - 5 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 59 5, {
                    1, 59 - 5 + 1}])}]}, "   "], 
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    59 (-5), {1, 59 - -5 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 5, {
                    1, 59 - -5 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 5, " of ", 
                    Style[
                    59, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 5, {
                    1, 59 - 5 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 59 5, {
                    1, 59 - 5 + 1}])}]}, "   "]]], Background -> 
                GrayLevel[0.98], Alignment -> {Left, Top}, 
                BaseStyle -> {ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show all", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494}, 
                    100000000, {}]], MenuEvaluator -> Automatic]}}], 
               SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
               SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 924538494]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[924538494][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {629., {349., 355.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{{3.761421415515168*^9, 3.761421422002419*^9}, 
   3.762461397049679*^9, 3.762462575869697*^9, 3.762893114539238*^9},
 CellLabel->
  "Out[240]=",ExpressionUUID->"15f3a846-4c9f-4496-886e-9e81a6ab9f70"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"parseTree", " ", "=", " ", 
  RowBox[{"Parse", "[", 
   RowBox[{"tokens", ",", "grammar"}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.757712288753446*^9, 3.757712295372877*^9}, 
   3.761421590953416*^9, 3.761424814142918*^9, {3.762461417236516*^9, 
   3.762461419056829*^9}, 3.76289314147683*^9},
 CellLabel->
  "In[153]:=",ExpressionUUID->"d9e19462-2ed4-4cdd-82fa-98a46a304918"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parse tree synthesization", "Subchapter",
 CellChangeTimes->{{3.7611817904477463`*^9, 
  3.761181802004003*^9}},ExpressionUUID->"9c27967f-b76e-4636-b78f-\
dd471b343e8a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GetAction", "[", 
    RowBox[{"treeSymbol_", ",", "parseTree_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"children", ",", "replaceTerms", ",", "action"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"children", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{
         RowBox[{"First", "[", "parseTree", "]"}], ",", 
         RowBox[{
          RowBox[{"HoldPattern", "[", 
           RowBox[{"treeSymbol", "\[Rule]", "c_"}], "]"}], "\[RuleDelayed]", 
          "c"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"replaceTerms", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#", "]"}], "\[Rule]", 
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", "2"}], "]"}]}], "&"}], ",", "children"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"action", " ", "=", " ", 
       RowBox[{"Last", "[", 
        RowBox[{"FirstCase", "[", 
         RowBox[{
          RowBox[{"Last", "[", "parseTree", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"treeSymbol", ",", "_"}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ReplaceAll", "[", 
       RowBox[{"action", ",", "replaceTerms"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.760825821770403*^9, 3.760825871286762*^9}, {
  3.76099464053881*^9, 3.7609947380154133`*^9}, {3.760995232056304*^9, 
  3.76099523510536*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"c1393acd-a91a-4d56-b0b8-30b4c6ca87ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SynthesizeNonTerm", "[", 
     RowBox[{"treeSymbol_", ",", "parseTree_", ",", "synthesizations_"}], 
     "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"eval", ",", "new"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"eval", " ", "=", " ", 
        RowBox[{"ReplaceAll", "[", 
         RowBox[{
          RowBox[{"GetAction", "[", 
           RowBox[{"treeSymbol", ",", "parseTree"}], "]"}], ",", 
          "synthesizations"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"eval", " ", "===", 
          RowBox[{"Missing", "[", 
           RowBox[{"\"\<KeyAbsent\>\"", ",", "\"\<Action\>\""}], "]"}]}], ",",
          " ", 
         RowBox[{"Return", "[", "synthesizations", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"new", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"treeSymbol", "[", 
             RowBox[{"First", "[", "#", "]"}], "]"}], "\[Rule]", 
            RowBox[{"Last", "[", "#", "]"}]}], "&"}], ",", "eval"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"Join", "[", 
         RowBox[{"new", ",", "synthesizations"}], "]"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SynthesizeTerm", "[", 
    RowBox[{"treeSymbol_", ",", "synthesizations_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"eval", ",", "new"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "treeSymbol", "]"}], ">", "2"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Prepend", "[", 
        RowBox[{"synthesizations", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"treeSymbol", ",", "2"}], "]"}], "[", "\"\<Value\>\"", 
           "]"}], " ", "\[Rule]", 
          RowBox[{"Last", "[", "treeSymbol", "]"}]}]}], "]"}], ",", 
       "\[IndentingNewLine]", "synthesizations"}], "\[IndentingNewLine]", 
      "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7608259159282923`*^9, 3.7608261293502274`*^9}, {
   3.760993804648603*^9, 3.760993818856369*^9}, {3.760993962206794*^9, 
   3.760993964499547*^9}, {3.762464072031178*^9, 3.762464112064948*^9}, {
   3.7624643045761833`*^9, 3.762464390148593*^9}, 3.762464423827539*^9, {
   3.7624644673167963`*^9, 3.762464468165412*^9}, 3.762465283151471*^9},
 CellLabel->
  "In[138]:=",ExpressionUUID->"ba238ec1-0d0b-4e75-8354-4e3b9fc1e508"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SynthesizeTree", "[", "parseTree_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "startSymbol", ",", "depthFirstScan", ",", "symbolType", ",", 
       "synthesized"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ResetVarGenerator", "[", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"startSymbol", " ", "=", " ", 
       RowBox[{"parseTree", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1", ",", "1"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"depthFirstScan", " ", "=", " ", 
       RowBox[{"First", "[", 
        RowBox[{"Last", "[", 
         RowBox[{"Reap", "[", "\[IndentingNewLine]", 
          RowBox[{"DepthFirstScan", "[", 
           RowBox[{
            RowBox[{"Graph", "[", 
             RowBox[{"First", "[", "parseTree", "]"}], "]"}], ",", 
            "startSymbol", ",", 
            RowBox[{"{", 
             RowBox[{"\"\<PostvisitVertex\>\"", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Sow", "[", "#", "]"}], "&"}], ")"}]}], "}"}]}], 
           "]"}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"synthesized", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"symbolType", " ", "=", " ", 
          RowBox[{"Head", "[", 
           RowBox[{"First", "[", "s", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"symbolType", " ", "===", " ", "Term"}], ",", 
           RowBox[{"synthesized", " ", "=", " ", 
            RowBox[{"SynthesizeTerm", "[", 
             RowBox[{"s", ",", "synthesized"}], "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"symbolType", " ", "===", " ", "NonTerm"}], ",", 
           RowBox[{"synthesized", " ", "=", " ", 
            RowBox[{"SynthesizeNonTerm", "[", 
             RowBox[{"s", ",", "parseTree", ",", "synthesized"}], "]"}]}]}], 
          "]"}], ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"s", ",", "depthFirstScan"}], "}"}]}], "\[IndentingNewLine]",
        "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "synthesized", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.760995468114646*^9, 3.760995495791847*^9}, {
   3.760995528748373*^9, 3.760995627884274*^9}, {3.760995678576338*^9, 
   3.7609957528479137`*^9}, {3.7609961296955547`*^9, 3.760996184585101*^9}, {
   3.7609962173561907`*^9, 3.76099627244386*^9}, {3.7609963440388603`*^9, 
   3.760996423791665*^9}, {3.7609964833759823`*^9, 3.7609965628952827`*^9}, {
   3.760996801168336*^9, 3.7609968020762367`*^9}, 3.760998078283998*^9, {
   3.7609981212385883`*^9, 3.7609981257699842`*^9}, 3.762464311752103*^9, {
   3.762464438154924*^9, 3.762464499620295*^9}, 3.7625262555643873`*^9, {
   3.7628108543121157`*^9, 3.762810855319008*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"41eadba4-aaab-4b73-a3f9-cd39b28aa352"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"FormatSynthValues", "[", "groupedSynthetization_", "]"}], ":=", 
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"Level", "[", 
        RowBox[{"#", ",", "2"}], "]"}], "]"}], "&"}], ",", 
     "groupedSynthetization", ",", 
     RowBox[{"{", 
      RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ViewSynthesis", "[", "parseTree_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "grouped", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"grouped", " ", "=", " ", 
       RowBox[{"GroupBy", "[", 
        RowBox[{
         RowBox[{"SynthesizeTree", "[", "parseTree", "]"}], ",", 
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"First", "[", "#", "]"}], "]"}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Dataset", "@", 
       RowBox[{"Map", "[", 
        RowBox[{"FormatSynthValues", ",", "grouped"}], "]"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->
  "In[141]:=",ExpressionUUID->"22abf173-27f9-45a6-ad85-cb338a46eeab"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"IsLabelQ", "[", "s_", "]"}], ":=", 
   RowBox[{"And", "[", 
    RowBox[{
     RowBox[{"StringStartsQ", "[", 
      RowBox[{"s", ",", " ", "\"\<<\>\""}], "]"}], ",", " ", 
     RowBox[{"StringEndsQ", "[", 
      RowBox[{"s", ",", " ", "\"\<>\>\""}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IsTempQ", "[", "s_", "]"}], ":=", 
   RowBox[{"StringStartsQ", "[", 
    RowBox[{"s", ",", " ", "\"\<$\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InsertSequence", "[", 
     RowBox[{"l1_", ",", "l2_", ",", "n_"}], "]"}], ":=", 
    RowBox[{"FlattenAt", "[", 
     RowBox[{
      RowBox[{"Insert", "[", 
       RowBox[{"l1", ",", "l2", ",", "n"}], "]"}], ",", "n"}], "]"}]}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ProcedureProcessTags", "[", 
    RowBox[{"icCode_", ",", "from_", ",", "to_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "name", ",", "procInstructions", ",", "labels", ",", "tempSymbols", ",",
        "replaceLabelsRules", ",", "replaceTempSymbolsRules", ",", 
       "tempDeclarations", ",", "processed"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"name", " ", "=", " ", 
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"Last", "[", 
          RowBox[{"Extract", "[", 
           RowBox[{"icCode", ",", 
            RowBox[{"{", "from", "}"}]}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"\"\<<\>\"", "~~", "x__", "~~", "\"\<>\>\""}], 
          "\[RuleDelayed]", "x"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"procInstructions", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Take", "[", 
         RowBox[{"icCode", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"from", "+", "1"}], ",", 
            RowBox[{"to", "-", "1"}]}], "}"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"labels", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Select", "[", 
         RowBox[{"procInstructions", ",", "IsLabelQ"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tempSymbols", " ", "=", " ", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{"Select", "[", 
         RowBox[{"procInstructions", ",", "IsTempQ"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"replaceLabelsRules", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "->", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"#", ",", 
             RowBox[{
              RowBox[{"\"\<<\>\"", "~~", "x__", "~~", "\"\<>\>\""}], 
              "\[RuleDelayed]", 
              RowBox[{"StringJoin", "[", 
               RowBox[{
               "\"\<<\>\"", ",", "name", ",", "\"\<::\>\"", ",", "x", ",", 
                "\"\<>\>\""}], "]"}]}]}], "]"}]}], "&"}], ",", "labels"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"replaceTempSymbolsRules", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[Rule]", 
           RowBox[{"StringJoin", "[", 
            RowBox[{
            "\"\<<\>\"", ",", "name", ",", "\"\<::\>\"", ",", "#", ",", 
             "\"\<>\>\""}], "]"}]}], "&"}], ",", "tempSymbols"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"tempDeclarations", " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<declare_var\>\"", ",", 
          RowBox[{"replaceTempSymbolsRules", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "}"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"processed", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"icCode", ",", 
           RowBox[{"{", 
            RowBox[{"from", ",", "to"}], "}"}]}], "]"}], ",", "  ", 
         RowBox[{"Join", "[", 
          RowBox[{"replaceLabelsRules", ",", "replaceTempSymbolsRules"}], 
          "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"processed", " ", "=", " ", 
       RowBox[{"InsertSequence", "[", 
        RowBox[{"processed", ",", "tempDeclarations", ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "processed", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ICProcessTags", "[", "icCode_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "splitted", ",", "preProc", ",", "pos", ",", "parts", ",", "processed", 
       ",", "postProc", ",", "allProcessed", ",", "procICCode"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"splitted", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"StringSplit", ",", 
         RowBox[{"StringSplit", "[", 
          RowBox[{"icCode", ",", "\"\<\\n\>\""}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"pos", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Position", "[", 
         RowBox[{"splitted", ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\"\<begin_proc\>\"", ",", "_"}], "}"}], "|", 
           RowBox[{"{", 
            RowBox[{"\"\<end_proc\>\"", ",", "_"}], "}"}]}]}], "]"}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"pos", " ", "\[NotEqual]", " ", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"preProc", " ", "=", " ", 
          RowBox[{"Take", "[", 
           RowBox[{"splitted", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", 
              RowBox[{
               RowBox[{"First", "[", "pos", "]"}], "-", "1"}]}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"parts", " ", "=", " ", 
          RowBox[{"Partition", "[", 
           RowBox[{"pos", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"processed", " ", "=", " ", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ProcedureProcessTags", "[", 
              RowBox[{"splitted", ",", 
               RowBox[{"First", "[", "#", "]"}], ",", 
               RowBox[{"Last", "[", "#", "]"}]}], "]"}], "&"}], ",", 
            "parts"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"postProc", " ", "=", " ", 
          RowBox[{"Take", "[", 
           RowBox[{"splitted", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"Last", "[", "pos", "]"}], "+", "1"}], ",", 
              RowBox[{"Length", "[", "splitted", "]"}]}], "}"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"allProcessed", " ", "=", " ", 
          RowBox[{"Join", "[", 
           RowBox[{"preProc", ",", 
            RowBox[{"Concatenate", "[", "processed", "]"}], ",", "postProc"}],
            "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"procICCode", " ", "=", " ", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"Riffle", "[", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{"LineJoin", ",", "allProcessed"}], "]"}], ",", 
             "\"\<\\n\>\""}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "procICCode", "]"}], ";"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Return", "[", "icCode", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.763904833914323*^9, 3.76390505537153*^9, 3.763905295972094*^9, {
   3.763905433648514*^9, 3.763905483114896*^9}, 3.7639231606859317`*^9, {
   3.76392344812033*^9, 3.763923464625123*^9}, {3.763923738514487*^9, 
   3.763923811789189*^9}, {3.7639239011047373`*^9, 3.7639239524263854`*^9}, {
   3.7639241662984285`*^9, 3.7639241995877523`*^9}, {3.7639242394717445`*^9, 
   3.763924240233402*^9}},
 CellLabel->
  "In[221]:=",ExpressionUUID->"c848c78a-2dc7-4cc4-802e-730ed5791ae5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PL0CompileToIC", "[", "input_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tokens", ",", "parseTree", ",", "synthesized"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tokens", " ", "=", " ", 
       RowBox[{"Tokenize", "[", 
        RowBox[{"input", ",", "symbolRecognizer", ",", "keywordRecognizer"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"parseTree", " ", "=", " ", 
       RowBox[{"Parse", "[", 
        RowBox[{"tokens", ",", "grammar"}], "]"}]}], " ", ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"synthesized", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"NonTerm", "[", "\"\<Program\>\"", "]"}], ",", "1"}], 
           "}"}], "[", "\"\<TACode\>\"", "]"}], ",", 
         RowBox[{"SynthesizeTree", "[", "parseTree", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ICProcessTags", "[", "synthesized", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7626367089823723`*^9, 3.762636766782731*^9}, {
  3.7628980858335342`*^9, 3.762898099815711*^9}, {3.763905307322874*^9, 
  3.763905337511778*^9}},
 CellLabel->
  "In[146]:=",ExpressionUUID->"1f4ba2ad-1aa7-4791-97d3-6ec9bca61f46"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PlotIC", "[", "ic_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"splitted", ",", "completed"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"splitted", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{"StringSplit", ",", 
         RowBox[{"StringSplit", "[", 
          RowBox[{"ic", ",", "\"\<\\n\>\""}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"completed", " ", "=", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"PadRight", "[", 
           RowBox[{"#", ",", "4", ",", "\"\<\>\""}], "]"}], "&"}], ",", 
         "splitted"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Grid", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{"completed", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Instruction\>\"", ",", "\"\<P1\>\"", ",", "\"\<P2\>\"", ",", 
            "\"\<P3\>\""}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "LightGreen", "}"}], ",", 
           RowBox[{"{", "LightRed", "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Frame", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.763906809269055*^9, 3.763906835055606*^9}, {
  3.7639069852779903`*^9, 3.763906989216365*^9}},
 CellLabel->
  "In[147]:=",ExpressionUUID->"aa414c37-2c7c-456c-a906-b24c3658adf7"],

Cell[CellGroupData[{

Cell["Examples", "Subsubsection",
 CellChangeTimes->{{3.7628976217938347`*^9, 
  3.762897624543582*^9}},ExpressionUUID->"4bf4e99a-49ac-4178-8d1d-\
414488b86950"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "testProgram", " ", "=", "\[IndentingNewLine]", 
   "\"\<var n;\nbegin\n   n := (1+4)*5;\n   if n # 16 then\n   begin\n      \
print n;\n   end;\nend.\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tokens", " ", "=", " ", 
   RowBox[{"Tokenize", "[", 
    RowBox[{
    "testProgram", ",", "symbolRecognizer", ",", "keywordRecognizer"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"parseTree", " ", "=", " ", 
   RowBox[{"Parse", "[", 
    RowBox[{"tokens", ",", "grammar"}], "]"}]}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ViewSynthesis", "[", "parseTree", "]"}]}], "Input",
 CellChangeTimes->{{3.7628976421389236`*^9, 3.7628976555620623`*^9}},
 CellLabel->
  "In[315]:=",ExpressionUUID->"2409a389-2234-4782-bb64-1899fd79b917"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 73, "InitialType" -> TypeSystem`Assoc[
          TypeSystem`Tuple[{TypeSystem`AnyType, 
            TypeSystem`Atom[Integer]}], 
          TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 73], 
        "Shape" -> TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            
            TypeSystem`PackageScope`RowShape[{
             TypeSystem`PackageScope`UnknownShape, 
              TypeSystem`PackageScope`AtomShape[34]}], 
            TypeSystem`PackageScope`UnknownShape]], 20, {}], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1477385968], "Type" -> 
        TypeSystem`Assoc[
          TypeSystem`Tuple[{TypeSystem`AnyType, 
            TypeSystem`Atom[Integer]}], 
          TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 73], 
        "HandleQ" -> True, "RowTarget" -> 20, "Data" -> 
        TypeSystem`PackageScope`CacheHandle[1477385968]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"Program\"", "]"}], FontFamily -> 
                    "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                    True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Program"], 1}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Program"], 1}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"TACode" -> 
                    "declare_var n\nadd 1 4 $0\nmultiply $0 5 $1\nset n $1\n\
not_equal n 16 $2\nif_false $2 goto L$3\nprint n\nlabel L$3\nhalt"}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"TACode" -> 
                    "declare_var n\nadd 1 4 $0\nmultiply $0 5 $1\nset n $1\n\
not_equal n 16 $2\nif_false $2 goto L$3\nprint n\nlabel L$3\nhalt"}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["Program"], 1}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["Program"], 1}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"Block\"", "]"}], FontFamily -> 
                    "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                    True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Block"], 2}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Block"], 2}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "", "TACode" -> 
                    "declare_var n\nadd 1 4 $0\nmultiply $0 5 $1\nset n $1\n\
not_equal n 16 $2\nif_false $2 goto L$3\nprint n\nlabel L$3"}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> 
                    "declare_var n\nadd 1 4 $0\nmultiply $0 5 $1\nset n $1\n\
not_equal n 16 $2\nif_false $2 goto L$3\nprint n\nlabel L$3"}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["Block"], 2}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["Block"], 2}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"Statement\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 7}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["7"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 7}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "", "TACode" -> 
                    "add 1 4 $0\nmultiply $0 5 $1\nset n $1\nnot_equal n 16 \
$2\nif_false $2 goto L$3\nprint n\nlabel L$3"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> 
                    "add 1 4 $0\nmultiply $0 5 $1\nset n $1\nnot_equal n 16 \
$2\nif_false $2 goto L$3\nprint n\nlabel L$3"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["Statement"], 7}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["Statement"], 7}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"StatementRep\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 17}], 1]], "Mouse"],
                   ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["17"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 17}], 2]], "Mouse"],
                   ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "", "TACode" -> 
                    "not_equal n 16 $2\nif_false $2 goto L$3\nprint n\nlabel \
L$3"}, ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> 
                    "not_equal n 16 $2\nif_false $2 goto L$3\nprint n\nlabel \
L$3"}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 17}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["StatementRep"], 17}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"StatementRep\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 55}], 1]], "Mouse"],
                   ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["55"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 55}], 2]], "Mouse"],
                   ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 55}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["StatementRep"], 55}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"StatementRep\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 97}], 1]], "Mouse"],
                   ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["97"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 97}], 2]], "Mouse"],
                   ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 97}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["StatementRep"], 97}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"Statement\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 96}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["96"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 96}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["Statement"], 96}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["Statement"], 96}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Term", "[", "\"Semicolon\"", "]"}], FontFamily -> 
                    "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                    True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`Term["Semicolon"], 95}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["95"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`Term["Semicolon"], 95}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"Value" -> ";"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"Value" -> ";"}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`Term["Semicolon"], 95}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`Term["Semicolon"], 95}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"Statement\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 54}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["54"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 54}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "$3", "TACode" -> 
                    "not_equal n 16 $2\nif_false $2 goto L$3\nprint n\nlabel \
L$3"}, ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "$3", "TACode" -> 
                    "not_equal n 16 $2\nif_false $2 goto L$3\nprint n\nlabel \
L$3"}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["Statement"], 54}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["Statement"], 54}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"Statement\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 59}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["59"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 59}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "", "TACode" -> "print n"}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> "print n"}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["Statement"], 59}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["Statement"], 59}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"StatementRep\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 86}], 1]], "Mouse"],
                   ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["86"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 86}], 2]], "Mouse"],
                   ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 86}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["StatementRep"], 86}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"StatementRep\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 92}], 1]], "Mouse"],
                   ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["92"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 92}], 2]], "Mouse"],
                   ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["StatementRep"], 92}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["StatementRep"], 92}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"Statement\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 91}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["91"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 91}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> ""}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["Statement"], 91}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["Statement"], 91}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Term", "[", "\"Semicolon\"", "]"}], FontFamily -> 
                    "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                    True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`Term["Semicolon"], 90}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["90"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`Term["Semicolon"], 90}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"Value" -> ";"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"Value" -> ";"}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`Term["Semicolon"], 90}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`Term["Semicolon"], 90}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"Statement\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 85}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["85"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Statement"], 85}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "", "TACode" -> "print n"}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "", "TACode" -> "print n"}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["Statement"], 85}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["Statement"], 85}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Term", "[", "\"Identifier\"", "]"}], FontFamily -> 
                    "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                    True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`Term["Identifier"], 89}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["89"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`Term["Identifier"], 89}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{"Value" -> "n"}, ShowStringCharacters -> False], 
                    Style[
                    Style[{"Value" -> "n"}, ShowStringCharacters -> False], 
                    FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`Term["Identifier"], 89}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`Term["Identifier"], 89}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Term", "[", "\"Print\"", "]"}], FontFamily -> 
                    "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                    True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`Term["Print"], 88}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["88"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`Term["Print"], 88}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "print"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"Value" -> "print"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`Term["Print"], 88}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`Term["Print"], 88}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Term", "[", "\"Begin\"", "]"}], FontFamily -> 
                    "Source Code Pro", FontSize -> 13, ShowStringCharacters -> 
                    True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`Term["Begin"], 84}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["84"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`Term["Begin"], 84}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "begin"}, ShowStringCharacters -> 
                    False], 
                    Style[
                    
                    Style[{"Value" -> "begin"}, ShowStringCharacters -> 
                    False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`Term["Begin"], 84}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`Term["Begin"], 84}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"Condition\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Condition"], 57}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["57"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Condition"], 57}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "$2", "TACode" -> "not_equal n 16 $2"}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "$2", "TACode" -> "not_equal n 16 $2"}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["Condition"], 57}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["Condition"], 57}]]], "Mouse"]]}, {
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"NonTerm", "[", "\"Expression2\"", "]"}], 
                    FontFamily -> "Source Code Pro", FontSize -> 13, 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Expression2"], 62}], 1]], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Pane[
                 Pane[
                  Annotation[
                   RawBoxes["62"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                   597200896][
                    GeneralUtilities`Slice[
                    Key[{
                    $CellContext`NonTerm["Expression2"], 62}], 2]], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  Alignment -> {Left, Baseline}], 
                 ImageSize -> {{60, Full}, Automatic}], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    
                    Style[{"Value" -> "16", "TACode" -> ""}, 
                    ShowStringCharacters -> False], 
                    Style[
                    
                    Style[{"Value" -> "16", "TACode" -> ""}, 
                    ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][{
                    Key[{
                    $CellContext`NonTerm["Expression2"], 62}]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
                  GeneralUtilities`Slice[
                   Key[{
                    $CellContext`NonTerm["Expression2"], 62}]]], "Mouse"]]}, {
               Item[
                Deploy[
                 Mouseover[
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    73 (-20), {1, 73 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 73 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    73, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 73 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    73 20, {1, 73 - 20 + 1}])}]}, "   "], 
                  Row[{
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0.56, 
                    1.031}, {6.429, 1.031}, {6.429, 60.967}, {0.56, 
                    60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{6.192899999999999, 
                    30.980699999999995`}, {42.4399, 0.7526999999999973}, {
                    42.4399, 8.209699999999994}, {16.432899999999997`, 
                    30.982699999999994`}, {42.4119, 53.6547}, {42.4399, 
                    61.244699999999995`}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    73 (-20), {1, 73 - -20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5499, 30.980699999999995`}, {
                    36.7969, 0.7526999999999973}, {36.7969, 
                    8.209699999999994}, {10.7899, 30.982699999999994`}, {
                    36.7689, 53.6547}, {36.7969, 61.244699999999995`}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ - 20, {
                    1, 73 - -20 + 1}])}], 
                    Pane[
                    Row[{"showing ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    73, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 150, ContentPadding -> False, 
                    Alignment -> {Center, Center}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.3]]], 
                    GrayLevel[0.3], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.026431741349551847`], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5778000000000001, 
                    53.654399999999995`}, {26.5568, 30.982399999999995`}, {
                    0.5498000000000001, 8.209399999999995}, {
                    0.5498000000000001, 0.7523999999999944}, {
                    36.796800000000005`, 30.980399999999992`}, {
                    0.5498000000000001, 61.2454}}}]}}, 
                    ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 20, {
                    1, 73 - 20 + 1}])}], 
                    EventHandler[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    GrayLevel[0.5]]], 
                    GrayLevel[0.5], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]], 
                    Graphics[{
                    EdgeForm[
                    Directive[
                    Thickness[0.05], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], {
                    Thickness[0.023255813953488372`], 
                    FaceForm[{
                    RGBColor[0.481, 0.481, 0.481], 
                    Opacity[1.]}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    36.571, 1.031}, {42.440999999999995`, 1.031}, {
                    42.440999999999995`, 60.967}, {36.571, 60.967}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{0.5598000000000001, 
                    53.788500000000006`}, {26.5668, 31.015500000000007`}, {
                    0.5878000000000001, 8.343500000000006}, {
                    0.5598000000000001, 0.7525000000000048}, {36.8068, 
                    31.017500000000005`}, {0.5598000000000001, 
                    61.24450000000001}}}]}}, ImageSize -> {Automatic, 9}, 
                    ImagePadding -> {{1, 1}, {0, 0}}, BaselinePosition -> 
                    Scaled[-0.2]]], "LinkHand"], {
                    "MouseClicked" :> (
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$pos$$ + 
                    73 20, {1, 73 - 20 + 1}])}]}, "   "]]], Background -> 
                GrayLevel[0.98], Alignment -> {Left, Top}, 
                BaseStyle -> {ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896}, 
                    1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896}, 
                    10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896}, 
                    30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896}, 
                    100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show all", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896}, 
                    100000000, {}]], MenuEvaluator -> Automatic]}}], 
               SpanFromLeft, SpanFromLeft}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 597200896]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[597200896][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {552., {517., 523.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{3.762897659937611*^9},
 CellLabel->
  "Out[318]=",ExpressionUUID->"4027df11-1a35-4969-b091-5cf1179ddb23"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compilation", "Subchapter",
 CellChangeTimes->{{3.763925693815262*^9, 3.763925699098136*^9}, {
  3.7639258223328934`*^9, 
  3.763925822984113*^9}},ExpressionUUID->"40ed8236-d08e-40a9-b906-\
8d25edb85654"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PlotIC", "@", 
  RowBox[{
  "PL0CompileToIC", "[", "\[IndentingNewLine]", 
   "\"\<var n, f;\nbegin\n   n := 0;\n   f := 1;\n   while n # 16 do\n   \
begin\n      n := n + 1;\n      f := f * n;\n   end;\nend.\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.762636781766636*^9, 3.762636816538865*^9}, 
   3.7628981238061028`*^9, 3.76390687762527*^9, {3.763906971755719*^9, 
   3.763906997620977*^9}},
 CellLabel->
  "In[271]:=",ExpressionUUID->"be5cca42-b007-45a8-aeb0-db9d8d8edc05"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Instruction\"\>", "\<\"P1\"\>", "\<\"P2\"\>", "\<\"P3\"\>"},
    {"\<\"set\"\>", "\<\"<n>\"\>", "\<\"0\"\>", "\<\"\"\>"},
    {"\<\"set\"\>", "\<\"<f>\"\>", "\<\"1\"\>", "\<\"\"\>"},
    {"\<\"label\"\>", "\<\"<L1$2>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"compare\"\>", "\<\"<n>\"\>", "\<\"16\"\>", "\<\"\"\>"},
    {"\<\"if_not_equal\"\>", "\<\"<L2$2>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"add\"\>", "\<\"$0\"\>", "\<\"<n>\"\>", "\<\"1\"\>"},
    {"\<\"set\"\>", "\<\"<n>\"\>", "\<\"$0\"\>", "\<\"\"\>"},
    {"\<\"multiply\"\>", "\<\"$1\"\>", "\<\"<f>\"\>", "\<\"<n>\"\>"},
    {"\<\"set\"\>", "\<\"<f>\"\>", "\<\"$1\"\>", "\<\"\"\>"},
    {"\<\"goto\"\>", "\<\"<L1$2>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"label\"\>", "\<\"<L2$2>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"return\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<n>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<f>\"\>", "\<\"\"\>", "\<\"\"\>"}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {
       RGBColor[0.88, 1, 0.88]}, "Rows" -> {
       RGBColor[1, 0.85, 0.85]}},
   GridBoxFrame->{"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.762636814124548*^9, 3.762636884935557*^9, 3.762806846912806*^9, 
   3.762881266797234*^9, {3.7628981096437883`*^9, 3.7628981277310057`*^9}, 
   3.763905506764661*^9, 3.763906880745722*^9, {3.763906975416107*^9, 
   3.763907000972793*^9}, 3.7639102713571167`*^9, 3.763911313208918*^9, 
   3.763922749267764*^9, 3.7639229253793354`*^9, 3.763931360815609*^9},
 CellLabel->
  "Out[271]=",ExpressionUUID->"6813596a-a108-4745-9c01-7d4d0437042f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PlotIC", "@", 
  RowBox[{
  "PL0CompileToIC", "[", "\[IndentingNewLine]", 
   "\"\<procedure isprime;\nvar i;\nbegin\n    ret := 1;\n    i := 2;\n    \
while i < arg do\n    begin\n        if arg / i * i = arg then\n        begin\
\n            ret := 0;\n            i := arg\n        end;\n        i := i + \
1\n    end\nend;\n\nprocedure primes;\nconst jiji = 3;\nvar arg;\nbegin\n    \
arg := (6-1)*(1+6*(8+9));\n    while arg < 4 do\n    begin\n       arg := arg \
+ 1\n    end\nend;\n\ncall primes.\>\"", "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{
  3.7626368271780777`*^9, 3.7628981264298687`*^9, 3.7639004678272448`*^9, {
   3.7639005140372887`*^9, 3.7639005834716177`*^9}, 3.763900798672221*^9, {
   3.763901106290382*^9, 3.7639011501030807`*^9}, 3.763905528306333*^9, {
   3.7639065612645397`*^9, 3.7639065656847143`*^9}, {3.763906859345042*^9, 
   3.7639068612939777`*^9}, {3.763910001493805*^9, 3.763910009369998*^9}, {
   3.7639213977512884`*^9, 3.763921413060972*^9}, {3.763924342115615*^9, 
   3.7639243658160715`*^9}},
 CellLabel->
  "In[272]:=",ExpressionUUID->"6d4ac205-583d-4e86-9249-a64c7bf78ac6"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Instruction\"\>", "\<\"P1\"\>", "\<\"P2\"\>", "\<\"P3\"\>"},
    {"\<\"call\"\>", "\<\"<primes>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"return\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"begin_proc\"\>", "\<\"<isprime>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"set\"\>", "\<\"<isprime::ret>\"\>", "\<\"1\"\>", "\<\"\"\>"},
    {"\<\"set\"\>", "\<\"<isprime::i>\"\>", "\<\"2\"\>", "\<\"\"\>"},
    {"\<\"label\"\>", "\<\"<isprime::L1$4>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"compare\"\>", "\<\"<isprime::i>\"\>", "\<\"<isprime::arg>\"\>", "\<\
\"\"\>"},
    {"\<\"if_less\"\>", "\<\"<isprime::L2$4>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"multiply\"\>", "\<\"<isprime::$0>\"\>", "\<\"<isprime::i>\"\>", "\<\
\"<isprime::i>\"\>"},
    {"\<\"divide\"\>", "\<\"<isprime::$1>\"\>", "\<\"<isprime::arg>\"\>", "\<\
\"<isprime::$0>\"\>"},
    {"\<\"compare\"\>", "\<\"<isprime::$1>\"\>", "\<\"<isprime::arg>\"\>", \
"\<\"\"\>"},
    {"\<\"if_equal\"\>", "\<\"<isprime::L$2>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"set\"\>", "\<\"<isprime::ret>\"\>", "\<\"0\"\>", "\<\"\"\>"},
    {"\<\"set\"\>", "\<\"<isprime::i>\"\>", "\<\"<isprime::arg>\"\>", "\<\"\"\
\>"},
    {"\<\"label\"\>", "\<\"<isprime::L$2>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"add\"\>", "\<\"<isprime::$3>\"\>", "\<\"<isprime::i>\"\>", "\<\"1\"\
\>"},
    {"\<\"set\"\>", "\<\"<isprime::i>\"\>", "\<\"<isprime::$3>\"\>", \
"\<\"\"\>"},
    {"\<\"goto\"\>", "\<\"<isprime::L1$4>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"label\"\>", "\<\"<isprime::L2$4>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"return\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<isprime::i>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<isprime::$0>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<isprime::$1>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<isprime::$3>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"end_proc\"\>", "\<\"<isprime>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"begin_proc\"\>", "\<\"<primes>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"substract\"\>", "\<\"<primes::$5>\"\>", "\<\"6\"\>", "\<\"1\"\>"},
    {"\<\"add\"\>", "\<\"<primes::$6>\"\>", "\<\"8\"\>", "\<\"9\"\>"},
    {"\<\"multiply\"\>", "\<\"<primes::$7>\"\>", "\<\"6\"\>", \
"\<\"<primes::$6>\"\>"},
    {"\<\"add\"\>", "\<\"<primes::$8>\"\>", "\<\"1\"\>", \
"\<\"<primes::$7>\"\>"},
    {"\<\"multiply\"\>", "\<\"<primes::$9>\"\>", "\<\"<primes::$5>\"\>", \
"\<\"<primes::$8>\"\>"},
    {"\<\"set\"\>", "\<\"<primes::arg>\"\>", "\<\"<primes::$9>\"\>", \
"\<\"\"\>"},
    {"\<\"label\"\>", "\<\"<primes::L1$11>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"compare\"\>", "\<\"<primes::arg>\"\>", "\<\"4\"\>", "\<\"\"\>"},
    {"\<\"if_less\"\>", "\<\"<primes::L2$11>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"add\"\>", "\<\"<primes::$10>\"\>", "\<\"<primes::arg>\"\>", \
"\<\"1\"\>"},
    {"\<\"set\"\>", "\<\"<primes::arg>\"\>", "\<\"<primes::$10>\"\>", "\<\"\"\
\>"},
    {"\<\"goto\"\>", "\<\"<primes::L1$11>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"label\"\>", "\<\"<primes::L2$11>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"return\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_const\"\>", "\<\"<primes::jiji>\"\>", "\<\"3\"\>", \
"\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<primes::arg>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<primes::$5>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<primes::$6>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<primes::$7>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<primes::$8>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<primes::$9>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"declare_var\"\>", "\<\"<primes::$10>\"\>", "\<\"\"\>", "\<\"\"\>"},
    {"\<\"end_proc\"\>", "\<\"<primes>\"\>", "\<\"\"\>", "\<\"\"\>"}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {
       RGBColor[0.88, 1, 0.88]}, "Rows" -> {
       RGBColor[1, 0.85, 0.85]}},
   GridBoxFrame->{"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.763901145773193*^9, 3.763901163649645*^9}, {
   3.763905514836194*^9, 3.763905537575935*^9}, 3.763906577213525*^9, 
   3.763906870378676*^9, 3.7639070115799913`*^9, 3.763909938712982*^9, 
   3.7639099841138687`*^9, 3.763910018657875*^9, 3.763910268842182*^9, 
   3.7639111989687138`*^9, 3.7639113107533216`*^9, 3.7639214362226048`*^9, 
   3.76392248581028*^9, 3.7639226589465313`*^9, 3.763922732374032*^9, 
   3.763922958820818*^9, 3.7639239849245667`*^9, 3.763924225635352*^9, 
   3.763924255900919*^9, {3.76392436377419*^9, 3.763924378818525*^9}, 
   3.763929286881793*^9, 3.763931373036466*^9},
 CellLabel->
  "Out[272]=",ExpressionUUID->"65437376-3d7e-4eb0-bd2b-a1507fb5c7dc"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Narv code generation", "Chapter",
 CellChangeTimes->{{3.7639309789488277`*^9, 
  3.7639309829615326`*^9}},ExpressionUUID->"b017d5a2-87c9-4e7e-91df-\
a387a7036e0a"],

Cell[CellGroupData[{

Cell["Compiler", "Subchapter",
 CellChangeTimes->{{3.7639317160561275`*^9, 
  3.7639317172854424`*^9}},ExpressionUUID->"b4fa4547-1dd9-4f51-80c1-\
c3f5919e75d3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"icToNarvRules", " ", "=", " ", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<call\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<Call\>\"", ",", " ", "label"}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\"\<return\>\"", "}"}], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"{", "\"\<Return\>\"", "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<begin_proc\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<Label\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<end_proc\>\"", ",", "_"}], "}"}], "\[RuleDelayed]", 
      "Nothing"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<label\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<Label\>\"", ",", " ", "label"}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<goto\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<Jump\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<declare_var\>\"", ",", "label_"}], "}"}], 
      "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<Declare\>\"", ",", "label", ",", "\"\<0\>\""}], "}"}], 
       "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<declare_const\>\"", ",", "label_", ",", "n_"}], "}"}], 
      "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<Declare\>\"", ",", "label", ",", "n"}], "}"}], "}"}]}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<set\>\"", ",", 
        RowBox[{"out_", "/;", 
         RowBox[{"IsLabelQ", "[", "out", "]"}]}], ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], "\[RuleDelayed]", 
      " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<set\>\"", ",", 
        RowBox[{"out_", "/;", 
         RowBox[{"IsLabelQ", "[", "out", "]"}]}], ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<compare\>\"", ",", 
        RowBox[{"l1_", "/;", 
         RowBox[{"IsLabelQ", "[", "l1", "]"}]}], ",", 
        RowBox[{"l2_", "/;", 
         RowBox[{"IsLabelQ", "[", "l2", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<LoadB\>\"", ",", "l2"}], "}"}], ",", 
        RowBox[{"{", "\"\<Substract\>\"", "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<compare\>\"", ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}], ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<SetB\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", "\"\<Substract\>\"", "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<compare\>\"", ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}], ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<LoadB\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", "\"\<Substract\>\"", "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<if_less\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<JumpNeg\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<if_equal\>\"", ",", "label_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<JumpZero\>\"", ",", "label"}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<add\>\"", ",", "out_", ",", 
        RowBox[{"l1_", "/;", 
         RowBox[{"IsLabelQ", "[", "l1", "]"}]}], ",", 
        RowBox[{"l2_", "/;", 
         RowBox[{"IsLabelQ", "[", "l2", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<LoadB\>\"", ",", "l2"}], "}"}], ",", 
        RowBox[{"{", "\"\<Add\>\"", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<add\>\"", ",", "out_", ",", 
        RowBox[{"n1_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n1", "]"}]}]}], ",", 
        RowBox[{"n2_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n2", "]"}]}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<SetB\>\"", ",", "n2"}], "}"}], ",", 
        RowBox[{"{", "\"\<Add\>\"", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<add\>\"", ",", "out_", ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}], ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<SetB\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", "\"\<Add\>\"", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<add\>\"", ",", "out_", ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}], ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<LoadB\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", "\"\<Add\>\"", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<substract\>\"", ",", "out_", ",", 
        RowBox[{"l1_", "/;", 
         RowBox[{"IsLabelQ", "[", "l1", "]"}]}], ",", 
        RowBox[{"l2_", "/;", 
         RowBox[{"IsLabelQ", "[", "l2", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<LoadB\>\"", ",", "l2"}], "}"}], ",", 
        RowBox[{"{", "\"\<Substract\>\"", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<substract\>\"", ",", "out_", ",", 
        RowBox[{"n1_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n1", "]"}]}]}], ",", 
        RowBox[{"n2_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n2", "]"}]}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<SetB\>\"", ",", "n2"}], "}"}], ",", 
        RowBox[{"{", "\"\<Substract\>\"", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<substract\>\"", ",", "out_", ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}], ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<SetB\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", "\"\<Substract\>\"", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<substract\>\"", ",", "out_", ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}], ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<LoadB\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", "\"\<Substract\>\"", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<multiply\>\"", ",", "out_", ",", 
        RowBox[{"l1_", "/;", 
         RowBox[{"IsLabelQ", "[", "l1", "]"}]}], ",", 
        RowBox[{"l2_", "/;", 
         RowBox[{"IsLabelQ", "[", "l2", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n1>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n2>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Call\>\"", ",", "\"\<<multiply>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<multiply\>\"", ",", "out_", ",", 
        RowBox[{"n1_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n1", "]"}]}]}], ",", 
        RowBox[{"n2_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n2", "]"}]}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n1>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n2>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Call\>\"", ",", "\"\<<multiply>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<multiply\>\"", ",", "out_", ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}], ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n1>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n2>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Call\>\"", ",", "\"\<<multiply>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<multiply\>\"", ",", "out_", ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}], ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n1>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<multiply::n2>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Call\>\"", ",", "\"\<<multiply>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<divide\>\"", ",", "out_", ",", 
        RowBox[{"l1_", "/;", 
         RowBox[{"IsLabelQ", "[", "l1", "]"}]}], ",", 
        RowBox[{"l2_", "/;", 
         RowBox[{"IsLabelQ", "[", "l2", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n1>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n2>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Call\>\"", ",", "\"\<<divide>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<divide\>\"", ",", "out_", ",", 
        RowBox[{"n1_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n1", "]"}]}]}], ",", 
        RowBox[{"n2_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n2", "]"}]}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n1>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n2>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Call\>\"", ",", "\"\<<divide>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<divide\>\"", ",", "out_", ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}], ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n1>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n2>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Call\>\"", ",", "\"\<<divide>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<divide\>\"", ",", "out_", ",", 
        RowBox[{"n_", "/;", 
         RowBox[{"!", 
          RowBox[{"IsLabelQ", "[", "n", "]"}]}]}], ",", 
        RowBox[{"l_", "/;", 
         RowBox[{"IsLabelQ", "[", "l", "]"}]}]}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<SetA\>\"", ",", "n"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n1>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<LoadA\>\"", ",", "l"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "\"\<<divide::n2>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Call\>\"", ",", "\"\<<divide>\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Store\>\"", ",", "out"}], "}"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CompileICToNarv", "[", "ic_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"splitted", ",", "replaced"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"splitted", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{"StringSplit", ",", 
          RowBox[{"StringSplit", "[", 
           RowBox[{"ic", ",", "\"\<\\n\>\""}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"replaced", " ", "=", " ", 
        RowBox[{"ReplaceAll", "[", 
         RowBox[{"splitted", ",", "icToNarvRules"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"ColumnJoin", "[", 
        RowBox[{"Map", "[", 
         RowBox[{"LineJoin", ",", 
          RowBox[{"Concatenate", "[", "replaced", "]"}]}], "]"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NarvACCompile", "[", "code_", "]"}], ":=", 
   RowBox[{"CompileICToNarv", "[", 
    RowBox[{"PL0CompileToIC", "[", "code", "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.763927281574621*^9, 3.7639272913775125`*^9}, {
   3.7639273217825503`*^9, 3.7639273362481375`*^9}, {3.7639273844926815`*^9, 
   3.763927483733425*^9}, {3.7639275614069834`*^9, 3.763927630933*^9}, {
   3.7639277082615*^9, 3.763927756921644*^9}, {3.763927792995653*^9, 
   3.763927866686736*^9}, {3.763928313755015*^9, 3.763928453224635*^9}, {
   3.763928490639016*^9, 3.7639285087620764`*^9}, {3.7639285492344856`*^9, 
   3.7639286296204605`*^9}, {3.7639286603203683`*^9, 3.763928678646675*^9}, {
   3.763929048861393*^9, 3.7639290512382216`*^9}, {3.763929352566727*^9, 
   3.763929369511607*^9}, 3.7639302741160107`*^9, 3.7639309257311335`*^9, {
   3.763930994044549*^9, 3.7639311338287754`*^9}, {3.7639311964167967`*^9, 
   3.7639312113605413`*^9}, 3.76393164034319*^9},
 CellLabel->
  "In[282]:=",ExpressionUUID->"a0ecf0cb-d276-4822-8154-4dad909a4353"],

Cell[BoxData[
 RowBox[{"NarvACCompile", "[", 
  "\"\<procedure isprime;\nvar i;\nbegin\n    ret := 1;\n    i := 2;\n    \
while i < arg do\n    begin\n        if arg / i * i = arg then\n        begin\
\n            ret := 0;\n            i := arg\n        end;\n        i := i + \
1\n    end\nend;\n\nprocedure primes;\nconst jiji = 3;\nvar arg;\nbegin\n    \
arg := (6-1)*(1+6*(8+9));\n    while arg < 4 do\n    begin\n       arg := arg \
+ 1\n    end\nend;\n\ncall primes.\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7639316756040144`*^9, 3.7639316778393784`*^9}},
 CellLabel->
  "In[287]:=",ExpressionUUID->"55d121ed-5993-4557-8172-963934ebf6e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Assembler", "Subchapter",
 CellChangeTimes->{{3.7639317199976387`*^9, 
  3.7639317216535835`*^9}},ExpressionUUID->"cee5877a-e564-4831-84b9-\
b2ab79805693"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GetInstructions", "[", "code_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"separated", ",", "completed"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"separated", " ", "=", " ", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"StringSplit", ",", 
           RowBox[{"StringSplit", "[", 
            RowBox[{"code", ",", "\"\<\\n\>\""}], "]"}]}], "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"completed", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"separated", ",", 
         RowBox[{
          RowBox[{"l_", "/;", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", "l", "]"}], "\[Equal]", "1"}], ")"}]}], 
          "\[RuleDelayed]", 
          RowBox[{"Append", "[", 
           RowBox[{"l", ",", "0"}], "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "completed", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetPosition", "[", 
    RowBox[{"instructions_", ",", "token_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pos", ",", "labels", ",", "countingRules"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"pos", " ", "=", " ", 
       RowBox[{"Position", "[", 
        RowBox[{"instructions", ",", "token"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "pos", "]"}], ">", "1"}], ",", 
        RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"labels", " ", "=", " ", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"instructions", ",", 
          RowBox[{
           RowBox[{"pos", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "1"}], "]"}], "]"}], "-", "1"}]}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"countingRules", " ", "=", " ", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{"cpuMnemonics", "\[Rule]", "2"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<Label\>\"", "\[Rule]", "0"}], ",", 
           RowBox[{"\"\<Declare\>\"", "\[Rule]", "1"}]}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Total", "[", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"labels", ",", "countingRules"}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ProcessTags", "[", "instructions_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"labels", ",", "variablePos"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"labels", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"instructions", ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Label\>\"", ",", "tag_"}], "}"}], "\[RuleDelayed]", 
          RowBox[{"(", 
           RowBox[{"tag", "\[Rule]", 
            RowBox[{"GetPosition", "[", 
             RowBox[{"instructions", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Label\>\"", ",", "tag"}], "}"}]}], "]"}]}], 
           ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"variablePos", " ", "=", " ", 
       RowBox[{"Cases", "[", 
        RowBox[{"instructions", ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Declare\>\"", ",", "tag_", ",", "value_"}], "}"}], 
          "\[RuleDelayed]", 
          RowBox[{"(", 
           RowBox[{"tag", "\[Rule]", 
            RowBox[{"GetPosition", "[", 
             RowBox[{"instructions", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Declare\>\"", ",", "tag", ",", "value"}], "}"}]}],
              "]"}]}], ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Join", "[", 
       RowBox[{"labels", ",", "variablePos"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MachineInstructions", "[", "instructions_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"setNumeric", ",", "removeLabels", ",", "replaceTags"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"setNumeric", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"instructions", ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Declare\>\"", ",", "_", ",", "value_"}], "}"}], 
          "\[RuleDelayed]", 
          RowBox[{"ToExpression", "[", "value", "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"removeLabels", " ", "=", " ", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{"setNumeric", ",", 
         RowBox[{"{", 
          RowBox[{"\"\<Label\>\"", ",", "__"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"replaceTags", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"removeLabels", ",", 
         RowBox[{"ProcessTags", "[", "instructions", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "replaceTags", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AssemblyCompile", "[", "code_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"linearized", ",", "rules", ",", " ", "machineCode"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"linearized", " ", "=", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"MachineInstructions", "[", 
         RowBox[{"GetInstructions", "[", "code", "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rules", " ", "=", " ", 
       RowBox[{"Append", "[", 
        RowBox[{"opcodes", ",", 
         RowBox[{"n_Integer", "\[RuleDelayed]", 
          RowBox[{"DecimalToBinary", "[", "n", "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"machineCode", " ", "=", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"linearized", ",", "rules"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "machineCode", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InstructionsPanel", "[", 
    RowBox[{"machineInstructions_", ",", "from_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cursor", ",", "instructions"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cursor", " ", "=", " ", 
       RowBox[{
        RowBox[{"BinaryToDecimal", "[", "addressRegister", "]"}], "-", "from",
         "+", "1"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Negative", "[", "cursor", "]"}], ",", " ", 
        RowBox[{"cursor", " ", "=", " ", "0"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"instructions", " ", "=", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{"from", ",", 
            RowBox[{"from", "+", 
             RowBox[{"Length", "[", 
              RowBox[{"Flatten", "[", "machineInstructions", "]"}], "]"}], 
             "-", "1"}]}], "]"}], ",", 
          RowBox[{"Flatten", "[", "machineInstructions", "]"}]}], "}"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Grid", "[", "\[IndentingNewLine]", 
       RowBox[{"instructions", ",", "\[IndentingNewLine]", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "LightGreen", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"cursor", "\[Rule]", "Yellow"}], "}"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"InstructionsPlot", "[", "code_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mi", ",", "tabs", ",", "currentAddress", ",", "currentTab"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mi", " ", "=", 
       RowBox[{"Flatten", "[", " ", 
        RowBox[{"MachineInstructions", "[", 
         RowBox[{"GetInstructions", "[", "code", "]"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tabs", " ", "=", " ", 
       RowBox[{"MapThread", "[", 
        RowBox[{"InstructionsPanel", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"mi", ",", 
             RowBox[{"UpTo", "[", "16", "]"}]}], "]"}], ",", 
           RowBox[{"Range", "[", 
            RowBox[{"0", ",", 
             RowBox[{"Length", "[", "mi", "]"}], ",", "16"}], "]"}]}], 
          "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"currentTab", " ", "=", " ", 
       RowBox[{"Ceiling", "[", 
        FractionBox[
         RowBox[{
          RowBox[{"BinaryToDecimal", "[", "addressRegister", "]"}], "+", 
          "1"}], "16"], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Panel", "[", 
       RowBox[{
        RowBox[{"TabView", "[", 
         RowBox[{
          RowBox[{"Thread", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"0", ",", 
              RowBox[{"Length", "[", "mi", "]"}], ",", "16"}], "]"}], 
            "\[Rule]", "tabs"}], "]"}], ",", "currentTab"}], "]"}], ",", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Program\>\"", ",", "Bold"}], "]"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7637522761713896`*^9, 3.7637522811397123`*^9}, {
   3.763752539119774*^9, 3.7637525403896*^9}, {3.7637527247948284`*^9, 
   3.7637527271068635`*^9}, {3.7637548583030324`*^9, 3.76375485857769*^9}, {
   3.7637553153862534`*^9, 3.7637553880654182`*^9}, {3.7637558657226906`*^9, 
   3.763755865970436*^9}, {3.763756147410583*^9, 3.7637562054495463`*^9}, 
   3.7637562744347906`*^9, {3.7637564279224844`*^9, 3.763756431393264*^9}, {
   3.763838942396756*^9, 3.763838942548704*^9}, {3.7638389773406134`*^9, 
   3.763838977428562*^9}, {3.763839149820098*^9, 3.7638391500286665`*^9}, {
   3.763839529434287*^9, 3.7638395589470053`*^9}, {3.763839658307597*^9, 
   3.7638396780988894`*^9}, {3.7638398759535704`*^9, 3.763839927433342*^9}, {
   3.7638423726453424`*^9, 3.763842461084761*^9}, {3.7638424982853947`*^9, 
   3.7638425028210163`*^9}, {3.763842557429591*^9, 3.76384256186103*^9}, {
   3.7638426343257217`*^9, 3.763842663868944*^9}, {3.7638428309498825`*^9, 
   3.763842847941127*^9}, {3.763842878869466*^9, 3.7638428929093585`*^9}, {
   3.7638429885961485`*^9, 3.763843044645608*^9}, {3.7638431853481216`*^9, 
   3.7638431986136203`*^9}, {3.763843235659871*^9, 3.763843289899954*^9}, {
   3.7638433246362762`*^9, 3.7638433378040004`*^9}, {3.763844822427657*^9, 
   3.763844826738652*^9}, {3.763900993434781*^9, 3.763901002347664*^9}},
 CellLabel->
  "In[189]:=",ExpressionUUID->"1d5d8d3b-db56-4008-b94d-3bb8456bedf3"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 997},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"11.3 para Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 257, 4, 96, "Title",ExpressionUUID->"d1ca6f13-3dc9-4753-8e1a-6160422fec5d"],
Cell[CellGroupData[{
Cell[862, 30, 158, 3, 64, "Subchapter",ExpressionUUID->"d9a4c0af-dc38-4e06-b13f-a22e584afa40"],
Cell[1023, 35, 368, 7, 56, "Text",ExpressionUUID->"0ed6b2d4-334d-4f33-91fb-f0ba692a4fe4"]
}, Closed]],
Cell[CellGroupData[{
Cell[1428, 47, 155, 3, 48, "Subchapter",ExpressionUUID->"79dd5486-a5cc-4bf8-9377-82243e4a0088"],
Cell[1586, 52, 619, 11, 56, "Text",ExpressionUUID->"8156eb86-0982-4a67-8b09-fd4f57223c46"],
Cell[2208, 65, 7121, 122, 422, "Input",ExpressionUUID->"2e72126f-f751-4f13-8870-81a0bbd95c77"]
}, Closed]],
Cell[CellGroupData[{
Cell[9366, 192, 159, 3, 56, "Chapter",ExpressionUUID->"a9651e77-d6d2-4a54-9ff9-ceba4ac659e9"],
Cell[CellGroupData[{
Cell[9550, 199, 217, 4, 64, "Subchapter",ExpressionUUID->"21a9500e-0fd4-4842-9564-1968489f3e69"],
Cell[CellGroupData[{
Cell[9792, 207, 209, 4, 53, "Subsection",ExpressionUUID->"628262ab-3196-47b2-a3ee-b1a86753561f"],
Cell[10004, 213, 126428, 2077, 222, "Input",ExpressionUUID->"b5eb9bd1-0072-47bd-8ff6-bc98a1c92a10"],
Cell[136435, 2292, 895, 15, 122, "Text",ExpressionUUID->"142acf3e-c805-45bb-9cec-f0f2edc86ce6"],
Cell[137333, 2309, 75986, 1250, 196, "Input",ExpressionUUID->"0d149315-403d-4b4f-a454-37bb66a87494"],
Cell[213322, 3561, 1989, 48, 121, "Input",ExpressionUUID->"31d7f42a-029d-48ad-a73a-d3afc3746dd0",
 InitializationCell->True],
Cell[215314, 3611, 6888, 152, 615, "Input",ExpressionUUID->"12bae02c-f6f8-47ab-9ab5-f8b6ebb6a3ce",
 InitializationCell->True],
Cell[222205, 3765, 8236, 177, 881, "Input",ExpressionUUID->"a7881061-cda5-4880-93b1-dea8fe53412d",
 InitializationCell->True],
Cell[230444, 3944, 167411, 2749, 653, "Input",ExpressionUUID->"2fe7d2b3-b985-4f06-b9f5-eccf47c52d51"],
Cell[397858, 6695, 162, 3, 34, "Text",ExpressionUUID->"4b7150a1-3e2b-4d54-8583-e145c64bbdb7"],
Cell[398023, 6700, 7178, 166, 672, "Input",ExpressionUUID->"8ae4d7a2-816c-4e08-b771-a4c50a04d943",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[405226, 6870, 184, 3, 44, "Subsubsection",ExpressionUUID->"0140b824-43ed-4698-a731-cbc187ce9af5"],
Cell[405413, 6875, 750, 20, 34, "Text",ExpressionUUID->"5ee6d61d-a915-4101-8118-5dbf4a21bbb1"],
Cell[CellGroupData[{
Cell[406188, 6899, 1474, 30, 238, "Input",ExpressionUUID->"8dd9f75b-c7c1-4a9f-9fa0-51035376cda3"],
Cell[407665, 6931, 2568, 54, 52, "Output",ExpressionUUID->"dd298194-dd4b-49ab-95fd-1d7db7462aeb"]
}, Open  ]],
Cell[410248, 6988, 295, 9, 34, "Text",ExpressionUUID->"bf273832-4a50-4fa4-937f-b1565ad7899d"],
Cell[CellGroupData[{
Cell[410568, 7001, 389, 8, 28, "Input",ExpressionUUID->"68beedad-584d-47e9-8b8c-28409ef429a3"],
Cell[410960, 7011, 21303, 456, 148, "Output",ExpressionUUID->"80a9975b-c662-4776-80b0-1fd8585f12bb"]
}, Open  ]],
Cell[432278, 7470, 168, 3, 34, "Text",ExpressionUUID->"7a42b715-fb40-4bd7-9221-f28047f719f4"],
Cell[CellGroupData[{
Cell[432471, 7477, 464, 10, 28, "Input",ExpressionUUID->"e0d95bd8-24d6-4c69-b5ed-879eeb817a20"],
Cell[432938, 7489, 1892, 44, 32, "Output",ExpressionUUID->"ed9a4054-2e8f-4098-9653-75052a48ffaa"]
}, Open  ]],
Cell[434845, 7536, 238, 4, 34, "Text",ExpressionUUID->"7128cb84-38a3-472c-89fd-047780df2a38"],
Cell[CellGroupData[{
Cell[435108, 7544, 426, 10, 28, "Input",ExpressionUUID->"55e35a06-2d24-49c8-b978-e3f9bb34682a"],
Cell[435537, 7556, 3677, 73, 32, "Output",ExpressionUUID->"a581d934-1842-484b-b9cd-d9109264e285"]
}, Open  ]],
Cell[439229, 7632, 628, 17, 34, "Text",ExpressionUUID->"609290e8-0f03-4d47-9e3f-ca37fe9d977f"],
Cell[CellGroupData[{
Cell[439882, 7653, 1083, 23, 219, "Input",ExpressionUUID->"6077719b-d4ec-4ec8-a51c-aa315d2dd98b"],
Cell[440968, 7678, 1843, 40, 52, "Output",ExpressionUUID->"fc535803-45bf-4be3-9513-3531635798f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[442848, 7723, 342, 7, 28, "Input",ExpressionUUID->"d27e0f96-4e2e-4a4d-a7a2-6aba5521eb37"],
Cell[443193, 7732, 19968, 432, 130, "Output",ExpressionUUID->"3139c2b8-c613-4385-8f76-adce2cf5f1d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[463198, 8169, 367, 9, 28, "Input",ExpressionUUID->"db71c5dd-6916-491d-ad6e-ec03ba023a5a"],
Cell[463568, 8180, 1783, 41, 32, "Output",ExpressionUUID->"2fe05aec-19b4-4fb7-8992-add5e58f5a6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[465388, 8226, 320, 7, 28, "Input",ExpressionUUID->"f295aa76-95ea-45c1-a9b8-8fa05cb630e3"],
Cell[465711, 8235, 3601, 71, 269, "Output",ExpressionUUID->"bfc924bc-f67a-4314-8412-bcb8a696dc4f"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[469373, 8313, 163, 3, 37, "Subsection",ExpressionUUID->"f9e4bb23-9086-490f-8fda-7611eadaefe8"],
Cell[469539, 8318, 15148, 253, 218, "Input",ExpressionUUID->"fd6e2982-b3b8-4b6d-a695-7801cd5a4b82"],
Cell[484690, 8573, 885, 18, 166, "Text",ExpressionUUID->"b1fa6789-3f64-4e4e-8dac-4de7e3c428af"],
Cell[485578, 8593, 73699, 1213, 258, "Input",ExpressionUUID->"f15ddcf8-0c44-4247-982c-031de0ed3fe0"],
Cell[559280, 9808, 16693, 355, 1128, "Input",ExpressionUUID->"680049cd-df21-43fa-aec4-f635d6151bc8",
 InitializationCell->True],
Cell[575976, 10165, 2430, 61, 178, "Input",ExpressionUUID->"18e97e79-dd4c-4401-9d37-c7849cf9ddef",
 InitializationCell->True],
Cell[578409, 10228, 10843, 241, 881, "Input",ExpressionUUID->"8ce2d6db-5913-4394-bbf7-b9e791eb5e48",
 InitializationCell->True],
Cell[589255, 10471, 120865, 1986, 573, "Input",ExpressionUUID->"38ea5d02-5d48-44d7-88aa-f9a4d1b01785"],
Cell[710123, 12459, 5557, 120, 406, "Input",ExpressionUUID->"c2db15b0-7525-46b7-aaf5-dbf41f2c0288",
 InitializationCell->True],
Cell[715683, 12581, 81000, 1333, 477, "Input",ExpressionUUID->"4609e0e4-a8ac-4b39-afbb-c0a4dbe3beff"],
Cell[796686, 13916, 4772, 106, 406, "Input",ExpressionUUID->"0ad7f988-a0ee-4393-9822-32b09524ddfa",
 InitializationCell->True],
Cell[801461, 14024, 53045, 874, 440, "Input",ExpressionUUID->"c20ed050-4334-47e2-ba49-4907c1be6db4"],
Cell[854509, 14900, 3740, 80, 330, "Input",ExpressionUUID->"78b93a45-c595-4808-a5eb-376b998b90df",
 InitializationCell->True],
Cell[858252, 14982, 35969, 594, 299, "Input",ExpressionUUID->"480a6a93-109a-41fd-89c9-fe68ce12009a"],
Cell[894224, 15578, 20583, 442, 2078, "Input",ExpressionUUID->"b7c7c195-cdf9-449c-857c-99e973ed93a0",
 InitializationCell->True],
Cell[914810, 16022, 160, 3, 34, "Text",ExpressionUUID->"bad21f20-1cb4-4ba6-9259-d16512a72e95"],
Cell[914973, 16027, 22179, 489, 1679, "Input",ExpressionUUID->"c35f797e-e117-4def-a9d9-6bf02dd6be56",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[937177, 16520, 157, 3, 44, "Subsubsection",ExpressionUUID->"4d7c9f80-90e3-4e7b-864f-c4018c52b428"],
Cell[937337, 16525, 699, 18, 34, "Text",ExpressionUUID->"d0d8dbc0-d6fb-4882-a0f0-19388e9ae371"],
Cell[CellGroupData[{
Cell[938061, 16547, 1406, 32, 238, "Input",ExpressionUUID->"d3822f33-33e6-43cb-ab66-3e575eedef27"],
Cell[939470, 16581, 2600, 56, 71, "Output",ExpressionUUID->"d52318ed-da85-4fcf-8cd3-d3abeb2963ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[942107, 16642, 332, 7, 28, "Input",ExpressionUUID->"5053fde2-b890-41d2-942b-481d38b676e7"],
Cell[942442, 16651, 21045, 454, 111, "Output",ExpressionUUID->"68c0e31e-5d8f-4d11-bcfe-184fa253c095"]
}, Open  ]],
Cell[CellGroupData[{
Cell[963524, 17110, 485, 14, 28, "Input",ExpressionUUID->"c1aed367-ed99-447e-8474-2e5aa11169e4"],
Cell[964012, 17126, 875, 29, 133, "Output",ExpressionUUID->"d79f469e-daa2-41cf-9e15-d3ce71c0eed4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[964924, 17160, 410, 9, 28, "Input",ExpressionUUID->"8a55c60d-e916-4483-acba-f4b05ccad204"],
Cell[965337, 17171, 7431, 149, 287, "Output",ExpressionUUID->"35e24bb6-0318-40c9-97db-d571c4b701af"]
}, Open  ]],
Cell[972783, 17323, 506, 14, 34, "Text",ExpressionUUID->"c5c2af65-3b56-4ec5-b76b-0f07d238571b"],
Cell[CellGroupData[{
Cell[973314, 17341, 1723, 35, 333, "Input",ExpressionUUID->"ffd1c692-c823-4946-9c6e-6cebf9b82304"],
Cell[975040, 17378, 3888, 81, 71, "Output",ExpressionUUID->"a2358c4b-2519-453b-bc62-5ce987a4bdc8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[978965, 17464, 328, 7, 28, "Input",ExpressionUUID->"0ba0cd0c-b616-49bb-9f37-203e50d6557e"],
Cell[979296, 17473, 24011, 514, 229, "Output",ExpressionUUID->"385de2ed-dd98-46b4-91dd-026b5eb9f7ae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1003344, 17992, 325, 8, 28, "Input",ExpressionUUID->"3ae9bf7a-341f-4789-ace1-672b55a9cde3"],
Cell[1003672, 18002, 10064, 204, 433, "Output",ExpressionUUID->"feeb6efb-f1ca-499c-ad7f-2d2df1c01355"]
}, Open  ]],
Cell[1013751, 18209, 157, 3, 34, "Text",ExpressionUUID->"9724e74d-d86c-460c-9b23-0c87be0000ac"],
Cell[CellGroupData[{
Cell[1013933, 18216, 200, 5, 28, "Input",ExpressionUUID->"f57d8f09-dc46-4837-ab5c-17bb3b9cf3dc"],
Cell[1014136, 18223, 23396, 504, 111, "Output",ExpressionUUID->"e6d834c8-7561-413d-97d2-3c07895c7e03"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1037581, 18733, 163, 3, 36, "Subsubsection",ExpressionUUID->"2ea5139c-0ffb-4aaa-b605-93411f78c56e"],
Cell[1037747, 18738, 249, 8, 34, "Text",ExpressionUUID->"0d98da2e-4a21-4c20-aa2a-52adda772720",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1038021, 18750, 386, 9, 28, "Input",ExpressionUUID->"537860de-7e16-4aad-a42e-8b03b2804179"],
Cell[1038410, 18761, 1771, 32, 32, "Output",ExpressionUUID->"019ae08d-02ea-4d2b-ae6c-ea3f9fff0073"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1040218, 18798, 329, 7, 28, "Input",ExpressionUUID->"8db49d2f-7bbb-4575-bd20-7731726abbce"],
Cell[1040550, 18807, 18158, 391, 111, "Output",ExpressionUUID->"b84129ca-2c6a-4920-8c10-80d7f58f8afb"]
}, Open  ]],
Cell[1058723, 19201, 222, 7, 34, "Text",ExpressionUUID->"3cbea7ad-fa0b-47b1-8ed4-c9fddb3d858a"],
Cell[CellGroupData[{
Cell[1058970, 19212, 386, 9, 28, "Input",ExpressionUUID->"85b88a58-1a8c-4b45-9f6d-af117775e6b5"],
Cell[1059359, 19223, 1757, 32, 32, "Output",ExpressionUUID->"d97b24e3-4dd5-4dde-8c1e-e33242855c84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1061153, 19260, 308, 7, 28, "Input",ExpressionUUID->"8652e727-c0cb-4512-9390-214b8079b39b"],
Cell[1061464, 19269, 18132, 391, 111, "Output",ExpressionUUID->"da73365e-c25f-49a3-837e-2f50173c837d"]
}, Open  ]],
Cell[1079611, 19663, 209, 4, 34, "Text",ExpressionUUID->"1ddcaa92-a50e-4dd9-af26-59a430e100b6"],
Cell[CellGroupData[{
Cell[1079845, 19671, 395, 9, 28, "Input",ExpressionUUID->"28006855-cb74-4600-bfcc-09f87c9284b5"],
Cell[1080243, 19682, 20557, 442, 774, "Output",ExpressionUUID->"08d81740-4ca5-4d67-a2b8-2369e30e93b9"]
}, Open  ]],
Cell[1100815, 20127, 387, 11, 34, "Text",ExpressionUUID->"eb2bd016-aeb5-4edc-a327-5ac22163c0b3"],
Cell[CellGroupData[{
Cell[1101227, 20142, 493, 12, 28, "Input",ExpressionUUID->"757ccb5d-dfec-4436-af5c-f7b648050fec"],
Cell[1101723, 20156, 27359, 584, 121, "Output",ExpressionUUID->"a7a1204c-14ec-41fd-baf4-8873731275c8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1129119, 20745, 419, 9, 28, "Input",ExpressionUUID->"b7a9c20c-ae08-42e6-b39e-929ea135d310"],
Cell[1129541, 20756, 5773, 118, 71, "Output",ExpressionUUID->"bff7347e-6d39-43fb-a663-f03af018a1a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1135351, 20879, 472, 11, 28, "Input",ExpressionUUID->"1760108b-28b8-481c-b633-2b389d6b4364"],
Cell[1135826, 20892, 16842, 352, 317, "Output",ExpressionUUID->"6253a06a-4d83-42cb-b2e9-4f33c10eb862"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1152705, 21249, 399, 9, 28, "Input",ExpressionUUID->"63c30248-3c22-43bd-bfc5-2d0d5fee7fab"],
Cell[1153107, 21260, 16356, 344, 317, "Output",ExpressionUUID->"221c91ad-b918-4141-a484-f96f88999b08"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1169536, 21612, 169, 3, 64, "Subchapter",ExpressionUUID->"3b519190-0088-4cf5-bc8c-eba64cf01b88"],
Cell[1169708, 21617, 582, 10, 56, "Text",ExpressionUUID->"2f9d996a-488b-448b-9b6f-93d605c4f3b1"],
Cell[1170293, 21629, 117433, 1930, 394, "Input",ExpressionUUID->"d9c9753d-4f6f-4bb6-a6cf-7afd81860e07"],
Cell[1287729, 23561, 112102, 1843, 639, "Input",ExpressionUUID->"49422f9c-537e-49a1-a377-5451577c926e"],
Cell[1399834, 25406, 84696, 1393, 685, "Input",ExpressionUUID->"836fc5f4-0f1d-4c4b-af24-2f7f574b1c68"],
Cell[1484533, 26801, 115294, 1895, 993, "Input",ExpressionUUID->"9054f704-680e-4181-a998-c92b2fbaba12"],
Cell[1599830, 28698, 2096, 46, 140, "Input",ExpressionUUID->"415452a1-d59a-4d74-9820-866b75e2c230",
 InitializationCell->True],
Cell[1601929, 28746, 3648, 92, 292, "Input",ExpressionUUID->"ecb51c45-66ee-4b33-a5df-86b968dffa26",
 InitializationCell->True],
Cell[1605580, 28840, 6261, 132, 463, "Input",ExpressionUUID->"f34515cd-4153-4c7f-acc6-0f2fe37ad4bf",
 InitializationCell->True],
Cell[1611844, 28974, 3936, 91, 406, "Input",ExpressionUUID->"414991df-16ec-4376-92c4-3229bd4568cc",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[1615817, 29070, 155, 3, 48, "Subchapter",ExpressionUUID->"d07c23e9-1d59-4e51-ac14-31d0660d35e2"],
Cell[1615975, 29075, 550, 10, 56, "Text",ExpressionUUID->"2b79f5e8-ba38-4784-a836-695d0d982284"],
Cell[1616528, 29087, 979, 27, 64, "Input",ExpressionUUID->"d141a225-5d1a-48c0-9caa-0ee703961ea8",
 InitializationCell->True],
Cell[1617510, 29116, 1007, 27, 64, "Input",ExpressionUUID->"dd1a2e4b-3d9f-46b9-b5c8-8985b121e954",
 InitializationCell->True],
Cell[1618520, 29145, 12208, 286, 1299, "Input",ExpressionUUID->"33941b84-ca61-4ed5-848e-153c6f0dacbc",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1630753, 29435, 154, 3, 53, "Subsection",ExpressionUUID->"f974796f-da35-40ea-a8de-fb6ce6b1e63d"],
Cell[1630910, 29440, 231, 4, 34, "Text",ExpressionUUID->"ff5fc44d-ed3d-4e63-9771-47542ca43a5d"],
Cell[1631144, 29446, 2036, 53, 238, "Input",ExpressionUUID->"a8355915-c99b-4ecf-a5f5-0b771b1be2aa"],
Cell[CellGroupData[{
Cell[1633205, 29503, 338, 8, 28, "Input",ExpressionUUID->"7c068fff-ef20-49cb-8aa0-b67f24d72bd6"],
Cell[1633546, 29513, 1628, 40, 32, "Output",ExpressionUUID->"86c1f995-ae5e-4e4a-aed6-7f16fbff94d6"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1635235, 29560, 156, 3, 48, "Subchapter",ExpressionUUID->"491b6222-dc01-403a-a304-3cbf3275f40d"],
Cell[1635394, 29565, 1120, 19, 122, "Text",ExpressionUUID->"b4a913ed-7967-409f-a21f-6f80d51b418a"],
Cell[1636517, 29586, 52204, 861, 254, "Input",ExpressionUUID->"09897c71-8957-46e6-860e-b7797b16cfdf"],
Cell[1688724, 30449, 108332, 1781, 682, "Input",ExpressionUUID->"e43c9207-f164-4275-a71e-6b60447e7c37"],
Cell[CellGroupData[{
Cell[1797081, 32234, 163, 3, 53, "Subsection",ExpressionUUID->"c06cd52b-d735-4565-a405-dc0b6fdce09b"],
Cell[1797247, 32239, 13099, 309, 995, "Input",ExpressionUUID->"48f5ec51-854c-4046-8362-e0b917d47448",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1810371, 32552, 158, 3, 44, "Subsubsection",ExpressionUUID->"b630cce7-46a5-4695-9757-8d6fac6905c4"],
Cell[1810532, 32557, 177, 3, 34, "Text",ExpressionUUID->"7efcc219-7753-4d6b-bde9-34ae30ea41c9"],
Cell[1810712, 32562, 2136, 54, 143, "Input",ExpressionUUID->"b850989c-bf66-4056-b563-0fd5ea8f5205"],
Cell[1812851, 32618, 161, 3, 34, "Text",ExpressionUUID->"f87de5f0-dfd3-4f14-95cb-658c8171f8c9"],
Cell[CellGroupData[{
Cell[1813037, 32625, 453, 12, 28, "Input",ExpressionUUID->"2481fe36-f4ae-421f-8f32-c8051b4428bd"],
Cell[1813493, 32639, 572, 14, 32, "Output",ExpressionUUID->"b2a450dc-a566-48de-8c30-eb683bf006dd"]
}, Open  ]],
Cell[1814080, 32656, 398, 11, 34, "Text",ExpressionUUID->"2a54fba8-90ac-4ef0-8bc9-fef84ca7928b"],
Cell[CellGroupData[{
Cell[1814503, 32671, 666, 16, 28, "Input",ExpressionUUID->"fef932c3-34d0-4898-8736-599665012b53"],
Cell[1815172, 32689, 183, 3, 32, "Output",ExpressionUUID->"6186542a-1bc1-49b9-9a8a-68ae1e74d95a"]
}, Open  ]],
Cell[1815370, 32695, 336, 11, 34, "Text",ExpressionUUID->"1504301c-158e-4dec-899d-e8f41b462c17"],
Cell[1815709, 32708, 845, 21, 28, "Input",ExpressionUUID->"0801f3ef-b068-462f-839e-2189717872dc"],
Cell[CellGroupData[{
Cell[1816579, 32733, 187, 3, 28, "Input",ExpressionUUID->"c8963286-6a28-4d22-a1f9-e1b9cb3d568e"],
Cell[1816769, 32738, 896, 30, 32, "Output",ExpressionUUID->"54d234f3-c71d-40c2-b87f-ce0a323cd033"]
}, Open  ]],
Cell[1817680, 32771, 176, 3, 34, "Text",ExpressionUUID->"5792d41d-f399-4ee6-9b0d-ae8f1bec0b9e"],
Cell[CellGroupData[{
Cell[1817881, 32778, 179, 3, 28, "Input",ExpressionUUID->"153f18a5-1c77-406f-805c-b0318bc0c5e4"],
Cell[1818063, 32783, 390, 12, 32, "Output",ExpressionUUID->"02afdb95-6845-4851-b0ee-2ea8baa8febe"]
}, Open  ]],
Cell[1818468, 32798, 163, 3, 34, "Text",ExpressionUUID->"e33a3f38-437b-48c6-81ca-4f9cf667b7ed"],
Cell[CellGroupData[{
Cell[1818656, 32805, 186, 3, 28, "Input",ExpressionUUID->"248db685-d58a-42e8-8099-239408e123ba"],
Cell[1818845, 32810, 425, 11, 32, "Output",ExpressionUUID->"2aeacc02-cfef-4a6c-90e0-02fcff792889"]
}, Open  ]],
Cell[1819285, 32824, 182, 3, 34, "Text",ExpressionUUID->"e545747e-7795-4c73-88fc-671ed34fa74d"],
Cell[CellGroupData[{
Cell[1819492, 32831, 186, 3, 28, "Input",ExpressionUUID->"999e3b47-3211-4b07-9ab1-9ed92c4fb6d7"],
Cell[1819681, 32836, 153, 3, 32, "Output",ExpressionUUID->"f4934ca9-6b5b-456f-963f-6644deedb561"]
}, Open  ]],
Cell[1819849, 32842, 245, 6, 34, "Text",ExpressionUUID->"04a6ce09-5fab-4fea-970c-58bd2c1a70ce"],
Cell[CellGroupData[{
Cell[1820119, 32852, 432, 10, 28, "Input",ExpressionUUID->"22c83a2c-9f3d-4535-82e3-747d5d8441d5"],
Cell[1820554, 32864, 2218, 66, 32, "Output",ExpressionUUID->"16cd7fc3-2acb-4cfd-bcd9-bbac66e4ed60"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1822833, 32937, 154, 3, 37, "Subsection",ExpressionUUID->"c0c25edf-5fe4-4181-ac55-0ce34bd48780"],
Cell[1822990, 32942, 20583, 447, 1888, "Input",ExpressionUUID->"2cf6f8d1-ea3f-4462-bbc9-ba4759efb938",
 InitializationCell->True],
Cell[1843576, 33391, 166, 3, 34, "Text",ExpressionUUID->"a7a86422-b762-4408-a0bf-5c97515a2df4"],
Cell[1843745, 33396, 3396, 88, 216, "Input",ExpressionUUID->"fcd69484-be2f-4f01-a01f-824dd627e978",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1847166, 33488, 160, 3, 44, "Subsubsection",ExpressionUUID->"896de7a1-c6c8-4128-a81a-d0d973f2a60e"],
Cell[1847329, 33493, 198, 3, 34, "Text",ExpressionUUID->"df15d334-d589-4c81-818f-ebb65676a368"],
Cell[1847530, 33498, 2009, 50, 143, "Input",ExpressionUUID->"dbf32b82-7ca2-4677-8eb6-82ce11070df1"],
Cell[CellGroupData[{
Cell[1849564, 33552, 209, 4, 28, "Input",ExpressionUUID->"6380ba92-fcac-4137-9c7e-64a9264f9a31"],
Cell[1849776, 33558, 1884, 66, 99, "Output",ExpressionUUID->"62435d8c-4cc6-4eb4-99e7-c74213453392"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1851697, 33629, 232, 4, 28, "Input",ExpressionUUID->"0fa33548-65ce-4abb-8284-039a8faacc9b"],
Cell[1851932, 33635, 5242, 104, 252, "Output",ExpressionUUID->"1550b8b5-9542-472d-a762-002399d9c6be"]
}, Open  ]],
Cell[1857189, 33742, 455, 13, 28, "Input",ExpressionUUID->"6efb9402-eed1-4ecc-a237-8d92fcde72c9"],
Cell[1857647, 33757, 256, 6, 34, "Text",ExpressionUUID->"c47c2fd1-b40d-4281-a4c2-d7d9694442a5"],
Cell[CellGroupData[{
Cell[1857928, 33767, 327, 6, 28, "Input",ExpressionUUID->"31ae04e6-e28b-4dee-a354-e39aa16a85ef"],
Cell[1858258, 33775, 369, 9, 21, "Message",ExpressionUUID->"d77211b5-a36d-4c85-a2df-d1bcad3b7557"],
Cell[1858630, 33786, 2196, 72, 52, "Output",ExpressionUUID->"177bd292-7ffa-4fbd-8dee-4f2b0787f639"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1860911, 33867, 217, 4, 56, "Chapter",ExpressionUUID->"9764d62a-13d8-4273-861c-c2aab0ea6f24"],
Cell[CellGroupData[{
Cell[1861153, 33875, 220, 4, 64, "Subchapter",ExpressionUUID->"bab3d486-94e8-495d-b547-0903f2fcb95e"],
Cell[1861376, 33881, 215, 5, 34, "Text",ExpressionUUID->"3c77fe03-00e4-4637-85bd-4d5bd8a422da"],
Cell[1861594, 33888, 5307, 126, 919, "Input",ExpressionUUID->"478722ae-2361-477f-afb1-f1ba00b38f86",
 InitializationCell->True],
Cell[1866904, 34016, 2319, 62, 197, "Input",ExpressionUUID->"5f478895-e67f-4842-8936-a7f82f98e1dd",
 InitializationCell->True],
Cell[1869226, 34080, 846, 22, 64, "Input",ExpressionUUID->"27ceeb91-84ca-4f8f-b889-0991a3c2b621",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1870097, 34106, 157, 3, 44, "Subsubsection",ExpressionUUID->"7d9e5c7a-444d-44de-bac5-52d4287c0baa"],
Cell[1870257, 34111, 805, 14, 181, "Input",ExpressionUUID->"755fc599-1137-4d38-b150-c3b15f38e174"],
Cell[1871065, 34127, 625, 13, 28, "Input",ExpressionUUID->"3a4b5cb8-85ab-443d-8f69-d704df1dd23a"],
Cell[CellGroupData[{
Cell[1871715, 34144, 216, 4, 28, "Input",ExpressionUUID->"a3da1426-9fa3-4da2-8d95-09fc4f17fd8d"],
Cell[1871934, 34150, 50816, 991, 583, "Output",ExpressionUUID->"4a657748-6afb-406e-8f02-e9e02c1fc120"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1922811, 35148, 219, 4, 48, "Subchapter",ExpressionUUID->"eaca36e0-bc36-4820-9969-a42cd00fd781"],
Cell[1923033, 35154, 186, 3, 34, "Text",ExpressionUUID->"c4175d0b-3fe9-4a9c-aa86-bd239621b79c"],
Cell[1923222, 35159, 43550, 719, 347, "Input",ExpressionUUID->"149dc345-7f1a-4ff6-bc22-f3a417052e81"],
Cell[1966775, 35880, 48048, 793, 376, "Input",ExpressionUUID->"4b33cae6-5740-4d9f-ad8e-7d83116b3730"],
Cell[2014826, 36675, 2658, 71, 254, "Input",ExpressionUUID->"a42c14cc-f192-4d04-8fdf-01492960e98c",
 InitializationCell->True],
Cell[2017487, 36748, 65562, 1332, 6790, "Input",ExpressionUUID->"2acc6ca5-763c-47d1-84db-b9bd9d839b1a",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2083074, 38084, 158, 3, 44, "Subsubsection",ExpressionUUID->"3f162af0-a6a6-4196-aab9-840e3416d4f4"],
Cell[CellGroupData[{
Cell[2083257, 38091, 231, 4, 28, "Input",ExpressionUUID->"164cffec-d679-429b-b5cb-4eb1b932e1fe"],
Cell[2083491, 38097, 15944, 551, 745, "Output",ExpressionUUID->"eaf25382-2044-4c24-9a10-4745c82c050b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2099472, 38653, 244, 5, 28, "Input",ExpressionUUID->"9e959e3b-1222-4890-8564-d321f265ce0c"],
Cell[2099719, 38660, 37922, 690, 1199, "Output",ExpressionUUID->"38b67629-e7e8-460b-90bb-11b24469b8df"]
}, Open  ]],
Cell[2137656, 39353, 927, 16, 238, "Input",ExpressionUUID->"6b287729-6102-4f45-a488-c9c8c315844a"],
Cell[2138586, 39371, 625, 13, 28, "Input",ExpressionUUID->"68031c17-4218-422a-9bd0-7024410c4cfd"],
Cell[CellGroupData[{
Cell[2139236, 39388, 115, 2, 28, "Input",ExpressionUUID->"64a54b3c-9032-494b-a949-8118d12ab153"],
Cell[2139354, 39392, 6090, 145, 90, "Output",ExpressionUUID->"dd934328-2079-4da5-b5b8-10dc14328a56"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2145481, 39542, 262, 6, 28, "Input",ExpressionUUID->"81e6ce23-a996-4ea6-b3c8-e42aa594bd86"],
Cell[2145746, 39550, 50112, 1264, 479, "Output",ExpressionUUID->"e68f5393-fa4a-4e2d-aaad-acb6d9cba75c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2195895, 40819, 376, 8, 28, "Input",ExpressionUUID->"f872ff57-250d-4e27-87c0-586b4bb8d507"],
Cell[2196274, 40829, 101692, 1997, 723, "Output",ExpressionUUID->"15f3a846-4c9f-4496-886e-9e81a6ab9f70"]
}, Open  ]],
Cell[2297981, 42829, 407, 8, 28, "Input",ExpressionUUID->"d9e19462-2ed4-4cdd-82fa-98a46a304918"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2298437, 42843, 175, 3, 64, "Subchapter",ExpressionUUID->"9c27967f-b76e-4636-b78f-dd471b343e8a"],
Cell[2298615, 42848, 1732, 44, 159, "Input",ExpressionUUID->"c1393acd-a91a-4d56-b0b8-30b4c6ca87ac",
 InitializationCell->True],
Cell[2300350, 42894, 2857, 70, 292, "Input",ExpressionUUID->"ba238ec1-0d0b-4e75-8354-4e3b9fc1e508",
 InitializationCell->True],
Cell[2303210, 42966, 3370, 72, 387, "Input",ExpressionUUID->"41eadba4-aaab-4b73-a3f9-cd39b28aa352",
 InitializationCell->True],
Cell[2306583, 43040, 1228, 35, 121, "Input",ExpressionUUID->"22abf173-27f9-45a6-ad85-cb338a46eeab",
 InitializationCell->True],
Cell[2307814, 43077, 8438, 206, 654, "Input",ExpressionUUID->"c848c78a-2dc7-4cc4-802e-730ed5791ae5",
 InitializationCell->True],
Cell[2316255, 43285, 1447, 35, 159, "Input",ExpressionUUID->"1f4ba2ad-1aa7-4791-97d3-6ec9bca61f46",
 InitializationCell->True],
Cell[2317705, 43322, 1716, 44, 216, "Input",ExpressionUUID->"aa414c37-2c7c-456c-a906-b24c3658adf7",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2319446, 43370, 161, 3, 44, "Subsubsection",ExpressionUUID->"4bf4e99a-49ac-4178-8d1d-414488b86950"],
Cell[CellGroupData[{
Cell[2319632, 43377, 810, 20, 238, "Input",ExpressionUUID->"2409a389-2234-4782-bb64-1899fd79b917"],
Cell[2320445, 43399, 89418, 1815, 1059, "Output",ExpressionUUID->"4027df11-1a35-4969-b091-5cf1179ddb23"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2409924, 45221, 210, 4, 64, "Subchapter",ExpressionUUID->"40ed8236-d08e-40a9-b906-8d25edb85654"],
Cell[CellGroupData[{
Cell[2410159, 45229, 509, 11, 219, "Input",ExpressionUUID->"be5cca42-b007-45a8-aeb0-db9d8d8edc05"],
Cell[2410671, 45242, 1784, 32, 278, "Output",ExpressionUUID->"6813596a-a108-4745-9c01-7d4d0437042f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2412492, 45279, 1164, 20, 580, "Input",ExpressionUUID->"6d4ac205-583d-4e86-9249-a64c7bf78ac6"],
Cell[2413659, 45301, 4928, 84, 873, "Output",ExpressionUUID->"65437376-3d7e-4eb0-bd2b-a1507fb5c7dc"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2418648, 45392, 169, 3, 67, "Chapter",ExpressionUUID->"b017d5a2-87c9-4e7e-91df-a387a7036e0a"],
Cell[CellGroupData[{
Cell[2418842, 45399, 160, 3, 64, "Subchapter",ExpressionUUID->"b4fa4547-1dd9-4f51-80c1-c3f5919e75d3"],
Cell[2419005, 45404, 20339, 521, 919, "Input",ExpressionUUID->"a0ecf0cb-d276-4822-8154-4dad909a4353",
 InitializationCell->True],
Cell[2439347, 45927, 650, 10, 542, "Input",ExpressionUUID->"55d121ed-5993-4557-8172-963934ebf6e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2440034, 45942, 161, 3, 64, "Subchapter",ExpressionUUID->"cee5877a-e564-4831-84b9-b2ab79805693"],
Cell[2440198, 45947, 11572, 280, 1004, "Input",ExpressionUUID->"1d5d8d3b-db56-4008-b94d-3bb8456bedf3",
 InitializationCell->True]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

